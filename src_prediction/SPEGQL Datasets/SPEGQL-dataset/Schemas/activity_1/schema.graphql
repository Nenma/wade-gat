schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""
Direct the client to resolve this field locally, either from the cache or local resolvers.
"""
directive @client(
  """
  When true, the client will never use the cache for this value. See
  https://www.apollographql.com/docs/react/essentials/local-state/#forcing-resolvers-with-clientalways-true
  """
  always: Boolean
) on FIELD | FRAGMENT_DEFINITION | INLINE_FRAGMENT

"""
Export this locally resolved field as a variable to be used in the remainder of this query. See
https://www.apollographql.com/docs/react/essentials/local-state/#using-client-fields-as-variables
"""
directive @export(
  """The variable name to export this field as."""
  as: String!
) on FIELD

"""
Specify a custom store key for this result. See
https://www.apollographql.com/docs/react/advanced/caching/#the-connection-directive
"""
directive @connection(
  """Specify the store key."""
  key: String!

  """
  An array of query argument names to include in the generated custom store key.
  """
  filter: [String!]
) on FIELD

"""
columns and relationships of "activity"
"""
type activity {
  actid: bigint!
  activity_name: String

  """An array relationship"""
  faculty_participates_ins(
    """distinct select on columns"""
    distinct_on: [faculty_participates_in_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [faculty_participates_in_order_by!]

    """filter the rows returned"""
    where: faculty_participates_in_bool_exp
  ): [faculty_participates_in!]!

  """An aggregated array relationship"""
  faculty_participates_ins_aggregate(
    """distinct select on columns"""
    distinct_on: [faculty_participates_in_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [faculty_participates_in_order_by!]

    """filter the rows returned"""
    where: faculty_participates_in_bool_exp
  ): faculty_participates_in_aggregate!

  """An array relationship"""
  participates_ins(
    """distinct select on columns"""
    distinct_on: [participates_in_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [participates_in_order_by!]

    """filter the rows returned"""
    where: participates_in_bool_exp
  ): [participates_in!]!

  """An aggregated array relationship"""
  participates_ins_aggregate(
    """distinct select on columns"""
    distinct_on: [participates_in_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [participates_in_order_by!]

    """filter the rows returned"""
    where: participates_in_bool_exp
  ): participates_in_aggregate!
}

"""
aggregated selection of "activity"
"""
type activity_aggregate {
  aggregate: activity_aggregate_fields
  nodes: [activity!]!
}

"""
aggregate fields of "activity"
"""
type activity_aggregate_fields {
  avg: activity_avg_fields
  count(columns: [activity_select_column!], distinct: Boolean): Int
  max: activity_max_fields
  min: activity_min_fields
  stddev: activity_stddev_fields
  stddev_pop: activity_stddev_pop_fields
  stddev_samp: activity_stddev_samp_fields
  sum: activity_sum_fields
  var_pop: activity_var_pop_fields
  var_samp: activity_var_samp_fields
  variance: activity_variance_fields
}

"""
order by aggregate values of table "activity"
"""
input activity_aggregate_order_by {
  avg: activity_avg_order_by
  count: order_by
  max: activity_max_order_by
  min: activity_min_order_by
  stddev: activity_stddev_order_by
  stddev_pop: activity_stddev_pop_order_by
  stddev_samp: activity_stddev_samp_order_by
  sum: activity_sum_order_by
  var_pop: activity_var_pop_order_by
  var_samp: activity_var_samp_order_by
  variance: activity_variance_order_by
}

"""
input type for inserting array relation for remote table "activity"
"""
input activity_arr_rel_insert_input {
  data: [activity_insert_input!]!
  on_conflict: activity_on_conflict
}

"""aggregate avg on columns"""
type activity_avg_fields {
  actid: Float
}

"""
order by avg() on columns of table "activity"
"""
input activity_avg_order_by {
  actid: order_by
}

"""
Boolean expression to filter rows from the table "activity". All fields are combined with a logical 'AND'.
"""
input activity_bool_exp {
  _and: [activity_bool_exp]
  _not: activity_bool_exp
  _or: [activity_bool_exp]
  actid: bigint_comparison_exp
  activity_name: String_comparison_exp
  faculty_participates_ins: faculty_participates_in_bool_exp
  participates_ins: participates_in_bool_exp
}

"""
unique or primary key constraints on table "activity"
"""
enum activity_constraint {
  """unique or primary key constraint"""
  idx_24635_activity_pkey
}

"""
input type for incrementing integer column in table "activity"
"""
input activity_inc_input {
  actid: bigint
}

"""
input type for inserting data into table "activity"
"""
input activity_insert_input {
  actid: bigint
  activity_name: String
  faculty_participates_ins: faculty_participates_in_arr_rel_insert_input
  participates_ins: participates_in_arr_rel_insert_input
}

"""aggregate max on columns"""
type activity_max_fields {
  actid: bigint
  activity_name: String
}

"""
order by max() on columns of table "activity"
"""
input activity_max_order_by {
  actid: order_by
  activity_name: order_by
}

"""aggregate min on columns"""
type activity_min_fields {
  actid: bigint
  activity_name: String
}

"""
order by min() on columns of table "activity"
"""
input activity_min_order_by {
  actid: order_by
  activity_name: order_by
}

"""
response of any mutation on the table "activity"
"""
type activity_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [activity!]!
}

"""
input type for inserting object relation for remote table "activity"
"""
input activity_obj_rel_insert_input {
  data: activity_insert_input!
  on_conflict: activity_on_conflict
}

"""
on conflict condition type for table "activity"
"""
input activity_on_conflict {
  constraint: activity_constraint!
  update_columns: [activity_update_column!]!
  where: activity_bool_exp
}

"""
ordering options when selecting data from "activity"
"""
input activity_order_by {
  actid: order_by
  activity_name: order_by
  faculty_participates_ins_aggregate: faculty_participates_in_aggregate_order_by
  participates_ins_aggregate: participates_in_aggregate_order_by
}

"""
primary key columns input for table: "activity"
"""
input activity_pk_columns_input {
  actid: bigint!
}

"""
select columns of table "activity"
"""
enum activity_select_column {
  """column name"""
  actid

  """column name"""
  activity_name
}

"""
input type for updating data in table "activity"
"""
input activity_set_input {
  actid: bigint
  activity_name: String
}

"""aggregate stddev on columns"""
type activity_stddev_fields {
  actid: Float
}

"""
order by stddev() on columns of table "activity"
"""
input activity_stddev_order_by {
  actid: order_by
}

"""aggregate stddev_pop on columns"""
type activity_stddev_pop_fields {
  actid: Float
}

"""
order by stddev_pop() on columns of table "activity"
"""
input activity_stddev_pop_order_by {
  actid: order_by
}

"""aggregate stddev_samp on columns"""
type activity_stddev_samp_fields {
  actid: Float
}

"""
order by stddev_samp() on columns of table "activity"
"""
input activity_stddev_samp_order_by {
  actid: order_by
}

"""aggregate sum on columns"""
type activity_sum_fields {
  actid: bigint
}

"""
order by sum() on columns of table "activity"
"""
input activity_sum_order_by {
  actid: order_by
}

"""
update columns of table "activity"
"""
enum activity_update_column {
  """column name"""
  actid

  """column name"""
  activity_name
}

"""aggregate var_pop on columns"""
type activity_var_pop_fields {
  actid: Float
}

"""
order by var_pop() on columns of table "activity"
"""
input activity_var_pop_order_by {
  actid: order_by
}

"""aggregate var_samp on columns"""
type activity_var_samp_fields {
  actid: Float
}

"""
order by var_samp() on columns of table "activity"
"""
input activity_var_samp_order_by {
  actid: order_by
}

"""aggregate variance on columns"""
type activity_variance_fields {
  actid: Float
}

"""
order by variance() on columns of table "activity"
"""
input activity_variance_order_by {
  actid: order_by
}

scalar bigint

"""
expression to compare columns of type bigint. All fields are combined with logical 'AND'.
"""
input bigint_comparison_exp {
  _eq: bigint
  _gt: bigint
  _gte: bigint
  _in: [bigint!]
  _is_null: Boolean
  _lt: bigint
  _lte: bigint
  _neq: bigint
  _nin: [bigint!]
}

"""
columns and relationships of "faculty"
"""
type faculty {
  building: String
  facid: bigint!

  """An array relationship"""
  faculty_participates_ins(
    """distinct select on columns"""
    distinct_on: [faculty_participates_in_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [faculty_participates_in_order_by!]

    """filter the rows returned"""
    where: faculty_participates_in_bool_exp
  ): [faculty_participates_in!]!

  """An aggregated array relationship"""
  faculty_participates_ins_aggregate(
    """distinct select on columns"""
    distinct_on: [faculty_participates_in_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [faculty_participates_in_order_by!]

    """filter the rows returned"""
    where: faculty_participates_in_bool_exp
  ): faculty_participates_in_aggregate!
  fname: String
  lname: String
  phone: bigint
  rank: String
  room: String
  sex: String
}

"""
aggregated selection of "faculty"
"""
type faculty_aggregate {
  aggregate: faculty_aggregate_fields
  nodes: [faculty!]!
}

"""
aggregate fields of "faculty"
"""
type faculty_aggregate_fields {
  avg: faculty_avg_fields
  count(columns: [faculty_select_column!], distinct: Boolean): Int
  max: faculty_max_fields
  min: faculty_min_fields
  stddev: faculty_stddev_fields
  stddev_pop: faculty_stddev_pop_fields
  stddev_samp: faculty_stddev_samp_fields
  sum: faculty_sum_fields
  var_pop: faculty_var_pop_fields
  var_samp: faculty_var_samp_fields
  variance: faculty_variance_fields
}

"""
order by aggregate values of table "faculty"
"""
input faculty_aggregate_order_by {
  avg: faculty_avg_order_by
  count: order_by
  max: faculty_max_order_by
  min: faculty_min_order_by
  stddev: faculty_stddev_order_by
  stddev_pop: faculty_stddev_pop_order_by
  stddev_samp: faculty_stddev_samp_order_by
  sum: faculty_sum_order_by
  var_pop: faculty_var_pop_order_by
  var_samp: faculty_var_samp_order_by
  variance: faculty_variance_order_by
}

"""
input type for inserting array relation for remote table "faculty"
"""
input faculty_arr_rel_insert_input {
  data: [faculty_insert_input!]!
  on_conflict: faculty_on_conflict
}

"""aggregate avg on columns"""
type faculty_avg_fields {
  facid: Float
  phone: Float
}

"""
order by avg() on columns of table "faculty"
"""
input faculty_avg_order_by {
  facid: order_by
  phone: order_by
}

"""
Boolean expression to filter rows from the table "faculty". All fields are combined with a logical 'AND'.
"""
input faculty_bool_exp {
  _and: [faculty_bool_exp]
  _not: faculty_bool_exp
  _or: [faculty_bool_exp]
  building: String_comparison_exp
  facid: bigint_comparison_exp
  faculty_participates_ins: faculty_participates_in_bool_exp
  fname: String_comparison_exp
  lname: String_comparison_exp
  phone: bigint_comparison_exp
  rank: String_comparison_exp
  room: String_comparison_exp
  sex: String_comparison_exp
}

"""
unique or primary key constraints on table "faculty"
"""
enum faculty_constraint {
  """unique or primary key constraint"""
  idx_24653_faculty_pkey
}

"""
input type for incrementing integer column in table "faculty"
"""
input faculty_inc_input {
  facid: bigint
  phone: bigint
}

"""
input type for inserting data into table "faculty"
"""
input faculty_insert_input {
  building: String
  facid: bigint
  faculty_participates_ins: faculty_participates_in_arr_rel_insert_input
  fname: String
  lname: String
  phone: bigint
  rank: String
  room: String
  sex: String
}

"""aggregate max on columns"""
type faculty_max_fields {
  building: String
  facid: bigint
  fname: String
  lname: String
  phone: bigint
  rank: String
  room: String
  sex: String
}

"""
order by max() on columns of table "faculty"
"""
input faculty_max_order_by {
  building: order_by
  facid: order_by
  fname: order_by
  lname: order_by
  phone: order_by
  rank: order_by
  room: order_by
  sex: order_by
}

"""aggregate min on columns"""
type faculty_min_fields {
  building: String
  facid: bigint
  fname: String
  lname: String
  phone: bigint
  rank: String
  room: String
  sex: String
}

"""
order by min() on columns of table "faculty"
"""
input faculty_min_order_by {
  building: order_by
  facid: order_by
  fname: order_by
  lname: order_by
  phone: order_by
  rank: order_by
  room: order_by
  sex: order_by
}

"""
response of any mutation on the table "faculty"
"""
type faculty_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [faculty!]!
}

"""
input type for inserting object relation for remote table "faculty"
"""
input faculty_obj_rel_insert_input {
  data: faculty_insert_input!
  on_conflict: faculty_on_conflict
}

"""
on conflict condition type for table "faculty"
"""
input faculty_on_conflict {
  constraint: faculty_constraint!
  update_columns: [faculty_update_column!]!
  where: faculty_bool_exp
}

"""
ordering options when selecting data from "faculty"
"""
input faculty_order_by {
  building: order_by
  facid: order_by
  faculty_participates_ins_aggregate: faculty_participates_in_aggregate_order_by
  fname: order_by
  lname: order_by
  phone: order_by
  rank: order_by
  room: order_by
  sex: order_by
}

"""
columns and relationships of "faculty_participates_in"
"""
type faculty_participates_in {
  actid: bigint

  """An object relationship"""
  activity: activity
  facid: bigint

  """An object relationship"""
  faculty: faculty
}

"""
aggregated selection of "faculty_participates_in"
"""
type faculty_participates_in_aggregate {
  aggregate: faculty_participates_in_aggregate_fields
  nodes: [faculty_participates_in!]!
}

"""
aggregate fields of "faculty_participates_in"
"""
type faculty_participates_in_aggregate_fields {
  avg: faculty_participates_in_avg_fields
  count(columns: [faculty_participates_in_select_column!], distinct: Boolean): Int
  max: faculty_participates_in_max_fields
  min: faculty_participates_in_min_fields
  stddev: faculty_participates_in_stddev_fields
  stddev_pop: faculty_participates_in_stddev_pop_fields
  stddev_samp: faculty_participates_in_stddev_samp_fields
  sum: faculty_participates_in_sum_fields
  var_pop: faculty_participates_in_var_pop_fields
  var_samp: faculty_participates_in_var_samp_fields
  variance: faculty_participates_in_variance_fields
}

"""
order by aggregate values of table "faculty_participates_in"
"""
input faculty_participates_in_aggregate_order_by {
  avg: faculty_participates_in_avg_order_by
  count: order_by
  max: faculty_participates_in_max_order_by
  min: faculty_participates_in_min_order_by
  stddev: faculty_participates_in_stddev_order_by
  stddev_pop: faculty_participates_in_stddev_pop_order_by
  stddev_samp: faculty_participates_in_stddev_samp_order_by
  sum: faculty_participates_in_sum_order_by
  var_pop: faculty_participates_in_var_pop_order_by
  var_samp: faculty_participates_in_var_samp_order_by
  variance: faculty_participates_in_variance_order_by
}

"""
input type for inserting array relation for remote table "faculty_participates_in"
"""
input faculty_participates_in_arr_rel_insert_input {
  data: [faculty_participates_in_insert_input!]!
}

"""aggregate avg on columns"""
type faculty_participates_in_avg_fields {
  actid: Float
  facid: Float
}

"""
order by avg() on columns of table "faculty_participates_in"
"""
input faculty_participates_in_avg_order_by {
  actid: order_by
  facid: order_by
}

"""
Boolean expression to filter rows from the table "faculty_participates_in". All fields are combined with a logical 'AND'.
"""
input faculty_participates_in_bool_exp {
  _and: [faculty_participates_in_bool_exp]
  _not: faculty_participates_in_bool_exp
  _or: [faculty_participates_in_bool_exp]
  actid: bigint_comparison_exp
  activity: activity_bool_exp
  facid: bigint_comparison_exp
  faculty: faculty_bool_exp
}

"""
input type for incrementing integer column in table "faculty_participates_in"
"""
input faculty_participates_in_inc_input {
  actid: bigint
  facid: bigint
}

"""
input type for inserting data into table "faculty_participates_in"
"""
input faculty_participates_in_insert_input {
  actid: bigint
  activity: activity_obj_rel_insert_input
  facid: bigint
  faculty: faculty_obj_rel_insert_input
}

"""aggregate max on columns"""
type faculty_participates_in_max_fields {
  actid: bigint
  facid: bigint
}

"""
order by max() on columns of table "faculty_participates_in"
"""
input faculty_participates_in_max_order_by {
  actid: order_by
  facid: order_by
}

"""aggregate min on columns"""
type faculty_participates_in_min_fields {
  actid: bigint
  facid: bigint
}

"""
order by min() on columns of table "faculty_participates_in"
"""
input faculty_participates_in_min_order_by {
  actid: order_by
  facid: order_by
}

"""
response of any mutation on the table "faculty_participates_in"
"""
type faculty_participates_in_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [faculty_participates_in!]!
}

"""
input type for inserting object relation for remote table "faculty_participates_in"
"""
input faculty_participates_in_obj_rel_insert_input {
  data: faculty_participates_in_insert_input!
}

"""
ordering options when selecting data from "faculty_participates_in"
"""
input faculty_participates_in_order_by {
  actid: order_by
  activity: activity_order_by
  facid: order_by
  faculty: faculty_order_by
}

"""
select columns of table "faculty_participates_in"
"""
enum faculty_participates_in_select_column {
  """column name"""
  actid

  """column name"""
  facid
}

"""
input type for updating data in table "faculty_participates_in"
"""
input faculty_participates_in_set_input {
  actid: bigint
  facid: bigint
}

"""aggregate stddev on columns"""
type faculty_participates_in_stddev_fields {
  actid: Float
  facid: Float
}

"""
order by stddev() on columns of table "faculty_participates_in"
"""
input faculty_participates_in_stddev_order_by {
  actid: order_by
  facid: order_by
}

"""aggregate stddev_pop on columns"""
type faculty_participates_in_stddev_pop_fields {
  actid: Float
  facid: Float
}

"""
order by stddev_pop() on columns of table "faculty_participates_in"
"""
input faculty_participates_in_stddev_pop_order_by {
  actid: order_by
  facid: order_by
}

"""aggregate stddev_samp on columns"""
type faculty_participates_in_stddev_samp_fields {
  actid: Float
  facid: Float
}

"""
order by stddev_samp() on columns of table "faculty_participates_in"
"""
input faculty_participates_in_stddev_samp_order_by {
  actid: order_by
  facid: order_by
}

"""aggregate sum on columns"""
type faculty_participates_in_sum_fields {
  actid: bigint
  facid: bigint
}

"""
order by sum() on columns of table "faculty_participates_in"
"""
input faculty_participates_in_sum_order_by {
  actid: order_by
  facid: order_by
}

"""aggregate var_pop on columns"""
type faculty_participates_in_var_pop_fields {
  actid: Float
  facid: Float
}

"""
order by var_pop() on columns of table "faculty_participates_in"
"""
input faculty_participates_in_var_pop_order_by {
  actid: order_by
  facid: order_by
}

"""aggregate var_samp on columns"""
type faculty_participates_in_var_samp_fields {
  actid: Float
  facid: Float
}

"""
order by var_samp() on columns of table "faculty_participates_in"
"""
input faculty_participates_in_var_samp_order_by {
  actid: order_by
  facid: order_by
}

"""aggregate variance on columns"""
type faculty_participates_in_variance_fields {
  actid: Float
  facid: Float
}

"""
order by variance() on columns of table "faculty_participates_in"
"""
input faculty_participates_in_variance_order_by {
  actid: order_by
  facid: order_by
}

"""
primary key columns input for table: "faculty"
"""
input faculty_pk_columns_input {
  facid: bigint!
}

"""
select columns of table "faculty"
"""
enum faculty_select_column {
  """column name"""
  building

  """column name"""
  facid

  """column name"""
  fname

  """column name"""
  lname

  """column name"""
  phone

  """column name"""
  rank

  """column name"""
  room

  """column name"""
  sex
}

"""
input type for updating data in table "faculty"
"""
input faculty_set_input {
  building: String
  facid: bigint
  fname: String
  lname: String
  phone: bigint
  rank: String
  room: String
  sex: String
}

"""aggregate stddev on columns"""
type faculty_stddev_fields {
  facid: Float
  phone: Float
}

"""
order by stddev() on columns of table "faculty"
"""
input faculty_stddev_order_by {
  facid: order_by
  phone: order_by
}

"""aggregate stddev_pop on columns"""
type faculty_stddev_pop_fields {
  facid: Float
  phone: Float
}

"""
order by stddev_pop() on columns of table "faculty"
"""
input faculty_stddev_pop_order_by {
  facid: order_by
  phone: order_by
}

"""aggregate stddev_samp on columns"""
type faculty_stddev_samp_fields {
  facid: Float
  phone: Float
}

"""
order by stddev_samp() on columns of table "faculty"
"""
input faculty_stddev_samp_order_by {
  facid: order_by
  phone: order_by
}

"""aggregate sum on columns"""
type faculty_sum_fields {
  facid: bigint
  phone: bigint
}

"""
order by sum() on columns of table "faculty"
"""
input faculty_sum_order_by {
  facid: order_by
  phone: order_by
}

"""
update columns of table "faculty"
"""
enum faculty_update_column {
  """column name"""
  building

  """column name"""
  facid

  """column name"""
  fname

  """column name"""
  lname

  """column name"""
  phone

  """column name"""
  rank

  """column name"""
  room

  """column name"""
  sex
}

"""aggregate var_pop on columns"""
type faculty_var_pop_fields {
  facid: Float
  phone: Float
}

"""
order by var_pop() on columns of table "faculty"
"""
input faculty_var_pop_order_by {
  facid: order_by
  phone: order_by
}

"""aggregate var_samp on columns"""
type faculty_var_samp_fields {
  facid: Float
  phone: Float
}

"""
order by var_samp() on columns of table "faculty"
"""
input faculty_var_samp_order_by {
  facid: order_by
  phone: order_by
}

"""aggregate variance on columns"""
type faculty_variance_fields {
  facid: Float
  phone: Float
}

"""
order by variance() on columns of table "faculty"
"""
input faculty_variance_order_by {
  facid: order_by
  phone: order_by
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "activity"
  """
  delete_activity(
    """filter the rows which have to be deleted"""
    where: activity_bool_exp!
  ): activity_mutation_response

  """
  delete single row from the table: "activity"
  """
  delete_activity_by_pk(actid: bigint!): activity

  """
  delete data from the table: "faculty"
  """
  delete_faculty(
    """filter the rows which have to be deleted"""
    where: faculty_bool_exp!
  ): faculty_mutation_response

  """
  delete single row from the table: "faculty"
  """
  delete_faculty_by_pk(facid: bigint!): faculty

  """
  delete data from the table: "faculty_participates_in"
  """
  delete_faculty_participates_in(
    """filter the rows which have to be deleted"""
    where: faculty_participates_in_bool_exp!
  ): faculty_participates_in_mutation_response

  """
  delete data from the table: "participates_in"
  """
  delete_participates_in(
    """filter the rows which have to be deleted"""
    where: participates_in_bool_exp!
  ): participates_in_mutation_response

  """
  delete data from the table: "student"
  """
  delete_student(
    """filter the rows which have to be deleted"""
    where: student_bool_exp!
  ): student_mutation_response

  """
  delete single row from the table: "student"
  """
  delete_student_by_pk(stuid: bigint!): student

  """
  insert data into the table: "activity"
  """
  insert_activity(
    """the rows to be inserted"""
    objects: [activity_insert_input!]!

    """on conflict condition"""
    on_conflict: activity_on_conflict
  ): activity_mutation_response

  """
  insert a single row into the table: "activity"
  """
  insert_activity_one(
    """the row to be inserted"""
    object: activity_insert_input!

    """on conflict condition"""
    on_conflict: activity_on_conflict
  ): activity

  """
  insert data into the table: "faculty"
  """
  insert_faculty(
    """the rows to be inserted"""
    objects: [faculty_insert_input!]!

    """on conflict condition"""
    on_conflict: faculty_on_conflict
  ): faculty_mutation_response

  """
  insert a single row into the table: "faculty"
  """
  insert_faculty_one(
    """the row to be inserted"""
    object: faculty_insert_input!

    """on conflict condition"""
    on_conflict: faculty_on_conflict
  ): faculty

  """
  insert data into the table: "faculty_participates_in"
  """
  insert_faculty_participates_in(
    """the rows to be inserted"""
    objects: [faculty_participates_in_insert_input!]!
  ): faculty_participates_in_mutation_response

  """
  insert a single row into the table: "faculty_participates_in"
  """
  insert_faculty_participates_in_one(
    """the row to be inserted"""
    object: faculty_participates_in_insert_input!
  ): faculty_participates_in

  """
  insert data into the table: "participates_in"
  """
  insert_participates_in(
    """the rows to be inserted"""
    objects: [participates_in_insert_input!]!
  ): participates_in_mutation_response

  """
  insert a single row into the table: "participates_in"
  """
  insert_participates_in_one(
    """the row to be inserted"""
    object: participates_in_insert_input!
  ): participates_in

  """
  insert data into the table: "student"
  """
  insert_student(
    """the rows to be inserted"""
    objects: [student_insert_input!]!

    """on conflict condition"""
    on_conflict: student_on_conflict
  ): student_mutation_response

  """
  insert a single row into the table: "student"
  """
  insert_student_one(
    """the row to be inserted"""
    object: student_insert_input!

    """on conflict condition"""
    on_conflict: student_on_conflict
  ): student

  """
  update data of the table: "activity"
  """
  update_activity(
    """increments the integer columns with given value of the filtered values"""
    _inc: activity_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: activity_set_input

    """filter the rows which have to be updated"""
    where: activity_bool_exp!
  ): activity_mutation_response

  """
  update single row of the table: "activity"
  """
  update_activity_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: activity_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: activity_set_input
    pk_columns: activity_pk_columns_input!
  ): activity

  """
  update data of the table: "faculty"
  """
  update_faculty(
    """increments the integer columns with given value of the filtered values"""
    _inc: faculty_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: faculty_set_input

    """filter the rows which have to be updated"""
    where: faculty_bool_exp!
  ): faculty_mutation_response

  """
  update single row of the table: "faculty"
  """
  update_faculty_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: faculty_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: faculty_set_input
    pk_columns: faculty_pk_columns_input!
  ): faculty

  """
  update data of the table: "faculty_participates_in"
  """
  update_faculty_participates_in(
    """increments the integer columns with given value of the filtered values"""
    _inc: faculty_participates_in_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: faculty_participates_in_set_input

    """filter the rows which have to be updated"""
    where: faculty_participates_in_bool_exp!
  ): faculty_participates_in_mutation_response

  """
  update data of the table: "participates_in"
  """
  update_participates_in(
    """increments the integer columns with given value of the filtered values"""
    _inc: participates_in_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: participates_in_set_input

    """filter the rows which have to be updated"""
    where: participates_in_bool_exp!
  ): participates_in_mutation_response

  """
  update data of the table: "student"
  """
  update_student(
    """increments the integer columns with given value of the filtered values"""
    _inc: student_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: student_set_input

    """filter the rows which have to be updated"""
    where: student_bool_exp!
  ): student_mutation_response

  """
  update single row of the table: "student"
  """
  update_student_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: student_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: student_set_input
    pk_columns: student_pk_columns_input!
  ): student
}

"""column ordering options"""
enum order_by {
  """in the ascending order, nulls last"""
  asc

  """in the ascending order, nulls first"""
  asc_nulls_first

  """in the ascending order, nulls last"""
  asc_nulls_last

  """in the descending order, nulls first"""
  desc

  """in the descending order, nulls first"""
  desc_nulls_first

  """in the descending order, nulls last"""
  desc_nulls_last
}

"""
columns and relationships of "participates_in"
"""
type participates_in {
  actid: bigint

  """An object relationship"""
  activity: activity

  """An object relationship"""
  student: student
  stuid: bigint
}

"""
aggregated selection of "participates_in"
"""
type participates_in_aggregate {
  aggregate: participates_in_aggregate_fields
  nodes: [participates_in!]!
}

"""
aggregate fields of "participates_in"
"""
type participates_in_aggregate_fields {
  avg: participates_in_avg_fields
  count(columns: [participates_in_select_column!], distinct: Boolean): Int
  max: participates_in_max_fields
  min: participates_in_min_fields
  stddev: participates_in_stddev_fields
  stddev_pop: participates_in_stddev_pop_fields
  stddev_samp: participates_in_stddev_samp_fields
  sum: participates_in_sum_fields
  var_pop: participates_in_var_pop_fields
  var_samp: participates_in_var_samp_fields
  variance: participates_in_variance_fields
}

"""
order by aggregate values of table "participates_in"
"""
input participates_in_aggregate_order_by {
  avg: participates_in_avg_order_by
  count: order_by
  max: participates_in_max_order_by
  min: participates_in_min_order_by
  stddev: participates_in_stddev_order_by
  stddev_pop: participates_in_stddev_pop_order_by
  stddev_samp: participates_in_stddev_samp_order_by
  sum: participates_in_sum_order_by
  var_pop: participates_in_var_pop_order_by
  var_samp: participates_in_var_samp_order_by
  variance: participates_in_variance_order_by
}

"""
input type for inserting array relation for remote table "participates_in"
"""
input participates_in_arr_rel_insert_input {
  data: [participates_in_insert_input!]!
}

"""aggregate avg on columns"""
type participates_in_avg_fields {
  actid: Float
  stuid: Float
}

"""
order by avg() on columns of table "participates_in"
"""
input participates_in_avg_order_by {
  actid: order_by
  stuid: order_by
}

"""
Boolean expression to filter rows from the table "participates_in". All fields are combined with a logical 'AND'.
"""
input participates_in_bool_exp {
  _and: [participates_in_bool_exp]
  _not: participates_in_bool_exp
  _or: [participates_in_bool_exp]
  actid: bigint_comparison_exp
  activity: activity_bool_exp
  student: student_bool_exp
  stuid: bigint_comparison_exp
}

"""
input type for incrementing integer column in table "participates_in"
"""
input participates_in_inc_input {
  actid: bigint
  stuid: bigint
}

"""
input type for inserting data into table "participates_in"
"""
input participates_in_insert_input {
  actid: bigint
  activity: activity_obj_rel_insert_input
  student: student_obj_rel_insert_input
  stuid: bigint
}

"""aggregate max on columns"""
type participates_in_max_fields {
  actid: bigint
  stuid: bigint
}

"""
order by max() on columns of table "participates_in"
"""
input participates_in_max_order_by {
  actid: order_by
  stuid: order_by
}

"""aggregate min on columns"""
type participates_in_min_fields {
  actid: bigint
  stuid: bigint
}

"""
order by min() on columns of table "participates_in"
"""
input participates_in_min_order_by {
  actid: order_by
  stuid: order_by
}

"""
response of any mutation on the table "participates_in"
"""
type participates_in_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [participates_in!]!
}

"""
input type for inserting object relation for remote table "participates_in"
"""
input participates_in_obj_rel_insert_input {
  data: participates_in_insert_input!
}

"""
ordering options when selecting data from "participates_in"
"""
input participates_in_order_by {
  actid: order_by
  activity: activity_order_by
  student: student_order_by
  stuid: order_by
}

"""
select columns of table "participates_in"
"""
enum participates_in_select_column {
  """column name"""
  actid

  """column name"""
  stuid
}

"""
input type for updating data in table "participates_in"
"""
input participates_in_set_input {
  actid: bigint
  stuid: bigint
}

"""aggregate stddev on columns"""
type participates_in_stddev_fields {
  actid: Float
  stuid: Float
}

"""
order by stddev() on columns of table "participates_in"
"""
input participates_in_stddev_order_by {
  actid: order_by
  stuid: order_by
}

"""aggregate stddev_pop on columns"""
type participates_in_stddev_pop_fields {
  actid: Float
  stuid: Float
}

"""
order by stddev_pop() on columns of table "participates_in"
"""
input participates_in_stddev_pop_order_by {
  actid: order_by
  stuid: order_by
}

"""aggregate stddev_samp on columns"""
type participates_in_stddev_samp_fields {
  actid: Float
  stuid: Float
}

"""
order by stddev_samp() on columns of table "participates_in"
"""
input participates_in_stddev_samp_order_by {
  actid: order_by
  stuid: order_by
}

"""aggregate sum on columns"""
type participates_in_sum_fields {
  actid: bigint
  stuid: bigint
}

"""
order by sum() on columns of table "participates_in"
"""
input participates_in_sum_order_by {
  actid: order_by
  stuid: order_by
}

"""aggregate var_pop on columns"""
type participates_in_var_pop_fields {
  actid: Float
  stuid: Float
}

"""
order by var_pop() on columns of table "participates_in"
"""
input participates_in_var_pop_order_by {
  actid: order_by
  stuid: order_by
}

"""aggregate var_samp on columns"""
type participates_in_var_samp_fields {
  actid: Float
  stuid: Float
}

"""
order by var_samp() on columns of table "participates_in"
"""
input participates_in_var_samp_order_by {
  actid: order_by
  stuid: order_by
}

"""aggregate variance on columns"""
type participates_in_variance_fields {
  actid: Float
  stuid: Float
}

"""
order by variance() on columns of table "participates_in"
"""
input participates_in_variance_order_by {
  actid: order_by
  stuid: order_by
}

"""query root"""
type query_root {
  """
  fetch data from the table: "activity"
  """
  activity(
    """distinct select on columns"""
    distinct_on: [activity_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [activity_order_by!]

    """filter the rows returned"""
    where: activity_bool_exp
  ): [activity!]!

  """
  fetch aggregated fields from the table: "activity"
  """
  activity_aggregate(
    """distinct select on columns"""
    distinct_on: [activity_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [activity_order_by!]

    """filter the rows returned"""
    where: activity_bool_exp
  ): activity_aggregate!

  """fetch data from the table: "activity" using primary key columns"""
  activity_by_pk(actid: bigint!): activity

  """
  fetch data from the table: "faculty"
  """
  faculty(
    """distinct select on columns"""
    distinct_on: [faculty_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [faculty_order_by!]

    """filter the rows returned"""
    where: faculty_bool_exp
  ): [faculty!]!

  """
  fetch aggregated fields from the table: "faculty"
  """
  faculty_aggregate(
    """distinct select on columns"""
    distinct_on: [faculty_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [faculty_order_by!]

    """filter the rows returned"""
    where: faculty_bool_exp
  ): faculty_aggregate!

  """fetch data from the table: "faculty" using primary key columns"""
  faculty_by_pk(facid: bigint!): faculty

  """
  fetch data from the table: "faculty_participates_in"
  """
  faculty_participates_in(
    """distinct select on columns"""
    distinct_on: [faculty_participates_in_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [faculty_participates_in_order_by!]

    """filter the rows returned"""
    where: faculty_participates_in_bool_exp
  ): [faculty_participates_in!]!

  """
  fetch aggregated fields from the table: "faculty_participates_in"
  """
  faculty_participates_in_aggregate(
    """distinct select on columns"""
    distinct_on: [faculty_participates_in_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [faculty_participates_in_order_by!]

    """filter the rows returned"""
    where: faculty_participates_in_bool_exp
  ): faculty_participates_in_aggregate!

  """
  fetch data from the table: "participates_in"
  """
  participates_in(
    """distinct select on columns"""
    distinct_on: [participates_in_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [participates_in_order_by!]

    """filter the rows returned"""
    where: participates_in_bool_exp
  ): [participates_in!]!

  """
  fetch aggregated fields from the table: "participates_in"
  """
  participates_in_aggregate(
    """distinct select on columns"""
    distinct_on: [participates_in_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [participates_in_order_by!]

    """filter the rows returned"""
    where: participates_in_bool_exp
  ): participates_in_aggregate!

  """
  fetch data from the table: "student"
  """
  student(
    """distinct select on columns"""
    distinct_on: [student_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [student_order_by!]

    """filter the rows returned"""
    where: student_bool_exp
  ): [student!]!

  """
  fetch aggregated fields from the table: "student"
  """
  student_aggregate(
    """distinct select on columns"""
    distinct_on: [student_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [student_order_by!]

    """filter the rows returned"""
    where: student_bool_exp
  ): student_aggregate!

  """fetch data from the table: "student" using primary key columns"""
  student_by_pk(stuid: bigint!): student
}

"""
expression to compare columns of type String. All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String
  _ilike: String
  _in: [String!]
  _is_null: Boolean
  _like: String
  _lt: String
  _lte: String
  _neq: String
  _nilike: String
  _nin: [String!]
  _nlike: String
  _nsimilar: String
  _similar: String
}

"""
columns and relationships of "student"
"""
type student {
  advisor: bigint
  age: bigint
  city_code: String
  fname: String
  lname: String
  major: bigint

  """An array relationship"""
  participates_ins(
    """distinct select on columns"""
    distinct_on: [participates_in_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [participates_in_order_by!]

    """filter the rows returned"""
    where: participates_in_bool_exp
  ): [participates_in!]!

  """An aggregated array relationship"""
  participates_ins_aggregate(
    """distinct select on columns"""
    distinct_on: [participates_in_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [participates_in_order_by!]

    """filter the rows returned"""
    where: participates_in_bool_exp
  ): participates_in_aggregate!
  sex: String
  stuid: bigint!
}

"""
aggregated selection of "student"
"""
type student_aggregate {
  aggregate: student_aggregate_fields
  nodes: [student!]!
}

"""
aggregate fields of "student"
"""
type student_aggregate_fields {
  avg: student_avg_fields
  count(columns: [student_select_column!], distinct: Boolean): Int
  max: student_max_fields
  min: student_min_fields
  stddev: student_stddev_fields
  stddev_pop: student_stddev_pop_fields
  stddev_samp: student_stddev_samp_fields
  sum: student_sum_fields
  var_pop: student_var_pop_fields
  var_samp: student_var_samp_fields
  variance: student_variance_fields
}

"""
order by aggregate values of table "student"
"""
input student_aggregate_order_by {
  avg: student_avg_order_by
  count: order_by
  max: student_max_order_by
  min: student_min_order_by
  stddev: student_stddev_order_by
  stddev_pop: student_stddev_pop_order_by
  stddev_samp: student_stddev_samp_order_by
  sum: student_sum_order_by
  var_pop: student_var_pop_order_by
  var_samp: student_var_samp_order_by
  variance: student_variance_order_by
}

"""
input type for inserting array relation for remote table "student"
"""
input student_arr_rel_insert_input {
  data: [student_insert_input!]!
  on_conflict: student_on_conflict
}

"""aggregate avg on columns"""
type student_avg_fields {
  advisor: Float
  age: Float
  major: Float
  stuid: Float
}

"""
order by avg() on columns of table "student"
"""
input student_avg_order_by {
  advisor: order_by
  age: order_by
  major: order_by
  stuid: order_by
}

"""
Boolean expression to filter rows from the table "student". All fields are combined with a logical 'AND'.
"""
input student_bool_exp {
  _and: [student_bool_exp]
  _not: student_bool_exp
  _or: [student_bool_exp]
  advisor: bigint_comparison_exp
  age: bigint_comparison_exp
  city_code: String_comparison_exp
  fname: String_comparison_exp
  lname: String_comparison_exp
  major: bigint_comparison_exp
  participates_ins: participates_in_bool_exp
  sex: String_comparison_exp
  stuid: bigint_comparison_exp
}

"""
unique or primary key constraints on table "student"
"""
enum student_constraint {
  """unique or primary key constraint"""
  idx_24647_student_pkey
}

"""
input type for incrementing integer column in table "student"
"""
input student_inc_input {
  advisor: bigint
  age: bigint
  major: bigint
  stuid: bigint
}

"""
input type for inserting data into table "student"
"""
input student_insert_input {
  advisor: bigint
  age: bigint
  city_code: String
  fname: String
  lname: String
  major: bigint
  participates_ins: participates_in_arr_rel_insert_input
  sex: String
  stuid: bigint
}

"""aggregate max on columns"""
type student_max_fields {
  advisor: bigint
  age: bigint
  city_code: String
  fname: String
  lname: String
  major: bigint
  sex: String
  stuid: bigint
}

"""
order by max() on columns of table "student"
"""
input student_max_order_by {
  advisor: order_by
  age: order_by
  city_code: order_by
  fname: order_by
  lname: order_by
  major: order_by
  sex: order_by
  stuid: order_by
}

"""aggregate min on columns"""
type student_min_fields {
  advisor: bigint
  age: bigint
  city_code: String
  fname: String
  lname: String
  major: bigint
  sex: String
  stuid: bigint
}

"""
order by min() on columns of table "student"
"""
input student_min_order_by {
  advisor: order_by
  age: order_by
  city_code: order_by
  fname: order_by
  lname: order_by
  major: order_by
  sex: order_by
  stuid: order_by
}

"""
response of any mutation on the table "student"
"""
type student_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [student!]!
}

"""
input type for inserting object relation for remote table "student"
"""
input student_obj_rel_insert_input {
  data: student_insert_input!
  on_conflict: student_on_conflict
}

"""
on conflict condition type for table "student"
"""
input student_on_conflict {
  constraint: student_constraint!
  update_columns: [student_update_column!]!
  where: student_bool_exp
}

"""
ordering options when selecting data from "student"
"""
input student_order_by {
  advisor: order_by
  age: order_by
  city_code: order_by
  fname: order_by
  lname: order_by
  major: order_by
  participates_ins_aggregate: participates_in_aggregate_order_by
  sex: order_by
  stuid: order_by
}

"""
primary key columns input for table: "student"
"""
input student_pk_columns_input {
  stuid: bigint!
}

"""
select columns of table "student"
"""
enum student_select_column {
  """column name"""
  advisor

  """column name"""
  age

  """column name"""
  city_code

  """column name"""
  fname

  """column name"""
  lname

  """column name"""
  major

  """column name"""
  sex

  """column name"""
  stuid
}

"""
input type for updating data in table "student"
"""
input student_set_input {
  advisor: bigint
  age: bigint
  city_code: String
  fname: String
  lname: String
  major: bigint
  sex: String
  stuid: bigint
}

"""aggregate stddev on columns"""
type student_stddev_fields {
  advisor: Float
  age: Float
  major: Float
  stuid: Float
}

"""
order by stddev() on columns of table "student"
"""
input student_stddev_order_by {
  advisor: order_by
  age: order_by
  major: order_by
  stuid: order_by
}

"""aggregate stddev_pop on columns"""
type student_stddev_pop_fields {
  advisor: Float
  age: Float
  major: Float
  stuid: Float
}

"""
order by stddev_pop() on columns of table "student"
"""
input student_stddev_pop_order_by {
  advisor: order_by
  age: order_by
  major: order_by
  stuid: order_by
}

"""aggregate stddev_samp on columns"""
type student_stddev_samp_fields {
  advisor: Float
  age: Float
  major: Float
  stuid: Float
}

"""
order by stddev_samp() on columns of table "student"
"""
input student_stddev_samp_order_by {
  advisor: order_by
  age: order_by
  major: order_by
  stuid: order_by
}

"""aggregate sum on columns"""
type student_sum_fields {
  advisor: bigint
  age: bigint
  major: bigint
  stuid: bigint
}

"""
order by sum() on columns of table "student"
"""
input student_sum_order_by {
  advisor: order_by
  age: order_by
  major: order_by
  stuid: order_by
}

"""
update columns of table "student"
"""
enum student_update_column {
  """column name"""
  advisor

  """column name"""
  age

  """column name"""
  city_code

  """column name"""
  fname

  """column name"""
  lname

  """column name"""
  major

  """column name"""
  sex

  """column name"""
  stuid
}

"""aggregate var_pop on columns"""
type student_var_pop_fields {
  advisor: Float
  age: Float
  major: Float
  stuid: Float
}

"""
order by var_pop() on columns of table "student"
"""
input student_var_pop_order_by {
  advisor: order_by
  age: order_by
  major: order_by
  stuid: order_by
}

"""aggregate var_samp on columns"""
type student_var_samp_fields {
  advisor: Float
  age: Float
  major: Float
  stuid: Float
}

"""
order by var_samp() on columns of table "student"
"""
input student_var_samp_order_by {
  advisor: order_by
  age: order_by
  major: order_by
  stuid: order_by
}

"""aggregate variance on columns"""
type student_variance_fields {
  advisor: Float
  age: Float
  major: Float
  stuid: Float
}

"""
order by variance() on columns of table "student"
"""
input student_variance_order_by {
  advisor: order_by
  age: order_by
  major: order_by
  stuid: order_by
}

"""subscription root"""
type subscription_root {
  """
  fetch data from the table: "activity"
  """
  activity(
    """distinct select on columns"""
    distinct_on: [activity_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [activity_order_by!]

    """filter the rows returned"""
    where: activity_bool_exp
  ): [activity!]!

  """
  fetch aggregated fields from the table: "activity"
  """
  activity_aggregate(
    """distinct select on columns"""
    distinct_on: [activity_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [activity_order_by!]

    """filter the rows returned"""
    where: activity_bool_exp
  ): activity_aggregate!

  """fetch data from the table: "activity" using primary key columns"""
  activity_by_pk(actid: bigint!): activity

  """
  fetch data from the table: "faculty"
  """
  faculty(
    """distinct select on columns"""
    distinct_on: [faculty_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [faculty_order_by!]

    """filter the rows returned"""
    where: faculty_bool_exp
  ): [faculty!]!

  """
  fetch aggregated fields from the table: "faculty"
  """
  faculty_aggregate(
    """distinct select on columns"""
    distinct_on: [faculty_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [faculty_order_by!]

    """filter the rows returned"""
    where: faculty_bool_exp
  ): faculty_aggregate!

  """fetch data from the table: "faculty" using primary key columns"""
  faculty_by_pk(facid: bigint!): faculty

  """
  fetch data from the table: "faculty_participates_in"
  """
  faculty_participates_in(
    """distinct select on columns"""
    distinct_on: [faculty_participates_in_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [faculty_participates_in_order_by!]

    """filter the rows returned"""
    where: faculty_participates_in_bool_exp
  ): [faculty_participates_in!]!

  """
  fetch aggregated fields from the table: "faculty_participates_in"
  """
  faculty_participates_in_aggregate(
    """distinct select on columns"""
    distinct_on: [faculty_participates_in_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [faculty_participates_in_order_by!]

    """filter the rows returned"""
    where: faculty_participates_in_bool_exp
  ): faculty_participates_in_aggregate!

  """
  fetch data from the table: "participates_in"
  """
  participates_in(
    """distinct select on columns"""
    distinct_on: [participates_in_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [participates_in_order_by!]

    """filter the rows returned"""
    where: participates_in_bool_exp
  ): [participates_in!]!

  """
  fetch aggregated fields from the table: "participates_in"
  """
  participates_in_aggregate(
    """distinct select on columns"""
    distinct_on: [participates_in_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [participates_in_order_by!]

    """filter the rows returned"""
    where: participates_in_bool_exp
  ): participates_in_aggregate!

  """
  fetch data from the table: "student"
  """
  student(
    """distinct select on columns"""
    distinct_on: [student_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [student_order_by!]

    """filter the rows returned"""
    where: student_bool_exp
  ): [student!]!

  """
  fetch aggregated fields from the table: "student"
  """
  student_aggregate(
    """distinct select on columns"""
    distinct_on: [student_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [student_order_by!]

    """filter the rows returned"""
    where: student_bool_exp
  ): student_aggregate!

  """fetch data from the table: "student" using primary key columns"""
  student_by_pk(stuid: bigint!): student
}
