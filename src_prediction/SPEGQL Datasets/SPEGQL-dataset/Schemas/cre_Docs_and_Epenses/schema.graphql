schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""
Direct the client to resolve this field locally, either from the cache or local resolvers.
"""
directive @client(
  """
  When true, the client will never use the cache for this value. See
  https://www.apollographql.com/docs/react/essentials/local-state/#forcing-resolvers-with-clientalways-true
  """
  always: Boolean
) on FIELD | FRAGMENT_DEFINITION | INLINE_FRAGMENT

"""
Export this locally resolved field as a variable to be used in the remainder of this query. See
https://www.apollographql.com/docs/react/essentials/local-state/#using-client-fields-as-variables
"""
directive @export(
  """The variable name to export this field as."""
  as: String!
) on FIELD

"""
Specify a custom store key for this result. See
https://www.apollographql.com/docs/react/advanced/caching/#the-connection-directive
"""
directive @connection(
  """Specify the store key."""
  key: String!

  """
  An array of query argument names to include in the generated custom store key.
  """
  filter: [String!]
) on FIELD

"""
columns and relationships of "accounts"
"""
type accounts {
  account_details: String
  account_id: bigint!

  """An object relationship"""
  statement: statements
  statement_id: bigint
}

"""
aggregated selection of "accounts"
"""
type accounts_aggregate {
  aggregate: accounts_aggregate_fields
  nodes: [accounts!]!
}

"""
aggregate fields of "accounts"
"""
type accounts_aggregate_fields {
  avg: accounts_avg_fields
  count(columns: [accounts_select_column!], distinct: Boolean): Int
  max: accounts_max_fields
  min: accounts_min_fields
  stddev: accounts_stddev_fields
  stddev_pop: accounts_stddev_pop_fields
  stddev_samp: accounts_stddev_samp_fields
  sum: accounts_sum_fields
  var_pop: accounts_var_pop_fields
  var_samp: accounts_var_samp_fields
  variance: accounts_variance_fields
}

"""
order by aggregate values of table "accounts"
"""
input accounts_aggregate_order_by {
  avg: accounts_avg_order_by
  count: order_by
  max: accounts_max_order_by
  min: accounts_min_order_by
  stddev: accounts_stddev_order_by
  stddev_pop: accounts_stddev_pop_order_by
  stddev_samp: accounts_stddev_samp_order_by
  sum: accounts_sum_order_by
  var_pop: accounts_var_pop_order_by
  var_samp: accounts_var_samp_order_by
  variance: accounts_variance_order_by
}

"""
input type for inserting array relation for remote table "accounts"
"""
input accounts_arr_rel_insert_input {
  data: [accounts_insert_input!]!
  on_conflict: accounts_on_conflict
}

"""aggregate avg on columns"""
type accounts_avg_fields {
  account_id: Float
  statement_id: Float
}

"""
order by avg() on columns of table "accounts"
"""
input accounts_avg_order_by {
  account_id: order_by
  statement_id: order_by
}

"""
Boolean expression to filter rows from the table "accounts". All fields are combined with a logical 'AND'.
"""
input accounts_bool_exp {
  _and: [accounts_bool_exp]
  _not: accounts_bool_exp
  _or: [accounts_bool_exp]
  account_details: String_comparison_exp
  account_id: bigint_comparison_exp
  statement: statements_bool_exp
  statement_id: bigint_comparison_exp
}

"""
unique or primary key constraints on table "accounts"
"""
enum accounts_constraint {
  """unique or primary key constraint"""
  idx_22985_accounts_pkey
}

"""
input type for incrementing integer column in table "accounts"
"""
input accounts_inc_input {
  account_id: bigint
  statement_id: bigint
}

"""
input type for inserting data into table "accounts"
"""
input accounts_insert_input {
  account_details: String
  account_id: bigint
  statement: statements_obj_rel_insert_input
  statement_id: bigint
}

"""aggregate max on columns"""
type accounts_max_fields {
  account_details: String
  account_id: bigint
  statement_id: bigint
}

"""
order by max() on columns of table "accounts"
"""
input accounts_max_order_by {
  account_details: order_by
  account_id: order_by
  statement_id: order_by
}

"""aggregate min on columns"""
type accounts_min_fields {
  account_details: String
  account_id: bigint
  statement_id: bigint
}

"""
order by min() on columns of table "accounts"
"""
input accounts_min_order_by {
  account_details: order_by
  account_id: order_by
  statement_id: order_by
}

"""
response of any mutation on the table "accounts"
"""
type accounts_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [accounts!]!
}

"""
input type for inserting object relation for remote table "accounts"
"""
input accounts_obj_rel_insert_input {
  data: accounts_insert_input!
  on_conflict: accounts_on_conflict
}

"""
on conflict condition type for table "accounts"
"""
input accounts_on_conflict {
  constraint: accounts_constraint!
  update_columns: [accounts_update_column!]!
  where: accounts_bool_exp
}

"""
ordering options when selecting data from "accounts"
"""
input accounts_order_by {
  account_details: order_by
  account_id: order_by
  statement: statements_order_by
  statement_id: order_by
}

"""
primary key columns input for table: "accounts"
"""
input accounts_pk_columns_input {
  account_id: bigint!
}

"""
select columns of table "accounts"
"""
enum accounts_select_column {
  """column name"""
  account_details

  """column name"""
  account_id

  """column name"""
  statement_id
}

"""
input type for updating data in table "accounts"
"""
input accounts_set_input {
  account_details: String
  account_id: bigint
  statement_id: bigint
}

"""aggregate stddev on columns"""
type accounts_stddev_fields {
  account_id: Float
  statement_id: Float
}

"""
order by stddev() on columns of table "accounts"
"""
input accounts_stddev_order_by {
  account_id: order_by
  statement_id: order_by
}

"""aggregate stddev_pop on columns"""
type accounts_stddev_pop_fields {
  account_id: Float
  statement_id: Float
}

"""
order by stddev_pop() on columns of table "accounts"
"""
input accounts_stddev_pop_order_by {
  account_id: order_by
  statement_id: order_by
}

"""aggregate stddev_samp on columns"""
type accounts_stddev_samp_fields {
  account_id: Float
  statement_id: Float
}

"""
order by stddev_samp() on columns of table "accounts"
"""
input accounts_stddev_samp_order_by {
  account_id: order_by
  statement_id: order_by
}

"""aggregate sum on columns"""
type accounts_sum_fields {
  account_id: bigint
  statement_id: bigint
}

"""
order by sum() on columns of table "accounts"
"""
input accounts_sum_order_by {
  account_id: order_by
  statement_id: order_by
}

"""
update columns of table "accounts"
"""
enum accounts_update_column {
  """column name"""
  account_details

  """column name"""
  account_id

  """column name"""
  statement_id
}

"""aggregate var_pop on columns"""
type accounts_var_pop_fields {
  account_id: Float
  statement_id: Float
}

"""
order by var_pop() on columns of table "accounts"
"""
input accounts_var_pop_order_by {
  account_id: order_by
  statement_id: order_by
}

"""aggregate var_samp on columns"""
type accounts_var_samp_fields {
  account_id: Float
  statement_id: Float
}

"""
order by var_samp() on columns of table "accounts"
"""
input accounts_var_samp_order_by {
  account_id: order_by
  statement_id: order_by
}

"""aggregate variance on columns"""
type accounts_variance_fields {
  account_id: Float
  statement_id: Float
}

"""
order by variance() on columns of table "accounts"
"""
input accounts_variance_order_by {
  account_id: order_by
  statement_id: order_by
}

scalar bigint

"""
expression to compare columns of type bigint. All fields are combined with logical 'AND'.
"""
input bigint_comparison_exp {
  _eq: bigint
  _gt: bigint
  _gte: bigint
  _in: [bigint!]
  _is_null: Boolean
  _lt: bigint
  _lte: bigint
  _neq: bigint
  _nin: [bigint!]
}

"""
columns and relationships of "documents"
"""
type documents {
  document_date: timestamptz
  document_description: String
  document_id: bigint!
  document_name: String
  document_type_code: String

  """An array relationship"""
  documents_with_expenses(
    """distinct select on columns"""
    distinct_on: [documents_with_expenses_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [documents_with_expenses_order_by!]

    """filter the rows returned"""
    where: documents_with_expenses_bool_exp
  ): [documents_with_expenses!]!

  """An aggregated array relationship"""
  documents_with_expenses_aggregate(
    """distinct select on columns"""
    distinct_on: [documents_with_expenses_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [documents_with_expenses_order_by!]

    """filter the rows returned"""
    where: documents_with_expenses_bool_exp
  ): documents_with_expenses_aggregate!
  other_details: String

  """An object relationship"""
  project: projects
  project_id: bigint

  """An object relationship"""
  ref_document_type: ref_document_types

  """An array relationship"""
  statements(
    """distinct select on columns"""
    distinct_on: [statements_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [statements_order_by!]

    """filter the rows returned"""
    where: statements_bool_exp
  ): [statements!]!

  """An aggregated array relationship"""
  statements_aggregate(
    """distinct select on columns"""
    distinct_on: [statements_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [statements_order_by!]

    """filter the rows returned"""
    where: statements_bool_exp
  ): statements_aggregate!
}

"""
aggregated selection of "documents"
"""
type documents_aggregate {
  aggregate: documents_aggregate_fields
  nodes: [documents!]!
}

"""
aggregate fields of "documents"
"""
type documents_aggregate_fields {
  avg: documents_avg_fields
  count(columns: [documents_select_column!], distinct: Boolean): Int
  max: documents_max_fields
  min: documents_min_fields
  stddev: documents_stddev_fields
  stddev_pop: documents_stddev_pop_fields
  stddev_samp: documents_stddev_samp_fields
  sum: documents_sum_fields
  var_pop: documents_var_pop_fields
  var_samp: documents_var_samp_fields
  variance: documents_variance_fields
}

"""
order by aggregate values of table "documents"
"""
input documents_aggregate_order_by {
  avg: documents_avg_order_by
  count: order_by
  max: documents_max_order_by
  min: documents_min_order_by
  stddev: documents_stddev_order_by
  stddev_pop: documents_stddev_pop_order_by
  stddev_samp: documents_stddev_samp_order_by
  sum: documents_sum_order_by
  var_pop: documents_var_pop_order_by
  var_samp: documents_var_samp_order_by
  variance: documents_variance_order_by
}

"""
input type for inserting array relation for remote table "documents"
"""
input documents_arr_rel_insert_input {
  data: [documents_insert_input!]!
  on_conflict: documents_on_conflict
}

"""aggregate avg on columns"""
type documents_avg_fields {
  document_id: Float
  project_id: Float
}

"""
order by avg() on columns of table "documents"
"""
input documents_avg_order_by {
  document_id: order_by
  project_id: order_by
}

"""
Boolean expression to filter rows from the table "documents". All fields are combined with a logical 'AND'.
"""
input documents_bool_exp {
  _and: [documents_bool_exp]
  _not: documents_bool_exp
  _or: [documents_bool_exp]
  document_date: timestamptz_comparison_exp
  document_description: String_comparison_exp
  document_id: bigint_comparison_exp
  document_name: String_comparison_exp
  document_type_code: String_comparison_exp
  documents_with_expenses: documents_with_expenses_bool_exp
  other_details: String_comparison_exp
  project: projects_bool_exp
  project_id: bigint_comparison_exp
  ref_document_type: ref_document_types_bool_exp
  statements: statements_bool_exp
}

"""
unique or primary key constraints on table "documents"
"""
enum documents_constraint {
  """unique or primary key constraint"""
  idx_22967_documents_pkey
}

"""
input type for incrementing integer column in table "documents"
"""
input documents_inc_input {
  document_id: bigint
  project_id: bigint
}

"""
input type for inserting data into table "documents"
"""
input documents_insert_input {
  document_date: timestamptz
  document_description: String
  document_id: bigint
  document_name: String
  document_type_code: String
  documents_with_expenses: documents_with_expenses_arr_rel_insert_input
  other_details: String
  project: projects_obj_rel_insert_input
  project_id: bigint
  ref_document_type: ref_document_types_obj_rel_insert_input
  statements: statements_arr_rel_insert_input
}

"""aggregate max on columns"""
type documents_max_fields {
  document_date: timestamptz
  document_description: String
  document_id: bigint
  document_name: String
  document_type_code: String
  other_details: String
  project_id: bigint
}

"""
order by max() on columns of table "documents"
"""
input documents_max_order_by {
  document_date: order_by
  document_description: order_by
  document_id: order_by
  document_name: order_by
  document_type_code: order_by
  other_details: order_by
  project_id: order_by
}

"""aggregate min on columns"""
type documents_min_fields {
  document_date: timestamptz
  document_description: String
  document_id: bigint
  document_name: String
  document_type_code: String
  other_details: String
  project_id: bigint
}

"""
order by min() on columns of table "documents"
"""
input documents_min_order_by {
  document_date: order_by
  document_description: order_by
  document_id: order_by
  document_name: order_by
  document_type_code: order_by
  other_details: order_by
  project_id: order_by
}

"""
response of any mutation on the table "documents"
"""
type documents_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [documents!]!
}

"""
input type for inserting object relation for remote table "documents"
"""
input documents_obj_rel_insert_input {
  data: documents_insert_input!
  on_conflict: documents_on_conflict
}

"""
on conflict condition type for table "documents"
"""
input documents_on_conflict {
  constraint: documents_constraint!
  update_columns: [documents_update_column!]!
  where: documents_bool_exp
}

"""
ordering options when selecting data from "documents"
"""
input documents_order_by {
  document_date: order_by
  document_description: order_by
  document_id: order_by
  document_name: order_by
  document_type_code: order_by
  documents_with_expenses_aggregate: documents_with_expenses_aggregate_order_by
  other_details: order_by
  project: projects_order_by
  project_id: order_by
  ref_document_type: ref_document_types_order_by
  statements_aggregate: statements_aggregate_order_by
}

"""
primary key columns input for table: "documents"
"""
input documents_pk_columns_input {
  document_id: bigint!
}

"""
select columns of table "documents"
"""
enum documents_select_column {
  """column name"""
  document_date

  """column name"""
  document_description

  """column name"""
  document_id

  """column name"""
  document_name

  """column name"""
  document_type_code

  """column name"""
  other_details

  """column name"""
  project_id
}

"""
input type for updating data in table "documents"
"""
input documents_set_input {
  document_date: timestamptz
  document_description: String
  document_id: bigint
  document_name: String
  document_type_code: String
  other_details: String
  project_id: bigint
}

"""aggregate stddev on columns"""
type documents_stddev_fields {
  document_id: Float
  project_id: Float
}

"""
order by stddev() on columns of table "documents"
"""
input documents_stddev_order_by {
  document_id: order_by
  project_id: order_by
}

"""aggregate stddev_pop on columns"""
type documents_stddev_pop_fields {
  document_id: Float
  project_id: Float
}

"""
order by stddev_pop() on columns of table "documents"
"""
input documents_stddev_pop_order_by {
  document_id: order_by
  project_id: order_by
}

"""aggregate stddev_samp on columns"""
type documents_stddev_samp_fields {
  document_id: Float
  project_id: Float
}

"""
order by stddev_samp() on columns of table "documents"
"""
input documents_stddev_samp_order_by {
  document_id: order_by
  project_id: order_by
}

"""aggregate sum on columns"""
type documents_sum_fields {
  document_id: bigint
  project_id: bigint
}

"""
order by sum() on columns of table "documents"
"""
input documents_sum_order_by {
  document_id: order_by
  project_id: order_by
}

"""
update columns of table "documents"
"""
enum documents_update_column {
  """column name"""
  document_date

  """column name"""
  document_description

  """column name"""
  document_id

  """column name"""
  document_name

  """column name"""
  document_type_code

  """column name"""
  other_details

  """column name"""
  project_id
}

"""aggregate var_pop on columns"""
type documents_var_pop_fields {
  document_id: Float
  project_id: Float
}

"""
order by var_pop() on columns of table "documents"
"""
input documents_var_pop_order_by {
  document_id: order_by
  project_id: order_by
}

"""aggregate var_samp on columns"""
type documents_var_samp_fields {
  document_id: Float
  project_id: Float
}

"""
order by var_samp() on columns of table "documents"
"""
input documents_var_samp_order_by {
  document_id: order_by
  project_id: order_by
}

"""aggregate variance on columns"""
type documents_variance_fields {
  document_id: Float
  project_id: Float
}

"""
order by variance() on columns of table "documents"
"""
input documents_variance_order_by {
  document_id: order_by
  project_id: order_by
}

"""
columns and relationships of "documents_with_expenses"
"""
type documents_with_expenses {
  budget_type_code: String

  """An object relationship"""
  document: documents!
  document_details: String
  document_id: bigint!

  """An object relationship"""
  ref_budget_code: ref_budget_codes
}

"""
aggregated selection of "documents_with_expenses"
"""
type documents_with_expenses_aggregate {
  aggregate: documents_with_expenses_aggregate_fields
  nodes: [documents_with_expenses!]!
}

"""
aggregate fields of "documents_with_expenses"
"""
type documents_with_expenses_aggregate_fields {
  avg: documents_with_expenses_avg_fields
  count(columns: [documents_with_expenses_select_column!], distinct: Boolean): Int
  max: documents_with_expenses_max_fields
  min: documents_with_expenses_min_fields
  stddev: documents_with_expenses_stddev_fields
  stddev_pop: documents_with_expenses_stddev_pop_fields
  stddev_samp: documents_with_expenses_stddev_samp_fields
  sum: documents_with_expenses_sum_fields
  var_pop: documents_with_expenses_var_pop_fields
  var_samp: documents_with_expenses_var_samp_fields
  variance: documents_with_expenses_variance_fields
}

"""
order by aggregate values of table "documents_with_expenses"
"""
input documents_with_expenses_aggregate_order_by {
  avg: documents_with_expenses_avg_order_by
  count: order_by
  max: documents_with_expenses_max_order_by
  min: documents_with_expenses_min_order_by
  stddev: documents_with_expenses_stddev_order_by
  stddev_pop: documents_with_expenses_stddev_pop_order_by
  stddev_samp: documents_with_expenses_stddev_samp_order_by
  sum: documents_with_expenses_sum_order_by
  var_pop: documents_with_expenses_var_pop_order_by
  var_samp: documents_with_expenses_var_samp_order_by
  variance: documents_with_expenses_variance_order_by
}

"""
input type for inserting array relation for remote table "documents_with_expenses"
"""
input documents_with_expenses_arr_rel_insert_input {
  data: [documents_with_expenses_insert_input!]!
  on_conflict: documents_with_expenses_on_conflict
}

"""aggregate avg on columns"""
type documents_with_expenses_avg_fields {
  document_id: Float
}

"""
order by avg() on columns of table "documents_with_expenses"
"""
input documents_with_expenses_avg_order_by {
  document_id: order_by
}

"""
Boolean expression to filter rows from the table "documents_with_expenses". All fields are combined with a logical 'AND'.
"""
input documents_with_expenses_bool_exp {
  _and: [documents_with_expenses_bool_exp]
  _not: documents_with_expenses_bool_exp
  _or: [documents_with_expenses_bool_exp]
  budget_type_code: String_comparison_exp
  document: documents_bool_exp
  document_details: String_comparison_exp
  document_id: bigint_comparison_exp
  ref_budget_code: ref_budget_codes_bool_exp
}

"""
unique or primary key constraints on table "documents_with_expenses"
"""
enum documents_with_expenses_constraint {
  """unique or primary key constraint"""
  idx_22979_documents_with_expenses_pkey
}

"""
input type for incrementing integer column in table "documents_with_expenses"
"""
input documents_with_expenses_inc_input {
  document_id: bigint
}

"""
input type for inserting data into table "documents_with_expenses"
"""
input documents_with_expenses_insert_input {
  budget_type_code: String
  document: documents_obj_rel_insert_input
  document_details: String
  document_id: bigint
  ref_budget_code: ref_budget_codes_obj_rel_insert_input
}

"""aggregate max on columns"""
type documents_with_expenses_max_fields {
  budget_type_code: String
  document_details: String
  document_id: bigint
}

"""
order by max() on columns of table "documents_with_expenses"
"""
input documents_with_expenses_max_order_by {
  budget_type_code: order_by
  document_details: order_by
  document_id: order_by
}

"""aggregate min on columns"""
type documents_with_expenses_min_fields {
  budget_type_code: String
  document_details: String
  document_id: bigint
}

"""
order by min() on columns of table "documents_with_expenses"
"""
input documents_with_expenses_min_order_by {
  budget_type_code: order_by
  document_details: order_by
  document_id: order_by
}

"""
response of any mutation on the table "documents_with_expenses"
"""
type documents_with_expenses_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [documents_with_expenses!]!
}

"""
input type for inserting object relation for remote table "documents_with_expenses"
"""
input documents_with_expenses_obj_rel_insert_input {
  data: documents_with_expenses_insert_input!
  on_conflict: documents_with_expenses_on_conflict
}

"""
on conflict condition type for table "documents_with_expenses"
"""
input documents_with_expenses_on_conflict {
  constraint: documents_with_expenses_constraint!
  update_columns: [documents_with_expenses_update_column!]!
  where: documents_with_expenses_bool_exp
}

"""
ordering options when selecting data from "documents_with_expenses"
"""
input documents_with_expenses_order_by {
  budget_type_code: order_by
  document: documents_order_by
  document_details: order_by
  document_id: order_by
  ref_budget_code: ref_budget_codes_order_by
}

"""
primary key columns input for table: "documents_with_expenses"
"""
input documents_with_expenses_pk_columns_input {
  document_id: bigint!
}

"""
select columns of table "documents_with_expenses"
"""
enum documents_with_expenses_select_column {
  """column name"""
  budget_type_code

  """column name"""
  document_details

  """column name"""
  document_id
}

"""
input type for updating data in table "documents_with_expenses"
"""
input documents_with_expenses_set_input {
  budget_type_code: String
  document_details: String
  document_id: bigint
}

"""aggregate stddev on columns"""
type documents_with_expenses_stddev_fields {
  document_id: Float
}

"""
order by stddev() on columns of table "documents_with_expenses"
"""
input documents_with_expenses_stddev_order_by {
  document_id: order_by
}

"""aggregate stddev_pop on columns"""
type documents_with_expenses_stddev_pop_fields {
  document_id: Float
}

"""
order by stddev_pop() on columns of table "documents_with_expenses"
"""
input documents_with_expenses_stddev_pop_order_by {
  document_id: order_by
}

"""aggregate stddev_samp on columns"""
type documents_with_expenses_stddev_samp_fields {
  document_id: Float
}

"""
order by stddev_samp() on columns of table "documents_with_expenses"
"""
input documents_with_expenses_stddev_samp_order_by {
  document_id: order_by
}

"""aggregate sum on columns"""
type documents_with_expenses_sum_fields {
  document_id: bigint
}

"""
order by sum() on columns of table "documents_with_expenses"
"""
input documents_with_expenses_sum_order_by {
  document_id: order_by
}

"""
update columns of table "documents_with_expenses"
"""
enum documents_with_expenses_update_column {
  """column name"""
  budget_type_code

  """column name"""
  document_details

  """column name"""
  document_id
}

"""aggregate var_pop on columns"""
type documents_with_expenses_var_pop_fields {
  document_id: Float
}

"""
order by var_pop() on columns of table "documents_with_expenses"
"""
input documents_with_expenses_var_pop_order_by {
  document_id: order_by
}

"""aggregate var_samp on columns"""
type documents_with_expenses_var_samp_fields {
  document_id: Float
}

"""
order by var_samp() on columns of table "documents_with_expenses"
"""
input documents_with_expenses_var_samp_order_by {
  document_id: order_by
}

"""aggregate variance on columns"""
type documents_with_expenses_variance_fields {
  document_id: Float
}

"""
order by variance() on columns of table "documents_with_expenses"
"""
input documents_with_expenses_variance_order_by {
  document_id: order_by
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "accounts"
  """
  delete_accounts(
    """filter the rows which have to be deleted"""
    where: accounts_bool_exp!
  ): accounts_mutation_response

  """
  delete single row from the table: "accounts"
  """
  delete_accounts_by_pk(account_id: bigint!): accounts

  """
  delete data from the table: "documents"
  """
  delete_documents(
    """filter the rows which have to be deleted"""
    where: documents_bool_exp!
  ): documents_mutation_response

  """
  delete single row from the table: "documents"
  """
  delete_documents_by_pk(document_id: bigint!): documents

  """
  delete data from the table: "documents_with_expenses"
  """
  delete_documents_with_expenses(
    """filter the rows which have to be deleted"""
    where: documents_with_expenses_bool_exp!
  ): documents_with_expenses_mutation_response

  """
  delete single row from the table: "documents_with_expenses"
  """
  delete_documents_with_expenses_by_pk(document_id: bigint!): documents_with_expenses

  """
  delete data from the table: "projects"
  """
  delete_projects(
    """filter the rows which have to be deleted"""
    where: projects_bool_exp!
  ): projects_mutation_response

  """
  delete single row from the table: "projects"
  """
  delete_projects_by_pk(project_id: bigint!): projects

  """
  delete data from the table: "ref_budget_codes"
  """
  delete_ref_budget_codes(
    """filter the rows which have to be deleted"""
    where: ref_budget_codes_bool_exp!
  ): ref_budget_codes_mutation_response

  """
  delete data from the table: "ref_document_types"
  """
  delete_ref_document_types(
    """filter the rows which have to be deleted"""
    where: ref_document_types_bool_exp!
  ): ref_document_types_mutation_response

  """
  delete data from the table: "statements"
  """
  delete_statements(
    """filter the rows which have to be deleted"""
    where: statements_bool_exp!
  ): statements_mutation_response

  """
  delete single row from the table: "statements"
  """
  delete_statements_by_pk(statement_id: bigint!): statements

  """
  insert data into the table: "accounts"
  """
  insert_accounts(
    """the rows to be inserted"""
    objects: [accounts_insert_input!]!

    """on conflict condition"""
    on_conflict: accounts_on_conflict
  ): accounts_mutation_response

  """
  insert a single row into the table: "accounts"
  """
  insert_accounts_one(
    """the row to be inserted"""
    object: accounts_insert_input!

    """on conflict condition"""
    on_conflict: accounts_on_conflict
  ): accounts

  """
  insert data into the table: "documents"
  """
  insert_documents(
    """the rows to be inserted"""
    objects: [documents_insert_input!]!

    """on conflict condition"""
    on_conflict: documents_on_conflict
  ): documents_mutation_response

  """
  insert a single row into the table: "documents"
  """
  insert_documents_one(
    """the row to be inserted"""
    object: documents_insert_input!

    """on conflict condition"""
    on_conflict: documents_on_conflict
  ): documents

  """
  insert data into the table: "documents_with_expenses"
  """
  insert_documents_with_expenses(
    """the rows to be inserted"""
    objects: [documents_with_expenses_insert_input!]!

    """on conflict condition"""
    on_conflict: documents_with_expenses_on_conflict
  ): documents_with_expenses_mutation_response

  """
  insert a single row into the table: "documents_with_expenses"
  """
  insert_documents_with_expenses_one(
    """the row to be inserted"""
    object: documents_with_expenses_insert_input!

    """on conflict condition"""
    on_conflict: documents_with_expenses_on_conflict
  ): documents_with_expenses

  """
  insert data into the table: "projects"
  """
  insert_projects(
    """the rows to be inserted"""
    objects: [projects_insert_input!]!

    """on conflict condition"""
    on_conflict: projects_on_conflict
  ): projects_mutation_response

  """
  insert a single row into the table: "projects"
  """
  insert_projects_one(
    """the row to be inserted"""
    object: projects_insert_input!

    """on conflict condition"""
    on_conflict: projects_on_conflict
  ): projects

  """
  insert data into the table: "ref_budget_codes"
  """
  insert_ref_budget_codes(
    """the rows to be inserted"""
    objects: [ref_budget_codes_insert_input!]!

    """on conflict condition"""
    on_conflict: ref_budget_codes_on_conflict
  ): ref_budget_codes_mutation_response

  """
  insert a single row into the table: "ref_budget_codes"
  """
  insert_ref_budget_codes_one(
    """the row to be inserted"""
    object: ref_budget_codes_insert_input!

    """on conflict condition"""
    on_conflict: ref_budget_codes_on_conflict
  ): ref_budget_codes

  """
  insert data into the table: "ref_document_types"
  """
  insert_ref_document_types(
    """the rows to be inserted"""
    objects: [ref_document_types_insert_input!]!

    """on conflict condition"""
    on_conflict: ref_document_types_on_conflict
  ): ref_document_types_mutation_response

  """
  insert a single row into the table: "ref_document_types"
  """
  insert_ref_document_types_one(
    """the row to be inserted"""
    object: ref_document_types_insert_input!

    """on conflict condition"""
    on_conflict: ref_document_types_on_conflict
  ): ref_document_types

  """
  insert data into the table: "statements"
  """
  insert_statements(
    """the rows to be inserted"""
    objects: [statements_insert_input!]!

    """on conflict condition"""
    on_conflict: statements_on_conflict
  ): statements_mutation_response

  """
  insert a single row into the table: "statements"
  """
  insert_statements_one(
    """the row to be inserted"""
    object: statements_insert_input!

    """on conflict condition"""
    on_conflict: statements_on_conflict
  ): statements

  """
  update data of the table: "accounts"
  """
  update_accounts(
    """increments the integer columns with given value of the filtered values"""
    _inc: accounts_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: accounts_set_input

    """filter the rows which have to be updated"""
    where: accounts_bool_exp!
  ): accounts_mutation_response

  """
  update single row of the table: "accounts"
  """
  update_accounts_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: accounts_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: accounts_set_input
    pk_columns: accounts_pk_columns_input!
  ): accounts

  """
  update data of the table: "documents"
  """
  update_documents(
    """increments the integer columns with given value of the filtered values"""
    _inc: documents_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: documents_set_input

    """filter the rows which have to be updated"""
    where: documents_bool_exp!
  ): documents_mutation_response

  """
  update single row of the table: "documents"
  """
  update_documents_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: documents_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: documents_set_input
    pk_columns: documents_pk_columns_input!
  ): documents

  """
  update data of the table: "documents_with_expenses"
  """
  update_documents_with_expenses(
    """increments the integer columns with given value of the filtered values"""
    _inc: documents_with_expenses_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: documents_with_expenses_set_input

    """filter the rows which have to be updated"""
    where: documents_with_expenses_bool_exp!
  ): documents_with_expenses_mutation_response

  """
  update single row of the table: "documents_with_expenses"
  """
  update_documents_with_expenses_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: documents_with_expenses_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: documents_with_expenses_set_input
    pk_columns: documents_with_expenses_pk_columns_input!
  ): documents_with_expenses

  """
  update data of the table: "projects"
  """
  update_projects(
    """increments the integer columns with given value of the filtered values"""
    _inc: projects_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: projects_set_input

    """filter the rows which have to be updated"""
    where: projects_bool_exp!
  ): projects_mutation_response

  """
  update single row of the table: "projects"
  """
  update_projects_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: projects_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: projects_set_input
    pk_columns: projects_pk_columns_input!
  ): projects

  """
  update data of the table: "ref_budget_codes"
  """
  update_ref_budget_codes(
    """sets the columns of the filtered rows to the given values"""
    _set: ref_budget_codes_set_input

    """filter the rows which have to be updated"""
    where: ref_budget_codes_bool_exp!
  ): ref_budget_codes_mutation_response

  """
  update data of the table: "ref_document_types"
  """
  update_ref_document_types(
    """sets the columns of the filtered rows to the given values"""
    _set: ref_document_types_set_input

    """filter the rows which have to be updated"""
    where: ref_document_types_bool_exp!
  ): ref_document_types_mutation_response

  """
  update data of the table: "statements"
  """
  update_statements(
    """increments the integer columns with given value of the filtered values"""
    _inc: statements_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: statements_set_input

    """filter the rows which have to be updated"""
    where: statements_bool_exp!
  ): statements_mutation_response

  """
  update single row of the table: "statements"
  """
  update_statements_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: statements_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: statements_set_input
    pk_columns: statements_pk_columns_input!
  ): statements
}

"""column ordering options"""
enum order_by {
  """in the ascending order, nulls last"""
  asc

  """in the ascending order, nulls first"""
  asc_nulls_first

  """in the ascending order, nulls last"""
  asc_nulls_last

  """in the descending order, nulls first"""
  desc

  """in the descending order, nulls first"""
  desc_nulls_first

  """in the descending order, nulls last"""
  desc_nulls_last
}

"""
columns and relationships of "projects"
"""
type projects {
  """An array relationship"""
  documents(
    """distinct select on columns"""
    distinct_on: [documents_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [documents_order_by!]

    """filter the rows returned"""
    where: documents_bool_exp
  ): [documents!]!

  """An aggregated array relationship"""
  documents_aggregate(
    """distinct select on columns"""
    distinct_on: [documents_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [documents_order_by!]

    """filter the rows returned"""
    where: documents_bool_exp
  ): documents_aggregate!
  project_details: String
  project_id: bigint!
}

"""
aggregated selection of "projects"
"""
type projects_aggregate {
  aggregate: projects_aggregate_fields
  nodes: [projects!]!
}

"""
aggregate fields of "projects"
"""
type projects_aggregate_fields {
  avg: projects_avg_fields
  count(columns: [projects_select_column!], distinct: Boolean): Int
  max: projects_max_fields
  min: projects_min_fields
  stddev: projects_stddev_fields
  stddev_pop: projects_stddev_pop_fields
  stddev_samp: projects_stddev_samp_fields
  sum: projects_sum_fields
  var_pop: projects_var_pop_fields
  var_samp: projects_var_samp_fields
  variance: projects_variance_fields
}

"""
order by aggregate values of table "projects"
"""
input projects_aggregate_order_by {
  avg: projects_avg_order_by
  count: order_by
  max: projects_max_order_by
  min: projects_min_order_by
  stddev: projects_stddev_order_by
  stddev_pop: projects_stddev_pop_order_by
  stddev_samp: projects_stddev_samp_order_by
  sum: projects_sum_order_by
  var_pop: projects_var_pop_order_by
  var_samp: projects_var_samp_order_by
  variance: projects_variance_order_by
}

"""
input type for inserting array relation for remote table "projects"
"""
input projects_arr_rel_insert_input {
  data: [projects_insert_input!]!
  on_conflict: projects_on_conflict
}

"""aggregate avg on columns"""
type projects_avg_fields {
  project_id: Float
}

"""
order by avg() on columns of table "projects"
"""
input projects_avg_order_by {
  project_id: order_by
}

"""
Boolean expression to filter rows from the table "projects". All fields are combined with a logical 'AND'.
"""
input projects_bool_exp {
  _and: [projects_bool_exp]
  _not: projects_bool_exp
  _or: [projects_bool_exp]
  documents: documents_bool_exp
  project_details: String_comparison_exp
  project_id: bigint_comparison_exp
}

"""
unique or primary key constraints on table "projects"
"""
enum projects_constraint {
  """unique or primary key constraint"""
  idx_22961_projects_pkey
}

"""
input type for incrementing integer column in table "projects"
"""
input projects_inc_input {
  project_id: bigint
}

"""
input type for inserting data into table "projects"
"""
input projects_insert_input {
  documents: documents_arr_rel_insert_input
  project_details: String
  project_id: bigint
}

"""aggregate max on columns"""
type projects_max_fields {
  project_details: String
  project_id: bigint
}

"""
order by max() on columns of table "projects"
"""
input projects_max_order_by {
  project_details: order_by
  project_id: order_by
}

"""aggregate min on columns"""
type projects_min_fields {
  project_details: String
  project_id: bigint
}

"""
order by min() on columns of table "projects"
"""
input projects_min_order_by {
  project_details: order_by
  project_id: order_by
}

"""
response of any mutation on the table "projects"
"""
type projects_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [projects!]!
}

"""
input type for inserting object relation for remote table "projects"
"""
input projects_obj_rel_insert_input {
  data: projects_insert_input!
  on_conflict: projects_on_conflict
}

"""
on conflict condition type for table "projects"
"""
input projects_on_conflict {
  constraint: projects_constraint!
  update_columns: [projects_update_column!]!
  where: projects_bool_exp
}

"""
ordering options when selecting data from "projects"
"""
input projects_order_by {
  documents_aggregate: documents_aggregate_order_by
  project_details: order_by
  project_id: order_by
}

"""
primary key columns input for table: "projects"
"""
input projects_pk_columns_input {
  project_id: bigint!
}

"""
select columns of table "projects"
"""
enum projects_select_column {
  """column name"""
  project_details

  """column name"""
  project_id
}

"""
input type for updating data in table "projects"
"""
input projects_set_input {
  project_details: String
  project_id: bigint
}

"""aggregate stddev on columns"""
type projects_stddev_fields {
  project_id: Float
}

"""
order by stddev() on columns of table "projects"
"""
input projects_stddev_order_by {
  project_id: order_by
}

"""aggregate stddev_pop on columns"""
type projects_stddev_pop_fields {
  project_id: Float
}

"""
order by stddev_pop() on columns of table "projects"
"""
input projects_stddev_pop_order_by {
  project_id: order_by
}

"""aggregate stddev_samp on columns"""
type projects_stddev_samp_fields {
  project_id: Float
}

"""
order by stddev_samp() on columns of table "projects"
"""
input projects_stddev_samp_order_by {
  project_id: order_by
}

"""aggregate sum on columns"""
type projects_sum_fields {
  project_id: bigint
}

"""
order by sum() on columns of table "projects"
"""
input projects_sum_order_by {
  project_id: order_by
}

"""
update columns of table "projects"
"""
enum projects_update_column {
  """column name"""
  project_details

  """column name"""
  project_id
}

"""aggregate var_pop on columns"""
type projects_var_pop_fields {
  project_id: Float
}

"""
order by var_pop() on columns of table "projects"
"""
input projects_var_pop_order_by {
  project_id: order_by
}

"""aggregate var_samp on columns"""
type projects_var_samp_fields {
  project_id: Float
}

"""
order by var_samp() on columns of table "projects"
"""
input projects_var_samp_order_by {
  project_id: order_by
}

"""aggregate variance on columns"""
type projects_variance_fields {
  project_id: Float
}

"""
order by variance() on columns of table "projects"
"""
input projects_variance_order_by {
  project_id: order_by
}

"""query root"""
type query_root {
  """
  fetch data from the table: "accounts"
  """
  accounts(
    """distinct select on columns"""
    distinct_on: [accounts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [accounts_order_by!]

    """filter the rows returned"""
    where: accounts_bool_exp
  ): [accounts!]!

  """
  fetch aggregated fields from the table: "accounts"
  """
  accounts_aggregate(
    """distinct select on columns"""
    distinct_on: [accounts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [accounts_order_by!]

    """filter the rows returned"""
    where: accounts_bool_exp
  ): accounts_aggregate!

  """fetch data from the table: "accounts" using primary key columns"""
  accounts_by_pk(account_id: bigint!): accounts

  """
  fetch data from the table: "documents"
  """
  documents(
    """distinct select on columns"""
    distinct_on: [documents_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [documents_order_by!]

    """filter the rows returned"""
    where: documents_bool_exp
  ): [documents!]!

  """
  fetch aggregated fields from the table: "documents"
  """
  documents_aggregate(
    """distinct select on columns"""
    distinct_on: [documents_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [documents_order_by!]

    """filter the rows returned"""
    where: documents_bool_exp
  ): documents_aggregate!

  """fetch data from the table: "documents" using primary key columns"""
  documents_by_pk(document_id: bigint!): documents

  """
  fetch data from the table: "documents_with_expenses"
  """
  documents_with_expenses(
    """distinct select on columns"""
    distinct_on: [documents_with_expenses_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [documents_with_expenses_order_by!]

    """filter the rows returned"""
    where: documents_with_expenses_bool_exp
  ): [documents_with_expenses!]!

  """
  fetch aggregated fields from the table: "documents_with_expenses"
  """
  documents_with_expenses_aggregate(
    """distinct select on columns"""
    distinct_on: [documents_with_expenses_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [documents_with_expenses_order_by!]

    """filter the rows returned"""
    where: documents_with_expenses_bool_exp
  ): documents_with_expenses_aggregate!

  """
  fetch data from the table: "documents_with_expenses" using primary key columns
  """
  documents_with_expenses_by_pk(document_id: bigint!): documents_with_expenses

  """
  fetch data from the table: "projects"
  """
  projects(
    """distinct select on columns"""
    distinct_on: [projects_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [projects_order_by!]

    """filter the rows returned"""
    where: projects_bool_exp
  ): [projects!]!

  """
  fetch aggregated fields from the table: "projects"
  """
  projects_aggregate(
    """distinct select on columns"""
    distinct_on: [projects_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [projects_order_by!]

    """filter the rows returned"""
    where: projects_bool_exp
  ): projects_aggregate!

  """fetch data from the table: "projects" using primary key columns"""
  projects_by_pk(project_id: bigint!): projects

  """
  fetch data from the table: "ref_budget_codes"
  """
  ref_budget_codes(
    """distinct select on columns"""
    distinct_on: [ref_budget_codes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [ref_budget_codes_order_by!]

    """filter the rows returned"""
    where: ref_budget_codes_bool_exp
  ): [ref_budget_codes!]!

  """
  fetch aggregated fields from the table: "ref_budget_codes"
  """
  ref_budget_codes_aggregate(
    """distinct select on columns"""
    distinct_on: [ref_budget_codes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [ref_budget_codes_order_by!]

    """filter the rows returned"""
    where: ref_budget_codes_bool_exp
  ): ref_budget_codes_aggregate!

  """
  fetch data from the table: "ref_document_types"
  """
  ref_document_types(
    """distinct select on columns"""
    distinct_on: [ref_document_types_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [ref_document_types_order_by!]

    """filter the rows returned"""
    where: ref_document_types_bool_exp
  ): [ref_document_types!]!

  """
  fetch aggregated fields from the table: "ref_document_types"
  """
  ref_document_types_aggregate(
    """distinct select on columns"""
    distinct_on: [ref_document_types_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [ref_document_types_order_by!]

    """filter the rows returned"""
    where: ref_document_types_bool_exp
  ): ref_document_types_aggregate!

  """
  fetch data from the table: "statements"
  """
  statements(
    """distinct select on columns"""
    distinct_on: [statements_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [statements_order_by!]

    """filter the rows returned"""
    where: statements_bool_exp
  ): [statements!]!

  """
  fetch aggregated fields from the table: "statements"
  """
  statements_aggregate(
    """distinct select on columns"""
    distinct_on: [statements_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [statements_order_by!]

    """filter the rows returned"""
    where: statements_bool_exp
  ): statements_aggregate!

  """fetch data from the table: "statements" using primary key columns"""
  statements_by_pk(statement_id: bigint!): statements
}

"""
columns and relationships of "ref_budget_codes"
"""
type ref_budget_codes {
  budget_type_code: String
  budget_type_description: String

  """An array relationship"""
  documents_with_expenses(
    """distinct select on columns"""
    distinct_on: [documents_with_expenses_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [documents_with_expenses_order_by!]

    """filter the rows returned"""
    where: documents_with_expenses_bool_exp
  ): [documents_with_expenses!]!

  """An aggregated array relationship"""
  documents_with_expenses_aggregate(
    """distinct select on columns"""
    distinct_on: [documents_with_expenses_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [documents_with_expenses_order_by!]

    """filter the rows returned"""
    where: documents_with_expenses_bool_exp
  ): documents_with_expenses_aggregate!
}

"""
aggregated selection of "ref_budget_codes"
"""
type ref_budget_codes_aggregate {
  aggregate: ref_budget_codes_aggregate_fields
  nodes: [ref_budget_codes!]!
}

"""
aggregate fields of "ref_budget_codes"
"""
type ref_budget_codes_aggregate_fields {
  count(columns: [ref_budget_codes_select_column!], distinct: Boolean): Int
  max: ref_budget_codes_max_fields
  min: ref_budget_codes_min_fields
}

"""
order by aggregate values of table "ref_budget_codes"
"""
input ref_budget_codes_aggregate_order_by {
  count: order_by
  max: ref_budget_codes_max_order_by
  min: ref_budget_codes_min_order_by
}

"""
input type for inserting array relation for remote table "ref_budget_codes"
"""
input ref_budget_codes_arr_rel_insert_input {
  data: [ref_budget_codes_insert_input!]!
  on_conflict: ref_budget_codes_on_conflict
}

"""
Boolean expression to filter rows from the table "ref_budget_codes". All fields are combined with a logical 'AND'.
"""
input ref_budget_codes_bool_exp {
  _and: [ref_budget_codes_bool_exp]
  _not: ref_budget_codes_bool_exp
  _or: [ref_budget_codes_bool_exp]
  budget_type_code: String_comparison_exp
  budget_type_description: String_comparison_exp
  documents_with_expenses: documents_with_expenses_bool_exp
}

"""
unique or primary key constraints on table "ref_budget_codes"
"""
enum ref_budget_codes_constraint {
  """unique or primary key constraint"""
  idx_22955_sqlite_autoindex_ref_budget_codes_1
}

"""
input type for inserting data into table "ref_budget_codes"
"""
input ref_budget_codes_insert_input {
  budget_type_code: String
  budget_type_description: String
  documents_with_expenses: documents_with_expenses_arr_rel_insert_input
}

"""aggregate max on columns"""
type ref_budget_codes_max_fields {
  budget_type_code: String
  budget_type_description: String
}

"""
order by max() on columns of table "ref_budget_codes"
"""
input ref_budget_codes_max_order_by {
  budget_type_code: order_by
  budget_type_description: order_by
}

"""aggregate min on columns"""
type ref_budget_codes_min_fields {
  budget_type_code: String
  budget_type_description: String
}

"""
order by min() on columns of table "ref_budget_codes"
"""
input ref_budget_codes_min_order_by {
  budget_type_code: order_by
  budget_type_description: order_by
}

"""
response of any mutation on the table "ref_budget_codes"
"""
type ref_budget_codes_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [ref_budget_codes!]!
}

"""
input type for inserting object relation for remote table "ref_budget_codes"
"""
input ref_budget_codes_obj_rel_insert_input {
  data: ref_budget_codes_insert_input!
  on_conflict: ref_budget_codes_on_conflict
}

"""
on conflict condition type for table "ref_budget_codes"
"""
input ref_budget_codes_on_conflict {
  constraint: ref_budget_codes_constraint!
  update_columns: [ref_budget_codes_update_column!]!
  where: ref_budget_codes_bool_exp
}

"""
ordering options when selecting data from "ref_budget_codes"
"""
input ref_budget_codes_order_by {
  budget_type_code: order_by
  budget_type_description: order_by
  documents_with_expenses_aggregate: documents_with_expenses_aggregate_order_by
}

"""
select columns of table "ref_budget_codes"
"""
enum ref_budget_codes_select_column {
  """column name"""
  budget_type_code

  """column name"""
  budget_type_description
}

"""
input type for updating data in table "ref_budget_codes"
"""
input ref_budget_codes_set_input {
  budget_type_code: String
  budget_type_description: String
}

"""
update columns of table "ref_budget_codes"
"""
enum ref_budget_codes_update_column {
  """column name"""
  budget_type_code

  """column name"""
  budget_type_description
}

"""
columns and relationships of "ref_document_types"
"""
type ref_document_types {
  document_type_code: String
  document_type_description: String
  document_type_name: String

  """An array relationship"""
  documents(
    """distinct select on columns"""
    distinct_on: [documents_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [documents_order_by!]

    """filter the rows returned"""
    where: documents_bool_exp
  ): [documents!]!

  """An aggregated array relationship"""
  documents_aggregate(
    """distinct select on columns"""
    distinct_on: [documents_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [documents_order_by!]

    """filter the rows returned"""
    where: documents_bool_exp
  ): documents_aggregate!
}

"""
aggregated selection of "ref_document_types"
"""
type ref_document_types_aggregate {
  aggregate: ref_document_types_aggregate_fields
  nodes: [ref_document_types!]!
}

"""
aggregate fields of "ref_document_types"
"""
type ref_document_types_aggregate_fields {
  count(columns: [ref_document_types_select_column!], distinct: Boolean): Int
  max: ref_document_types_max_fields
  min: ref_document_types_min_fields
}

"""
order by aggregate values of table "ref_document_types"
"""
input ref_document_types_aggregate_order_by {
  count: order_by
  max: ref_document_types_max_order_by
  min: ref_document_types_min_order_by
}

"""
input type for inserting array relation for remote table "ref_document_types"
"""
input ref_document_types_arr_rel_insert_input {
  data: [ref_document_types_insert_input!]!
  on_conflict: ref_document_types_on_conflict
}

"""
Boolean expression to filter rows from the table "ref_document_types". All fields are combined with a logical 'AND'.
"""
input ref_document_types_bool_exp {
  _and: [ref_document_types_bool_exp]
  _not: ref_document_types_bool_exp
  _or: [ref_document_types_bool_exp]
  document_type_code: String_comparison_exp
  document_type_description: String_comparison_exp
  document_type_name: String_comparison_exp
  documents: documents_bool_exp
}

"""
unique or primary key constraints on table "ref_document_types"
"""
enum ref_document_types_constraint {
  """unique or primary key constraint"""
  idx_22949_sqlite_autoindex_ref_document_types_1
}

"""
input type for inserting data into table "ref_document_types"
"""
input ref_document_types_insert_input {
  document_type_code: String
  document_type_description: String
  document_type_name: String
  documents: documents_arr_rel_insert_input
}

"""aggregate max on columns"""
type ref_document_types_max_fields {
  document_type_code: String
  document_type_description: String
  document_type_name: String
}

"""
order by max() on columns of table "ref_document_types"
"""
input ref_document_types_max_order_by {
  document_type_code: order_by
  document_type_description: order_by
  document_type_name: order_by
}

"""aggregate min on columns"""
type ref_document_types_min_fields {
  document_type_code: String
  document_type_description: String
  document_type_name: String
}

"""
order by min() on columns of table "ref_document_types"
"""
input ref_document_types_min_order_by {
  document_type_code: order_by
  document_type_description: order_by
  document_type_name: order_by
}

"""
response of any mutation on the table "ref_document_types"
"""
type ref_document_types_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [ref_document_types!]!
}

"""
input type for inserting object relation for remote table "ref_document_types"
"""
input ref_document_types_obj_rel_insert_input {
  data: ref_document_types_insert_input!
  on_conflict: ref_document_types_on_conflict
}

"""
on conflict condition type for table "ref_document_types"
"""
input ref_document_types_on_conflict {
  constraint: ref_document_types_constraint!
  update_columns: [ref_document_types_update_column!]!
  where: ref_document_types_bool_exp
}

"""
ordering options when selecting data from "ref_document_types"
"""
input ref_document_types_order_by {
  document_type_code: order_by
  document_type_description: order_by
  document_type_name: order_by
  documents_aggregate: documents_aggregate_order_by
}

"""
select columns of table "ref_document_types"
"""
enum ref_document_types_select_column {
  """column name"""
  document_type_code

  """column name"""
  document_type_description

  """column name"""
  document_type_name
}

"""
input type for updating data in table "ref_document_types"
"""
input ref_document_types_set_input {
  document_type_code: String
  document_type_description: String
  document_type_name: String
}

"""
update columns of table "ref_document_types"
"""
enum ref_document_types_update_column {
  """column name"""
  document_type_code

  """column name"""
  document_type_description

  """column name"""
  document_type_name
}

"""
columns and relationships of "statements"
"""
type statements {
  """An array relationship"""
  accounts(
    """distinct select on columns"""
    distinct_on: [accounts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [accounts_order_by!]

    """filter the rows returned"""
    where: accounts_bool_exp
  ): [accounts!]!

  """An aggregated array relationship"""
  accounts_aggregate(
    """distinct select on columns"""
    distinct_on: [accounts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [accounts_order_by!]

    """filter the rows returned"""
    where: accounts_bool_exp
  ): accounts_aggregate!

  """An object relationship"""
  document: documents!
  statement_details: String
  statement_id: bigint!
}

"""
aggregated selection of "statements"
"""
type statements_aggregate {
  aggregate: statements_aggregate_fields
  nodes: [statements!]!
}

"""
aggregate fields of "statements"
"""
type statements_aggregate_fields {
  avg: statements_avg_fields
  count(columns: [statements_select_column!], distinct: Boolean): Int
  max: statements_max_fields
  min: statements_min_fields
  stddev: statements_stddev_fields
  stddev_pop: statements_stddev_pop_fields
  stddev_samp: statements_stddev_samp_fields
  sum: statements_sum_fields
  var_pop: statements_var_pop_fields
  var_samp: statements_var_samp_fields
  variance: statements_variance_fields
}

"""
order by aggregate values of table "statements"
"""
input statements_aggregate_order_by {
  avg: statements_avg_order_by
  count: order_by
  max: statements_max_order_by
  min: statements_min_order_by
  stddev: statements_stddev_order_by
  stddev_pop: statements_stddev_pop_order_by
  stddev_samp: statements_stddev_samp_order_by
  sum: statements_sum_order_by
  var_pop: statements_var_pop_order_by
  var_samp: statements_var_samp_order_by
  variance: statements_variance_order_by
}

"""
input type for inserting array relation for remote table "statements"
"""
input statements_arr_rel_insert_input {
  data: [statements_insert_input!]!
  on_conflict: statements_on_conflict
}

"""aggregate avg on columns"""
type statements_avg_fields {
  statement_id: Float
}

"""
order by avg() on columns of table "statements"
"""
input statements_avg_order_by {
  statement_id: order_by
}

"""
Boolean expression to filter rows from the table "statements". All fields are combined with a logical 'AND'.
"""
input statements_bool_exp {
  _and: [statements_bool_exp]
  _not: statements_bool_exp
  _or: [statements_bool_exp]
  accounts: accounts_bool_exp
  document: documents_bool_exp
  statement_details: String_comparison_exp
  statement_id: bigint_comparison_exp
}

"""
unique or primary key constraints on table "statements"
"""
enum statements_constraint {
  """unique or primary key constraint"""
  idx_22973_statements_pkey
}

"""
input type for incrementing integer column in table "statements"
"""
input statements_inc_input {
  statement_id: bigint
}

"""
input type for inserting data into table "statements"
"""
input statements_insert_input {
  accounts: accounts_arr_rel_insert_input
  document: documents_obj_rel_insert_input
  statement_details: String
  statement_id: bigint
}

"""aggregate max on columns"""
type statements_max_fields {
  statement_details: String
  statement_id: bigint
}

"""
order by max() on columns of table "statements"
"""
input statements_max_order_by {
  statement_details: order_by
  statement_id: order_by
}

"""aggregate min on columns"""
type statements_min_fields {
  statement_details: String
  statement_id: bigint
}

"""
order by min() on columns of table "statements"
"""
input statements_min_order_by {
  statement_details: order_by
  statement_id: order_by
}

"""
response of any mutation on the table "statements"
"""
type statements_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [statements!]!
}

"""
input type for inserting object relation for remote table "statements"
"""
input statements_obj_rel_insert_input {
  data: statements_insert_input!
  on_conflict: statements_on_conflict
}

"""
on conflict condition type for table "statements"
"""
input statements_on_conflict {
  constraint: statements_constraint!
  update_columns: [statements_update_column!]!
  where: statements_bool_exp
}

"""
ordering options when selecting data from "statements"
"""
input statements_order_by {
  accounts_aggregate: accounts_aggregate_order_by
  document: documents_order_by
  statement_details: order_by
  statement_id: order_by
}

"""
primary key columns input for table: "statements"
"""
input statements_pk_columns_input {
  statement_id: bigint!
}

"""
select columns of table "statements"
"""
enum statements_select_column {
  """column name"""
  statement_details

  """column name"""
  statement_id
}

"""
input type for updating data in table "statements"
"""
input statements_set_input {
  statement_details: String
  statement_id: bigint
}

"""aggregate stddev on columns"""
type statements_stddev_fields {
  statement_id: Float
}

"""
order by stddev() on columns of table "statements"
"""
input statements_stddev_order_by {
  statement_id: order_by
}

"""aggregate stddev_pop on columns"""
type statements_stddev_pop_fields {
  statement_id: Float
}

"""
order by stddev_pop() on columns of table "statements"
"""
input statements_stddev_pop_order_by {
  statement_id: order_by
}

"""aggregate stddev_samp on columns"""
type statements_stddev_samp_fields {
  statement_id: Float
}

"""
order by stddev_samp() on columns of table "statements"
"""
input statements_stddev_samp_order_by {
  statement_id: order_by
}

"""aggregate sum on columns"""
type statements_sum_fields {
  statement_id: bigint
}

"""
order by sum() on columns of table "statements"
"""
input statements_sum_order_by {
  statement_id: order_by
}

"""
update columns of table "statements"
"""
enum statements_update_column {
  """column name"""
  statement_details

  """column name"""
  statement_id
}

"""aggregate var_pop on columns"""
type statements_var_pop_fields {
  statement_id: Float
}

"""
order by var_pop() on columns of table "statements"
"""
input statements_var_pop_order_by {
  statement_id: order_by
}

"""aggregate var_samp on columns"""
type statements_var_samp_fields {
  statement_id: Float
}

"""
order by var_samp() on columns of table "statements"
"""
input statements_var_samp_order_by {
  statement_id: order_by
}

"""aggregate variance on columns"""
type statements_variance_fields {
  statement_id: Float
}

"""
order by variance() on columns of table "statements"
"""
input statements_variance_order_by {
  statement_id: order_by
}

"""
expression to compare columns of type String. All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String
  _ilike: String
  _in: [String!]
  _is_null: Boolean
  _like: String
  _lt: String
  _lte: String
  _neq: String
  _nilike: String
  _nin: [String!]
  _nlike: String
  _nsimilar: String
  _similar: String
}

"""subscription root"""
type subscription_root {
  """
  fetch data from the table: "accounts"
  """
  accounts(
    """distinct select on columns"""
    distinct_on: [accounts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [accounts_order_by!]

    """filter the rows returned"""
    where: accounts_bool_exp
  ): [accounts!]!

  """
  fetch aggregated fields from the table: "accounts"
  """
  accounts_aggregate(
    """distinct select on columns"""
    distinct_on: [accounts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [accounts_order_by!]

    """filter the rows returned"""
    where: accounts_bool_exp
  ): accounts_aggregate!

  """fetch data from the table: "accounts" using primary key columns"""
  accounts_by_pk(account_id: bigint!): accounts

  """
  fetch data from the table: "documents"
  """
  documents(
    """distinct select on columns"""
    distinct_on: [documents_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [documents_order_by!]

    """filter the rows returned"""
    where: documents_bool_exp
  ): [documents!]!

  """
  fetch aggregated fields from the table: "documents"
  """
  documents_aggregate(
    """distinct select on columns"""
    distinct_on: [documents_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [documents_order_by!]

    """filter the rows returned"""
    where: documents_bool_exp
  ): documents_aggregate!

  """fetch data from the table: "documents" using primary key columns"""
  documents_by_pk(document_id: bigint!): documents

  """
  fetch data from the table: "documents_with_expenses"
  """
  documents_with_expenses(
    """distinct select on columns"""
    distinct_on: [documents_with_expenses_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [documents_with_expenses_order_by!]

    """filter the rows returned"""
    where: documents_with_expenses_bool_exp
  ): [documents_with_expenses!]!

  """
  fetch aggregated fields from the table: "documents_with_expenses"
  """
  documents_with_expenses_aggregate(
    """distinct select on columns"""
    distinct_on: [documents_with_expenses_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [documents_with_expenses_order_by!]

    """filter the rows returned"""
    where: documents_with_expenses_bool_exp
  ): documents_with_expenses_aggregate!

  """
  fetch data from the table: "documents_with_expenses" using primary key columns
  """
  documents_with_expenses_by_pk(document_id: bigint!): documents_with_expenses

  """
  fetch data from the table: "projects"
  """
  projects(
    """distinct select on columns"""
    distinct_on: [projects_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [projects_order_by!]

    """filter the rows returned"""
    where: projects_bool_exp
  ): [projects!]!

  """
  fetch aggregated fields from the table: "projects"
  """
  projects_aggregate(
    """distinct select on columns"""
    distinct_on: [projects_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [projects_order_by!]

    """filter the rows returned"""
    where: projects_bool_exp
  ): projects_aggregate!

  """fetch data from the table: "projects" using primary key columns"""
  projects_by_pk(project_id: bigint!): projects

  """
  fetch data from the table: "ref_budget_codes"
  """
  ref_budget_codes(
    """distinct select on columns"""
    distinct_on: [ref_budget_codes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [ref_budget_codes_order_by!]

    """filter the rows returned"""
    where: ref_budget_codes_bool_exp
  ): [ref_budget_codes!]!

  """
  fetch aggregated fields from the table: "ref_budget_codes"
  """
  ref_budget_codes_aggregate(
    """distinct select on columns"""
    distinct_on: [ref_budget_codes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [ref_budget_codes_order_by!]

    """filter the rows returned"""
    where: ref_budget_codes_bool_exp
  ): ref_budget_codes_aggregate!

  """
  fetch data from the table: "ref_document_types"
  """
  ref_document_types(
    """distinct select on columns"""
    distinct_on: [ref_document_types_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [ref_document_types_order_by!]

    """filter the rows returned"""
    where: ref_document_types_bool_exp
  ): [ref_document_types!]!

  """
  fetch aggregated fields from the table: "ref_document_types"
  """
  ref_document_types_aggregate(
    """distinct select on columns"""
    distinct_on: [ref_document_types_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [ref_document_types_order_by!]

    """filter the rows returned"""
    where: ref_document_types_bool_exp
  ): ref_document_types_aggregate!

  """
  fetch data from the table: "statements"
  """
  statements(
    """distinct select on columns"""
    distinct_on: [statements_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [statements_order_by!]

    """filter the rows returned"""
    where: statements_bool_exp
  ): [statements!]!

  """
  fetch aggregated fields from the table: "statements"
  """
  statements_aggregate(
    """distinct select on columns"""
    distinct_on: [statements_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [statements_order_by!]

    """filter the rows returned"""
    where: statements_bool_exp
  ): statements_aggregate!

  """fetch data from the table: "statements" using primary key columns"""
  statements_by_pk(statement_id: bigint!): statements
}

scalar timestamptz

"""
expression to compare columns of type timestamptz. All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}
