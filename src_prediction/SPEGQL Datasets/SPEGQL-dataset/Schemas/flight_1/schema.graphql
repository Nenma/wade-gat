schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""
Direct the client to resolve this field locally, either from the cache or local resolvers.
"""
directive @client(
  """
  When true, the client will never use the cache for this value. See
  https://www.apollographql.com/docs/react/essentials/local-state/#forcing-resolvers-with-clientalways-true
  """
  always: Boolean
) on FIELD | FRAGMENT_DEFINITION | INLINE_FRAGMENT

"""
Export this locally resolved field as a variable to be used in the remainder of this query. See
https://www.apollographql.com/docs/react/essentials/local-state/#using-client-fields-as-variables
"""
directive @export(
  """The variable name to export this field as."""
  as: String!
) on FIELD

"""
Specify a custom store key for this result. See
https://www.apollographql.com/docs/react/advanced/caching/#the-connection-directive
"""
directive @connection(
  """Specify the store key."""
  key: String!

  """
  An array of query argument names to include in the generated custom store key.
  """
  filter: [String!]
) on FIELD

"""
columns and relationships of "aircraft"
"""
type aircraft {
  aid: Int

  """An array relationship"""
  certificates(
    """distinct select on columns"""
    distinct_on: [certificate_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [certificate_order_by!]

    """filter the rows returned"""
    where: certificate_bool_exp
  ): [certificate!]!

  """An aggregated array relationship"""
  certificates_aggregate(
    """distinct select on columns"""
    distinct_on: [certificate_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [certificate_order_by!]

    """filter the rows returned"""
    where: certificate_bool_exp
  ): certificate_aggregate!
  distance: Int

  """An array relationship"""
  flights(
    """distinct select on columns"""
    distinct_on: [flight_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [flight_order_by!]

    """filter the rows returned"""
    where: flight_bool_exp
  ): [flight!]!

  """An aggregated array relationship"""
  flights_aggregate(
    """distinct select on columns"""
    distinct_on: [flight_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [flight_order_by!]

    """filter the rows returned"""
    where: flight_bool_exp
  ): flight_aggregate!
  name: String
}

"""
aggregated selection of "aircraft"
"""
type aircraft_aggregate {
  aggregate: aircraft_aggregate_fields
  nodes: [aircraft!]!
}

"""
aggregate fields of "aircraft"
"""
type aircraft_aggregate_fields {
  avg: aircraft_avg_fields
  count(columns: [aircraft_select_column!], distinct: Boolean): Int
  max: aircraft_max_fields
  min: aircraft_min_fields
  stddev: aircraft_stddev_fields
  stddev_pop: aircraft_stddev_pop_fields
  stddev_samp: aircraft_stddev_samp_fields
  sum: aircraft_sum_fields
  var_pop: aircraft_var_pop_fields
  var_samp: aircraft_var_samp_fields
  variance: aircraft_variance_fields
}

"""
order by aggregate values of table "aircraft"
"""
input aircraft_aggregate_order_by {
  avg: aircraft_avg_order_by
  count: order_by
  max: aircraft_max_order_by
  min: aircraft_min_order_by
  stddev: aircraft_stddev_order_by
  stddev_pop: aircraft_stddev_pop_order_by
  stddev_samp: aircraft_stddev_samp_order_by
  sum: aircraft_sum_order_by
  var_pop: aircraft_var_pop_order_by
  var_samp: aircraft_var_samp_order_by
  variance: aircraft_variance_order_by
}

"""
input type for inserting array relation for remote table "aircraft"
"""
input aircraft_arr_rel_insert_input {
  data: [aircraft_insert_input!]!
  on_conflict: aircraft_on_conflict
}

"""aggregate avg on columns"""
type aircraft_avg_fields {
  aid: Float
  distance: Float
}

"""
order by avg() on columns of table "aircraft"
"""
input aircraft_avg_order_by {
  aid: order_by
  distance: order_by
}

"""
Boolean expression to filter rows from the table "aircraft". All fields are combined with a logical 'AND'.
"""
input aircraft_bool_exp {
  _and: [aircraft_bool_exp]
  _not: aircraft_bool_exp
  _or: [aircraft_bool_exp]
  aid: Int_comparison_exp
  certificates: certificate_bool_exp
  distance: Int_comparison_exp
  flights: flight_bool_exp
  name: String_comparison_exp
}

"""
unique or primary key constraints on table "aircraft"
"""
enum aircraft_constraint {
  """unique or primary key constraint"""
  aircraft_aid_key
}

"""
input type for incrementing integer column in table "aircraft"
"""
input aircraft_inc_input {
  aid: Int
  distance: Int
}

"""
input type for inserting data into table "aircraft"
"""
input aircraft_insert_input {
  aid: Int
  certificates: certificate_arr_rel_insert_input
  distance: Int
  flights: flight_arr_rel_insert_input
  name: String
}

"""aggregate max on columns"""
type aircraft_max_fields {
  aid: Int
  distance: Int
  name: String
}

"""
order by max() on columns of table "aircraft"
"""
input aircraft_max_order_by {
  aid: order_by
  distance: order_by
  name: order_by
}

"""aggregate min on columns"""
type aircraft_min_fields {
  aid: Int
  distance: Int
  name: String
}

"""
order by min() on columns of table "aircraft"
"""
input aircraft_min_order_by {
  aid: order_by
  distance: order_by
  name: order_by
}

"""
response of any mutation on the table "aircraft"
"""
type aircraft_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [aircraft!]!
}

"""
input type for inserting object relation for remote table "aircraft"
"""
input aircraft_obj_rel_insert_input {
  data: aircraft_insert_input!
  on_conflict: aircraft_on_conflict
}

"""
on conflict condition type for table "aircraft"
"""
input aircraft_on_conflict {
  constraint: aircraft_constraint!
  update_columns: [aircraft_update_column!]!
  where: aircraft_bool_exp
}

"""
ordering options when selecting data from "aircraft"
"""
input aircraft_order_by {
  aid: order_by
  certificates_aggregate: certificate_aggregate_order_by
  distance: order_by
  flights_aggregate: flight_aggregate_order_by
  name: order_by
}

"""
select columns of table "aircraft"
"""
enum aircraft_select_column {
  """column name"""
  aid

  """column name"""
  distance

  """column name"""
  name
}

"""
input type for updating data in table "aircraft"
"""
input aircraft_set_input {
  aid: Int
  distance: Int
  name: String
}

"""aggregate stddev on columns"""
type aircraft_stddev_fields {
  aid: Float
  distance: Float
}

"""
order by stddev() on columns of table "aircraft"
"""
input aircraft_stddev_order_by {
  aid: order_by
  distance: order_by
}

"""aggregate stddev_pop on columns"""
type aircraft_stddev_pop_fields {
  aid: Float
  distance: Float
}

"""
order by stddev_pop() on columns of table "aircraft"
"""
input aircraft_stddev_pop_order_by {
  aid: order_by
  distance: order_by
}

"""aggregate stddev_samp on columns"""
type aircraft_stddev_samp_fields {
  aid: Float
  distance: Float
}

"""
order by stddev_samp() on columns of table "aircraft"
"""
input aircraft_stddev_samp_order_by {
  aid: order_by
  distance: order_by
}

"""aggregate sum on columns"""
type aircraft_sum_fields {
  aid: Int
  distance: Int
}

"""
order by sum() on columns of table "aircraft"
"""
input aircraft_sum_order_by {
  aid: order_by
  distance: order_by
}

"""
update columns of table "aircraft"
"""
enum aircraft_update_column {
  """column name"""
  aid

  """column name"""
  distance

  """column name"""
  name
}

"""aggregate var_pop on columns"""
type aircraft_var_pop_fields {
  aid: Float
  distance: Float
}

"""
order by var_pop() on columns of table "aircraft"
"""
input aircraft_var_pop_order_by {
  aid: order_by
  distance: order_by
}

"""aggregate var_samp on columns"""
type aircraft_var_samp_fields {
  aid: Float
  distance: Float
}

"""
order by var_samp() on columns of table "aircraft"
"""
input aircraft_var_samp_order_by {
  aid: order_by
  distance: order_by
}

"""aggregate variance on columns"""
type aircraft_variance_fields {
  aid: Float
  distance: Float
}

"""
order by variance() on columns of table "aircraft"
"""
input aircraft_variance_order_by {
  aid: order_by
  distance: order_by
}

"""
columns and relationships of "certificate"
"""
type certificate {
  aid: Int

  """An object relationship"""
  aircraft: aircraft
  eid: Int

  """An object relationship"""
  employee: employee
}

"""
aggregated selection of "certificate"
"""
type certificate_aggregate {
  aggregate: certificate_aggregate_fields
  nodes: [certificate!]!
}

"""
aggregate fields of "certificate"
"""
type certificate_aggregate_fields {
  avg: certificate_avg_fields
  count(columns: [certificate_select_column!], distinct: Boolean): Int
  max: certificate_max_fields
  min: certificate_min_fields
  stddev: certificate_stddev_fields
  stddev_pop: certificate_stddev_pop_fields
  stddev_samp: certificate_stddev_samp_fields
  sum: certificate_sum_fields
  var_pop: certificate_var_pop_fields
  var_samp: certificate_var_samp_fields
  variance: certificate_variance_fields
}

"""
order by aggregate values of table "certificate"
"""
input certificate_aggregate_order_by {
  avg: certificate_avg_order_by
  count: order_by
  max: certificate_max_order_by
  min: certificate_min_order_by
  stddev: certificate_stddev_order_by
  stddev_pop: certificate_stddev_pop_order_by
  stddev_samp: certificate_stddev_samp_order_by
  sum: certificate_sum_order_by
  var_pop: certificate_var_pop_order_by
  var_samp: certificate_var_samp_order_by
  variance: certificate_variance_order_by
}

"""
input type for inserting array relation for remote table "certificate"
"""
input certificate_arr_rel_insert_input {
  data: [certificate_insert_input!]!
}

"""aggregate avg on columns"""
type certificate_avg_fields {
  aid: Float
  eid: Float
}

"""
order by avg() on columns of table "certificate"
"""
input certificate_avg_order_by {
  aid: order_by
  eid: order_by
}

"""
Boolean expression to filter rows from the table "certificate". All fields are combined with a logical 'AND'.
"""
input certificate_bool_exp {
  _and: [certificate_bool_exp]
  _not: certificate_bool_exp
  _or: [certificate_bool_exp]
  aid: Int_comparison_exp
  aircraft: aircraft_bool_exp
  eid: Int_comparison_exp
  employee: employee_bool_exp
}

"""
input type for incrementing integer column in table "certificate"
"""
input certificate_inc_input {
  aid: Int
  eid: Int
}

"""
input type for inserting data into table "certificate"
"""
input certificate_insert_input {
  aid: Int
  aircraft: aircraft_obj_rel_insert_input
  eid: Int
  employee: employee_obj_rel_insert_input
}

"""aggregate max on columns"""
type certificate_max_fields {
  aid: Int
  eid: Int
}

"""
order by max() on columns of table "certificate"
"""
input certificate_max_order_by {
  aid: order_by
  eid: order_by
}

"""aggregate min on columns"""
type certificate_min_fields {
  aid: Int
  eid: Int
}

"""
order by min() on columns of table "certificate"
"""
input certificate_min_order_by {
  aid: order_by
  eid: order_by
}

"""
response of any mutation on the table "certificate"
"""
type certificate_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [certificate!]!
}

"""
input type for inserting object relation for remote table "certificate"
"""
input certificate_obj_rel_insert_input {
  data: certificate_insert_input!
}

"""
ordering options when selecting data from "certificate"
"""
input certificate_order_by {
  aid: order_by
  aircraft: aircraft_order_by
  eid: order_by
  employee: employee_order_by
}

"""
select columns of table "certificate"
"""
enum certificate_select_column {
  """column name"""
  aid

  """column name"""
  eid
}

"""
input type for updating data in table "certificate"
"""
input certificate_set_input {
  aid: Int
  eid: Int
}

"""aggregate stddev on columns"""
type certificate_stddev_fields {
  aid: Float
  eid: Float
}

"""
order by stddev() on columns of table "certificate"
"""
input certificate_stddev_order_by {
  aid: order_by
  eid: order_by
}

"""aggregate stddev_pop on columns"""
type certificate_stddev_pop_fields {
  aid: Float
  eid: Float
}

"""
order by stddev_pop() on columns of table "certificate"
"""
input certificate_stddev_pop_order_by {
  aid: order_by
  eid: order_by
}

"""aggregate stddev_samp on columns"""
type certificate_stddev_samp_fields {
  aid: Float
  eid: Float
}

"""
order by stddev_samp() on columns of table "certificate"
"""
input certificate_stddev_samp_order_by {
  aid: order_by
  eid: order_by
}

"""aggregate sum on columns"""
type certificate_sum_fields {
  aid: Int
  eid: Int
}

"""
order by sum() on columns of table "certificate"
"""
input certificate_sum_order_by {
  aid: order_by
  eid: order_by
}

"""aggregate var_pop on columns"""
type certificate_var_pop_fields {
  aid: Float
  eid: Float
}

"""
order by var_pop() on columns of table "certificate"
"""
input certificate_var_pop_order_by {
  aid: order_by
  eid: order_by
}

"""aggregate var_samp on columns"""
type certificate_var_samp_fields {
  aid: Float
  eid: Float
}

"""
order by var_samp() on columns of table "certificate"
"""
input certificate_var_samp_order_by {
  aid: order_by
  eid: order_by
}

"""aggregate variance on columns"""
type certificate_variance_fields {
  aid: Float
  eid: Float
}

"""
order by variance() on columns of table "certificate"
"""
input certificate_variance_order_by {
  aid: order_by
  eid: order_by
}

"""
columns and relationships of "employee"
"""
type employee {
  """An array relationship"""
  certificates(
    """distinct select on columns"""
    distinct_on: [certificate_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [certificate_order_by!]

    """filter the rows returned"""
    where: certificate_bool_exp
  ): [certificate!]!

  """An aggregated array relationship"""
  certificates_aggregate(
    """distinct select on columns"""
    distinct_on: [certificate_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [certificate_order_by!]

    """filter the rows returned"""
    where: certificate_bool_exp
  ): certificate_aggregate!
  eid: Int
  name: String
  salary: Int
}

"""
aggregated selection of "employee"
"""
type employee_aggregate {
  aggregate: employee_aggregate_fields
  nodes: [employee!]!
}

"""
aggregate fields of "employee"
"""
type employee_aggregate_fields {
  avg: employee_avg_fields
  count(columns: [employee_select_column!], distinct: Boolean): Int
  max: employee_max_fields
  min: employee_min_fields
  stddev: employee_stddev_fields
  stddev_pop: employee_stddev_pop_fields
  stddev_samp: employee_stddev_samp_fields
  sum: employee_sum_fields
  var_pop: employee_var_pop_fields
  var_samp: employee_var_samp_fields
  variance: employee_variance_fields
}

"""
order by aggregate values of table "employee"
"""
input employee_aggregate_order_by {
  avg: employee_avg_order_by
  count: order_by
  max: employee_max_order_by
  min: employee_min_order_by
  stddev: employee_stddev_order_by
  stddev_pop: employee_stddev_pop_order_by
  stddev_samp: employee_stddev_samp_order_by
  sum: employee_sum_order_by
  var_pop: employee_var_pop_order_by
  var_samp: employee_var_samp_order_by
  variance: employee_variance_order_by
}

"""
input type for inserting array relation for remote table "employee"
"""
input employee_arr_rel_insert_input {
  data: [employee_insert_input!]!
  on_conflict: employee_on_conflict
}

"""aggregate avg on columns"""
type employee_avg_fields {
  eid: Float
  salary: Float
}

"""
order by avg() on columns of table "employee"
"""
input employee_avg_order_by {
  eid: order_by
  salary: order_by
}

"""
Boolean expression to filter rows from the table "employee". All fields are combined with a logical 'AND'.
"""
input employee_bool_exp {
  _and: [employee_bool_exp]
  _not: employee_bool_exp
  _or: [employee_bool_exp]
  certificates: certificate_bool_exp
  eid: Int_comparison_exp
  name: String_comparison_exp
  salary: Int_comparison_exp
}

"""
unique or primary key constraints on table "employee"
"""
enum employee_constraint {
  """unique or primary key constraint"""
  employee_eid_key
}

"""
input type for incrementing integer column in table "employee"
"""
input employee_inc_input {
  eid: Int
  salary: Int
}

"""
input type for inserting data into table "employee"
"""
input employee_insert_input {
  certificates: certificate_arr_rel_insert_input
  eid: Int
  name: String
  salary: Int
}

"""aggregate max on columns"""
type employee_max_fields {
  eid: Int
  name: String
  salary: Int
}

"""
order by max() on columns of table "employee"
"""
input employee_max_order_by {
  eid: order_by
  name: order_by
  salary: order_by
}

"""aggregate min on columns"""
type employee_min_fields {
  eid: Int
  name: String
  salary: Int
}

"""
order by min() on columns of table "employee"
"""
input employee_min_order_by {
  eid: order_by
  name: order_by
  salary: order_by
}

"""
response of any mutation on the table "employee"
"""
type employee_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [employee!]!
}

"""
input type for inserting object relation for remote table "employee"
"""
input employee_obj_rel_insert_input {
  data: employee_insert_input!
  on_conflict: employee_on_conflict
}

"""
on conflict condition type for table "employee"
"""
input employee_on_conflict {
  constraint: employee_constraint!
  update_columns: [employee_update_column!]!
  where: employee_bool_exp
}

"""
ordering options when selecting data from "employee"
"""
input employee_order_by {
  certificates_aggregate: certificate_aggregate_order_by
  eid: order_by
  name: order_by
  salary: order_by
}

"""
select columns of table "employee"
"""
enum employee_select_column {
  """column name"""
  eid

  """column name"""
  name

  """column name"""
  salary
}

"""
input type for updating data in table "employee"
"""
input employee_set_input {
  eid: Int
  name: String
  salary: Int
}

"""aggregate stddev on columns"""
type employee_stddev_fields {
  eid: Float
  salary: Float
}

"""
order by stddev() on columns of table "employee"
"""
input employee_stddev_order_by {
  eid: order_by
  salary: order_by
}

"""aggregate stddev_pop on columns"""
type employee_stddev_pop_fields {
  eid: Float
  salary: Float
}

"""
order by stddev_pop() on columns of table "employee"
"""
input employee_stddev_pop_order_by {
  eid: order_by
  salary: order_by
}

"""aggregate stddev_samp on columns"""
type employee_stddev_samp_fields {
  eid: Float
  salary: Float
}

"""
order by stddev_samp() on columns of table "employee"
"""
input employee_stddev_samp_order_by {
  eid: order_by
  salary: order_by
}

"""aggregate sum on columns"""
type employee_sum_fields {
  eid: Int
  salary: Int
}

"""
order by sum() on columns of table "employee"
"""
input employee_sum_order_by {
  eid: order_by
  salary: order_by
}

"""
update columns of table "employee"
"""
enum employee_update_column {
  """column name"""
  eid

  """column name"""
  name

  """column name"""
  salary
}

"""aggregate var_pop on columns"""
type employee_var_pop_fields {
  eid: Float
  salary: Float
}

"""
order by var_pop() on columns of table "employee"
"""
input employee_var_pop_order_by {
  eid: order_by
  salary: order_by
}

"""aggregate var_samp on columns"""
type employee_var_samp_fields {
  eid: Float
  salary: Float
}

"""
order by var_samp() on columns of table "employee"
"""
input employee_var_samp_order_by {
  eid: order_by
  salary: order_by
}

"""aggregate variance on columns"""
type employee_variance_fields {
  eid: Float
  salary: Float
}

"""
order by variance() on columns of table "employee"
"""
input employee_variance_order_by {
  eid: order_by
  salary: order_by
}

"""
columns and relationships of "flight"
"""
type flight {
  aid: Int

  """An object relationship"""
  aircraft: aircraft
  arrival_date: String
  departure_date: String
  destination: String
  distance: Int
  flno: Int
  origin: String
  price: float8
}

"""
aggregated selection of "flight"
"""
type flight_aggregate {
  aggregate: flight_aggregate_fields
  nodes: [flight!]!
}

"""
aggregate fields of "flight"
"""
type flight_aggregate_fields {
  avg: flight_avg_fields
  count(columns: [flight_select_column!], distinct: Boolean): Int
  max: flight_max_fields
  min: flight_min_fields
  stddev: flight_stddev_fields
  stddev_pop: flight_stddev_pop_fields
  stddev_samp: flight_stddev_samp_fields
  sum: flight_sum_fields
  var_pop: flight_var_pop_fields
  var_samp: flight_var_samp_fields
  variance: flight_variance_fields
}

"""
order by aggregate values of table "flight"
"""
input flight_aggregate_order_by {
  avg: flight_avg_order_by
  count: order_by
  max: flight_max_order_by
  min: flight_min_order_by
  stddev: flight_stddev_order_by
  stddev_pop: flight_stddev_pop_order_by
  stddev_samp: flight_stddev_samp_order_by
  sum: flight_sum_order_by
  var_pop: flight_var_pop_order_by
  var_samp: flight_var_samp_order_by
  variance: flight_variance_order_by
}

"""
input type for inserting array relation for remote table "flight"
"""
input flight_arr_rel_insert_input {
  data: [flight_insert_input!]!
  on_conflict: flight_on_conflict
}

"""aggregate avg on columns"""
type flight_avg_fields {
  aid: Float
  distance: Float
  flno: Float
  price: Float
}

"""
order by avg() on columns of table "flight"
"""
input flight_avg_order_by {
  aid: order_by
  distance: order_by
  flno: order_by
  price: order_by
}

"""
Boolean expression to filter rows from the table "flight". All fields are combined with a logical 'AND'.
"""
input flight_bool_exp {
  _and: [flight_bool_exp]
  _not: flight_bool_exp
  _or: [flight_bool_exp]
  aid: Int_comparison_exp
  aircraft: aircraft_bool_exp
  arrival_date: String_comparison_exp
  departure_date: String_comparison_exp
  destination: String_comparison_exp
  distance: Int_comparison_exp
  flno: Int_comparison_exp
  origin: String_comparison_exp
  price: float8_comparison_exp
}

"""
unique or primary key constraints on table "flight"
"""
enum flight_constraint {
  """unique or primary key constraint"""
  flight_flno_key
}

"""
input type for incrementing integer column in table "flight"
"""
input flight_inc_input {
  aid: Int
  distance: Int
  flno: Int
  price: float8
}

"""
input type for inserting data into table "flight"
"""
input flight_insert_input {
  aid: Int
  aircraft: aircraft_obj_rel_insert_input
  arrival_date: String
  departure_date: String
  destination: String
  distance: Int
  flno: Int
  origin: String
  price: float8
}

"""aggregate max on columns"""
type flight_max_fields {
  aid: Int
  arrival_date: String
  departure_date: String
  destination: String
  distance: Int
  flno: Int
  origin: String
  price: float8
}

"""
order by max() on columns of table "flight"
"""
input flight_max_order_by {
  aid: order_by
  arrival_date: order_by
  departure_date: order_by
  destination: order_by
  distance: order_by
  flno: order_by
  origin: order_by
  price: order_by
}

"""aggregate min on columns"""
type flight_min_fields {
  aid: Int
  arrival_date: String
  departure_date: String
  destination: String
  distance: Int
  flno: Int
  origin: String
  price: float8
}

"""
order by min() on columns of table "flight"
"""
input flight_min_order_by {
  aid: order_by
  arrival_date: order_by
  departure_date: order_by
  destination: order_by
  distance: order_by
  flno: order_by
  origin: order_by
  price: order_by
}

"""
response of any mutation on the table "flight"
"""
type flight_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [flight!]!
}

"""
input type for inserting object relation for remote table "flight"
"""
input flight_obj_rel_insert_input {
  data: flight_insert_input!
  on_conflict: flight_on_conflict
}

"""
on conflict condition type for table "flight"
"""
input flight_on_conflict {
  constraint: flight_constraint!
  update_columns: [flight_update_column!]!
  where: flight_bool_exp
}

"""
ordering options when selecting data from "flight"
"""
input flight_order_by {
  aid: order_by
  aircraft: aircraft_order_by
  arrival_date: order_by
  departure_date: order_by
  destination: order_by
  distance: order_by
  flno: order_by
  origin: order_by
  price: order_by
}

"""
select columns of table "flight"
"""
enum flight_select_column {
  """column name"""
  aid

  """column name"""
  arrival_date

  """column name"""
  departure_date

  """column name"""
  destination

  """column name"""
  distance

  """column name"""
  flno

  """column name"""
  origin

  """column name"""
  price
}

"""
input type for updating data in table "flight"
"""
input flight_set_input {
  aid: Int
  arrival_date: String
  departure_date: String
  destination: String
  distance: Int
  flno: Int
  origin: String
  price: float8
}

"""aggregate stddev on columns"""
type flight_stddev_fields {
  aid: Float
  distance: Float
  flno: Float
  price: Float
}

"""
order by stddev() on columns of table "flight"
"""
input flight_stddev_order_by {
  aid: order_by
  distance: order_by
  flno: order_by
  price: order_by
}

"""aggregate stddev_pop on columns"""
type flight_stddev_pop_fields {
  aid: Float
  distance: Float
  flno: Float
  price: Float
}

"""
order by stddev_pop() on columns of table "flight"
"""
input flight_stddev_pop_order_by {
  aid: order_by
  distance: order_by
  flno: order_by
  price: order_by
}

"""aggregate stddev_samp on columns"""
type flight_stddev_samp_fields {
  aid: Float
  distance: Float
  flno: Float
  price: Float
}

"""
order by stddev_samp() on columns of table "flight"
"""
input flight_stddev_samp_order_by {
  aid: order_by
  distance: order_by
  flno: order_by
  price: order_by
}

"""aggregate sum on columns"""
type flight_sum_fields {
  aid: Int
  distance: Int
  flno: Int
  price: float8
}

"""
order by sum() on columns of table "flight"
"""
input flight_sum_order_by {
  aid: order_by
  distance: order_by
  flno: order_by
  price: order_by
}

"""
update columns of table "flight"
"""
enum flight_update_column {
  """column name"""
  aid

  """column name"""
  arrival_date

  """column name"""
  departure_date

  """column name"""
  destination

  """column name"""
  distance

  """column name"""
  flno

  """column name"""
  origin

  """column name"""
  price
}

"""aggregate var_pop on columns"""
type flight_var_pop_fields {
  aid: Float
  distance: Float
  flno: Float
  price: Float
}

"""
order by var_pop() on columns of table "flight"
"""
input flight_var_pop_order_by {
  aid: order_by
  distance: order_by
  flno: order_by
  price: order_by
}

"""aggregate var_samp on columns"""
type flight_var_samp_fields {
  aid: Float
  distance: Float
  flno: Float
  price: Float
}

"""
order by var_samp() on columns of table "flight"
"""
input flight_var_samp_order_by {
  aid: order_by
  distance: order_by
  flno: order_by
  price: order_by
}

"""aggregate variance on columns"""
type flight_variance_fields {
  aid: Float
  distance: Float
  flno: Float
  price: Float
}

"""
order by variance() on columns of table "flight"
"""
input flight_variance_order_by {
  aid: order_by
  distance: order_by
  flno: order_by
  price: order_by
}

scalar float8

"""
expression to compare columns of type float8. All fields are combined with logical 'AND'.
"""
input float8_comparison_exp {
  _eq: float8
  _gt: float8
  _gte: float8
  _in: [float8!]
  _is_null: Boolean
  _lt: float8
  _lte: float8
  _neq: float8
  _nin: [float8!]
}

"""
expression to compare columns of type Int. All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "aircraft"
  """
  delete_aircraft(
    """filter the rows which have to be deleted"""
    where: aircraft_bool_exp!
  ): aircraft_mutation_response

  """
  delete data from the table: "certificate"
  """
  delete_certificate(
    """filter the rows which have to be deleted"""
    where: certificate_bool_exp!
  ): certificate_mutation_response

  """
  delete data from the table: "employee"
  """
  delete_employee(
    """filter the rows which have to be deleted"""
    where: employee_bool_exp!
  ): employee_mutation_response

  """
  delete data from the table: "flight"
  """
  delete_flight(
    """filter the rows which have to be deleted"""
    where: flight_bool_exp!
  ): flight_mutation_response

  """
  insert data into the table: "aircraft"
  """
  insert_aircraft(
    """the rows to be inserted"""
    objects: [aircraft_insert_input!]!

    """on conflict condition"""
    on_conflict: aircraft_on_conflict
  ): aircraft_mutation_response

  """
  insert a single row into the table: "aircraft"
  """
  insert_aircraft_one(
    """the row to be inserted"""
    object: aircraft_insert_input!

    """on conflict condition"""
    on_conflict: aircraft_on_conflict
  ): aircraft

  """
  insert data into the table: "certificate"
  """
  insert_certificate(
    """the rows to be inserted"""
    objects: [certificate_insert_input!]!
  ): certificate_mutation_response

  """
  insert a single row into the table: "certificate"
  """
  insert_certificate_one(
    """the row to be inserted"""
    object: certificate_insert_input!
  ): certificate

  """
  insert data into the table: "employee"
  """
  insert_employee(
    """the rows to be inserted"""
    objects: [employee_insert_input!]!

    """on conflict condition"""
    on_conflict: employee_on_conflict
  ): employee_mutation_response

  """
  insert a single row into the table: "employee"
  """
  insert_employee_one(
    """the row to be inserted"""
    object: employee_insert_input!

    """on conflict condition"""
    on_conflict: employee_on_conflict
  ): employee

  """
  insert data into the table: "flight"
  """
  insert_flight(
    """the rows to be inserted"""
    objects: [flight_insert_input!]!

    """on conflict condition"""
    on_conflict: flight_on_conflict
  ): flight_mutation_response

  """
  insert a single row into the table: "flight"
  """
  insert_flight_one(
    """the row to be inserted"""
    object: flight_insert_input!

    """on conflict condition"""
    on_conflict: flight_on_conflict
  ): flight

  """
  update data of the table: "aircraft"
  """
  update_aircraft(
    """increments the integer columns with given value of the filtered values"""
    _inc: aircraft_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: aircraft_set_input

    """filter the rows which have to be updated"""
    where: aircraft_bool_exp!
  ): aircraft_mutation_response

  """
  update data of the table: "certificate"
  """
  update_certificate(
    """increments the integer columns with given value of the filtered values"""
    _inc: certificate_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: certificate_set_input

    """filter the rows which have to be updated"""
    where: certificate_bool_exp!
  ): certificate_mutation_response

  """
  update data of the table: "employee"
  """
  update_employee(
    """increments the integer columns with given value of the filtered values"""
    _inc: employee_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: employee_set_input

    """filter the rows which have to be updated"""
    where: employee_bool_exp!
  ): employee_mutation_response

  """
  update data of the table: "flight"
  """
  update_flight(
    """increments the integer columns with given value of the filtered values"""
    _inc: flight_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: flight_set_input

    """filter the rows which have to be updated"""
    where: flight_bool_exp!
  ): flight_mutation_response
}

"""column ordering options"""
enum order_by {
  """in the ascending order, nulls last"""
  asc

  """in the ascending order, nulls first"""
  asc_nulls_first

  """in the ascending order, nulls last"""
  asc_nulls_last

  """in the descending order, nulls first"""
  desc

  """in the descending order, nulls first"""
  desc_nulls_first

  """in the descending order, nulls last"""
  desc_nulls_last
}

"""query root"""
type query_root {
  """
  fetch data from the table: "aircraft"
  """
  aircraft(
    """distinct select on columns"""
    distinct_on: [aircraft_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [aircraft_order_by!]

    """filter the rows returned"""
    where: aircraft_bool_exp
  ): [aircraft!]!

  """
  fetch aggregated fields from the table: "aircraft"
  """
  aircraft_aggregate(
    """distinct select on columns"""
    distinct_on: [aircraft_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [aircraft_order_by!]

    """filter the rows returned"""
    where: aircraft_bool_exp
  ): aircraft_aggregate!

  """
  fetch data from the table: "certificate"
  """
  certificate(
    """distinct select on columns"""
    distinct_on: [certificate_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [certificate_order_by!]

    """filter the rows returned"""
    where: certificate_bool_exp
  ): [certificate!]!

  """
  fetch aggregated fields from the table: "certificate"
  """
  certificate_aggregate(
    """distinct select on columns"""
    distinct_on: [certificate_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [certificate_order_by!]

    """filter the rows returned"""
    where: certificate_bool_exp
  ): certificate_aggregate!

  """
  fetch data from the table: "employee"
  """
  employee(
    """distinct select on columns"""
    distinct_on: [employee_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [employee_order_by!]

    """filter the rows returned"""
    where: employee_bool_exp
  ): [employee!]!

  """
  fetch aggregated fields from the table: "employee"
  """
  employee_aggregate(
    """distinct select on columns"""
    distinct_on: [employee_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [employee_order_by!]

    """filter the rows returned"""
    where: employee_bool_exp
  ): employee_aggregate!

  """
  fetch data from the table: "flight"
  """
  flight(
    """distinct select on columns"""
    distinct_on: [flight_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [flight_order_by!]

    """filter the rows returned"""
    where: flight_bool_exp
  ): [flight!]!

  """
  fetch aggregated fields from the table: "flight"
  """
  flight_aggregate(
    """distinct select on columns"""
    distinct_on: [flight_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [flight_order_by!]

    """filter the rows returned"""
    where: flight_bool_exp
  ): flight_aggregate!
}

"""
expression to compare columns of type String. All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String
  _ilike: String
  _in: [String!]
  _is_null: Boolean
  _like: String
  _lt: String
  _lte: String
  _neq: String
  _nilike: String
  _nin: [String!]
  _nlike: String
  _nsimilar: String
  _similar: String
}

"""subscription root"""
type subscription_root {
  """
  fetch data from the table: "aircraft"
  """
  aircraft(
    """distinct select on columns"""
    distinct_on: [aircraft_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [aircraft_order_by!]

    """filter the rows returned"""
    where: aircraft_bool_exp
  ): [aircraft!]!

  """
  fetch aggregated fields from the table: "aircraft"
  """
  aircraft_aggregate(
    """distinct select on columns"""
    distinct_on: [aircraft_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [aircraft_order_by!]

    """filter the rows returned"""
    where: aircraft_bool_exp
  ): aircraft_aggregate!

  """
  fetch data from the table: "certificate"
  """
  certificate(
    """distinct select on columns"""
    distinct_on: [certificate_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [certificate_order_by!]

    """filter the rows returned"""
    where: certificate_bool_exp
  ): [certificate!]!

  """
  fetch aggregated fields from the table: "certificate"
  """
  certificate_aggregate(
    """distinct select on columns"""
    distinct_on: [certificate_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [certificate_order_by!]

    """filter the rows returned"""
    where: certificate_bool_exp
  ): certificate_aggregate!

  """
  fetch data from the table: "employee"
  """
  employee(
    """distinct select on columns"""
    distinct_on: [employee_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [employee_order_by!]

    """filter the rows returned"""
    where: employee_bool_exp
  ): [employee!]!

  """
  fetch aggregated fields from the table: "employee"
  """
  employee_aggregate(
    """distinct select on columns"""
    distinct_on: [employee_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [employee_order_by!]

    """filter the rows returned"""
    where: employee_bool_exp
  ): employee_aggregate!

  """
  fetch data from the table: "flight"
  """
  flight(
    """distinct select on columns"""
    distinct_on: [flight_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [flight_order_by!]

    """filter the rows returned"""
    where: flight_bool_exp
  ): [flight!]!

  """
  fetch aggregated fields from the table: "flight"
  """
  flight_aggregate(
    """distinct select on columns"""
    distinct_on: [flight_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [flight_order_by!]

    """filter the rows returned"""
    where: flight_bool_exp
  ): flight_aggregate!
}
