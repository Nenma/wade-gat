schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""
Direct the client to resolve this field locally, either from the cache or local resolvers.
"""
directive @client(
  """
  When true, the client will never use the cache for this value. See
  https://www.apollographql.com/docs/react/essentials/local-state/#forcing-resolvers-with-clientalways-true
  """
  always: Boolean
) on FIELD | FRAGMENT_DEFINITION | INLINE_FRAGMENT

"""
Export this locally resolved field as a variable to be used in the remainder of this query. See
https://www.apollographql.com/docs/react/essentials/local-state/#using-client-fields-as-variables
"""
directive @export(
  """The variable name to export this field as."""
  as: String!
) on FIELD

"""
Specify a custom store key for this result. See
https://www.apollographql.com/docs/react/advanced/caching/#the-connection-directive
"""
directive @connection(
  """Specify the store key."""
  key: String!

  """
  An array of query argument names to include in the generated custom store key.
  """
  filter: [String!]
) on FIELD

"""
columns and relationships of "friend"
"""
type friend {
  friend_id: Int!

  """An object relationship"""
  highschooler: highschooler!

  """An object relationship"""
  highschoolerByStudentId: highschooler!
  student_id: Int!
}

"""
aggregated selection of "friend"
"""
type friend_aggregate {
  aggregate: friend_aggregate_fields
  nodes: [friend!]!
}

"""
aggregate fields of "friend"
"""
type friend_aggregate_fields {
  avg: friend_avg_fields
  count(columns: [friend_select_column!], distinct: Boolean): Int
  max: friend_max_fields
  min: friend_min_fields
  stddev: friend_stddev_fields
  stddev_pop: friend_stddev_pop_fields
  stddev_samp: friend_stddev_samp_fields
  sum: friend_sum_fields
  var_pop: friend_var_pop_fields
  var_samp: friend_var_samp_fields
  variance: friend_variance_fields
}

"""
order by aggregate values of table "friend"
"""
input friend_aggregate_order_by {
  avg: friend_avg_order_by
  count: order_by
  max: friend_max_order_by
  min: friend_min_order_by
  stddev: friend_stddev_order_by
  stddev_pop: friend_stddev_pop_order_by
  stddev_samp: friend_stddev_samp_order_by
  sum: friend_sum_order_by
  var_pop: friend_var_pop_order_by
  var_samp: friend_var_samp_order_by
  variance: friend_variance_order_by
}

"""
input type for inserting array relation for remote table "friend"
"""
input friend_arr_rel_insert_input {
  data: [friend_insert_input!]!
  on_conflict: friend_on_conflict
}

"""aggregate avg on columns"""
type friend_avg_fields {
  friend_id: Float
  student_id: Float
}

"""
order by avg() on columns of table "friend"
"""
input friend_avg_order_by {
  friend_id: order_by
  student_id: order_by
}

"""
Boolean expression to filter rows from the table "friend". All fields are combined with a logical 'AND'.
"""
input friend_bool_exp {
  _and: [friend_bool_exp]
  _not: friend_bool_exp
  _or: [friend_bool_exp]
  friend_id: Int_comparison_exp
  highschooler: highschooler_bool_exp
  highschoolerByStudentId: highschooler_bool_exp
  student_id: Int_comparison_exp
}

"""
unique or primary key constraints on table "friend"
"""
enum friend_constraint {
  """unique or primary key constraint"""
  idx_23616_sqlite_autoindex_friend_1
}

"""
input type for incrementing integer column in table "friend"
"""
input friend_inc_input {
  friend_id: Int
  student_id: Int
}

"""
input type for inserting data into table "friend"
"""
input friend_insert_input {
  friend_id: Int
  highschooler: highschooler_obj_rel_insert_input
  highschoolerByStudentId: highschooler_obj_rel_insert_input
  student_id: Int
}

"""aggregate max on columns"""
type friend_max_fields {
  friend_id: Int
  student_id: Int
}

"""
order by max() on columns of table "friend"
"""
input friend_max_order_by {
  friend_id: order_by
  student_id: order_by
}

"""aggregate min on columns"""
type friend_min_fields {
  friend_id: Int
  student_id: Int
}

"""
order by min() on columns of table "friend"
"""
input friend_min_order_by {
  friend_id: order_by
  student_id: order_by
}

"""
response of any mutation on the table "friend"
"""
type friend_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [friend!]!
}

"""
input type for inserting object relation for remote table "friend"
"""
input friend_obj_rel_insert_input {
  data: friend_insert_input!
  on_conflict: friend_on_conflict
}

"""
on conflict condition type for table "friend"
"""
input friend_on_conflict {
  constraint: friend_constraint!
  update_columns: [friend_update_column!]!
  where: friend_bool_exp
}

"""
ordering options when selecting data from "friend"
"""
input friend_order_by {
  friend_id: order_by
  highschooler: highschooler_order_by
  highschoolerByStudentId: highschooler_order_by
  student_id: order_by
}

"""
primary key columns input for table: "friend"
"""
input friend_pk_columns_input {
  friend_id: Int!
  student_id: Int!
}

"""
select columns of table "friend"
"""
enum friend_select_column {
  """column name"""
  friend_id

  """column name"""
  student_id
}

"""
input type for updating data in table "friend"
"""
input friend_set_input {
  friend_id: Int
  student_id: Int
}

"""aggregate stddev on columns"""
type friend_stddev_fields {
  friend_id: Float
  student_id: Float
}

"""
order by stddev() on columns of table "friend"
"""
input friend_stddev_order_by {
  friend_id: order_by
  student_id: order_by
}

"""aggregate stddev_pop on columns"""
type friend_stddev_pop_fields {
  friend_id: Float
  student_id: Float
}

"""
order by stddev_pop() on columns of table "friend"
"""
input friend_stddev_pop_order_by {
  friend_id: order_by
  student_id: order_by
}

"""aggregate stddev_samp on columns"""
type friend_stddev_samp_fields {
  friend_id: Float
  student_id: Float
}

"""
order by stddev_samp() on columns of table "friend"
"""
input friend_stddev_samp_order_by {
  friend_id: order_by
  student_id: order_by
}

"""aggregate sum on columns"""
type friend_sum_fields {
  friend_id: Int
  student_id: Int
}

"""
order by sum() on columns of table "friend"
"""
input friend_sum_order_by {
  friend_id: order_by
  student_id: order_by
}

"""
update columns of table "friend"
"""
enum friend_update_column {
  """column name"""
  friend_id

  """column name"""
  student_id
}

"""aggregate var_pop on columns"""
type friend_var_pop_fields {
  friend_id: Float
  student_id: Float
}

"""
order by var_pop() on columns of table "friend"
"""
input friend_var_pop_order_by {
  friend_id: order_by
  student_id: order_by
}

"""aggregate var_samp on columns"""
type friend_var_samp_fields {
  friend_id: Float
  student_id: Float
}

"""
order by var_samp() on columns of table "friend"
"""
input friend_var_samp_order_by {
  friend_id: order_by
  student_id: order_by
}

"""aggregate variance on columns"""
type friend_variance_fields {
  friend_id: Float
  student_id: Float
}

"""
order by variance() on columns of table "friend"
"""
input friend_variance_order_by {
  friend_id: order_by
  student_id: order_by
}

"""
columns and relationships of "highschooler"
"""
type highschooler {
  """An array relationship"""
  friends(
    """distinct select on columns"""
    distinct_on: [friend_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [friend_order_by!]

    """filter the rows returned"""
    where: friend_bool_exp
  ): [friend!]!

  """An array relationship"""
  friendsByStudentId(
    """distinct select on columns"""
    distinct_on: [friend_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [friend_order_by!]

    """filter the rows returned"""
    where: friend_bool_exp
  ): [friend!]!

  """An aggregated array relationship"""
  friendsByStudentId_aggregate(
    """distinct select on columns"""
    distinct_on: [friend_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [friend_order_by!]

    """filter the rows returned"""
    where: friend_bool_exp
  ): friend_aggregate!

  """An aggregated array relationship"""
  friends_aggregate(
    """distinct select on columns"""
    distinct_on: [friend_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [friend_order_by!]

    """filter the rows returned"""
    where: friend_bool_exp
  ): friend_aggregate!
  grade: Int
  id: Int

  """An array relationship"""
  likes(
    """distinct select on columns"""
    distinct_on: [likes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [likes_order_by!]

    """filter the rows returned"""
    where: likes_bool_exp
  ): [likes!]!

  """An array relationship"""
  likesByLikedId(
    """distinct select on columns"""
    distinct_on: [likes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [likes_order_by!]

    """filter the rows returned"""
    where: likes_bool_exp
  ): [likes!]!

  """An aggregated array relationship"""
  likesByLikedId_aggregate(
    """distinct select on columns"""
    distinct_on: [likes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [likes_order_by!]

    """filter the rows returned"""
    where: likes_bool_exp
  ): likes_aggregate!

  """An aggregated array relationship"""
  likes_aggregate(
    """distinct select on columns"""
    distinct_on: [likes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [likes_order_by!]

    """filter the rows returned"""
    where: likes_bool_exp
  ): likes_aggregate!
  name: String
}

"""
aggregated selection of "highschooler"
"""
type highschooler_aggregate {
  aggregate: highschooler_aggregate_fields
  nodes: [highschooler!]!
}

"""
aggregate fields of "highschooler"
"""
type highschooler_aggregate_fields {
  avg: highschooler_avg_fields
  count(columns: [highschooler_select_column!], distinct: Boolean): Int
  max: highschooler_max_fields
  min: highschooler_min_fields
  stddev: highschooler_stddev_fields
  stddev_pop: highschooler_stddev_pop_fields
  stddev_samp: highschooler_stddev_samp_fields
  sum: highschooler_sum_fields
  var_pop: highschooler_var_pop_fields
  var_samp: highschooler_var_samp_fields
  variance: highschooler_variance_fields
}

"""
order by aggregate values of table "highschooler"
"""
input highschooler_aggregate_order_by {
  avg: highschooler_avg_order_by
  count: order_by
  max: highschooler_max_order_by
  min: highschooler_min_order_by
  stddev: highschooler_stddev_order_by
  stddev_pop: highschooler_stddev_pop_order_by
  stddev_samp: highschooler_stddev_samp_order_by
  sum: highschooler_sum_order_by
  var_pop: highschooler_var_pop_order_by
  var_samp: highschooler_var_samp_order_by
  variance: highschooler_variance_order_by
}

"""
input type for inserting array relation for remote table "highschooler"
"""
input highschooler_arr_rel_insert_input {
  data: [highschooler_insert_input!]!
  on_conflict: highschooler_on_conflict
}

"""aggregate avg on columns"""
type highschooler_avg_fields {
  grade: Float
  id: Float
}

"""
order by avg() on columns of table "highschooler"
"""
input highschooler_avg_order_by {
  grade: order_by
  id: order_by
}

"""
Boolean expression to filter rows from the table "highschooler". All fields are combined with a logical 'AND'.
"""
input highschooler_bool_exp {
  _and: [highschooler_bool_exp]
  _not: highschooler_bool_exp
  _or: [highschooler_bool_exp]
  friends: friend_bool_exp
  friendsByStudentId: friend_bool_exp
  grade: Int_comparison_exp
  id: Int_comparison_exp
  likes: likes_bool_exp
  likesByLikedId: likes_bool_exp
  name: String_comparison_exp
}

"""
unique or primary key constraints on table "highschooler"
"""
enum highschooler_constraint {
  """unique or primary key constraint"""
  idx_23610_sqlite_autoindex_highschooler_1
}

"""
input type for incrementing integer column in table "highschooler"
"""
input highschooler_inc_input {
  grade: Int
  id: Int
}

"""
input type for inserting data into table "highschooler"
"""
input highschooler_insert_input {
  friends: friend_arr_rel_insert_input
  friendsByStudentId: friend_arr_rel_insert_input
  grade: Int
  id: Int
  likes: likes_arr_rel_insert_input
  likesByLikedId: likes_arr_rel_insert_input
  name: String
}

"""aggregate max on columns"""
type highschooler_max_fields {
  grade: Int
  id: Int
  name: String
}

"""
order by max() on columns of table "highschooler"
"""
input highschooler_max_order_by {
  grade: order_by
  id: order_by
  name: order_by
}

"""aggregate min on columns"""
type highschooler_min_fields {
  grade: Int
  id: Int
  name: String
}

"""
order by min() on columns of table "highschooler"
"""
input highschooler_min_order_by {
  grade: order_by
  id: order_by
  name: order_by
}

"""
response of any mutation on the table "highschooler"
"""
type highschooler_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [highschooler!]!
}

"""
input type for inserting object relation for remote table "highschooler"
"""
input highschooler_obj_rel_insert_input {
  data: highschooler_insert_input!
  on_conflict: highschooler_on_conflict
}

"""
on conflict condition type for table "highschooler"
"""
input highschooler_on_conflict {
  constraint: highschooler_constraint!
  update_columns: [highschooler_update_column!]!
  where: highschooler_bool_exp
}

"""
ordering options when selecting data from "highschooler"
"""
input highschooler_order_by {
  friendsByStudentId_aggregate: friend_aggregate_order_by
  friends_aggregate: friend_aggregate_order_by
  grade: order_by
  id: order_by
  likesByLikedId_aggregate: likes_aggregate_order_by
  likes_aggregate: likes_aggregate_order_by
  name: order_by
}

"""
select columns of table "highschooler"
"""
enum highschooler_select_column {
  """column name"""
  grade

  """column name"""
  id

  """column name"""
  name
}

"""
input type for updating data in table "highschooler"
"""
input highschooler_set_input {
  grade: Int
  id: Int
  name: String
}

"""aggregate stddev on columns"""
type highschooler_stddev_fields {
  grade: Float
  id: Float
}

"""
order by stddev() on columns of table "highschooler"
"""
input highschooler_stddev_order_by {
  grade: order_by
  id: order_by
}

"""aggregate stddev_pop on columns"""
type highschooler_stddev_pop_fields {
  grade: Float
  id: Float
}

"""
order by stddev_pop() on columns of table "highschooler"
"""
input highschooler_stddev_pop_order_by {
  grade: order_by
  id: order_by
}

"""aggregate stddev_samp on columns"""
type highschooler_stddev_samp_fields {
  grade: Float
  id: Float
}

"""
order by stddev_samp() on columns of table "highschooler"
"""
input highschooler_stddev_samp_order_by {
  grade: order_by
  id: order_by
}

"""aggregate sum on columns"""
type highschooler_sum_fields {
  grade: Int
  id: Int
}

"""
order by sum() on columns of table "highschooler"
"""
input highschooler_sum_order_by {
  grade: order_by
  id: order_by
}

"""
update columns of table "highschooler"
"""
enum highschooler_update_column {
  """column name"""
  grade

  """column name"""
  id

  """column name"""
  name
}

"""aggregate var_pop on columns"""
type highschooler_var_pop_fields {
  grade: Float
  id: Float
}

"""
order by var_pop() on columns of table "highschooler"
"""
input highschooler_var_pop_order_by {
  grade: order_by
  id: order_by
}

"""aggregate var_samp on columns"""
type highschooler_var_samp_fields {
  grade: Float
  id: Float
}

"""
order by var_samp() on columns of table "highschooler"
"""
input highschooler_var_samp_order_by {
  grade: order_by
  id: order_by
}

"""aggregate variance on columns"""
type highschooler_variance_fields {
  grade: Float
  id: Float
}

"""
order by variance() on columns of table "highschooler"
"""
input highschooler_variance_order_by {
  grade: order_by
  id: order_by
}

"""
expression to compare columns of type Int. All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""
columns and relationships of "likes"
"""
type likes {
  """An object relationship"""
  highschooler: highschooler!

  """An object relationship"""
  highschoolerByStudentId: highschooler!
  liked_id: Int!
  student_id: Int!
}

"""
aggregated selection of "likes"
"""
type likes_aggregate {
  aggregate: likes_aggregate_fields
  nodes: [likes!]!
}

"""
aggregate fields of "likes"
"""
type likes_aggregate_fields {
  avg: likes_avg_fields
  count(columns: [likes_select_column!], distinct: Boolean): Int
  max: likes_max_fields
  min: likes_min_fields
  stddev: likes_stddev_fields
  stddev_pop: likes_stddev_pop_fields
  stddev_samp: likes_stddev_samp_fields
  sum: likes_sum_fields
  var_pop: likes_var_pop_fields
  var_samp: likes_var_samp_fields
  variance: likes_variance_fields
}

"""
order by aggregate values of table "likes"
"""
input likes_aggregate_order_by {
  avg: likes_avg_order_by
  count: order_by
  max: likes_max_order_by
  min: likes_min_order_by
  stddev: likes_stddev_order_by
  stddev_pop: likes_stddev_pop_order_by
  stddev_samp: likes_stddev_samp_order_by
  sum: likes_sum_order_by
  var_pop: likes_var_pop_order_by
  var_samp: likes_var_samp_order_by
  variance: likes_variance_order_by
}

"""
input type for inserting array relation for remote table "likes"
"""
input likes_arr_rel_insert_input {
  data: [likes_insert_input!]!
  on_conflict: likes_on_conflict
}

"""aggregate avg on columns"""
type likes_avg_fields {
  liked_id: Float
  student_id: Float
}

"""
order by avg() on columns of table "likes"
"""
input likes_avg_order_by {
  liked_id: order_by
  student_id: order_by
}

"""
Boolean expression to filter rows from the table "likes". All fields are combined with a logical 'AND'.
"""
input likes_bool_exp {
  _and: [likes_bool_exp]
  _not: likes_bool_exp
  _or: [likes_bool_exp]
  highschooler: highschooler_bool_exp
  highschoolerByStudentId: highschooler_bool_exp
  liked_id: Int_comparison_exp
  student_id: Int_comparison_exp
}

"""
unique or primary key constraints on table "likes"
"""
enum likes_constraint {
  """unique or primary key constraint"""
  idx_23619_sqlite_autoindex_likes_1
}

"""
input type for incrementing integer column in table "likes"
"""
input likes_inc_input {
  liked_id: Int
  student_id: Int
}

"""
input type for inserting data into table "likes"
"""
input likes_insert_input {
  highschooler: highschooler_obj_rel_insert_input
  highschoolerByStudentId: highschooler_obj_rel_insert_input
  liked_id: Int
  student_id: Int
}

"""aggregate max on columns"""
type likes_max_fields {
  liked_id: Int
  student_id: Int
}

"""
order by max() on columns of table "likes"
"""
input likes_max_order_by {
  liked_id: order_by
  student_id: order_by
}

"""aggregate min on columns"""
type likes_min_fields {
  liked_id: Int
  student_id: Int
}

"""
order by min() on columns of table "likes"
"""
input likes_min_order_by {
  liked_id: order_by
  student_id: order_by
}

"""
response of any mutation on the table "likes"
"""
type likes_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [likes!]!
}

"""
input type for inserting object relation for remote table "likes"
"""
input likes_obj_rel_insert_input {
  data: likes_insert_input!
  on_conflict: likes_on_conflict
}

"""
on conflict condition type for table "likes"
"""
input likes_on_conflict {
  constraint: likes_constraint!
  update_columns: [likes_update_column!]!
  where: likes_bool_exp
}

"""
ordering options when selecting data from "likes"
"""
input likes_order_by {
  highschooler: highschooler_order_by
  highschoolerByStudentId: highschooler_order_by
  liked_id: order_by
  student_id: order_by
}

"""
primary key columns input for table: "likes"
"""
input likes_pk_columns_input {
  liked_id: Int!
  student_id: Int!
}

"""
select columns of table "likes"
"""
enum likes_select_column {
  """column name"""
  liked_id

  """column name"""
  student_id
}

"""
input type for updating data in table "likes"
"""
input likes_set_input {
  liked_id: Int
  student_id: Int
}

"""aggregate stddev on columns"""
type likes_stddev_fields {
  liked_id: Float
  student_id: Float
}

"""
order by stddev() on columns of table "likes"
"""
input likes_stddev_order_by {
  liked_id: order_by
  student_id: order_by
}

"""aggregate stddev_pop on columns"""
type likes_stddev_pop_fields {
  liked_id: Float
  student_id: Float
}

"""
order by stddev_pop() on columns of table "likes"
"""
input likes_stddev_pop_order_by {
  liked_id: order_by
  student_id: order_by
}

"""aggregate stddev_samp on columns"""
type likes_stddev_samp_fields {
  liked_id: Float
  student_id: Float
}

"""
order by stddev_samp() on columns of table "likes"
"""
input likes_stddev_samp_order_by {
  liked_id: order_by
  student_id: order_by
}

"""aggregate sum on columns"""
type likes_sum_fields {
  liked_id: Int
  student_id: Int
}

"""
order by sum() on columns of table "likes"
"""
input likes_sum_order_by {
  liked_id: order_by
  student_id: order_by
}

"""
update columns of table "likes"
"""
enum likes_update_column {
  """column name"""
  liked_id

  """column name"""
  student_id
}

"""aggregate var_pop on columns"""
type likes_var_pop_fields {
  liked_id: Float
  student_id: Float
}

"""
order by var_pop() on columns of table "likes"
"""
input likes_var_pop_order_by {
  liked_id: order_by
  student_id: order_by
}

"""aggregate var_samp on columns"""
type likes_var_samp_fields {
  liked_id: Float
  student_id: Float
}

"""
order by var_samp() on columns of table "likes"
"""
input likes_var_samp_order_by {
  liked_id: order_by
  student_id: order_by
}

"""aggregate variance on columns"""
type likes_variance_fields {
  liked_id: Float
  student_id: Float
}

"""
order by variance() on columns of table "likes"
"""
input likes_variance_order_by {
  liked_id: order_by
  student_id: order_by
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "friend"
  """
  delete_friend(
    """filter the rows which have to be deleted"""
    where: friend_bool_exp!
  ): friend_mutation_response

  """
  delete single row from the table: "friend"
  """
  delete_friend_by_pk(friend_id: Int!, student_id: Int!): friend

  """
  delete data from the table: "highschooler"
  """
  delete_highschooler(
    """filter the rows which have to be deleted"""
    where: highschooler_bool_exp!
  ): highschooler_mutation_response

  """
  delete data from the table: "likes"
  """
  delete_likes(
    """filter the rows which have to be deleted"""
    where: likes_bool_exp!
  ): likes_mutation_response

  """
  delete single row from the table: "likes"
  """
  delete_likes_by_pk(liked_id: Int!, student_id: Int!): likes

  """
  insert data into the table: "friend"
  """
  insert_friend(
    """the rows to be inserted"""
    objects: [friend_insert_input!]!

    """on conflict condition"""
    on_conflict: friend_on_conflict
  ): friend_mutation_response

  """
  insert a single row into the table: "friend"
  """
  insert_friend_one(
    """the row to be inserted"""
    object: friend_insert_input!

    """on conflict condition"""
    on_conflict: friend_on_conflict
  ): friend

  """
  insert data into the table: "highschooler"
  """
  insert_highschooler(
    """the rows to be inserted"""
    objects: [highschooler_insert_input!]!

    """on conflict condition"""
    on_conflict: highschooler_on_conflict
  ): highschooler_mutation_response

  """
  insert a single row into the table: "highschooler"
  """
  insert_highschooler_one(
    """the row to be inserted"""
    object: highschooler_insert_input!

    """on conflict condition"""
    on_conflict: highschooler_on_conflict
  ): highschooler

  """
  insert data into the table: "likes"
  """
  insert_likes(
    """the rows to be inserted"""
    objects: [likes_insert_input!]!

    """on conflict condition"""
    on_conflict: likes_on_conflict
  ): likes_mutation_response

  """
  insert a single row into the table: "likes"
  """
  insert_likes_one(
    """the row to be inserted"""
    object: likes_insert_input!

    """on conflict condition"""
    on_conflict: likes_on_conflict
  ): likes

  """
  update data of the table: "friend"
  """
  update_friend(
    """increments the integer columns with given value of the filtered values"""
    _inc: friend_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: friend_set_input

    """filter the rows which have to be updated"""
    where: friend_bool_exp!
  ): friend_mutation_response

  """
  update single row of the table: "friend"
  """
  update_friend_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: friend_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: friend_set_input
    pk_columns: friend_pk_columns_input!
  ): friend

  """
  update data of the table: "highschooler"
  """
  update_highschooler(
    """increments the integer columns with given value of the filtered values"""
    _inc: highschooler_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: highschooler_set_input

    """filter the rows which have to be updated"""
    where: highschooler_bool_exp!
  ): highschooler_mutation_response

  """
  update data of the table: "likes"
  """
  update_likes(
    """increments the integer columns with given value of the filtered values"""
    _inc: likes_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: likes_set_input

    """filter the rows which have to be updated"""
    where: likes_bool_exp!
  ): likes_mutation_response

  """
  update single row of the table: "likes"
  """
  update_likes_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: likes_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: likes_set_input
    pk_columns: likes_pk_columns_input!
  ): likes
}

"""column ordering options"""
enum order_by {
  """in the ascending order, nulls last"""
  asc

  """in the ascending order, nulls first"""
  asc_nulls_first

  """in the ascending order, nulls last"""
  asc_nulls_last

  """in the descending order, nulls first"""
  desc

  """in the descending order, nulls first"""
  desc_nulls_first

  """in the descending order, nulls last"""
  desc_nulls_last
}

"""query root"""
type query_root {
  """
  fetch data from the table: "friend"
  """
  friend(
    """distinct select on columns"""
    distinct_on: [friend_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [friend_order_by!]

    """filter the rows returned"""
    where: friend_bool_exp
  ): [friend!]!

  """
  fetch aggregated fields from the table: "friend"
  """
  friend_aggregate(
    """distinct select on columns"""
    distinct_on: [friend_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [friend_order_by!]

    """filter the rows returned"""
    where: friend_bool_exp
  ): friend_aggregate!

  """fetch data from the table: "friend" using primary key columns"""
  friend_by_pk(friend_id: Int!, student_id: Int!): friend

  """
  fetch data from the table: "highschooler"
  """
  highschooler(
    """distinct select on columns"""
    distinct_on: [highschooler_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [highschooler_order_by!]

    """filter the rows returned"""
    where: highschooler_bool_exp
  ): [highschooler!]!

  """
  fetch aggregated fields from the table: "highschooler"
  """
  highschooler_aggregate(
    """distinct select on columns"""
    distinct_on: [highschooler_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [highschooler_order_by!]

    """filter the rows returned"""
    where: highschooler_bool_exp
  ): highschooler_aggregate!

  """
  fetch data from the table: "likes"
  """
  likes(
    """distinct select on columns"""
    distinct_on: [likes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [likes_order_by!]

    """filter the rows returned"""
    where: likes_bool_exp
  ): [likes!]!

  """
  fetch aggregated fields from the table: "likes"
  """
  likes_aggregate(
    """distinct select on columns"""
    distinct_on: [likes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [likes_order_by!]

    """filter the rows returned"""
    where: likes_bool_exp
  ): likes_aggregate!

  """fetch data from the table: "likes" using primary key columns"""
  likes_by_pk(liked_id: Int!, student_id: Int!): likes
}

"""
expression to compare columns of type String. All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String
  _ilike: String
  _in: [String!]
  _is_null: Boolean
  _like: String
  _lt: String
  _lte: String
  _neq: String
  _nilike: String
  _nin: [String!]
  _nlike: String
  _nsimilar: String
  _similar: String
}

"""subscription root"""
type subscription_root {
  """
  fetch data from the table: "friend"
  """
  friend(
    """distinct select on columns"""
    distinct_on: [friend_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [friend_order_by!]

    """filter the rows returned"""
    where: friend_bool_exp
  ): [friend!]!

  """
  fetch aggregated fields from the table: "friend"
  """
  friend_aggregate(
    """distinct select on columns"""
    distinct_on: [friend_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [friend_order_by!]

    """filter the rows returned"""
    where: friend_bool_exp
  ): friend_aggregate!

  """fetch data from the table: "friend" using primary key columns"""
  friend_by_pk(friend_id: Int!, student_id: Int!): friend

  """
  fetch data from the table: "highschooler"
  """
  highschooler(
    """distinct select on columns"""
    distinct_on: [highschooler_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [highschooler_order_by!]

    """filter the rows returned"""
    where: highschooler_bool_exp
  ): [highschooler!]!

  """
  fetch aggregated fields from the table: "highschooler"
  """
  highschooler_aggregate(
    """distinct select on columns"""
    distinct_on: [highschooler_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [highschooler_order_by!]

    """filter the rows returned"""
    where: highschooler_bool_exp
  ): highschooler_aggregate!

  """
  fetch data from the table: "likes"
  """
  likes(
    """distinct select on columns"""
    distinct_on: [likes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [likes_order_by!]

    """filter the rows returned"""
    where: likes_bool_exp
  ): [likes!]!

  """
  fetch aggregated fields from the table: "likes"
  """
  likes_aggregate(
    """distinct select on columns"""
    distinct_on: [likes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [likes_order_by!]

    """filter the rows returned"""
    where: likes_bool_exp
  ): likes_aggregate!

  """fetch data from the table: "likes" using primary key columns"""
  likes_by_pk(liked_id: Int!, student_id: Int!): likes
}
