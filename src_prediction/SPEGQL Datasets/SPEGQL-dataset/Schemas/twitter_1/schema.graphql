schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""
Direct the client to resolve this field locally, either from the cache or local resolvers.
"""
directive @client(
  """
  When true, the client will never use the cache for this value. See
  https://www.apollographql.com/docs/react/essentials/local-state/#forcing-resolvers-with-clientalways-true
  """
  always: Boolean
) on FIELD | FRAGMENT_DEFINITION | INLINE_FRAGMENT

"""
Export this locally resolved field as a variable to be used in the remainder of this query. See
https://www.apollographql.com/docs/react/essentials/local-state/#using-client-fields-as-variables
"""
directive @export(
  """The variable name to export this field as."""
  as: String!
) on FIELD

"""
Specify a custom store key for this result. See
https://www.apollographql.com/docs/react/advanced/caching/#the-connection-directive
"""
directive @connection(
  """Specify the store key."""
  key: String!

  """
  An array of query argument names to include in the generated custom store key.
  """
  filter: [String!]
) on FIELD

"""
columns and relationships of "follows"
"""
type follows {
  f1: Int
  f2: Int

  """An object relationship"""
  userProfileByF1: user_profiles

  """An object relationship"""
  userProfileByF2: user_profiles
}

"""
aggregated selection of "follows"
"""
type follows_aggregate {
  aggregate: follows_aggregate_fields
  nodes: [follows!]!
}

"""
aggregate fields of "follows"
"""
type follows_aggregate_fields {
  avg: follows_avg_fields
  count(columns: [follows_select_column!], distinct: Boolean): Int
  max: follows_max_fields
  min: follows_min_fields
  stddev: follows_stddev_fields
  stddev_pop: follows_stddev_pop_fields
  stddev_samp: follows_stddev_samp_fields
  sum: follows_sum_fields
  var_pop: follows_var_pop_fields
  var_samp: follows_var_samp_fields
  variance: follows_variance_fields
}

"""
order by aggregate values of table "follows"
"""
input follows_aggregate_order_by {
  avg: follows_avg_order_by
  count: order_by
  max: follows_max_order_by
  min: follows_min_order_by
  stddev: follows_stddev_order_by
  stddev_pop: follows_stddev_pop_order_by
  stddev_samp: follows_stddev_samp_order_by
  sum: follows_sum_order_by
  var_pop: follows_var_pop_order_by
  var_samp: follows_var_samp_order_by
  variance: follows_variance_order_by
}

"""
input type for inserting array relation for remote table "follows"
"""
input follows_arr_rel_insert_input {
  data: [follows_insert_input!]!
}

"""aggregate avg on columns"""
type follows_avg_fields {
  f1: Float
  f2: Float
}

"""
order by avg() on columns of table "follows"
"""
input follows_avg_order_by {
  f1: order_by
  f2: order_by
}

"""
Boolean expression to filter rows from the table "follows". All fields are combined with a logical 'AND'.
"""
input follows_bool_exp {
  _and: [follows_bool_exp]
  _not: follows_bool_exp
  _or: [follows_bool_exp]
  f1: Int_comparison_exp
  f2: Int_comparison_exp
  userProfileByF1: user_profiles_bool_exp
  userProfileByF2: user_profiles_bool_exp
}

"""
input type for incrementing integer column in table "follows"
"""
input follows_inc_input {
  f1: Int
  f2: Int
}

"""
input type for inserting data into table "follows"
"""
input follows_insert_input {
  f1: Int
  f2: Int
  userProfileByF1: user_profiles_obj_rel_insert_input
  userProfileByF2: user_profiles_obj_rel_insert_input
}

"""aggregate max on columns"""
type follows_max_fields {
  f1: Int
  f2: Int
}

"""
order by max() on columns of table "follows"
"""
input follows_max_order_by {
  f1: order_by
  f2: order_by
}

"""aggregate min on columns"""
type follows_min_fields {
  f1: Int
  f2: Int
}

"""
order by min() on columns of table "follows"
"""
input follows_min_order_by {
  f1: order_by
  f2: order_by
}

"""
response of any mutation on the table "follows"
"""
type follows_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [follows!]!
}

"""
input type for inserting object relation for remote table "follows"
"""
input follows_obj_rel_insert_input {
  data: follows_insert_input!
}

"""
ordering options when selecting data from "follows"
"""
input follows_order_by {
  f1: order_by
  f2: order_by
  userProfileByF1: user_profiles_order_by
  userProfileByF2: user_profiles_order_by
}

"""
select columns of table "follows"
"""
enum follows_select_column {
  """column name"""
  f1

  """column name"""
  f2
}

"""
input type for updating data in table "follows"
"""
input follows_set_input {
  f1: Int
  f2: Int
}

"""aggregate stddev on columns"""
type follows_stddev_fields {
  f1: Float
  f2: Float
}

"""
order by stddev() on columns of table "follows"
"""
input follows_stddev_order_by {
  f1: order_by
  f2: order_by
}

"""aggregate stddev_pop on columns"""
type follows_stddev_pop_fields {
  f1: Float
  f2: Float
}

"""
order by stddev_pop() on columns of table "follows"
"""
input follows_stddev_pop_order_by {
  f1: order_by
  f2: order_by
}

"""aggregate stddev_samp on columns"""
type follows_stddev_samp_fields {
  f1: Float
  f2: Float
}

"""
order by stddev_samp() on columns of table "follows"
"""
input follows_stddev_samp_order_by {
  f1: order_by
  f2: order_by
}

"""aggregate sum on columns"""
type follows_sum_fields {
  f1: Int
  f2: Int
}

"""
order by sum() on columns of table "follows"
"""
input follows_sum_order_by {
  f1: order_by
  f2: order_by
}

"""aggregate var_pop on columns"""
type follows_var_pop_fields {
  f1: Float
  f2: Float
}

"""
order by var_pop() on columns of table "follows"
"""
input follows_var_pop_order_by {
  f1: order_by
  f2: order_by
}

"""aggregate var_samp on columns"""
type follows_var_samp_fields {
  f1: Float
  f2: Float
}

"""
order by var_samp() on columns of table "follows"
"""
input follows_var_samp_order_by {
  f1: order_by
  f2: order_by
}

"""aggregate variance on columns"""
type follows_variance_fields {
  f1: Float
  f2: Float
}

"""
order by variance() on columns of table "follows"
"""
input follows_variance_order_by {
  f1: order_by
  f2: order_by
}

"""
expression to compare columns of type Int. All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "follows"
  """
  delete_follows(
    """filter the rows which have to be deleted"""
    where: follows_bool_exp!
  ): follows_mutation_response

  """
  delete data from the table: "tweets"
  """
  delete_tweets(
    """filter the rows which have to be deleted"""
    where: tweets_bool_exp!
  ): tweets_mutation_response

  """
  delete data from the table: "user_profiles"
  """
  delete_user_profiles(
    """filter the rows which have to be deleted"""
    where: user_profiles_bool_exp!
  ): user_profiles_mutation_response

  """
  insert data into the table: "follows"
  """
  insert_follows(
    """the rows to be inserted"""
    objects: [follows_insert_input!]!
  ): follows_mutation_response

  """
  insert a single row into the table: "follows"
  """
  insert_follows_one(
    """the row to be inserted"""
    object: follows_insert_input!
  ): follows

  """
  insert data into the table: "tweets"
  """
  insert_tweets(
    """the rows to be inserted"""
    objects: [tweets_insert_input!]!

    """on conflict condition"""
    on_conflict: tweets_on_conflict
  ): tweets_mutation_response

  """
  insert a single row into the table: "tweets"
  """
  insert_tweets_one(
    """the row to be inserted"""
    object: tweets_insert_input!

    """on conflict condition"""
    on_conflict: tweets_on_conflict
  ): tweets

  """
  insert data into the table: "user_profiles"
  """
  insert_user_profiles(
    """the rows to be inserted"""
    objects: [user_profiles_insert_input!]!

    """on conflict condition"""
    on_conflict: user_profiles_on_conflict
  ): user_profiles_mutation_response

  """
  insert a single row into the table: "user_profiles"
  """
  insert_user_profiles_one(
    """the row to be inserted"""
    object: user_profiles_insert_input!

    """on conflict condition"""
    on_conflict: user_profiles_on_conflict
  ): user_profiles

  """
  update data of the table: "follows"
  """
  update_follows(
    """increments the integer columns with given value of the filtered values"""
    _inc: follows_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: follows_set_input

    """filter the rows which have to be updated"""
    where: follows_bool_exp!
  ): follows_mutation_response

  """
  update data of the table: "tweets"
  """
  update_tweets(
    """increments the integer columns with given value of the filtered values"""
    _inc: tweets_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: tweets_set_input

    """filter the rows which have to be updated"""
    where: tweets_bool_exp!
  ): tweets_mutation_response

  """
  update data of the table: "user_profiles"
  """
  update_user_profiles(
    """increments the integer columns with given value of the filtered values"""
    _inc: user_profiles_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: user_profiles_set_input

    """filter the rows which have to be updated"""
    where: user_profiles_bool_exp!
  ): user_profiles_mutation_response
}

"""column ordering options"""
enum order_by {
  """in the ascending order, nulls last"""
  asc

  """in the ascending order, nulls first"""
  asc_nulls_first

  """in the ascending order, nulls last"""
  asc_nulls_last

  """in the descending order, nulls first"""
  desc

  """in the descending order, nulls first"""
  desc_nulls_first

  """in the descending order, nulls last"""
  desc_nulls_last
}

"""query root"""
type query_root {
  """
  fetch data from the table: "follows"
  """
  follows(
    """distinct select on columns"""
    distinct_on: [follows_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [follows_order_by!]

    """filter the rows returned"""
    where: follows_bool_exp
  ): [follows!]!

  """
  fetch aggregated fields from the table: "follows"
  """
  follows_aggregate(
    """distinct select on columns"""
    distinct_on: [follows_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [follows_order_by!]

    """filter the rows returned"""
    where: follows_bool_exp
  ): follows_aggregate!

  """
  fetch data from the table: "tweets"
  """
  tweets(
    """distinct select on columns"""
    distinct_on: [tweets_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tweets_order_by!]

    """filter the rows returned"""
    where: tweets_bool_exp
  ): [tweets!]!

  """
  fetch aggregated fields from the table: "tweets"
  """
  tweets_aggregate(
    """distinct select on columns"""
    distinct_on: [tweets_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tweets_order_by!]

    """filter the rows returned"""
    where: tweets_bool_exp
  ): tweets_aggregate!

  """
  fetch data from the table: "user_profiles"
  """
  user_profiles(
    """distinct select on columns"""
    distinct_on: [user_profiles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_profiles_order_by!]

    """filter the rows returned"""
    where: user_profiles_bool_exp
  ): [user_profiles!]!

  """
  fetch aggregated fields from the table: "user_profiles"
  """
  user_profiles_aggregate(
    """distinct select on columns"""
    distinct_on: [user_profiles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_profiles_order_by!]

    """filter the rows returned"""
    where: user_profiles_bool_exp
  ): user_profiles_aggregate!
}

"""
expression to compare columns of type String. All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String
  _ilike: String
  _in: [String!]
  _is_null: Boolean
  _like: String
  _lt: String
  _lte: String
  _neq: String
  _nilike: String
  _nin: [String!]
  _nlike: String
  _nsimilar: String
  _similar: String
}

"""subscription root"""
type subscription_root {
  """
  fetch data from the table: "follows"
  """
  follows(
    """distinct select on columns"""
    distinct_on: [follows_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [follows_order_by!]

    """filter the rows returned"""
    where: follows_bool_exp
  ): [follows!]!

  """
  fetch aggregated fields from the table: "follows"
  """
  follows_aggregate(
    """distinct select on columns"""
    distinct_on: [follows_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [follows_order_by!]

    """filter the rows returned"""
    where: follows_bool_exp
  ): follows_aggregate!

  """
  fetch data from the table: "tweets"
  """
  tweets(
    """distinct select on columns"""
    distinct_on: [tweets_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tweets_order_by!]

    """filter the rows returned"""
    where: tweets_bool_exp
  ): [tweets!]!

  """
  fetch aggregated fields from the table: "tweets"
  """
  tweets_aggregate(
    """distinct select on columns"""
    distinct_on: [tweets_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tweets_order_by!]

    """filter the rows returned"""
    where: tweets_bool_exp
  ): tweets_aggregate!

  """
  fetch data from the table: "user_profiles"
  """
  user_profiles(
    """distinct select on columns"""
    distinct_on: [user_profiles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_profiles_order_by!]

    """filter the rows returned"""
    where: user_profiles_bool_exp
  ): [user_profiles!]!

  """
  fetch aggregated fields from the table: "user_profiles"
  """
  user_profiles_aggregate(
    """distinct select on columns"""
    distinct_on: [user_profiles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_profiles_order_by!]

    """filter the rows returned"""
    where: user_profiles_bool_exp
  ): user_profiles_aggregate!
}

"""
columns and relationships of "tweets"
"""
type tweets {
  createdate: String
  id: Int
  text: String
  uid: Int

  """An object relationship"""
  user_profile: user_profiles
}

"""
aggregated selection of "tweets"
"""
type tweets_aggregate {
  aggregate: tweets_aggregate_fields
  nodes: [tweets!]!
}

"""
aggregate fields of "tweets"
"""
type tweets_aggregate_fields {
  avg: tweets_avg_fields
  count(columns: [tweets_select_column!], distinct: Boolean): Int
  max: tweets_max_fields
  min: tweets_min_fields
  stddev: tweets_stddev_fields
  stddev_pop: tweets_stddev_pop_fields
  stddev_samp: tweets_stddev_samp_fields
  sum: tweets_sum_fields
  var_pop: tweets_var_pop_fields
  var_samp: tweets_var_samp_fields
  variance: tweets_variance_fields
}

"""
order by aggregate values of table "tweets"
"""
input tweets_aggregate_order_by {
  avg: tweets_avg_order_by
  count: order_by
  max: tweets_max_order_by
  min: tweets_min_order_by
  stddev: tweets_stddev_order_by
  stddev_pop: tweets_stddev_pop_order_by
  stddev_samp: tweets_stddev_samp_order_by
  sum: tweets_sum_order_by
  var_pop: tweets_var_pop_order_by
  var_samp: tweets_var_samp_order_by
  variance: tweets_variance_order_by
}

"""
input type for inserting array relation for remote table "tweets"
"""
input tweets_arr_rel_insert_input {
  data: [tweets_insert_input!]!
  on_conflict: tweets_on_conflict
}

"""aggregate avg on columns"""
type tweets_avg_fields {
  id: Float
  uid: Float
}

"""
order by avg() on columns of table "tweets"
"""
input tweets_avg_order_by {
  id: order_by
  uid: order_by
}

"""
Boolean expression to filter rows from the table "tweets". All fields are combined with a logical 'AND'.
"""
input tweets_bool_exp {
  _and: [tweets_bool_exp]
  _not: tweets_bool_exp
  _or: [tweets_bool_exp]
  createdate: String_comparison_exp
  id: Int_comparison_exp
  text: String_comparison_exp
  uid: Int_comparison_exp
  user_profile: user_profiles_bool_exp
}

"""
unique or primary key constraints on table "tweets"
"""
enum tweets_constraint {
  """unique or primary key constraint"""
  tweets_id_key
}

"""
input type for incrementing integer column in table "tweets"
"""
input tweets_inc_input {
  id: Int
  uid: Int
}

"""
input type for inserting data into table "tweets"
"""
input tweets_insert_input {
  createdate: String
  id: Int
  text: String
  uid: Int
  user_profile: user_profiles_obj_rel_insert_input
}

"""aggregate max on columns"""
type tweets_max_fields {
  createdate: String
  id: Int
  text: String
  uid: Int
}

"""
order by max() on columns of table "tweets"
"""
input tweets_max_order_by {
  createdate: order_by
  id: order_by
  text: order_by
  uid: order_by
}

"""aggregate min on columns"""
type tweets_min_fields {
  createdate: String
  id: Int
  text: String
  uid: Int
}

"""
order by min() on columns of table "tweets"
"""
input tweets_min_order_by {
  createdate: order_by
  id: order_by
  text: order_by
  uid: order_by
}

"""
response of any mutation on the table "tweets"
"""
type tweets_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [tweets!]!
}

"""
input type for inserting object relation for remote table "tweets"
"""
input tweets_obj_rel_insert_input {
  data: tweets_insert_input!
  on_conflict: tweets_on_conflict
}

"""
on conflict condition type for table "tweets"
"""
input tweets_on_conflict {
  constraint: tweets_constraint!
  update_columns: [tweets_update_column!]!
  where: tweets_bool_exp
}

"""
ordering options when selecting data from "tweets"
"""
input tweets_order_by {
  createdate: order_by
  id: order_by
  text: order_by
  uid: order_by
  user_profile: user_profiles_order_by
}

"""
select columns of table "tweets"
"""
enum tweets_select_column {
  """column name"""
  createdate

  """column name"""
  id

  """column name"""
  text

  """column name"""
  uid
}

"""
input type for updating data in table "tweets"
"""
input tweets_set_input {
  createdate: String
  id: Int
  text: String
  uid: Int
}

"""aggregate stddev on columns"""
type tweets_stddev_fields {
  id: Float
  uid: Float
}

"""
order by stddev() on columns of table "tweets"
"""
input tweets_stddev_order_by {
  id: order_by
  uid: order_by
}

"""aggregate stddev_pop on columns"""
type tweets_stddev_pop_fields {
  id: Float
  uid: Float
}

"""
order by stddev_pop() on columns of table "tweets"
"""
input tweets_stddev_pop_order_by {
  id: order_by
  uid: order_by
}

"""aggregate stddev_samp on columns"""
type tweets_stddev_samp_fields {
  id: Float
  uid: Float
}

"""
order by stddev_samp() on columns of table "tweets"
"""
input tweets_stddev_samp_order_by {
  id: order_by
  uid: order_by
}

"""aggregate sum on columns"""
type tweets_sum_fields {
  id: Int
  uid: Int
}

"""
order by sum() on columns of table "tweets"
"""
input tweets_sum_order_by {
  id: order_by
  uid: order_by
}

"""
update columns of table "tweets"
"""
enum tweets_update_column {
  """column name"""
  createdate

  """column name"""
  id

  """column name"""
  text

  """column name"""
  uid
}

"""aggregate var_pop on columns"""
type tweets_var_pop_fields {
  id: Float
  uid: Float
}

"""
order by var_pop() on columns of table "tweets"
"""
input tweets_var_pop_order_by {
  id: order_by
  uid: order_by
}

"""aggregate var_samp on columns"""
type tweets_var_samp_fields {
  id: Float
  uid: Float
}

"""
order by var_samp() on columns of table "tweets"
"""
input tweets_var_samp_order_by {
  id: order_by
  uid: order_by
}

"""aggregate variance on columns"""
type tweets_variance_fields {
  id: Float
  uid: Float
}

"""
order by variance() on columns of table "tweets"
"""
input tweets_variance_order_by {
  id: order_by
  uid: order_by
}

"""
columns and relationships of "user_profiles"
"""
type user_profiles {
  email: String
  followers: Int

  """An array relationship"""
  follows(
    """distinct select on columns"""
    distinct_on: [follows_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [follows_order_by!]

    """filter the rows returned"""
    where: follows_bool_exp
  ): [follows!]!

  """An array relationship"""
  followsByF2(
    """distinct select on columns"""
    distinct_on: [follows_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [follows_order_by!]

    """filter the rows returned"""
    where: follows_bool_exp
  ): [follows!]!

  """An aggregated array relationship"""
  followsByF2_aggregate(
    """distinct select on columns"""
    distinct_on: [follows_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [follows_order_by!]

    """filter the rows returned"""
    where: follows_bool_exp
  ): follows_aggregate!

  """An aggregated array relationship"""
  follows_aggregate(
    """distinct select on columns"""
    distinct_on: [follows_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [follows_order_by!]

    """filter the rows returned"""
    where: follows_bool_exp
  ): follows_aggregate!
  name: String
  partitionid: Int

  """An array relationship"""
  tweets(
    """distinct select on columns"""
    distinct_on: [tweets_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tweets_order_by!]

    """filter the rows returned"""
    where: tweets_bool_exp
  ): [tweets!]!

  """An aggregated array relationship"""
  tweets_aggregate(
    """distinct select on columns"""
    distinct_on: [tweets_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tweets_order_by!]

    """filter the rows returned"""
    where: tweets_bool_exp
  ): tweets_aggregate!
  uid: Int
}

"""
aggregated selection of "user_profiles"
"""
type user_profiles_aggregate {
  aggregate: user_profiles_aggregate_fields
  nodes: [user_profiles!]!
}

"""
aggregate fields of "user_profiles"
"""
type user_profiles_aggregate_fields {
  avg: user_profiles_avg_fields
  count(columns: [user_profiles_select_column!], distinct: Boolean): Int
  max: user_profiles_max_fields
  min: user_profiles_min_fields
  stddev: user_profiles_stddev_fields
  stddev_pop: user_profiles_stddev_pop_fields
  stddev_samp: user_profiles_stddev_samp_fields
  sum: user_profiles_sum_fields
  var_pop: user_profiles_var_pop_fields
  var_samp: user_profiles_var_samp_fields
  variance: user_profiles_variance_fields
}

"""
order by aggregate values of table "user_profiles"
"""
input user_profiles_aggregate_order_by {
  avg: user_profiles_avg_order_by
  count: order_by
  max: user_profiles_max_order_by
  min: user_profiles_min_order_by
  stddev: user_profiles_stddev_order_by
  stddev_pop: user_profiles_stddev_pop_order_by
  stddev_samp: user_profiles_stddev_samp_order_by
  sum: user_profiles_sum_order_by
  var_pop: user_profiles_var_pop_order_by
  var_samp: user_profiles_var_samp_order_by
  variance: user_profiles_variance_order_by
}

"""
input type for inserting array relation for remote table "user_profiles"
"""
input user_profiles_arr_rel_insert_input {
  data: [user_profiles_insert_input!]!
  on_conflict: user_profiles_on_conflict
}

"""aggregate avg on columns"""
type user_profiles_avg_fields {
  followers: Float
  partitionid: Float
  uid: Float
}

"""
order by avg() on columns of table "user_profiles"
"""
input user_profiles_avg_order_by {
  followers: order_by
  partitionid: order_by
  uid: order_by
}

"""
Boolean expression to filter rows from the table "user_profiles". All fields are combined with a logical 'AND'.
"""
input user_profiles_bool_exp {
  _and: [user_profiles_bool_exp]
  _not: user_profiles_bool_exp
  _or: [user_profiles_bool_exp]
  email: String_comparison_exp
  followers: Int_comparison_exp
  follows: follows_bool_exp
  followsByF2: follows_bool_exp
  name: String_comparison_exp
  partitionid: Int_comparison_exp
  tweets: tweets_bool_exp
  uid: Int_comparison_exp
}

"""
unique or primary key constraints on table "user_profiles"
"""
enum user_profiles_constraint {
  """unique or primary key constraint"""
  user_profiles_uid_key
}

"""
input type for incrementing integer column in table "user_profiles"
"""
input user_profiles_inc_input {
  followers: Int
  partitionid: Int
  uid: Int
}

"""
input type for inserting data into table "user_profiles"
"""
input user_profiles_insert_input {
  email: String
  followers: Int
  follows: follows_arr_rel_insert_input
  followsByF2: follows_arr_rel_insert_input
  name: String
  partitionid: Int
  tweets: tweets_arr_rel_insert_input
  uid: Int
}

"""aggregate max on columns"""
type user_profiles_max_fields {
  email: String
  followers: Int
  name: String
  partitionid: Int
  uid: Int
}

"""
order by max() on columns of table "user_profiles"
"""
input user_profiles_max_order_by {
  email: order_by
  followers: order_by
  name: order_by
  partitionid: order_by
  uid: order_by
}

"""aggregate min on columns"""
type user_profiles_min_fields {
  email: String
  followers: Int
  name: String
  partitionid: Int
  uid: Int
}

"""
order by min() on columns of table "user_profiles"
"""
input user_profiles_min_order_by {
  email: order_by
  followers: order_by
  name: order_by
  partitionid: order_by
  uid: order_by
}

"""
response of any mutation on the table "user_profiles"
"""
type user_profiles_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [user_profiles!]!
}

"""
input type for inserting object relation for remote table "user_profiles"
"""
input user_profiles_obj_rel_insert_input {
  data: user_profiles_insert_input!
  on_conflict: user_profiles_on_conflict
}

"""
on conflict condition type for table "user_profiles"
"""
input user_profiles_on_conflict {
  constraint: user_profiles_constraint!
  update_columns: [user_profiles_update_column!]!
  where: user_profiles_bool_exp
}

"""
ordering options when selecting data from "user_profiles"
"""
input user_profiles_order_by {
  email: order_by
  followers: order_by
  followsByF2_aggregate: follows_aggregate_order_by
  follows_aggregate: follows_aggregate_order_by
  name: order_by
  partitionid: order_by
  tweets_aggregate: tweets_aggregate_order_by
  uid: order_by
}

"""
select columns of table "user_profiles"
"""
enum user_profiles_select_column {
  """column name"""
  email

  """column name"""
  followers

  """column name"""
  name

  """column name"""
  partitionid

  """column name"""
  uid
}

"""
input type for updating data in table "user_profiles"
"""
input user_profiles_set_input {
  email: String
  followers: Int
  name: String
  partitionid: Int
  uid: Int
}

"""aggregate stddev on columns"""
type user_profiles_stddev_fields {
  followers: Float
  partitionid: Float
  uid: Float
}

"""
order by stddev() on columns of table "user_profiles"
"""
input user_profiles_stddev_order_by {
  followers: order_by
  partitionid: order_by
  uid: order_by
}

"""aggregate stddev_pop on columns"""
type user_profiles_stddev_pop_fields {
  followers: Float
  partitionid: Float
  uid: Float
}

"""
order by stddev_pop() on columns of table "user_profiles"
"""
input user_profiles_stddev_pop_order_by {
  followers: order_by
  partitionid: order_by
  uid: order_by
}

"""aggregate stddev_samp on columns"""
type user_profiles_stddev_samp_fields {
  followers: Float
  partitionid: Float
  uid: Float
}

"""
order by stddev_samp() on columns of table "user_profiles"
"""
input user_profiles_stddev_samp_order_by {
  followers: order_by
  partitionid: order_by
  uid: order_by
}

"""aggregate sum on columns"""
type user_profiles_sum_fields {
  followers: Int
  partitionid: Int
  uid: Int
}

"""
order by sum() on columns of table "user_profiles"
"""
input user_profiles_sum_order_by {
  followers: order_by
  partitionid: order_by
  uid: order_by
}

"""
update columns of table "user_profiles"
"""
enum user_profiles_update_column {
  """column name"""
  email

  """column name"""
  followers

  """column name"""
  name

  """column name"""
  partitionid

  """column name"""
  uid
}

"""aggregate var_pop on columns"""
type user_profiles_var_pop_fields {
  followers: Float
  partitionid: Float
  uid: Float
}

"""
order by var_pop() on columns of table "user_profiles"
"""
input user_profiles_var_pop_order_by {
  followers: order_by
  partitionid: order_by
  uid: order_by
}

"""aggregate var_samp on columns"""
type user_profiles_var_samp_fields {
  followers: Float
  partitionid: Float
  uid: Float
}

"""
order by var_samp() on columns of table "user_profiles"
"""
input user_profiles_var_samp_order_by {
  followers: order_by
  partitionid: order_by
  uid: order_by
}

"""aggregate variance on columns"""
type user_profiles_variance_fields {
  followers: Float
  partitionid: Float
  uid: Float
}

"""
order by variance() on columns of table "user_profiles"
"""
input user_profiles_variance_order_by {
  followers: order_by
  partitionid: order_by
  uid: order_by
}
