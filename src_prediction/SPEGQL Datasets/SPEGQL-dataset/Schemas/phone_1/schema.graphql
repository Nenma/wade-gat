schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""
Direct the client to resolve this field locally, either from the cache or local resolvers.
"""
directive @client(
  """
  When true, the client will never use the cache for this value. See
  https://www.apollographql.com/docs/react/essentials/local-state/#forcing-resolvers-with-clientalways-true
  """
  always: Boolean
) on FIELD | FRAGMENT_DEFINITION | INLINE_FRAGMENT

"""
Export this locally resolved field as a variable to be used in the remainder of this query. See
https://www.apollographql.com/docs/react/essentials/local-state/#using-client-fields-as-variables
"""
directive @export(
  """The variable name to export this field as."""
  as: String!
) on FIELD

"""
Specify a custom store key for this result. See
https://www.apollographql.com/docs/react/advanced/caching/#the-connection-directive
"""
directive @connection(
  """Specify the store key."""
  key: String!

  """
  An array of query argument names to include in the generated custom store key.
  """
  filter: [String!]
) on FIELD

"""
columns and relationships of "chip_model"
"""
type chip_model {
  bluetooth: String
  launch_year: Float
  model_name: String

  """An array relationship"""
  phones(
    """distinct select on columns"""
    distinct_on: [phone_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [phone_order_by!]

    """filter the rows returned"""
    where: phone_bool_exp
  ): [phone!]!

  """An aggregated array relationship"""
  phones_aggregate(
    """distinct select on columns"""
    distinct_on: [phone_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [phone_order_by!]

    """filter the rows returned"""
    where: phone_bool_exp
  ): phone_aggregate!
  ram_mib: Float
  rom_mib: Float
  slots: String
  wifi: String
}

"""
aggregated selection of "chip_model"
"""
type chip_model_aggregate {
  aggregate: chip_model_aggregate_fields
  nodes: [chip_model!]!
}

"""
aggregate fields of "chip_model"
"""
type chip_model_aggregate_fields {
  avg: chip_model_avg_fields
  count(columns: [chip_model_select_column!], distinct: Boolean): Int
  max: chip_model_max_fields
  min: chip_model_min_fields
  stddev: chip_model_stddev_fields
  stddev_pop: chip_model_stddev_pop_fields
  stddev_samp: chip_model_stddev_samp_fields
  sum: chip_model_sum_fields
  var_pop: chip_model_var_pop_fields
  var_samp: chip_model_var_samp_fields
  variance: chip_model_variance_fields
}

"""
order by aggregate values of table "chip_model"
"""
input chip_model_aggregate_order_by {
  avg: chip_model_avg_order_by
  count: order_by
  max: chip_model_max_order_by
  min: chip_model_min_order_by
  stddev: chip_model_stddev_order_by
  stddev_pop: chip_model_stddev_pop_order_by
  stddev_samp: chip_model_stddev_samp_order_by
  sum: chip_model_sum_order_by
  var_pop: chip_model_var_pop_order_by
  var_samp: chip_model_var_samp_order_by
  variance: chip_model_variance_order_by
}

"""
input type for inserting array relation for remote table "chip_model"
"""
input chip_model_arr_rel_insert_input {
  data: [chip_model_insert_input!]!
  on_conflict: chip_model_on_conflict
}

"""aggregate avg on columns"""
type chip_model_avg_fields {
  launch_year: Float
  ram_mib: Float
  rom_mib: Float
}

"""
order by avg() on columns of table "chip_model"
"""
input chip_model_avg_order_by {
  launch_year: order_by
  ram_mib: order_by
  rom_mib: order_by
}

"""
Boolean expression to filter rows from the table "chip_model". All fields are combined with a logical 'AND'.
"""
input chip_model_bool_exp {
  _and: [chip_model_bool_exp]
  _not: chip_model_bool_exp
  _or: [chip_model_bool_exp]
  bluetooth: String_comparison_exp
  launch_year: Float_comparison_exp
  model_name: String_comparison_exp
  phones: phone_bool_exp
  ram_mib: Float_comparison_exp
  rom_mib: Float_comparison_exp
  slots: String_comparison_exp
  wifi: String_comparison_exp
}

"""
unique or primary key constraints on table "chip_model"
"""
enum chip_model_constraint {
  """unique or primary key constraint"""
  idx_19234_sqlite_autoindex_chip_model_1
}

"""
input type for incrementing integer column in table "chip_model"
"""
input chip_model_inc_input {
  launch_year: Float
  ram_mib: Float
  rom_mib: Float
}

"""
input type for inserting data into table "chip_model"
"""
input chip_model_insert_input {
  bluetooth: String
  launch_year: Float
  model_name: String
  phones: phone_arr_rel_insert_input
  ram_mib: Float
  rom_mib: Float
  slots: String
  wifi: String
}

"""aggregate max on columns"""
type chip_model_max_fields {
  bluetooth: String
  launch_year: Float
  model_name: String
  ram_mib: Float
  rom_mib: Float
  slots: String
  wifi: String
}

"""
order by max() on columns of table "chip_model"
"""
input chip_model_max_order_by {
  bluetooth: order_by
  launch_year: order_by
  model_name: order_by
  ram_mib: order_by
  rom_mib: order_by
  slots: order_by
  wifi: order_by
}

"""aggregate min on columns"""
type chip_model_min_fields {
  bluetooth: String
  launch_year: Float
  model_name: String
  ram_mib: Float
  rom_mib: Float
  slots: String
  wifi: String
}

"""
order by min() on columns of table "chip_model"
"""
input chip_model_min_order_by {
  bluetooth: order_by
  launch_year: order_by
  model_name: order_by
  ram_mib: order_by
  rom_mib: order_by
  slots: order_by
  wifi: order_by
}

"""
response of any mutation on the table "chip_model"
"""
type chip_model_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [chip_model!]!
}

"""
input type for inserting object relation for remote table "chip_model"
"""
input chip_model_obj_rel_insert_input {
  data: chip_model_insert_input!
  on_conflict: chip_model_on_conflict
}

"""
on conflict condition type for table "chip_model"
"""
input chip_model_on_conflict {
  constraint: chip_model_constraint!
  update_columns: [chip_model_update_column!]!
  where: chip_model_bool_exp
}

"""
ordering options when selecting data from "chip_model"
"""
input chip_model_order_by {
  bluetooth: order_by
  launch_year: order_by
  model_name: order_by
  phones_aggregate: phone_aggregate_order_by
  ram_mib: order_by
  rom_mib: order_by
  slots: order_by
  wifi: order_by
}

"""
select columns of table "chip_model"
"""
enum chip_model_select_column {
  """column name"""
  bluetooth

  """column name"""
  launch_year

  """column name"""
  model_name

  """column name"""
  ram_mib

  """column name"""
  rom_mib

  """column name"""
  slots

  """column name"""
  wifi
}

"""
input type for updating data in table "chip_model"
"""
input chip_model_set_input {
  bluetooth: String
  launch_year: Float
  model_name: String
  ram_mib: Float
  rom_mib: Float
  slots: String
  wifi: String
}

"""aggregate stddev on columns"""
type chip_model_stddev_fields {
  launch_year: Float
  ram_mib: Float
  rom_mib: Float
}

"""
order by stddev() on columns of table "chip_model"
"""
input chip_model_stddev_order_by {
  launch_year: order_by
  ram_mib: order_by
  rom_mib: order_by
}

"""aggregate stddev_pop on columns"""
type chip_model_stddev_pop_fields {
  launch_year: Float
  ram_mib: Float
  rom_mib: Float
}

"""
order by stddev_pop() on columns of table "chip_model"
"""
input chip_model_stddev_pop_order_by {
  launch_year: order_by
  ram_mib: order_by
  rom_mib: order_by
}

"""aggregate stddev_samp on columns"""
type chip_model_stddev_samp_fields {
  launch_year: Float
  ram_mib: Float
  rom_mib: Float
}

"""
order by stddev_samp() on columns of table "chip_model"
"""
input chip_model_stddev_samp_order_by {
  launch_year: order_by
  ram_mib: order_by
  rom_mib: order_by
}

"""aggregate sum on columns"""
type chip_model_sum_fields {
  launch_year: Float
  ram_mib: Float
  rom_mib: Float
}

"""
order by sum() on columns of table "chip_model"
"""
input chip_model_sum_order_by {
  launch_year: order_by
  ram_mib: order_by
  rom_mib: order_by
}

"""
update columns of table "chip_model"
"""
enum chip_model_update_column {
  """column name"""
  bluetooth

  """column name"""
  launch_year

  """column name"""
  model_name

  """column name"""
  ram_mib

  """column name"""
  rom_mib

  """column name"""
  slots

  """column name"""
  wifi
}

"""aggregate var_pop on columns"""
type chip_model_var_pop_fields {
  launch_year: Float
  ram_mib: Float
  rom_mib: Float
}

"""
order by var_pop() on columns of table "chip_model"
"""
input chip_model_var_pop_order_by {
  launch_year: order_by
  ram_mib: order_by
  rom_mib: order_by
}

"""aggregate var_samp on columns"""
type chip_model_var_samp_fields {
  launch_year: Float
  ram_mib: Float
  rom_mib: Float
}

"""
order by var_samp() on columns of table "chip_model"
"""
input chip_model_var_samp_order_by {
  launch_year: order_by
  ram_mib: order_by
  rom_mib: order_by
}

"""aggregate variance on columns"""
type chip_model_variance_fields {
  launch_year: Float
  ram_mib: Float
  rom_mib: Float
}

"""
order by variance() on columns of table "chip_model"
"""
input chip_model_variance_order_by {
  launch_year: order_by
  ram_mib: order_by
  rom_mib: order_by
}

"""
expression to compare columns of type Float. All fields are combined with logical 'AND'.
"""
input Float_comparison_exp {
  _eq: Float
  _gt: Float
  _gte: Float
  _in: [Float!]
  _is_null: Boolean
  _lt: Float
  _lte: Float
  _neq: Float
  _nin: [Float!]
}

"""
expression to compare columns of type Int. All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "chip_model"
  """
  delete_chip_model(
    """filter the rows which have to be deleted"""
    where: chip_model_bool_exp!
  ): chip_model_mutation_response

  """
  delete data from the table: "phone"
  """
  delete_phone(
    """filter the rows which have to be deleted"""
    where: phone_bool_exp!
  ): phone_mutation_response

  """
  delete data from the table: "screen_mode"
  """
  delete_screen_mode(
    """filter the rows which have to be deleted"""
    where: screen_mode_bool_exp!
  ): screen_mode_mutation_response

  """
  delete single row from the table: "screen_mode"
  """
  delete_screen_mode_by_pk(graphics_mode: Int!): screen_mode

  """
  insert data into the table: "chip_model"
  """
  insert_chip_model(
    """the rows to be inserted"""
    objects: [chip_model_insert_input!]!

    """on conflict condition"""
    on_conflict: chip_model_on_conflict
  ): chip_model_mutation_response

  """
  insert a single row into the table: "chip_model"
  """
  insert_chip_model_one(
    """the row to be inserted"""
    object: chip_model_insert_input!

    """on conflict condition"""
    on_conflict: chip_model_on_conflict
  ): chip_model

  """
  insert data into the table: "phone"
  """
  insert_phone(
    """the rows to be inserted"""
    objects: [phone_insert_input!]!

    """on conflict condition"""
    on_conflict: phone_on_conflict
  ): phone_mutation_response

  """
  insert a single row into the table: "phone"
  """
  insert_phone_one(
    """the row to be inserted"""
    object: phone_insert_input!

    """on conflict condition"""
    on_conflict: phone_on_conflict
  ): phone

  """
  insert data into the table: "screen_mode"
  """
  insert_screen_mode(
    """the rows to be inserted"""
    objects: [screen_mode_insert_input!]!

    """on conflict condition"""
    on_conflict: screen_mode_on_conflict
  ): screen_mode_mutation_response

  """
  insert a single row into the table: "screen_mode"
  """
  insert_screen_mode_one(
    """the row to be inserted"""
    object: screen_mode_insert_input!

    """on conflict condition"""
    on_conflict: screen_mode_on_conflict
  ): screen_mode

  """
  update data of the table: "chip_model"
  """
  update_chip_model(
    """increments the integer columns with given value of the filtered values"""
    _inc: chip_model_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: chip_model_set_input

    """filter the rows which have to be updated"""
    where: chip_model_bool_exp!
  ): chip_model_mutation_response

  """
  update data of the table: "phone"
  """
  update_phone(
    """increments the integer columns with given value of the filtered values"""
    _inc: phone_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: phone_set_input

    """filter the rows which have to be updated"""
    where: phone_bool_exp!
  ): phone_mutation_response

  """
  update data of the table: "screen_mode"
  """
  update_screen_mode(
    """increments the integer columns with given value of the filtered values"""
    _inc: screen_mode_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: screen_mode_set_input

    """filter the rows which have to be updated"""
    where: screen_mode_bool_exp!
  ): screen_mode_mutation_response

  """
  update single row of the table: "screen_mode"
  """
  update_screen_mode_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: screen_mode_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: screen_mode_set_input
    pk_columns: screen_mode_pk_columns_input!
  ): screen_mode
}

"""column ordering options"""
enum order_by {
  """in the ascending order, nulls last"""
  asc

  """in the ascending order, nulls first"""
  asc_nulls_first

  """in the ascending order, nulls last"""
  asc_nulls_last

  """in the descending order, nulls first"""
  desc

  """in the descending order, nulls first"""
  desc_nulls_first

  """in the descending order, nulls last"""
  desc_nulls_last
}

"""
columns and relationships of "phone"
"""
type phone {
  accreditation_level: String
  accreditation_type: String

  """An object relationship"""
  chipModelByChipModel: chip_model
  chip_model: String
  company_name: String
  date: String
  hardware_model_name: String

  """An object relationship"""
  screenModeByScreenMode: screen_mode
  screen_mode: Int
}

"""
aggregated selection of "phone"
"""
type phone_aggregate {
  aggregate: phone_aggregate_fields
  nodes: [phone!]!
}

"""
aggregate fields of "phone"
"""
type phone_aggregate_fields {
  avg: phone_avg_fields
  count(columns: [phone_select_column!], distinct: Boolean): Int
  max: phone_max_fields
  min: phone_min_fields
  stddev: phone_stddev_fields
  stddev_pop: phone_stddev_pop_fields
  stddev_samp: phone_stddev_samp_fields
  sum: phone_sum_fields
  var_pop: phone_var_pop_fields
  var_samp: phone_var_samp_fields
  variance: phone_variance_fields
}

"""
order by aggregate values of table "phone"
"""
input phone_aggregate_order_by {
  avg: phone_avg_order_by
  count: order_by
  max: phone_max_order_by
  min: phone_min_order_by
  stddev: phone_stddev_order_by
  stddev_pop: phone_stddev_pop_order_by
  stddev_samp: phone_stddev_samp_order_by
  sum: phone_sum_order_by
  var_pop: phone_var_pop_order_by
  var_samp: phone_var_samp_order_by
  variance: phone_variance_order_by
}

"""
input type for inserting array relation for remote table "phone"
"""
input phone_arr_rel_insert_input {
  data: [phone_insert_input!]!
  on_conflict: phone_on_conflict
}

"""aggregate avg on columns"""
type phone_avg_fields {
  screen_mode: Float
}

"""
order by avg() on columns of table "phone"
"""
input phone_avg_order_by {
  screen_mode: order_by
}

"""
Boolean expression to filter rows from the table "phone". All fields are combined with a logical 'AND'.
"""
input phone_bool_exp {
  _and: [phone_bool_exp]
  _not: phone_bool_exp
  _or: [phone_bool_exp]
  accreditation_level: String_comparison_exp
  accreditation_type: String_comparison_exp
  chipModelByChipModel: chip_model_bool_exp
  chip_model: String_comparison_exp
  company_name: String_comparison_exp
  date: String_comparison_exp
  hardware_model_name: String_comparison_exp
  screenModeByScreenMode: screen_mode_bool_exp
  screen_mode: Int_comparison_exp
}

"""
unique or primary key constraints on table "phone"
"""
enum phone_constraint {
  """unique or primary key constraint"""
  idx_19246_sqlite_autoindex_phone_1
}

"""
input type for incrementing integer column in table "phone"
"""
input phone_inc_input {
  screen_mode: Int
}

"""
input type for inserting data into table "phone"
"""
input phone_insert_input {
  accreditation_level: String
  accreditation_type: String
  chipModelByChipModel: chip_model_obj_rel_insert_input
  chip_model: String
  company_name: String
  date: String
  hardware_model_name: String
  screenModeByScreenMode: screen_mode_obj_rel_insert_input
  screen_mode: Int
}

"""aggregate max on columns"""
type phone_max_fields {
  accreditation_level: String
  accreditation_type: String
  chip_model: String
  company_name: String
  date: String
  hardware_model_name: String
  screen_mode: Int
}

"""
order by max() on columns of table "phone"
"""
input phone_max_order_by {
  accreditation_level: order_by
  accreditation_type: order_by
  chip_model: order_by
  company_name: order_by
  date: order_by
  hardware_model_name: order_by
  screen_mode: order_by
}

"""aggregate min on columns"""
type phone_min_fields {
  accreditation_level: String
  accreditation_type: String
  chip_model: String
  company_name: String
  date: String
  hardware_model_name: String
  screen_mode: Int
}

"""
order by min() on columns of table "phone"
"""
input phone_min_order_by {
  accreditation_level: order_by
  accreditation_type: order_by
  chip_model: order_by
  company_name: order_by
  date: order_by
  hardware_model_name: order_by
  screen_mode: order_by
}

"""
response of any mutation on the table "phone"
"""
type phone_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [phone!]!
}

"""
input type for inserting object relation for remote table "phone"
"""
input phone_obj_rel_insert_input {
  data: phone_insert_input!
  on_conflict: phone_on_conflict
}

"""
on conflict condition type for table "phone"
"""
input phone_on_conflict {
  constraint: phone_constraint!
  update_columns: [phone_update_column!]!
  where: phone_bool_exp
}

"""
ordering options when selecting data from "phone"
"""
input phone_order_by {
  accreditation_level: order_by
  accreditation_type: order_by
  chipModelByChipModel: chip_model_order_by
  chip_model: order_by
  company_name: order_by
  date: order_by
  hardware_model_name: order_by
  screenModeByScreenMode: screen_mode_order_by
  screen_mode: order_by
}

"""
select columns of table "phone"
"""
enum phone_select_column {
  """column name"""
  accreditation_level

  """column name"""
  accreditation_type

  """column name"""
  chip_model

  """column name"""
  company_name

  """column name"""
  date

  """column name"""
  hardware_model_name

  """column name"""
  screen_mode
}

"""
input type for updating data in table "phone"
"""
input phone_set_input {
  accreditation_level: String
  accreditation_type: String
  chip_model: String
  company_name: String
  date: String
  hardware_model_name: String
  screen_mode: Int
}

"""aggregate stddev on columns"""
type phone_stddev_fields {
  screen_mode: Float
}

"""
order by stddev() on columns of table "phone"
"""
input phone_stddev_order_by {
  screen_mode: order_by
}

"""aggregate stddev_pop on columns"""
type phone_stddev_pop_fields {
  screen_mode: Float
}

"""
order by stddev_pop() on columns of table "phone"
"""
input phone_stddev_pop_order_by {
  screen_mode: order_by
}

"""aggregate stddev_samp on columns"""
type phone_stddev_samp_fields {
  screen_mode: Float
}

"""
order by stddev_samp() on columns of table "phone"
"""
input phone_stddev_samp_order_by {
  screen_mode: order_by
}

"""aggregate sum on columns"""
type phone_sum_fields {
  screen_mode: Int
}

"""
order by sum() on columns of table "phone"
"""
input phone_sum_order_by {
  screen_mode: order_by
}

"""
update columns of table "phone"
"""
enum phone_update_column {
  """column name"""
  accreditation_level

  """column name"""
  accreditation_type

  """column name"""
  chip_model

  """column name"""
  company_name

  """column name"""
  date

  """column name"""
  hardware_model_name

  """column name"""
  screen_mode
}

"""aggregate var_pop on columns"""
type phone_var_pop_fields {
  screen_mode: Float
}

"""
order by var_pop() on columns of table "phone"
"""
input phone_var_pop_order_by {
  screen_mode: order_by
}

"""aggregate var_samp on columns"""
type phone_var_samp_fields {
  screen_mode: Float
}

"""
order by var_samp() on columns of table "phone"
"""
input phone_var_samp_order_by {
  screen_mode: order_by
}

"""aggregate variance on columns"""
type phone_variance_fields {
  screen_mode: Float
}

"""
order by variance() on columns of table "phone"
"""
input phone_variance_order_by {
  screen_mode: order_by
}

"""query root"""
type query_root {
  """
  fetch data from the table: "chip_model"
  """
  chip_model(
    """distinct select on columns"""
    distinct_on: [chip_model_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [chip_model_order_by!]

    """filter the rows returned"""
    where: chip_model_bool_exp
  ): [chip_model!]!

  """
  fetch aggregated fields from the table: "chip_model"
  """
  chip_model_aggregate(
    """distinct select on columns"""
    distinct_on: [chip_model_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [chip_model_order_by!]

    """filter the rows returned"""
    where: chip_model_bool_exp
  ): chip_model_aggregate!

  """
  fetch data from the table: "phone"
  """
  phone(
    """distinct select on columns"""
    distinct_on: [phone_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [phone_order_by!]

    """filter the rows returned"""
    where: phone_bool_exp
  ): [phone!]!

  """
  fetch aggregated fields from the table: "phone"
  """
  phone_aggregate(
    """distinct select on columns"""
    distinct_on: [phone_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [phone_order_by!]

    """filter the rows returned"""
    where: phone_bool_exp
  ): phone_aggregate!

  """
  fetch data from the table: "screen_mode"
  """
  screen_mode(
    """distinct select on columns"""
    distinct_on: [screen_mode_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [screen_mode_order_by!]

    """filter the rows returned"""
    where: screen_mode_bool_exp
  ): [screen_mode!]!

  """
  fetch aggregated fields from the table: "screen_mode"
  """
  screen_mode_aggregate(
    """distinct select on columns"""
    distinct_on: [screen_mode_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [screen_mode_order_by!]

    """filter the rows returned"""
    where: screen_mode_bool_exp
  ): screen_mode_aggregate!

  """fetch data from the table: "screen_mode" using primary key columns"""
  screen_mode_by_pk(graphics_mode: Int!): screen_mode
}

"""
columns and relationships of "screen_mode"
"""
type screen_mode {
  char_cells: String
  graphics_mode: Int!
  hardware_colours: Float
  map: String

  """An array relationship"""
  phones(
    """distinct select on columns"""
    distinct_on: [phone_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [phone_order_by!]

    """filter the rows returned"""
    where: phone_bool_exp
  ): [phone!]!

  """An aggregated array relationship"""
  phones_aggregate(
    """distinct select on columns"""
    distinct_on: [phone_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [phone_order_by!]

    """filter the rows returned"""
    where: phone_bool_exp
  ): phone_aggregate!
  pixels: String
  type: String
  used_kb: Float
}

"""
aggregated selection of "screen_mode"
"""
type screen_mode_aggregate {
  aggregate: screen_mode_aggregate_fields
  nodes: [screen_mode!]!
}

"""
aggregate fields of "screen_mode"
"""
type screen_mode_aggregate_fields {
  avg: screen_mode_avg_fields
  count(columns: [screen_mode_select_column!], distinct: Boolean): Int
  max: screen_mode_max_fields
  min: screen_mode_min_fields
  stddev: screen_mode_stddev_fields
  stddev_pop: screen_mode_stddev_pop_fields
  stddev_samp: screen_mode_stddev_samp_fields
  sum: screen_mode_sum_fields
  var_pop: screen_mode_var_pop_fields
  var_samp: screen_mode_var_samp_fields
  variance: screen_mode_variance_fields
}

"""
order by aggregate values of table "screen_mode"
"""
input screen_mode_aggregate_order_by {
  avg: screen_mode_avg_order_by
  count: order_by
  max: screen_mode_max_order_by
  min: screen_mode_min_order_by
  stddev: screen_mode_stddev_order_by
  stddev_pop: screen_mode_stddev_pop_order_by
  stddev_samp: screen_mode_stddev_samp_order_by
  sum: screen_mode_sum_order_by
  var_pop: screen_mode_var_pop_order_by
  var_samp: screen_mode_var_samp_order_by
  variance: screen_mode_variance_order_by
}

"""
input type for inserting array relation for remote table "screen_mode"
"""
input screen_mode_arr_rel_insert_input {
  data: [screen_mode_insert_input!]!
  on_conflict: screen_mode_on_conflict
}

"""aggregate avg on columns"""
type screen_mode_avg_fields {
  graphics_mode: Float
  hardware_colours: Float
  used_kb: Float
}

"""
order by avg() on columns of table "screen_mode"
"""
input screen_mode_avg_order_by {
  graphics_mode: order_by
  hardware_colours: order_by
  used_kb: order_by
}

"""
Boolean expression to filter rows from the table "screen_mode". All fields are combined with a logical 'AND'.
"""
input screen_mode_bool_exp {
  _and: [screen_mode_bool_exp]
  _not: screen_mode_bool_exp
  _or: [screen_mode_bool_exp]
  char_cells: String_comparison_exp
  graphics_mode: Int_comparison_exp
  hardware_colours: Float_comparison_exp
  map: String_comparison_exp
  phones: phone_bool_exp
  pixels: String_comparison_exp
  type: String_comparison_exp
  used_kb: Float_comparison_exp
}

"""
unique or primary key constraints on table "screen_mode"
"""
enum screen_mode_constraint {
  """unique or primary key constraint"""
  idx_19240_sqlite_autoindex_screen_mode_1

  """unique or primary key constraint"""
  screen_mode_graphics_mode_key

  """unique or primary key constraint"""
  screen_mode_pkey
}

"""
input type for incrementing integer column in table "screen_mode"
"""
input screen_mode_inc_input {
  graphics_mode: Int
  hardware_colours: Float
  used_kb: Float
}

"""
input type for inserting data into table "screen_mode"
"""
input screen_mode_insert_input {
  char_cells: String
  graphics_mode: Int
  hardware_colours: Float
  map: String
  phones: phone_arr_rel_insert_input
  pixels: String
  type: String
  used_kb: Float
}

"""aggregate max on columns"""
type screen_mode_max_fields {
  char_cells: String
  graphics_mode: Int
  hardware_colours: Float
  map: String
  pixels: String
  type: String
  used_kb: Float
}

"""
order by max() on columns of table "screen_mode"
"""
input screen_mode_max_order_by {
  char_cells: order_by
  graphics_mode: order_by
  hardware_colours: order_by
  map: order_by
  pixels: order_by
  type: order_by
  used_kb: order_by
}

"""aggregate min on columns"""
type screen_mode_min_fields {
  char_cells: String
  graphics_mode: Int
  hardware_colours: Float
  map: String
  pixels: String
  type: String
  used_kb: Float
}

"""
order by min() on columns of table "screen_mode"
"""
input screen_mode_min_order_by {
  char_cells: order_by
  graphics_mode: order_by
  hardware_colours: order_by
  map: order_by
  pixels: order_by
  type: order_by
  used_kb: order_by
}

"""
response of any mutation on the table "screen_mode"
"""
type screen_mode_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [screen_mode!]!
}

"""
input type for inserting object relation for remote table "screen_mode"
"""
input screen_mode_obj_rel_insert_input {
  data: screen_mode_insert_input!
  on_conflict: screen_mode_on_conflict
}

"""
on conflict condition type for table "screen_mode"
"""
input screen_mode_on_conflict {
  constraint: screen_mode_constraint!
  update_columns: [screen_mode_update_column!]!
  where: screen_mode_bool_exp
}

"""
ordering options when selecting data from "screen_mode"
"""
input screen_mode_order_by {
  char_cells: order_by
  graphics_mode: order_by
  hardware_colours: order_by
  map: order_by
  phones_aggregate: phone_aggregate_order_by
  pixels: order_by
  type: order_by
  used_kb: order_by
}

"""
primary key columns input for table: "screen_mode"
"""
input screen_mode_pk_columns_input {
  graphics_mode: Int!
}

"""
select columns of table "screen_mode"
"""
enum screen_mode_select_column {
  """column name"""
  char_cells

  """column name"""
  graphics_mode

  """column name"""
  hardware_colours

  """column name"""
  map

  """column name"""
  pixels

  """column name"""
  type

  """column name"""
  used_kb
}

"""
input type for updating data in table "screen_mode"
"""
input screen_mode_set_input {
  char_cells: String
  graphics_mode: Int
  hardware_colours: Float
  map: String
  pixels: String
  type: String
  used_kb: Float
}

"""aggregate stddev on columns"""
type screen_mode_stddev_fields {
  graphics_mode: Float
  hardware_colours: Float
  used_kb: Float
}

"""
order by stddev() on columns of table "screen_mode"
"""
input screen_mode_stddev_order_by {
  graphics_mode: order_by
  hardware_colours: order_by
  used_kb: order_by
}

"""aggregate stddev_pop on columns"""
type screen_mode_stddev_pop_fields {
  graphics_mode: Float
  hardware_colours: Float
  used_kb: Float
}

"""
order by stddev_pop() on columns of table "screen_mode"
"""
input screen_mode_stddev_pop_order_by {
  graphics_mode: order_by
  hardware_colours: order_by
  used_kb: order_by
}

"""aggregate stddev_samp on columns"""
type screen_mode_stddev_samp_fields {
  graphics_mode: Float
  hardware_colours: Float
  used_kb: Float
}

"""
order by stddev_samp() on columns of table "screen_mode"
"""
input screen_mode_stddev_samp_order_by {
  graphics_mode: order_by
  hardware_colours: order_by
  used_kb: order_by
}

"""aggregate sum on columns"""
type screen_mode_sum_fields {
  graphics_mode: Int
  hardware_colours: Float
  used_kb: Float
}

"""
order by sum() on columns of table "screen_mode"
"""
input screen_mode_sum_order_by {
  graphics_mode: order_by
  hardware_colours: order_by
  used_kb: order_by
}

"""
update columns of table "screen_mode"
"""
enum screen_mode_update_column {
  """column name"""
  char_cells

  """column name"""
  graphics_mode

  """column name"""
  hardware_colours

  """column name"""
  map

  """column name"""
  pixels

  """column name"""
  type

  """column name"""
  used_kb
}

"""aggregate var_pop on columns"""
type screen_mode_var_pop_fields {
  graphics_mode: Float
  hardware_colours: Float
  used_kb: Float
}

"""
order by var_pop() on columns of table "screen_mode"
"""
input screen_mode_var_pop_order_by {
  graphics_mode: order_by
  hardware_colours: order_by
  used_kb: order_by
}

"""aggregate var_samp on columns"""
type screen_mode_var_samp_fields {
  graphics_mode: Float
  hardware_colours: Float
  used_kb: Float
}

"""
order by var_samp() on columns of table "screen_mode"
"""
input screen_mode_var_samp_order_by {
  graphics_mode: order_by
  hardware_colours: order_by
  used_kb: order_by
}

"""aggregate variance on columns"""
type screen_mode_variance_fields {
  graphics_mode: Float
  hardware_colours: Float
  used_kb: Float
}

"""
order by variance() on columns of table "screen_mode"
"""
input screen_mode_variance_order_by {
  graphics_mode: order_by
  hardware_colours: order_by
  used_kb: order_by
}

"""
expression to compare columns of type String. All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String
  _ilike: String
  _in: [String!]
  _is_null: Boolean
  _like: String
  _lt: String
  _lte: String
  _neq: String
  _nilike: String
  _nin: [String!]
  _nlike: String
  _nsimilar: String
  _similar: String
}

"""subscription root"""
type subscription_root {
  """
  fetch data from the table: "chip_model"
  """
  chip_model(
    """distinct select on columns"""
    distinct_on: [chip_model_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [chip_model_order_by!]

    """filter the rows returned"""
    where: chip_model_bool_exp
  ): [chip_model!]!

  """
  fetch aggregated fields from the table: "chip_model"
  """
  chip_model_aggregate(
    """distinct select on columns"""
    distinct_on: [chip_model_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [chip_model_order_by!]

    """filter the rows returned"""
    where: chip_model_bool_exp
  ): chip_model_aggregate!

  """
  fetch data from the table: "phone"
  """
  phone(
    """distinct select on columns"""
    distinct_on: [phone_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [phone_order_by!]

    """filter the rows returned"""
    where: phone_bool_exp
  ): [phone!]!

  """
  fetch aggregated fields from the table: "phone"
  """
  phone_aggregate(
    """distinct select on columns"""
    distinct_on: [phone_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [phone_order_by!]

    """filter the rows returned"""
    where: phone_bool_exp
  ): phone_aggregate!

  """
  fetch data from the table: "screen_mode"
  """
  screen_mode(
    """distinct select on columns"""
    distinct_on: [screen_mode_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [screen_mode_order_by!]

    """filter the rows returned"""
    where: screen_mode_bool_exp
  ): [screen_mode!]!

  """
  fetch aggregated fields from the table: "screen_mode"
  """
  screen_mode_aggregate(
    """distinct select on columns"""
    distinct_on: [screen_mode_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [screen_mode_order_by!]

    """filter the rows returned"""
    where: screen_mode_bool_exp
  ): screen_mode_aggregate!

  """fetch data from the table: "screen_mode" using primary key columns"""
  screen_mode_by_pk(graphics_mode: Int!): screen_mode
}
