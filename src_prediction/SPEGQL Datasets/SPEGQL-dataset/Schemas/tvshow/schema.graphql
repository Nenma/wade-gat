schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""
Direct the client to resolve this field locally, either from the cache or local resolvers.
"""
directive @client(
  """
  When true, the client will never use the cache for this value. See
  https://www.apollographql.com/docs/react/essentials/local-state/#forcing-resolvers-with-clientalways-true
  """
  always: Boolean
) on FIELD | FRAGMENT_DEFINITION | INLINE_FRAGMENT

"""
Export this locally resolved field as a variable to be used in the remainder of this query. See
https://www.apollographql.com/docs/react/essentials/local-state/#using-client-fields-as-variables
"""
directive @export(
  """The variable name to export this field as."""
  as: String!
) on FIELD

"""
Specify a custom store key for this result. See
https://www.apollographql.com/docs/react/advanced/caching/#the-connection-directive
"""
directive @connection(
  """Specify the store key."""
  key: String!

  """
  An array of query argument names to include in the generated custom store key.
  """
  filter: [String!]
) on FIELD

"""
columns and relationships of "cartoon"
"""
type cartoon {
  channel: String
  directed_by: String
  id: Float!
  original_air_date: String
  production_code: Float
  title: String

  """An object relationship"""
  tv_channel: tv_channel
  written_by: String
}

"""
aggregated selection of "cartoon"
"""
type cartoon_aggregate {
  aggregate: cartoon_aggregate_fields
  nodes: [cartoon!]!
}

"""
aggregate fields of "cartoon"
"""
type cartoon_aggregate_fields {
  avg: cartoon_avg_fields
  count(columns: [cartoon_select_column!], distinct: Boolean): Int
  max: cartoon_max_fields
  min: cartoon_min_fields
  stddev: cartoon_stddev_fields
  stddev_pop: cartoon_stddev_pop_fields
  stddev_samp: cartoon_stddev_samp_fields
  sum: cartoon_sum_fields
  var_pop: cartoon_var_pop_fields
  var_samp: cartoon_var_samp_fields
  variance: cartoon_variance_fields
}

"""
order by aggregate values of table "cartoon"
"""
input cartoon_aggregate_order_by {
  avg: cartoon_avg_order_by
  count: order_by
  max: cartoon_max_order_by
  min: cartoon_min_order_by
  stddev: cartoon_stddev_order_by
  stddev_pop: cartoon_stddev_pop_order_by
  stddev_samp: cartoon_stddev_samp_order_by
  sum: cartoon_sum_order_by
  var_pop: cartoon_var_pop_order_by
  var_samp: cartoon_var_samp_order_by
  variance: cartoon_variance_order_by
}

"""
input type for inserting array relation for remote table "cartoon"
"""
input cartoon_arr_rel_insert_input {
  data: [cartoon_insert_input!]!
  on_conflict: cartoon_on_conflict
}

"""aggregate avg on columns"""
type cartoon_avg_fields {
  id: Float
  production_code: Float
}

"""
order by avg() on columns of table "cartoon"
"""
input cartoon_avg_order_by {
  id: order_by
  production_code: order_by
}

"""
Boolean expression to filter rows from the table "cartoon". All fields are combined with a logical 'AND'.
"""
input cartoon_bool_exp {
  _and: [cartoon_bool_exp]
  _not: cartoon_bool_exp
  _or: [cartoon_bool_exp]
  channel: String_comparison_exp
  directed_by: String_comparison_exp
  id: Float_comparison_exp
  original_air_date: String_comparison_exp
  production_code: Float_comparison_exp
  title: String_comparison_exp
  tv_channel: tv_channel_bool_exp
  written_by: String_comparison_exp
}

"""
unique or primary key constraints on table "cartoon"
"""
enum cartoon_constraint {
  """unique or primary key constraint"""
  idx_18179_sqlite_autoindex_cartoon_1
}

"""
input type for incrementing integer column in table "cartoon"
"""
input cartoon_inc_input {
  id: Float
  production_code: Float
}

"""
input type for inserting data into table "cartoon"
"""
input cartoon_insert_input {
  channel: String
  directed_by: String
  id: Float
  original_air_date: String
  production_code: Float
  title: String
  tv_channel: tv_channel_obj_rel_insert_input
  written_by: String
}

"""aggregate max on columns"""
type cartoon_max_fields {
  channel: String
  directed_by: String
  id: Float
  original_air_date: String
  production_code: Float
  title: String
  written_by: String
}

"""
order by max() on columns of table "cartoon"
"""
input cartoon_max_order_by {
  channel: order_by
  directed_by: order_by
  id: order_by
  original_air_date: order_by
  production_code: order_by
  title: order_by
  written_by: order_by
}

"""aggregate min on columns"""
type cartoon_min_fields {
  channel: String
  directed_by: String
  id: Float
  original_air_date: String
  production_code: Float
  title: String
  written_by: String
}

"""
order by min() on columns of table "cartoon"
"""
input cartoon_min_order_by {
  channel: order_by
  directed_by: order_by
  id: order_by
  original_air_date: order_by
  production_code: order_by
  title: order_by
  written_by: order_by
}

"""
response of any mutation on the table "cartoon"
"""
type cartoon_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [cartoon!]!
}

"""
input type for inserting object relation for remote table "cartoon"
"""
input cartoon_obj_rel_insert_input {
  data: cartoon_insert_input!
  on_conflict: cartoon_on_conflict
}

"""
on conflict condition type for table "cartoon"
"""
input cartoon_on_conflict {
  constraint: cartoon_constraint!
  update_columns: [cartoon_update_column!]!
  where: cartoon_bool_exp
}

"""
ordering options when selecting data from "cartoon"
"""
input cartoon_order_by {
  channel: order_by
  directed_by: order_by
  id: order_by
  original_air_date: order_by
  production_code: order_by
  title: order_by
  tv_channel: tv_channel_order_by
  written_by: order_by
}

"""
primary key columns input for table: "cartoon"
"""
input cartoon_pk_columns_input {
  id: Float!
}

"""
select columns of table "cartoon"
"""
enum cartoon_select_column {
  """column name"""
  channel

  """column name"""
  directed_by

  """column name"""
  id

  """column name"""
  original_air_date

  """column name"""
  production_code

  """column name"""
  title

  """column name"""
  written_by
}

"""
input type for updating data in table "cartoon"
"""
input cartoon_set_input {
  channel: String
  directed_by: String
  id: Float
  original_air_date: String
  production_code: Float
  title: String
  written_by: String
}

"""aggregate stddev on columns"""
type cartoon_stddev_fields {
  id: Float
  production_code: Float
}

"""
order by stddev() on columns of table "cartoon"
"""
input cartoon_stddev_order_by {
  id: order_by
  production_code: order_by
}

"""aggregate stddev_pop on columns"""
type cartoon_stddev_pop_fields {
  id: Float
  production_code: Float
}

"""
order by stddev_pop() on columns of table "cartoon"
"""
input cartoon_stddev_pop_order_by {
  id: order_by
  production_code: order_by
}

"""aggregate stddev_samp on columns"""
type cartoon_stddev_samp_fields {
  id: Float
  production_code: Float
}

"""
order by stddev_samp() on columns of table "cartoon"
"""
input cartoon_stddev_samp_order_by {
  id: order_by
  production_code: order_by
}

"""aggregate sum on columns"""
type cartoon_sum_fields {
  id: Float
  production_code: Float
}

"""
order by sum() on columns of table "cartoon"
"""
input cartoon_sum_order_by {
  id: order_by
  production_code: order_by
}

"""
update columns of table "cartoon"
"""
enum cartoon_update_column {
  """column name"""
  channel

  """column name"""
  directed_by

  """column name"""
  id

  """column name"""
  original_air_date

  """column name"""
  production_code

  """column name"""
  title

  """column name"""
  written_by
}

"""aggregate var_pop on columns"""
type cartoon_var_pop_fields {
  id: Float
  production_code: Float
}

"""
order by var_pop() on columns of table "cartoon"
"""
input cartoon_var_pop_order_by {
  id: order_by
  production_code: order_by
}

"""aggregate var_samp on columns"""
type cartoon_var_samp_fields {
  id: Float
  production_code: Float
}

"""
order by var_samp() on columns of table "cartoon"
"""
input cartoon_var_samp_order_by {
  id: order_by
  production_code: order_by
}

"""aggregate variance on columns"""
type cartoon_variance_fields {
  id: Float
  production_code: Float
}

"""
order by variance() on columns of table "cartoon"
"""
input cartoon_variance_order_by {
  id: order_by
  production_code: order_by
}

"""
expression to compare columns of type Float. All fields are combined with logical 'AND'.
"""
input Float_comparison_exp {
  _eq: Float
  _gt: Float
  _gte: Float
  _in: [Float!]
  _is_null: Boolean
  _lt: Float
  _lte: Float
  _neq: Float
  _nin: [Float!]
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "cartoon"
  """
  delete_cartoon(
    """filter the rows which have to be deleted"""
    where: cartoon_bool_exp!
  ): cartoon_mutation_response

  """
  delete single row from the table: "cartoon"
  """
  delete_cartoon_by_pk(id: Float!): cartoon

  """
  delete data from the table: "tv_channel"
  """
  delete_tv_channel(
    """filter the rows which have to be deleted"""
    where: tv_channel_bool_exp!
  ): tv_channel_mutation_response

  """
  delete single row from the table: "tv_channel"
  """
  delete_tv_channel_by_pk(id: String!): tv_channel

  """
  delete data from the table: "tv_series"
  """
  delete_tv_series(
    """filter the rows which have to be deleted"""
    where: tv_series_bool_exp!
  ): tv_series_mutation_response

  """
  delete single row from the table: "tv_series"
  """
  delete_tv_series_by_pk(id: Float!): tv_series

  """
  insert data into the table: "cartoon"
  """
  insert_cartoon(
    """the rows to be inserted"""
    objects: [cartoon_insert_input!]!

    """on conflict condition"""
    on_conflict: cartoon_on_conflict
  ): cartoon_mutation_response

  """
  insert a single row into the table: "cartoon"
  """
  insert_cartoon_one(
    """the row to be inserted"""
    object: cartoon_insert_input!

    """on conflict condition"""
    on_conflict: cartoon_on_conflict
  ): cartoon

  """
  insert data into the table: "tv_channel"
  """
  insert_tv_channel(
    """the rows to be inserted"""
    objects: [tv_channel_insert_input!]!

    """on conflict condition"""
    on_conflict: tv_channel_on_conflict
  ): tv_channel_mutation_response

  """
  insert a single row into the table: "tv_channel"
  """
  insert_tv_channel_one(
    """the row to be inserted"""
    object: tv_channel_insert_input!

    """on conflict condition"""
    on_conflict: tv_channel_on_conflict
  ): tv_channel

  """
  insert data into the table: "tv_series"
  """
  insert_tv_series(
    """the rows to be inserted"""
    objects: [tv_series_insert_input!]!

    """on conflict condition"""
    on_conflict: tv_series_on_conflict
  ): tv_series_mutation_response

  """
  insert a single row into the table: "tv_series"
  """
  insert_tv_series_one(
    """the row to be inserted"""
    object: tv_series_insert_input!

    """on conflict condition"""
    on_conflict: tv_series_on_conflict
  ): tv_series

  """
  update data of the table: "cartoon"
  """
  update_cartoon(
    """increments the integer columns with given value of the filtered values"""
    _inc: cartoon_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: cartoon_set_input

    """filter the rows which have to be updated"""
    where: cartoon_bool_exp!
  ): cartoon_mutation_response

  """
  update single row of the table: "cartoon"
  """
  update_cartoon_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: cartoon_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: cartoon_set_input
    pk_columns: cartoon_pk_columns_input!
  ): cartoon

  """
  update data of the table: "tv_channel"
  """
  update_tv_channel(
    """sets the columns of the filtered rows to the given values"""
    _set: tv_channel_set_input

    """filter the rows which have to be updated"""
    where: tv_channel_bool_exp!
  ): tv_channel_mutation_response

  """
  update single row of the table: "tv_channel"
  """
  update_tv_channel_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: tv_channel_set_input
    pk_columns: tv_channel_pk_columns_input!
  ): tv_channel

  """
  update data of the table: "tv_series"
  """
  update_tv_series(
    """increments the integer columns with given value of the filtered values"""
    _inc: tv_series_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: tv_series_set_input

    """filter the rows which have to be updated"""
    where: tv_series_bool_exp!
  ): tv_series_mutation_response

  """
  update single row of the table: "tv_series"
  """
  update_tv_series_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: tv_series_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: tv_series_set_input
    pk_columns: tv_series_pk_columns_input!
  ): tv_series
}

"""column ordering options"""
enum order_by {
  """in the ascending order, nulls last"""
  asc

  """in the ascending order, nulls first"""
  asc_nulls_first

  """in the ascending order, nulls last"""
  asc_nulls_last

  """in the descending order, nulls first"""
  desc

  """in the descending order, nulls first"""
  desc_nulls_first

  """in the descending order, nulls last"""
  desc_nulls_last
}

"""query root"""
type query_root {
  """
  fetch data from the table: "cartoon"
  """
  cartoon(
    """distinct select on columns"""
    distinct_on: [cartoon_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [cartoon_order_by!]

    """filter the rows returned"""
    where: cartoon_bool_exp
  ): [cartoon!]!

  """
  fetch aggregated fields from the table: "cartoon"
  """
  cartoon_aggregate(
    """distinct select on columns"""
    distinct_on: [cartoon_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [cartoon_order_by!]

    """filter the rows returned"""
    where: cartoon_bool_exp
  ): cartoon_aggregate!

  """fetch data from the table: "cartoon" using primary key columns"""
  cartoon_by_pk(id: Float!): cartoon

  """
  fetch data from the table: "tv_channel"
  """
  tv_channel(
    """distinct select on columns"""
    distinct_on: [tv_channel_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tv_channel_order_by!]

    """filter the rows returned"""
    where: tv_channel_bool_exp
  ): [tv_channel!]!

  """
  fetch aggregated fields from the table: "tv_channel"
  """
  tv_channel_aggregate(
    """distinct select on columns"""
    distinct_on: [tv_channel_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tv_channel_order_by!]

    """filter the rows returned"""
    where: tv_channel_bool_exp
  ): tv_channel_aggregate!

  """fetch data from the table: "tv_channel" using primary key columns"""
  tv_channel_by_pk(id: String!): tv_channel

  """
  fetch data from the table: "tv_series"
  """
  tv_series(
    """distinct select on columns"""
    distinct_on: [tv_series_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tv_series_order_by!]

    """filter the rows returned"""
    where: tv_series_bool_exp
  ): [tv_series!]!

  """
  fetch aggregated fields from the table: "tv_series"
  """
  tv_series_aggregate(
    """distinct select on columns"""
    distinct_on: [tv_series_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tv_series_order_by!]

    """filter the rows returned"""
    where: tv_series_bool_exp
  ): tv_series_aggregate!

  """fetch data from the table: "tv_series" using primary key columns"""
  tv_series_by_pk(id: Float!): tv_series
}

"""
expression to compare columns of type String. All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String
  _ilike: String
  _in: [String!]
  _is_null: Boolean
  _like: String
  _lt: String
  _lte: String
  _neq: String
  _nilike: String
  _nin: [String!]
  _nlike: String
  _nsimilar: String
  _similar: String
}

"""subscription root"""
type subscription_root {
  """
  fetch data from the table: "cartoon"
  """
  cartoon(
    """distinct select on columns"""
    distinct_on: [cartoon_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [cartoon_order_by!]

    """filter the rows returned"""
    where: cartoon_bool_exp
  ): [cartoon!]!

  """
  fetch aggregated fields from the table: "cartoon"
  """
  cartoon_aggregate(
    """distinct select on columns"""
    distinct_on: [cartoon_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [cartoon_order_by!]

    """filter the rows returned"""
    where: cartoon_bool_exp
  ): cartoon_aggregate!

  """fetch data from the table: "cartoon" using primary key columns"""
  cartoon_by_pk(id: Float!): cartoon

  """
  fetch data from the table: "tv_channel"
  """
  tv_channel(
    """distinct select on columns"""
    distinct_on: [tv_channel_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tv_channel_order_by!]

    """filter the rows returned"""
    where: tv_channel_bool_exp
  ): [tv_channel!]!

  """
  fetch aggregated fields from the table: "tv_channel"
  """
  tv_channel_aggregate(
    """distinct select on columns"""
    distinct_on: [tv_channel_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tv_channel_order_by!]

    """filter the rows returned"""
    where: tv_channel_bool_exp
  ): tv_channel_aggregate!

  """fetch data from the table: "tv_channel" using primary key columns"""
  tv_channel_by_pk(id: String!): tv_channel

  """
  fetch data from the table: "tv_series"
  """
  tv_series(
    """distinct select on columns"""
    distinct_on: [tv_series_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tv_series_order_by!]

    """filter the rows returned"""
    where: tv_series_bool_exp
  ): [tv_series!]!

  """
  fetch aggregated fields from the table: "tv_series"
  """
  tv_series_aggregate(
    """distinct select on columns"""
    distinct_on: [tv_series_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tv_series_order_by!]

    """filter the rows returned"""
    where: tv_series_bool_exp
  ): tv_series_aggregate!

  """fetch data from the table: "tv_series" using primary key columns"""
  tv_series_by_pk(id: Float!): tv_series
}

"""
columns and relationships of "tv_channel"
"""
type tv_channel {
  """An array relationship"""
  cartoons(
    """distinct select on columns"""
    distinct_on: [cartoon_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [cartoon_order_by!]

    """filter the rows returned"""
    where: cartoon_bool_exp
  ): [cartoon!]!

  """An aggregated array relationship"""
  cartoons_aggregate(
    """distinct select on columns"""
    distinct_on: [cartoon_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [cartoon_order_by!]

    """filter the rows returned"""
    where: cartoon_bool_exp
  ): cartoon_aggregate!
  content: String
  country: String
  hight_definition_tv: String
  id: String!
  language: String
  package_option: String
  pay_per_view_ppv: String
  pixel_aspect_ratio_par: String
  series_name: String

  """An array relationship"""
  tv_series(
    """distinct select on columns"""
    distinct_on: [tv_series_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tv_series_order_by!]

    """filter the rows returned"""
    where: tv_series_bool_exp
  ): [tv_series!]!

  """An aggregated array relationship"""
  tv_series_aggregate(
    """distinct select on columns"""
    distinct_on: [tv_series_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tv_series_order_by!]

    """filter the rows returned"""
    where: tv_series_bool_exp
  ): tv_series_aggregate!
}

"""
aggregated selection of "tv_channel"
"""
type tv_channel_aggregate {
  aggregate: tv_channel_aggregate_fields
  nodes: [tv_channel!]!
}

"""
aggregate fields of "tv_channel"
"""
type tv_channel_aggregate_fields {
  count(columns: [tv_channel_select_column!], distinct: Boolean): Int
  max: tv_channel_max_fields
  min: tv_channel_min_fields
}

"""
order by aggregate values of table "tv_channel"
"""
input tv_channel_aggregate_order_by {
  count: order_by
  max: tv_channel_max_order_by
  min: tv_channel_min_order_by
}

"""
input type for inserting array relation for remote table "tv_channel"
"""
input tv_channel_arr_rel_insert_input {
  data: [tv_channel_insert_input!]!
  on_conflict: tv_channel_on_conflict
}

"""
Boolean expression to filter rows from the table "tv_channel". All fields are combined with a logical 'AND'.
"""
input tv_channel_bool_exp {
  _and: [tv_channel_bool_exp]
  _not: tv_channel_bool_exp
  _or: [tv_channel_bool_exp]
  cartoons: cartoon_bool_exp
  content: String_comparison_exp
  country: String_comparison_exp
  hight_definition_tv: String_comparison_exp
  id: String_comparison_exp
  language: String_comparison_exp
  package_option: String_comparison_exp
  pay_per_view_ppv: String_comparison_exp
  pixel_aspect_ratio_par: String_comparison_exp
  series_name: String_comparison_exp
  tv_series: tv_series_bool_exp
}

"""
unique or primary key constraints on table "tv_channel"
"""
enum tv_channel_constraint {
  """unique or primary key constraint"""
  idx_18167_sqlite_autoindex_tv_channel_1
}

"""
input type for inserting data into table "tv_channel"
"""
input tv_channel_insert_input {
  cartoons: cartoon_arr_rel_insert_input
  content: String
  country: String
  hight_definition_tv: String
  id: String
  language: String
  package_option: String
  pay_per_view_ppv: String
  pixel_aspect_ratio_par: String
  series_name: String
  tv_series: tv_series_arr_rel_insert_input
}

"""aggregate max on columns"""
type tv_channel_max_fields {
  content: String
  country: String
  hight_definition_tv: String
  id: String
  language: String
  package_option: String
  pay_per_view_ppv: String
  pixel_aspect_ratio_par: String
  series_name: String
}

"""
order by max() on columns of table "tv_channel"
"""
input tv_channel_max_order_by {
  content: order_by
  country: order_by
  hight_definition_tv: order_by
  id: order_by
  language: order_by
  package_option: order_by
  pay_per_view_ppv: order_by
  pixel_aspect_ratio_par: order_by
  series_name: order_by
}

"""aggregate min on columns"""
type tv_channel_min_fields {
  content: String
  country: String
  hight_definition_tv: String
  id: String
  language: String
  package_option: String
  pay_per_view_ppv: String
  pixel_aspect_ratio_par: String
  series_name: String
}

"""
order by min() on columns of table "tv_channel"
"""
input tv_channel_min_order_by {
  content: order_by
  country: order_by
  hight_definition_tv: order_by
  id: order_by
  language: order_by
  package_option: order_by
  pay_per_view_ppv: order_by
  pixel_aspect_ratio_par: order_by
  series_name: order_by
}

"""
response of any mutation on the table "tv_channel"
"""
type tv_channel_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [tv_channel!]!
}

"""
input type for inserting object relation for remote table "tv_channel"
"""
input tv_channel_obj_rel_insert_input {
  data: tv_channel_insert_input!
  on_conflict: tv_channel_on_conflict
}

"""
on conflict condition type for table "tv_channel"
"""
input tv_channel_on_conflict {
  constraint: tv_channel_constraint!
  update_columns: [tv_channel_update_column!]!
  where: tv_channel_bool_exp
}

"""
ordering options when selecting data from "tv_channel"
"""
input tv_channel_order_by {
  cartoons_aggregate: cartoon_aggregate_order_by
  content: order_by
  country: order_by
  hight_definition_tv: order_by
  id: order_by
  language: order_by
  package_option: order_by
  pay_per_view_ppv: order_by
  pixel_aspect_ratio_par: order_by
  series_name: order_by
  tv_series_aggregate: tv_series_aggregate_order_by
}

"""
primary key columns input for table: "tv_channel"
"""
input tv_channel_pk_columns_input {
  id: String!
}

"""
select columns of table "tv_channel"
"""
enum tv_channel_select_column {
  """column name"""
  content

  """column name"""
  country

  """column name"""
  hight_definition_tv

  """column name"""
  id

  """column name"""
  language

  """column name"""
  package_option

  """column name"""
  pay_per_view_ppv

  """column name"""
  pixel_aspect_ratio_par

  """column name"""
  series_name
}

"""
input type for updating data in table "tv_channel"
"""
input tv_channel_set_input {
  content: String
  country: String
  hight_definition_tv: String
  id: String
  language: String
  package_option: String
  pay_per_view_ppv: String
  pixel_aspect_ratio_par: String
  series_name: String
}

"""
update columns of table "tv_channel"
"""
enum tv_channel_update_column {
  """column name"""
  content

  """column name"""
  country

  """column name"""
  hight_definition_tv

  """column name"""
  id

  """column name"""
  language

  """column name"""
  package_option

  """column name"""
  pay_per_view_ppv

  """column name"""
  pixel_aspect_ratio_par

  """column name"""
  series_name
}

"""
columns and relationships of "tv_series"
"""
type tv_series {
  air_date: String
  channel: String
  episode: String
  id: Float!
  rating: String
  share: Float

  """An object relationship"""
  tv_channel: tv_channel
  viewers_m: String
  weekly_rank: Float
}

"""
aggregated selection of "tv_series"
"""
type tv_series_aggregate {
  aggregate: tv_series_aggregate_fields
  nodes: [tv_series!]!
}

"""
aggregate fields of "tv_series"
"""
type tv_series_aggregate_fields {
  avg: tv_series_avg_fields
  count(columns: [tv_series_select_column!], distinct: Boolean): Int
  max: tv_series_max_fields
  min: tv_series_min_fields
  stddev: tv_series_stddev_fields
  stddev_pop: tv_series_stddev_pop_fields
  stddev_samp: tv_series_stddev_samp_fields
  sum: tv_series_sum_fields
  var_pop: tv_series_var_pop_fields
  var_samp: tv_series_var_samp_fields
  variance: tv_series_variance_fields
}

"""
order by aggregate values of table "tv_series"
"""
input tv_series_aggregate_order_by {
  avg: tv_series_avg_order_by
  count: order_by
  max: tv_series_max_order_by
  min: tv_series_min_order_by
  stddev: tv_series_stddev_order_by
  stddev_pop: tv_series_stddev_pop_order_by
  stddev_samp: tv_series_stddev_samp_order_by
  sum: tv_series_sum_order_by
  var_pop: tv_series_var_pop_order_by
  var_samp: tv_series_var_samp_order_by
  variance: tv_series_variance_order_by
}

"""
input type for inserting array relation for remote table "tv_series"
"""
input tv_series_arr_rel_insert_input {
  data: [tv_series_insert_input!]!
  on_conflict: tv_series_on_conflict
}

"""aggregate avg on columns"""
type tv_series_avg_fields {
  id: Float
  share: Float
  weekly_rank: Float
}

"""
order by avg() on columns of table "tv_series"
"""
input tv_series_avg_order_by {
  id: order_by
  share: order_by
  weekly_rank: order_by
}

"""
Boolean expression to filter rows from the table "tv_series". All fields are combined with a logical 'AND'.
"""
input tv_series_bool_exp {
  _and: [tv_series_bool_exp]
  _not: tv_series_bool_exp
  _or: [tv_series_bool_exp]
  air_date: String_comparison_exp
  channel: String_comparison_exp
  episode: String_comparison_exp
  id: Float_comparison_exp
  rating: String_comparison_exp
  share: Float_comparison_exp
  tv_channel: tv_channel_bool_exp
  viewers_m: String_comparison_exp
  weekly_rank: Float_comparison_exp
}

"""
unique or primary key constraints on table "tv_series"
"""
enum tv_series_constraint {
  """unique or primary key constraint"""
  idx_18173_sqlite_autoindex_tv_series_1
}

"""
input type for incrementing integer column in table "tv_series"
"""
input tv_series_inc_input {
  id: Float
  share: Float
  weekly_rank: Float
}

"""
input type for inserting data into table "tv_series"
"""
input tv_series_insert_input {
  air_date: String
  channel: String
  episode: String
  id: Float
  rating: String
  share: Float
  tv_channel: tv_channel_obj_rel_insert_input
  viewers_m: String
  weekly_rank: Float
}

"""aggregate max on columns"""
type tv_series_max_fields {
  air_date: String
  channel: String
  episode: String
  id: Float
  rating: String
  share: Float
  viewers_m: String
  weekly_rank: Float
}

"""
order by max() on columns of table "tv_series"
"""
input tv_series_max_order_by {
  air_date: order_by
  channel: order_by
  episode: order_by
  id: order_by
  rating: order_by
  share: order_by
  viewers_m: order_by
  weekly_rank: order_by
}

"""aggregate min on columns"""
type tv_series_min_fields {
  air_date: String
  channel: String
  episode: String
  id: Float
  rating: String
  share: Float
  viewers_m: String
  weekly_rank: Float
}

"""
order by min() on columns of table "tv_series"
"""
input tv_series_min_order_by {
  air_date: order_by
  channel: order_by
  episode: order_by
  id: order_by
  rating: order_by
  share: order_by
  viewers_m: order_by
  weekly_rank: order_by
}

"""
response of any mutation on the table "tv_series"
"""
type tv_series_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [tv_series!]!
}

"""
input type for inserting object relation for remote table "tv_series"
"""
input tv_series_obj_rel_insert_input {
  data: tv_series_insert_input!
  on_conflict: tv_series_on_conflict
}

"""
on conflict condition type for table "tv_series"
"""
input tv_series_on_conflict {
  constraint: tv_series_constraint!
  update_columns: [tv_series_update_column!]!
  where: tv_series_bool_exp
}

"""
ordering options when selecting data from "tv_series"
"""
input tv_series_order_by {
  air_date: order_by
  channel: order_by
  episode: order_by
  id: order_by
  rating: order_by
  share: order_by
  tv_channel: tv_channel_order_by
  viewers_m: order_by
  weekly_rank: order_by
}

"""
primary key columns input for table: "tv_series"
"""
input tv_series_pk_columns_input {
  id: Float!
}

"""
select columns of table "tv_series"
"""
enum tv_series_select_column {
  """column name"""
  air_date

  """column name"""
  channel

  """column name"""
  episode

  """column name"""
  id

  """column name"""
  rating

  """column name"""
  share

  """column name"""
  viewers_m

  """column name"""
  weekly_rank
}

"""
input type for updating data in table "tv_series"
"""
input tv_series_set_input {
  air_date: String
  channel: String
  episode: String
  id: Float
  rating: String
  share: Float
  viewers_m: String
  weekly_rank: Float
}

"""aggregate stddev on columns"""
type tv_series_stddev_fields {
  id: Float
  share: Float
  weekly_rank: Float
}

"""
order by stddev() on columns of table "tv_series"
"""
input tv_series_stddev_order_by {
  id: order_by
  share: order_by
  weekly_rank: order_by
}

"""aggregate stddev_pop on columns"""
type tv_series_stddev_pop_fields {
  id: Float
  share: Float
  weekly_rank: Float
}

"""
order by stddev_pop() on columns of table "tv_series"
"""
input tv_series_stddev_pop_order_by {
  id: order_by
  share: order_by
  weekly_rank: order_by
}

"""aggregate stddev_samp on columns"""
type tv_series_stddev_samp_fields {
  id: Float
  share: Float
  weekly_rank: Float
}

"""
order by stddev_samp() on columns of table "tv_series"
"""
input tv_series_stddev_samp_order_by {
  id: order_by
  share: order_by
  weekly_rank: order_by
}

"""aggregate sum on columns"""
type tv_series_sum_fields {
  id: Float
  share: Float
  weekly_rank: Float
}

"""
order by sum() on columns of table "tv_series"
"""
input tv_series_sum_order_by {
  id: order_by
  share: order_by
  weekly_rank: order_by
}

"""
update columns of table "tv_series"
"""
enum tv_series_update_column {
  """column name"""
  air_date

  """column name"""
  channel

  """column name"""
  episode

  """column name"""
  id

  """column name"""
  rating

  """column name"""
  share

  """column name"""
  viewers_m

  """column name"""
  weekly_rank
}

"""aggregate var_pop on columns"""
type tv_series_var_pop_fields {
  id: Float
  share: Float
  weekly_rank: Float
}

"""
order by var_pop() on columns of table "tv_series"
"""
input tv_series_var_pop_order_by {
  id: order_by
  share: order_by
  weekly_rank: order_by
}

"""aggregate var_samp on columns"""
type tv_series_var_samp_fields {
  id: Float
  share: Float
  weekly_rank: Float
}

"""
order by var_samp() on columns of table "tv_series"
"""
input tv_series_var_samp_order_by {
  id: order_by
  share: order_by
  weekly_rank: order_by
}

"""aggregate variance on columns"""
type tv_series_variance_fields {
  id: Float
  share: Float
  weekly_rank: Float
}

"""
order by variance() on columns of table "tv_series"
"""
input tv_series_variance_order_by {
  id: order_by
  share: order_by
  weekly_rank: order_by
}
