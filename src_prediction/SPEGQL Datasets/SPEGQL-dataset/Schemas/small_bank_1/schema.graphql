schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""
Direct the client to resolve this field locally, either from the cache or local resolvers.
"""
directive @client(
  """
  When true, the client will never use the cache for this value. See
  https://www.apollographql.com/docs/react/essentials/local-state/#forcing-resolvers-with-clientalways-true
  """
  always: Boolean
) on FIELD | FRAGMENT_DEFINITION | INLINE_FRAGMENT

"""
Export this locally resolved field as a variable to be used in the remainder of this query. See
https://www.apollographql.com/docs/react/essentials/local-state/#using-client-fields-as-variables
"""
directive @export(
  """The variable name to export this field as."""
  as: String!
) on FIELD

"""
Specify a custom store key for this result. See
https://www.apollographql.com/docs/react/advanced/caching/#the-connection-directive
"""
directive @connection(
  """Specify the store key."""
  key: String!

  """
  An array of query argument names to include in the generated custom store key.
  """
  filter: [String!]
) on FIELD

"""
columns and relationships of "accounts"
"""
type accounts {
  """An array relationship"""
  checkings(
    """distinct select on columns"""
    distinct_on: [checking_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [checking_order_by!]

    """filter the rows returned"""
    where: checking_bool_exp
  ): [checking!]!

  """An aggregated array relationship"""
  checkings_aggregate(
    """distinct select on columns"""
    distinct_on: [checking_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [checking_order_by!]

    """filter the rows returned"""
    where: checking_bool_exp
  ): checking_aggregate!
  custid: bigint!
  name: String

  """An array relationship"""
  savings(
    """distinct select on columns"""
    distinct_on: [savings_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [savings_order_by!]

    """filter the rows returned"""
    where: savings_bool_exp
  ): [savings!]!

  """An aggregated array relationship"""
  savings_aggregate(
    """distinct select on columns"""
    distinct_on: [savings_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [savings_order_by!]

    """filter the rows returned"""
    where: savings_bool_exp
  ): savings_aggregate!
}

"""
aggregated selection of "accounts"
"""
type accounts_aggregate {
  aggregate: accounts_aggregate_fields
  nodes: [accounts!]!
}

"""
aggregate fields of "accounts"
"""
type accounts_aggregate_fields {
  avg: accounts_avg_fields
  count(columns: [accounts_select_column!], distinct: Boolean): Int
  max: accounts_max_fields
  min: accounts_min_fields
  stddev: accounts_stddev_fields
  stddev_pop: accounts_stddev_pop_fields
  stddev_samp: accounts_stddev_samp_fields
  sum: accounts_sum_fields
  var_pop: accounts_var_pop_fields
  var_samp: accounts_var_samp_fields
  variance: accounts_variance_fields
}

"""
order by aggregate values of table "accounts"
"""
input accounts_aggregate_order_by {
  avg: accounts_avg_order_by
  count: order_by
  max: accounts_max_order_by
  min: accounts_min_order_by
  stddev: accounts_stddev_order_by
  stddev_pop: accounts_stddev_pop_order_by
  stddev_samp: accounts_stddev_samp_order_by
  sum: accounts_sum_order_by
  var_pop: accounts_var_pop_order_by
  var_samp: accounts_var_samp_order_by
  variance: accounts_variance_order_by
}

"""
input type for inserting array relation for remote table "accounts"
"""
input accounts_arr_rel_insert_input {
  data: [accounts_insert_input!]!
  on_conflict: accounts_on_conflict
}

"""aggregate avg on columns"""
type accounts_avg_fields {
  custid: Float
}

"""
order by avg() on columns of table "accounts"
"""
input accounts_avg_order_by {
  custid: order_by
}

"""
Boolean expression to filter rows from the table "accounts". All fields are combined with a logical 'AND'.
"""
input accounts_bool_exp {
  _and: [accounts_bool_exp]
  _not: accounts_bool_exp
  _or: [accounts_bool_exp]
  checkings: checking_bool_exp
  custid: bigint_comparison_exp
  name: String_comparison_exp
  savings: savings_bool_exp
}

"""
unique or primary key constraints on table "accounts"
"""
enum accounts_constraint {
  """unique or primary key constraint"""
  idx_24259_sqlite_autoindex_accounts_1
}

"""
input type for incrementing integer column in table "accounts"
"""
input accounts_inc_input {
  custid: bigint
}

"""
input type for inserting data into table "accounts"
"""
input accounts_insert_input {
  checkings: checking_arr_rel_insert_input
  custid: bigint
  name: String
  savings: savings_arr_rel_insert_input
}

"""aggregate max on columns"""
type accounts_max_fields {
  custid: bigint
  name: String
}

"""
order by max() on columns of table "accounts"
"""
input accounts_max_order_by {
  custid: order_by
  name: order_by
}

"""aggregate min on columns"""
type accounts_min_fields {
  custid: bigint
  name: String
}

"""
order by min() on columns of table "accounts"
"""
input accounts_min_order_by {
  custid: order_by
  name: order_by
}

"""
response of any mutation on the table "accounts"
"""
type accounts_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [accounts!]!
}

"""
input type for inserting object relation for remote table "accounts"
"""
input accounts_obj_rel_insert_input {
  data: accounts_insert_input!
  on_conflict: accounts_on_conflict
}

"""
on conflict condition type for table "accounts"
"""
input accounts_on_conflict {
  constraint: accounts_constraint!
  update_columns: [accounts_update_column!]!
  where: accounts_bool_exp
}

"""
ordering options when selecting data from "accounts"
"""
input accounts_order_by {
  checkings_aggregate: checking_aggregate_order_by
  custid: order_by
  name: order_by
  savings_aggregate: savings_aggregate_order_by
}

"""
primary key columns input for table: "accounts"
"""
input accounts_pk_columns_input {
  custid: bigint!
}

"""
select columns of table "accounts"
"""
enum accounts_select_column {
  """column name"""
  custid

  """column name"""
  name
}

"""
input type for updating data in table "accounts"
"""
input accounts_set_input {
  custid: bigint
  name: String
}

"""aggregate stddev on columns"""
type accounts_stddev_fields {
  custid: Float
}

"""
order by stddev() on columns of table "accounts"
"""
input accounts_stddev_order_by {
  custid: order_by
}

"""aggregate stddev_pop on columns"""
type accounts_stddev_pop_fields {
  custid: Float
}

"""
order by stddev_pop() on columns of table "accounts"
"""
input accounts_stddev_pop_order_by {
  custid: order_by
}

"""aggregate stddev_samp on columns"""
type accounts_stddev_samp_fields {
  custid: Float
}

"""
order by stddev_samp() on columns of table "accounts"
"""
input accounts_stddev_samp_order_by {
  custid: order_by
}

"""aggregate sum on columns"""
type accounts_sum_fields {
  custid: bigint
}

"""
order by sum() on columns of table "accounts"
"""
input accounts_sum_order_by {
  custid: order_by
}

"""
update columns of table "accounts"
"""
enum accounts_update_column {
  """column name"""
  custid

  """column name"""
  name
}

"""aggregate var_pop on columns"""
type accounts_var_pop_fields {
  custid: Float
}

"""
order by var_pop() on columns of table "accounts"
"""
input accounts_var_pop_order_by {
  custid: order_by
}

"""aggregate var_samp on columns"""
type accounts_var_samp_fields {
  custid: Float
}

"""
order by var_samp() on columns of table "accounts"
"""
input accounts_var_samp_order_by {
  custid: order_by
}

"""aggregate variance on columns"""
type accounts_variance_fields {
  custid: Float
}

"""
order by variance() on columns of table "accounts"
"""
input accounts_variance_order_by {
  custid: order_by
}

scalar bigint

"""
expression to compare columns of type bigint. All fields are combined with logical 'AND'.
"""
input bigint_comparison_exp {
  _eq: bigint
  _gt: bigint
  _gte: bigint
  _in: [bigint!]
  _is_null: Boolean
  _lt: bigint
  _lte: bigint
  _neq: bigint
  _nin: [bigint!]
}

"""
columns and relationships of "checking"
"""
type checking {
  """An object relationship"""
  account: accounts!
  balance: float8
  custid: bigint!
}

"""
aggregated selection of "checking"
"""
type checking_aggregate {
  aggregate: checking_aggregate_fields
  nodes: [checking!]!
}

"""
aggregate fields of "checking"
"""
type checking_aggregate_fields {
  avg: checking_avg_fields
  count(columns: [checking_select_column!], distinct: Boolean): Int
  max: checking_max_fields
  min: checking_min_fields
  stddev: checking_stddev_fields
  stddev_pop: checking_stddev_pop_fields
  stddev_samp: checking_stddev_samp_fields
  sum: checking_sum_fields
  var_pop: checking_var_pop_fields
  var_samp: checking_var_samp_fields
  variance: checking_variance_fields
}

"""
order by aggregate values of table "checking"
"""
input checking_aggregate_order_by {
  avg: checking_avg_order_by
  count: order_by
  max: checking_max_order_by
  min: checking_min_order_by
  stddev: checking_stddev_order_by
  stddev_pop: checking_stddev_pop_order_by
  stddev_samp: checking_stddev_samp_order_by
  sum: checking_sum_order_by
  var_pop: checking_var_pop_order_by
  var_samp: checking_var_samp_order_by
  variance: checking_variance_order_by
}

"""
input type for inserting array relation for remote table "checking"
"""
input checking_arr_rel_insert_input {
  data: [checking_insert_input!]!
  on_conflict: checking_on_conflict
}

"""aggregate avg on columns"""
type checking_avg_fields {
  balance: Float
  custid: Float
}

"""
order by avg() on columns of table "checking"
"""
input checking_avg_order_by {
  balance: order_by
  custid: order_by
}

"""
Boolean expression to filter rows from the table "checking". All fields are combined with a logical 'AND'.
"""
input checking_bool_exp {
  _and: [checking_bool_exp]
  _not: checking_bool_exp
  _or: [checking_bool_exp]
  account: accounts_bool_exp
  balance: float8_comparison_exp
  custid: bigint_comparison_exp
}

"""
unique or primary key constraints on table "checking"
"""
enum checking_constraint {
  """unique or primary key constraint"""
  idx_24268_sqlite_autoindex_checking_1
}

"""
input type for incrementing integer column in table "checking"
"""
input checking_inc_input {
  balance: float8
  custid: bigint
}

"""
input type for inserting data into table "checking"
"""
input checking_insert_input {
  account: accounts_obj_rel_insert_input
  balance: float8
  custid: bigint
}

"""aggregate max on columns"""
type checking_max_fields {
  balance: float8
  custid: bigint
}

"""
order by max() on columns of table "checking"
"""
input checking_max_order_by {
  balance: order_by
  custid: order_by
}

"""aggregate min on columns"""
type checking_min_fields {
  balance: float8
  custid: bigint
}

"""
order by min() on columns of table "checking"
"""
input checking_min_order_by {
  balance: order_by
  custid: order_by
}

"""
response of any mutation on the table "checking"
"""
type checking_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [checking!]!
}

"""
input type for inserting object relation for remote table "checking"
"""
input checking_obj_rel_insert_input {
  data: checking_insert_input!
  on_conflict: checking_on_conflict
}

"""
on conflict condition type for table "checking"
"""
input checking_on_conflict {
  constraint: checking_constraint!
  update_columns: [checking_update_column!]!
  where: checking_bool_exp
}

"""
ordering options when selecting data from "checking"
"""
input checking_order_by {
  account: accounts_order_by
  balance: order_by
  custid: order_by
}

"""
primary key columns input for table: "checking"
"""
input checking_pk_columns_input {
  custid: bigint!
}

"""
select columns of table "checking"
"""
enum checking_select_column {
  """column name"""
  balance

  """column name"""
  custid
}

"""
input type for updating data in table "checking"
"""
input checking_set_input {
  balance: float8
  custid: bigint
}

"""aggregate stddev on columns"""
type checking_stddev_fields {
  balance: Float
  custid: Float
}

"""
order by stddev() on columns of table "checking"
"""
input checking_stddev_order_by {
  balance: order_by
  custid: order_by
}

"""aggregate stddev_pop on columns"""
type checking_stddev_pop_fields {
  balance: Float
  custid: Float
}

"""
order by stddev_pop() on columns of table "checking"
"""
input checking_stddev_pop_order_by {
  balance: order_by
  custid: order_by
}

"""aggregate stddev_samp on columns"""
type checking_stddev_samp_fields {
  balance: Float
  custid: Float
}

"""
order by stddev_samp() on columns of table "checking"
"""
input checking_stddev_samp_order_by {
  balance: order_by
  custid: order_by
}

"""aggregate sum on columns"""
type checking_sum_fields {
  balance: float8
  custid: bigint
}

"""
order by sum() on columns of table "checking"
"""
input checking_sum_order_by {
  balance: order_by
  custid: order_by
}

"""
update columns of table "checking"
"""
enum checking_update_column {
  """column name"""
  balance

  """column name"""
  custid
}

"""aggregate var_pop on columns"""
type checking_var_pop_fields {
  balance: Float
  custid: Float
}

"""
order by var_pop() on columns of table "checking"
"""
input checking_var_pop_order_by {
  balance: order_by
  custid: order_by
}

"""aggregate var_samp on columns"""
type checking_var_samp_fields {
  balance: Float
  custid: Float
}

"""
order by var_samp() on columns of table "checking"
"""
input checking_var_samp_order_by {
  balance: order_by
  custid: order_by
}

"""aggregate variance on columns"""
type checking_variance_fields {
  balance: Float
  custid: Float
}

"""
order by variance() on columns of table "checking"
"""
input checking_variance_order_by {
  balance: order_by
  custid: order_by
}

scalar float8

"""
expression to compare columns of type float8. All fields are combined with logical 'AND'.
"""
input float8_comparison_exp {
  _eq: float8
  _gt: float8
  _gte: float8
  _in: [float8!]
  _is_null: Boolean
  _lt: float8
  _lte: float8
  _neq: float8
  _nin: [float8!]
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "accounts"
  """
  delete_accounts(
    """filter the rows which have to be deleted"""
    where: accounts_bool_exp!
  ): accounts_mutation_response

  """
  delete single row from the table: "accounts"
  """
  delete_accounts_by_pk(custid: bigint!): accounts

  """
  delete data from the table: "checking"
  """
  delete_checking(
    """filter the rows which have to be deleted"""
    where: checking_bool_exp!
  ): checking_mutation_response

  """
  delete single row from the table: "checking"
  """
  delete_checking_by_pk(custid: bigint!): checking

  """
  delete data from the table: "savings"
  """
  delete_savings(
    """filter the rows which have to be deleted"""
    where: savings_bool_exp!
  ): savings_mutation_response

  """
  delete single row from the table: "savings"
  """
  delete_savings_by_pk(custid: bigint!): savings

  """
  insert data into the table: "accounts"
  """
  insert_accounts(
    """the rows to be inserted"""
    objects: [accounts_insert_input!]!

    """on conflict condition"""
    on_conflict: accounts_on_conflict
  ): accounts_mutation_response

  """
  insert a single row into the table: "accounts"
  """
  insert_accounts_one(
    """the row to be inserted"""
    object: accounts_insert_input!

    """on conflict condition"""
    on_conflict: accounts_on_conflict
  ): accounts

  """
  insert data into the table: "checking"
  """
  insert_checking(
    """the rows to be inserted"""
    objects: [checking_insert_input!]!

    """on conflict condition"""
    on_conflict: checking_on_conflict
  ): checking_mutation_response

  """
  insert a single row into the table: "checking"
  """
  insert_checking_one(
    """the row to be inserted"""
    object: checking_insert_input!

    """on conflict condition"""
    on_conflict: checking_on_conflict
  ): checking

  """
  insert data into the table: "savings"
  """
  insert_savings(
    """the rows to be inserted"""
    objects: [savings_insert_input!]!

    """on conflict condition"""
    on_conflict: savings_on_conflict
  ): savings_mutation_response

  """
  insert a single row into the table: "savings"
  """
  insert_savings_one(
    """the row to be inserted"""
    object: savings_insert_input!

    """on conflict condition"""
    on_conflict: savings_on_conflict
  ): savings

  """
  update data of the table: "accounts"
  """
  update_accounts(
    """increments the integer columns with given value of the filtered values"""
    _inc: accounts_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: accounts_set_input

    """filter the rows which have to be updated"""
    where: accounts_bool_exp!
  ): accounts_mutation_response

  """
  update single row of the table: "accounts"
  """
  update_accounts_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: accounts_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: accounts_set_input
    pk_columns: accounts_pk_columns_input!
  ): accounts

  """
  update data of the table: "checking"
  """
  update_checking(
    """increments the integer columns with given value of the filtered values"""
    _inc: checking_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: checking_set_input

    """filter the rows which have to be updated"""
    where: checking_bool_exp!
  ): checking_mutation_response

  """
  update single row of the table: "checking"
  """
  update_checking_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: checking_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: checking_set_input
    pk_columns: checking_pk_columns_input!
  ): checking

  """
  update data of the table: "savings"
  """
  update_savings(
    """increments the integer columns with given value of the filtered values"""
    _inc: savings_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: savings_set_input

    """filter the rows which have to be updated"""
    where: savings_bool_exp!
  ): savings_mutation_response

  """
  update single row of the table: "savings"
  """
  update_savings_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: savings_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: savings_set_input
    pk_columns: savings_pk_columns_input!
  ): savings
}

"""column ordering options"""
enum order_by {
  """in the ascending order, nulls last"""
  asc

  """in the ascending order, nulls first"""
  asc_nulls_first

  """in the ascending order, nulls last"""
  asc_nulls_last

  """in the descending order, nulls first"""
  desc

  """in the descending order, nulls first"""
  desc_nulls_first

  """in the descending order, nulls last"""
  desc_nulls_last
}

"""query root"""
type query_root {
  """
  fetch data from the table: "accounts"
  """
  accounts(
    """distinct select on columns"""
    distinct_on: [accounts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [accounts_order_by!]

    """filter the rows returned"""
    where: accounts_bool_exp
  ): [accounts!]!

  """
  fetch aggregated fields from the table: "accounts"
  """
  accounts_aggregate(
    """distinct select on columns"""
    distinct_on: [accounts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [accounts_order_by!]

    """filter the rows returned"""
    where: accounts_bool_exp
  ): accounts_aggregate!

  """fetch data from the table: "accounts" using primary key columns"""
  accounts_by_pk(custid: bigint!): accounts

  """
  fetch data from the table: "checking"
  """
  checking(
    """distinct select on columns"""
    distinct_on: [checking_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [checking_order_by!]

    """filter the rows returned"""
    where: checking_bool_exp
  ): [checking!]!

  """
  fetch aggregated fields from the table: "checking"
  """
  checking_aggregate(
    """distinct select on columns"""
    distinct_on: [checking_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [checking_order_by!]

    """filter the rows returned"""
    where: checking_bool_exp
  ): checking_aggregate!

  """fetch data from the table: "checking" using primary key columns"""
  checking_by_pk(custid: bigint!): checking

  """
  fetch data from the table: "savings"
  """
  savings(
    """distinct select on columns"""
    distinct_on: [savings_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [savings_order_by!]

    """filter the rows returned"""
    where: savings_bool_exp
  ): [savings!]!

  """
  fetch aggregated fields from the table: "savings"
  """
  savings_aggregate(
    """distinct select on columns"""
    distinct_on: [savings_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [savings_order_by!]

    """filter the rows returned"""
    where: savings_bool_exp
  ): savings_aggregate!

  """fetch data from the table: "savings" using primary key columns"""
  savings_by_pk(custid: bigint!): savings
}

"""
columns and relationships of "savings"
"""
type savings {
  """An object relationship"""
  account: accounts!
  balance: float8
  custid: bigint!
}

"""
aggregated selection of "savings"
"""
type savings_aggregate {
  aggregate: savings_aggregate_fields
  nodes: [savings!]!
}

"""
aggregate fields of "savings"
"""
type savings_aggregate_fields {
  avg: savings_avg_fields
  count(columns: [savings_select_column!], distinct: Boolean): Int
  max: savings_max_fields
  min: savings_min_fields
  stddev: savings_stddev_fields
  stddev_pop: savings_stddev_pop_fields
  stddev_samp: savings_stddev_samp_fields
  sum: savings_sum_fields
  var_pop: savings_var_pop_fields
  var_samp: savings_var_samp_fields
  variance: savings_variance_fields
}

"""
order by aggregate values of table "savings"
"""
input savings_aggregate_order_by {
  avg: savings_avg_order_by
  count: order_by
  max: savings_max_order_by
  min: savings_min_order_by
  stddev: savings_stddev_order_by
  stddev_pop: savings_stddev_pop_order_by
  stddev_samp: savings_stddev_samp_order_by
  sum: savings_sum_order_by
  var_pop: savings_var_pop_order_by
  var_samp: savings_var_samp_order_by
  variance: savings_variance_order_by
}

"""
input type for inserting array relation for remote table "savings"
"""
input savings_arr_rel_insert_input {
  data: [savings_insert_input!]!
  on_conflict: savings_on_conflict
}

"""aggregate avg on columns"""
type savings_avg_fields {
  balance: Float
  custid: Float
}

"""
order by avg() on columns of table "savings"
"""
input savings_avg_order_by {
  balance: order_by
  custid: order_by
}

"""
Boolean expression to filter rows from the table "savings". All fields are combined with a logical 'AND'.
"""
input savings_bool_exp {
  _and: [savings_bool_exp]
  _not: savings_bool_exp
  _or: [savings_bool_exp]
  account: accounts_bool_exp
  balance: float8_comparison_exp
  custid: bigint_comparison_exp
}

"""
unique or primary key constraints on table "savings"
"""
enum savings_constraint {
  """unique or primary key constraint"""
  idx_24265_sqlite_autoindex_savings_1
}

"""
input type for incrementing integer column in table "savings"
"""
input savings_inc_input {
  balance: float8
  custid: bigint
}

"""
input type for inserting data into table "savings"
"""
input savings_insert_input {
  account: accounts_obj_rel_insert_input
  balance: float8
  custid: bigint
}

"""aggregate max on columns"""
type savings_max_fields {
  balance: float8
  custid: bigint
}

"""
order by max() on columns of table "savings"
"""
input savings_max_order_by {
  balance: order_by
  custid: order_by
}

"""aggregate min on columns"""
type savings_min_fields {
  balance: float8
  custid: bigint
}

"""
order by min() on columns of table "savings"
"""
input savings_min_order_by {
  balance: order_by
  custid: order_by
}

"""
response of any mutation on the table "savings"
"""
type savings_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [savings!]!
}

"""
input type for inserting object relation for remote table "savings"
"""
input savings_obj_rel_insert_input {
  data: savings_insert_input!
  on_conflict: savings_on_conflict
}

"""
on conflict condition type for table "savings"
"""
input savings_on_conflict {
  constraint: savings_constraint!
  update_columns: [savings_update_column!]!
  where: savings_bool_exp
}

"""
ordering options when selecting data from "savings"
"""
input savings_order_by {
  account: accounts_order_by
  balance: order_by
  custid: order_by
}

"""
primary key columns input for table: "savings"
"""
input savings_pk_columns_input {
  custid: bigint!
}

"""
select columns of table "savings"
"""
enum savings_select_column {
  """column name"""
  balance

  """column name"""
  custid
}

"""
input type for updating data in table "savings"
"""
input savings_set_input {
  balance: float8
  custid: bigint
}

"""aggregate stddev on columns"""
type savings_stddev_fields {
  balance: Float
  custid: Float
}

"""
order by stddev() on columns of table "savings"
"""
input savings_stddev_order_by {
  balance: order_by
  custid: order_by
}

"""aggregate stddev_pop on columns"""
type savings_stddev_pop_fields {
  balance: Float
  custid: Float
}

"""
order by stddev_pop() on columns of table "savings"
"""
input savings_stddev_pop_order_by {
  balance: order_by
  custid: order_by
}

"""aggregate stddev_samp on columns"""
type savings_stddev_samp_fields {
  balance: Float
  custid: Float
}

"""
order by stddev_samp() on columns of table "savings"
"""
input savings_stddev_samp_order_by {
  balance: order_by
  custid: order_by
}

"""aggregate sum on columns"""
type savings_sum_fields {
  balance: float8
  custid: bigint
}

"""
order by sum() on columns of table "savings"
"""
input savings_sum_order_by {
  balance: order_by
  custid: order_by
}

"""
update columns of table "savings"
"""
enum savings_update_column {
  """column name"""
  balance

  """column name"""
  custid
}

"""aggregate var_pop on columns"""
type savings_var_pop_fields {
  balance: Float
  custid: Float
}

"""
order by var_pop() on columns of table "savings"
"""
input savings_var_pop_order_by {
  balance: order_by
  custid: order_by
}

"""aggregate var_samp on columns"""
type savings_var_samp_fields {
  balance: Float
  custid: Float
}

"""
order by var_samp() on columns of table "savings"
"""
input savings_var_samp_order_by {
  balance: order_by
  custid: order_by
}

"""aggregate variance on columns"""
type savings_variance_fields {
  balance: Float
  custid: Float
}

"""
order by variance() on columns of table "savings"
"""
input savings_variance_order_by {
  balance: order_by
  custid: order_by
}

"""
expression to compare columns of type String. All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String
  _ilike: String
  _in: [String!]
  _is_null: Boolean
  _like: String
  _lt: String
  _lte: String
  _neq: String
  _nilike: String
  _nin: [String!]
  _nlike: String
  _nsimilar: String
  _similar: String
}

"""subscription root"""
type subscription_root {
  """
  fetch data from the table: "accounts"
  """
  accounts(
    """distinct select on columns"""
    distinct_on: [accounts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [accounts_order_by!]

    """filter the rows returned"""
    where: accounts_bool_exp
  ): [accounts!]!

  """
  fetch aggregated fields from the table: "accounts"
  """
  accounts_aggregate(
    """distinct select on columns"""
    distinct_on: [accounts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [accounts_order_by!]

    """filter the rows returned"""
    where: accounts_bool_exp
  ): accounts_aggregate!

  """fetch data from the table: "accounts" using primary key columns"""
  accounts_by_pk(custid: bigint!): accounts

  """
  fetch data from the table: "checking"
  """
  checking(
    """distinct select on columns"""
    distinct_on: [checking_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [checking_order_by!]

    """filter the rows returned"""
    where: checking_bool_exp
  ): [checking!]!

  """
  fetch aggregated fields from the table: "checking"
  """
  checking_aggregate(
    """distinct select on columns"""
    distinct_on: [checking_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [checking_order_by!]

    """filter the rows returned"""
    where: checking_bool_exp
  ): checking_aggregate!

  """fetch data from the table: "checking" using primary key columns"""
  checking_by_pk(custid: bigint!): checking

  """
  fetch data from the table: "savings"
  """
  savings(
    """distinct select on columns"""
    distinct_on: [savings_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [savings_order_by!]

    """filter the rows returned"""
    where: savings_bool_exp
  ): [savings!]!

  """
  fetch aggregated fields from the table: "savings"
  """
  savings_aggregate(
    """distinct select on columns"""
    distinct_on: [savings_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [savings_order_by!]

    """filter the rows returned"""
    where: savings_bool_exp
  ): savings_aggregate!

  """fetch data from the table: "savings" using primary key columns"""
  savings_by_pk(custid: bigint!): savings
}
