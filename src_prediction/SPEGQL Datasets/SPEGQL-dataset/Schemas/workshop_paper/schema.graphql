schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""
Direct the client to resolve this field locally, either from the cache or local resolvers.
"""
directive @client(
  """
  When true, the client will never use the cache for this value. See
  https://www.apollographql.com/docs/react/essentials/local-state/#forcing-resolvers-with-clientalways-true
  """
  always: Boolean
) on FIELD | FRAGMENT_DEFINITION | INLINE_FRAGMENT

"""
Export this locally resolved field as a variable to be used in the remainder of this query. See
https://www.apollographql.com/docs/react/essentials/local-state/#using-client-fields-as-variables
"""
directive @export(
  """The variable name to export this field as."""
  as: String!
) on FIELD

"""
Specify a custom store key for this result. See
https://www.apollographql.com/docs/react/advanced/caching/#the-connection-directive
"""
directive @connection(
  """Specify the store key."""
  key: String!

  """
  An array of query argument names to include in the generated custom store key.
  """
  filter: [String!]
) on FIELD

"""
columns and relationships of "acceptance"
"""
type acceptance {
  result: String

  """An object relationship"""
  submission: submission
  submission_id: Int

  """An object relationship"""
  workshop: workshop
  workshop_id: Int
}

"""
aggregated selection of "acceptance"
"""
type acceptance_aggregate {
  aggregate: acceptance_aggregate_fields
  nodes: [acceptance!]!
}

"""
aggregate fields of "acceptance"
"""
type acceptance_aggregate_fields {
  avg: acceptance_avg_fields
  count(columns: [acceptance_select_column!], distinct: Boolean): Int
  max: acceptance_max_fields
  min: acceptance_min_fields
  stddev: acceptance_stddev_fields
  stddev_pop: acceptance_stddev_pop_fields
  stddev_samp: acceptance_stddev_samp_fields
  sum: acceptance_sum_fields
  var_pop: acceptance_var_pop_fields
  var_samp: acceptance_var_samp_fields
  variance: acceptance_variance_fields
}

"""
order by aggregate values of table "acceptance"
"""
input acceptance_aggregate_order_by {
  avg: acceptance_avg_order_by
  count: order_by
  max: acceptance_max_order_by
  min: acceptance_min_order_by
  stddev: acceptance_stddev_order_by
  stddev_pop: acceptance_stddev_pop_order_by
  stddev_samp: acceptance_stddev_samp_order_by
  sum: acceptance_sum_order_by
  var_pop: acceptance_var_pop_order_by
  var_samp: acceptance_var_samp_order_by
  variance: acceptance_variance_order_by
}

"""
input type for inserting array relation for remote table "acceptance"
"""
input acceptance_arr_rel_insert_input {
  data: [acceptance_insert_input!]!
  on_conflict: acceptance_on_conflict
}

"""aggregate avg on columns"""
type acceptance_avg_fields {
  submission_id: Float
  workshop_id: Float
}

"""
order by avg() on columns of table "acceptance"
"""
input acceptance_avg_order_by {
  submission_id: order_by
  workshop_id: order_by
}

"""
Boolean expression to filter rows from the table "acceptance". All fields are combined with a logical 'AND'.
"""
input acceptance_bool_exp {
  _and: [acceptance_bool_exp]
  _not: acceptance_bool_exp
  _or: [acceptance_bool_exp]
  result: String_comparison_exp
  submission: submission_bool_exp
  submission_id: Int_comparison_exp
  workshop: workshop_bool_exp
  workshop_id: Int_comparison_exp
}

"""
unique or primary key constraints on table "acceptance"
"""
enum acceptance_constraint {
  """unique or primary key constraint"""
  idx_24449_sqlite_autoindex_acceptance_1
}

"""
input type for incrementing integer column in table "acceptance"
"""
input acceptance_inc_input {
  submission_id: Int
  workshop_id: Int
}

"""
input type for inserting data into table "acceptance"
"""
input acceptance_insert_input {
  result: String
  submission: submission_obj_rel_insert_input
  submission_id: Int
  workshop: workshop_obj_rel_insert_input
  workshop_id: Int
}

"""aggregate max on columns"""
type acceptance_max_fields {
  result: String
  submission_id: Int
  workshop_id: Int
}

"""
order by max() on columns of table "acceptance"
"""
input acceptance_max_order_by {
  result: order_by
  submission_id: order_by
  workshop_id: order_by
}

"""aggregate min on columns"""
type acceptance_min_fields {
  result: String
  submission_id: Int
  workshop_id: Int
}

"""
order by min() on columns of table "acceptance"
"""
input acceptance_min_order_by {
  result: order_by
  submission_id: order_by
  workshop_id: order_by
}

"""
response of any mutation on the table "acceptance"
"""
type acceptance_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [acceptance!]!
}

"""
input type for inserting object relation for remote table "acceptance"
"""
input acceptance_obj_rel_insert_input {
  data: acceptance_insert_input!
  on_conflict: acceptance_on_conflict
}

"""
on conflict condition type for table "acceptance"
"""
input acceptance_on_conflict {
  constraint: acceptance_constraint!
  update_columns: [acceptance_update_column!]!
  where: acceptance_bool_exp
}

"""
ordering options when selecting data from "acceptance"
"""
input acceptance_order_by {
  result: order_by
  submission: submission_order_by
  submission_id: order_by
  workshop: workshop_order_by
  workshop_id: order_by
}

"""
select columns of table "acceptance"
"""
enum acceptance_select_column {
  """column name"""
  result

  """column name"""
  submission_id

  """column name"""
  workshop_id
}

"""
input type for updating data in table "acceptance"
"""
input acceptance_set_input {
  result: String
  submission_id: Int
  workshop_id: Int
}

"""aggregate stddev on columns"""
type acceptance_stddev_fields {
  submission_id: Float
  workshop_id: Float
}

"""
order by stddev() on columns of table "acceptance"
"""
input acceptance_stddev_order_by {
  submission_id: order_by
  workshop_id: order_by
}

"""aggregate stddev_pop on columns"""
type acceptance_stddev_pop_fields {
  submission_id: Float
  workshop_id: Float
}

"""
order by stddev_pop() on columns of table "acceptance"
"""
input acceptance_stddev_pop_order_by {
  submission_id: order_by
  workshop_id: order_by
}

"""aggregate stddev_samp on columns"""
type acceptance_stddev_samp_fields {
  submission_id: Float
  workshop_id: Float
}

"""
order by stddev_samp() on columns of table "acceptance"
"""
input acceptance_stddev_samp_order_by {
  submission_id: order_by
  workshop_id: order_by
}

"""aggregate sum on columns"""
type acceptance_sum_fields {
  submission_id: Int
  workshop_id: Int
}

"""
order by sum() on columns of table "acceptance"
"""
input acceptance_sum_order_by {
  submission_id: order_by
  workshop_id: order_by
}

"""
update columns of table "acceptance"
"""
enum acceptance_update_column {
  """column name"""
  result

  """column name"""
  submission_id

  """column name"""
  workshop_id
}

"""aggregate var_pop on columns"""
type acceptance_var_pop_fields {
  submission_id: Float
  workshop_id: Float
}

"""
order by var_pop() on columns of table "acceptance"
"""
input acceptance_var_pop_order_by {
  submission_id: order_by
  workshop_id: order_by
}

"""aggregate var_samp on columns"""
type acceptance_var_samp_fields {
  submission_id: Float
  workshop_id: Float
}

"""
order by var_samp() on columns of table "acceptance"
"""
input acceptance_var_samp_order_by {
  submission_id: order_by
  workshop_id: order_by
}

"""aggregate variance on columns"""
type acceptance_variance_fields {
  submission_id: Float
  workshop_id: Float
}

"""
order by variance() on columns of table "acceptance"
"""
input acceptance_variance_order_by {
  submission_id: order_by
  workshop_id: order_by
}

"""
expression to compare columns of type Float. All fields are combined with logical 'AND'.
"""
input Float_comparison_exp {
  _eq: Float
  _gt: Float
  _gte: Float
  _in: [Float!]
  _is_null: Boolean
  _lt: Float
  _lte: Float
  _neq: Float
  _nin: [Float!]
}

"""
expression to compare columns of type Int. All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "acceptance"
  """
  delete_acceptance(
    """filter the rows which have to be deleted"""
    where: acceptance_bool_exp!
  ): acceptance_mutation_response

  """
  delete data from the table: "submission"
  """
  delete_submission(
    """filter the rows which have to be deleted"""
    where: submission_bool_exp!
  ): submission_mutation_response

  """
  delete data from the table: "workshop"
  """
  delete_workshop(
    """filter the rows which have to be deleted"""
    where: workshop_bool_exp!
  ): workshop_mutation_response

  """
  insert data into the table: "acceptance"
  """
  insert_acceptance(
    """the rows to be inserted"""
    objects: [acceptance_insert_input!]!

    """on conflict condition"""
    on_conflict: acceptance_on_conflict
  ): acceptance_mutation_response

  """
  insert a single row into the table: "acceptance"
  """
  insert_acceptance_one(
    """the row to be inserted"""
    object: acceptance_insert_input!

    """on conflict condition"""
    on_conflict: acceptance_on_conflict
  ): acceptance

  """
  insert data into the table: "submission"
  """
  insert_submission(
    """the rows to be inserted"""
    objects: [submission_insert_input!]!

    """on conflict condition"""
    on_conflict: submission_on_conflict
  ): submission_mutation_response

  """
  insert a single row into the table: "submission"
  """
  insert_submission_one(
    """the row to be inserted"""
    object: submission_insert_input!

    """on conflict condition"""
    on_conflict: submission_on_conflict
  ): submission

  """
  insert data into the table: "workshop"
  """
  insert_workshop(
    """the rows to be inserted"""
    objects: [workshop_insert_input!]!

    """on conflict condition"""
    on_conflict: workshop_on_conflict
  ): workshop_mutation_response

  """
  insert a single row into the table: "workshop"
  """
  insert_workshop_one(
    """the row to be inserted"""
    object: workshop_insert_input!

    """on conflict condition"""
    on_conflict: workshop_on_conflict
  ): workshop

  """
  update data of the table: "acceptance"
  """
  update_acceptance(
    """increments the integer columns with given value of the filtered values"""
    _inc: acceptance_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: acceptance_set_input

    """filter the rows which have to be updated"""
    where: acceptance_bool_exp!
  ): acceptance_mutation_response

  """
  update data of the table: "submission"
  """
  update_submission(
    """increments the integer columns with given value of the filtered values"""
    _inc: submission_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: submission_set_input

    """filter the rows which have to be updated"""
    where: submission_bool_exp!
  ): submission_mutation_response

  """
  update data of the table: "workshop"
  """
  update_workshop(
    """increments the integer columns with given value of the filtered values"""
    _inc: workshop_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: workshop_set_input

    """filter the rows which have to be updated"""
    where: workshop_bool_exp!
  ): workshop_mutation_response
}

"""column ordering options"""
enum order_by {
  """in the ascending order, nulls last"""
  asc

  """in the ascending order, nulls first"""
  asc_nulls_first

  """in the ascending order, nulls last"""
  asc_nulls_last

  """in the descending order, nulls first"""
  desc

  """in the descending order, nulls first"""
  desc_nulls_first

  """in the descending order, nulls last"""
  desc_nulls_last
}

"""query root"""
type query_root {
  """
  fetch data from the table: "acceptance"
  """
  acceptance(
    """distinct select on columns"""
    distinct_on: [acceptance_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [acceptance_order_by!]

    """filter the rows returned"""
    where: acceptance_bool_exp
  ): [acceptance!]!

  """
  fetch aggregated fields from the table: "acceptance"
  """
  acceptance_aggregate(
    """distinct select on columns"""
    distinct_on: [acceptance_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [acceptance_order_by!]

    """filter the rows returned"""
    where: acceptance_bool_exp
  ): acceptance_aggregate!

  """
  fetch data from the table: "submission"
  """
  submission(
    """distinct select on columns"""
    distinct_on: [submission_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [submission_order_by!]

    """filter the rows returned"""
    where: submission_bool_exp
  ): [submission!]!

  """
  fetch aggregated fields from the table: "submission"
  """
  submission_aggregate(
    """distinct select on columns"""
    distinct_on: [submission_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [submission_order_by!]

    """filter the rows returned"""
    where: submission_bool_exp
  ): submission_aggregate!

  """
  fetch data from the table: "workshop"
  """
  workshop(
    """distinct select on columns"""
    distinct_on: [workshop_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [workshop_order_by!]

    """filter the rows returned"""
    where: workshop_bool_exp
  ): [workshop!]!

  """
  fetch aggregated fields from the table: "workshop"
  """
  workshop_aggregate(
    """distinct select on columns"""
    distinct_on: [workshop_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [workshop_order_by!]

    """filter the rows returned"""
    where: workshop_bool_exp
  ): workshop_aggregate!
}

"""
expression to compare columns of type String. All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String
  _ilike: String
  _in: [String!]
  _is_null: Boolean
  _like: String
  _lt: String
  _lte: String
  _neq: String
  _nilike: String
  _nin: [String!]
  _nlike: String
  _nsimilar: String
  _similar: String
}

"""
columns and relationships of "submission"
"""
type submission {
  """An array relationship"""
  acceptances(
    """distinct select on columns"""
    distinct_on: [acceptance_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [acceptance_order_by!]

    """filter the rows returned"""
    where: acceptance_bool_exp
  ): [acceptance!]!

  """An aggregated array relationship"""
  acceptances_aggregate(
    """distinct select on columns"""
    distinct_on: [acceptance_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [acceptance_order_by!]

    """filter the rows returned"""
    where: acceptance_bool_exp
  ): acceptance_aggregate!
  author: String
  college: String
  scores: Float
  submission_id: Int
}

"""
aggregated selection of "submission"
"""
type submission_aggregate {
  aggregate: submission_aggregate_fields
  nodes: [submission!]!
}

"""
aggregate fields of "submission"
"""
type submission_aggregate_fields {
  avg: submission_avg_fields
  count(columns: [submission_select_column!], distinct: Boolean): Int
  max: submission_max_fields
  min: submission_min_fields
  stddev: submission_stddev_fields
  stddev_pop: submission_stddev_pop_fields
  stddev_samp: submission_stddev_samp_fields
  sum: submission_sum_fields
  var_pop: submission_var_pop_fields
  var_samp: submission_var_samp_fields
  variance: submission_variance_fields
}

"""
order by aggregate values of table "submission"
"""
input submission_aggregate_order_by {
  avg: submission_avg_order_by
  count: order_by
  max: submission_max_order_by
  min: submission_min_order_by
  stddev: submission_stddev_order_by
  stddev_pop: submission_stddev_pop_order_by
  stddev_samp: submission_stddev_samp_order_by
  sum: submission_sum_order_by
  var_pop: submission_var_pop_order_by
  var_samp: submission_var_samp_order_by
  variance: submission_variance_order_by
}

"""
input type for inserting array relation for remote table "submission"
"""
input submission_arr_rel_insert_input {
  data: [submission_insert_input!]!
  on_conflict: submission_on_conflict
}

"""aggregate avg on columns"""
type submission_avg_fields {
  scores: Float
  submission_id: Float
}

"""
order by avg() on columns of table "submission"
"""
input submission_avg_order_by {
  scores: order_by
  submission_id: order_by
}

"""
Boolean expression to filter rows from the table "submission". All fields are combined with a logical 'AND'.
"""
input submission_bool_exp {
  _and: [submission_bool_exp]
  _not: submission_bool_exp
  _or: [submission_bool_exp]
  acceptances: acceptance_bool_exp
  author: String_comparison_exp
  college: String_comparison_exp
  scores: Float_comparison_exp
  submission_id: Int_comparison_exp
}

"""
unique or primary key constraints on table "submission"
"""
enum submission_constraint {
  """unique or primary key constraint"""
  idx_24443_sqlite_autoindex_submission_1
}

"""
input type for incrementing integer column in table "submission"
"""
input submission_inc_input {
  scores: Float
  submission_id: Int
}

"""
input type for inserting data into table "submission"
"""
input submission_insert_input {
  acceptances: acceptance_arr_rel_insert_input
  author: String
  college: String
  scores: Float
  submission_id: Int
}

"""aggregate max on columns"""
type submission_max_fields {
  author: String
  college: String
  scores: Float
  submission_id: Int
}

"""
order by max() on columns of table "submission"
"""
input submission_max_order_by {
  author: order_by
  college: order_by
  scores: order_by
  submission_id: order_by
}

"""aggregate min on columns"""
type submission_min_fields {
  author: String
  college: String
  scores: Float
  submission_id: Int
}

"""
order by min() on columns of table "submission"
"""
input submission_min_order_by {
  author: order_by
  college: order_by
  scores: order_by
  submission_id: order_by
}

"""
response of any mutation on the table "submission"
"""
type submission_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [submission!]!
}

"""
input type for inserting object relation for remote table "submission"
"""
input submission_obj_rel_insert_input {
  data: submission_insert_input!
  on_conflict: submission_on_conflict
}

"""
on conflict condition type for table "submission"
"""
input submission_on_conflict {
  constraint: submission_constraint!
  update_columns: [submission_update_column!]!
  where: submission_bool_exp
}

"""
ordering options when selecting data from "submission"
"""
input submission_order_by {
  acceptances_aggregate: acceptance_aggregate_order_by
  author: order_by
  college: order_by
  scores: order_by
  submission_id: order_by
}

"""
select columns of table "submission"
"""
enum submission_select_column {
  """column name"""
  author

  """column name"""
  college

  """column name"""
  scores

  """column name"""
  submission_id
}

"""
input type for updating data in table "submission"
"""
input submission_set_input {
  author: String
  college: String
  scores: Float
  submission_id: Int
}

"""aggregate stddev on columns"""
type submission_stddev_fields {
  scores: Float
  submission_id: Float
}

"""
order by stddev() on columns of table "submission"
"""
input submission_stddev_order_by {
  scores: order_by
  submission_id: order_by
}

"""aggregate stddev_pop on columns"""
type submission_stddev_pop_fields {
  scores: Float
  submission_id: Float
}

"""
order by stddev_pop() on columns of table "submission"
"""
input submission_stddev_pop_order_by {
  scores: order_by
  submission_id: order_by
}

"""aggregate stddev_samp on columns"""
type submission_stddev_samp_fields {
  scores: Float
  submission_id: Float
}

"""
order by stddev_samp() on columns of table "submission"
"""
input submission_stddev_samp_order_by {
  scores: order_by
  submission_id: order_by
}

"""aggregate sum on columns"""
type submission_sum_fields {
  scores: Float
  submission_id: Int
}

"""
order by sum() on columns of table "submission"
"""
input submission_sum_order_by {
  scores: order_by
  submission_id: order_by
}

"""
update columns of table "submission"
"""
enum submission_update_column {
  """column name"""
  author

  """column name"""
  college

  """column name"""
  scores

  """column name"""
  submission_id
}

"""aggregate var_pop on columns"""
type submission_var_pop_fields {
  scores: Float
  submission_id: Float
}

"""
order by var_pop() on columns of table "submission"
"""
input submission_var_pop_order_by {
  scores: order_by
  submission_id: order_by
}

"""aggregate var_samp on columns"""
type submission_var_samp_fields {
  scores: Float
  submission_id: Float
}

"""
order by var_samp() on columns of table "submission"
"""
input submission_var_samp_order_by {
  scores: order_by
  submission_id: order_by
}

"""aggregate variance on columns"""
type submission_variance_fields {
  scores: Float
  submission_id: Float
}

"""
order by variance() on columns of table "submission"
"""
input submission_variance_order_by {
  scores: order_by
  submission_id: order_by
}

"""subscription root"""
type subscription_root {
  """
  fetch data from the table: "acceptance"
  """
  acceptance(
    """distinct select on columns"""
    distinct_on: [acceptance_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [acceptance_order_by!]

    """filter the rows returned"""
    where: acceptance_bool_exp
  ): [acceptance!]!

  """
  fetch aggregated fields from the table: "acceptance"
  """
  acceptance_aggregate(
    """distinct select on columns"""
    distinct_on: [acceptance_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [acceptance_order_by!]

    """filter the rows returned"""
    where: acceptance_bool_exp
  ): acceptance_aggregate!

  """
  fetch data from the table: "submission"
  """
  submission(
    """distinct select on columns"""
    distinct_on: [submission_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [submission_order_by!]

    """filter the rows returned"""
    where: submission_bool_exp
  ): [submission!]!

  """
  fetch aggregated fields from the table: "submission"
  """
  submission_aggregate(
    """distinct select on columns"""
    distinct_on: [submission_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [submission_order_by!]

    """filter the rows returned"""
    where: submission_bool_exp
  ): submission_aggregate!

  """
  fetch data from the table: "workshop"
  """
  workshop(
    """distinct select on columns"""
    distinct_on: [workshop_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [workshop_order_by!]

    """filter the rows returned"""
    where: workshop_bool_exp
  ): [workshop!]!

  """
  fetch aggregated fields from the table: "workshop"
  """
  workshop_aggregate(
    """distinct select on columns"""
    distinct_on: [workshop_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [workshop_order_by!]

    """filter the rows returned"""
    where: workshop_bool_exp
  ): workshop_aggregate!
}

"""
columns and relationships of "workshop"
"""
type workshop {
  """An array relationship"""
  acceptances(
    """distinct select on columns"""
    distinct_on: [acceptance_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [acceptance_order_by!]

    """filter the rows returned"""
    where: acceptance_bool_exp
  ): [acceptance!]!

  """An aggregated array relationship"""
  acceptances_aggregate(
    """distinct select on columns"""
    distinct_on: [acceptance_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [acceptance_order_by!]

    """filter the rows returned"""
    where: acceptance_bool_exp
  ): acceptance_aggregate!
  date: String
  name: String
  venue: String
  workshop_id: Int
}

"""
aggregated selection of "workshop"
"""
type workshop_aggregate {
  aggregate: workshop_aggregate_fields
  nodes: [workshop!]!
}

"""
aggregate fields of "workshop"
"""
type workshop_aggregate_fields {
  avg: workshop_avg_fields
  count(columns: [workshop_select_column!], distinct: Boolean): Int
  max: workshop_max_fields
  min: workshop_min_fields
  stddev: workshop_stddev_fields
  stddev_pop: workshop_stddev_pop_fields
  stddev_samp: workshop_stddev_samp_fields
  sum: workshop_sum_fields
  var_pop: workshop_var_pop_fields
  var_samp: workshop_var_samp_fields
  variance: workshop_variance_fields
}

"""
order by aggregate values of table "workshop"
"""
input workshop_aggregate_order_by {
  avg: workshop_avg_order_by
  count: order_by
  max: workshop_max_order_by
  min: workshop_min_order_by
  stddev: workshop_stddev_order_by
  stddev_pop: workshop_stddev_pop_order_by
  stddev_samp: workshop_stddev_samp_order_by
  sum: workshop_sum_order_by
  var_pop: workshop_var_pop_order_by
  var_samp: workshop_var_samp_order_by
  variance: workshop_variance_order_by
}

"""
input type for inserting array relation for remote table "workshop"
"""
input workshop_arr_rel_insert_input {
  data: [workshop_insert_input!]!
  on_conflict: workshop_on_conflict
}

"""aggregate avg on columns"""
type workshop_avg_fields {
  workshop_id: Float
}

"""
order by avg() on columns of table "workshop"
"""
input workshop_avg_order_by {
  workshop_id: order_by
}

"""
Boolean expression to filter rows from the table "workshop". All fields are combined with a logical 'AND'.
"""
input workshop_bool_exp {
  _and: [workshop_bool_exp]
  _not: workshop_bool_exp
  _or: [workshop_bool_exp]
  acceptances: acceptance_bool_exp
  date: String_comparison_exp
  name: String_comparison_exp
  venue: String_comparison_exp
  workshop_id: Int_comparison_exp
}

"""
unique or primary key constraints on table "workshop"
"""
enum workshop_constraint {
  """unique or primary key constraint"""
  idx_24437_sqlite_autoindex_workshop_1
}

"""
input type for incrementing integer column in table "workshop"
"""
input workshop_inc_input {
  workshop_id: Int
}

"""
input type for inserting data into table "workshop"
"""
input workshop_insert_input {
  acceptances: acceptance_arr_rel_insert_input
  date: String
  name: String
  venue: String
  workshop_id: Int
}

"""aggregate max on columns"""
type workshop_max_fields {
  date: String
  name: String
  venue: String
  workshop_id: Int
}

"""
order by max() on columns of table "workshop"
"""
input workshop_max_order_by {
  date: order_by
  name: order_by
  venue: order_by
  workshop_id: order_by
}

"""aggregate min on columns"""
type workshop_min_fields {
  date: String
  name: String
  venue: String
  workshop_id: Int
}

"""
order by min() on columns of table "workshop"
"""
input workshop_min_order_by {
  date: order_by
  name: order_by
  venue: order_by
  workshop_id: order_by
}

"""
response of any mutation on the table "workshop"
"""
type workshop_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [workshop!]!
}

"""
input type for inserting object relation for remote table "workshop"
"""
input workshop_obj_rel_insert_input {
  data: workshop_insert_input!
  on_conflict: workshop_on_conflict
}

"""
on conflict condition type for table "workshop"
"""
input workshop_on_conflict {
  constraint: workshop_constraint!
  update_columns: [workshop_update_column!]!
  where: workshop_bool_exp
}

"""
ordering options when selecting data from "workshop"
"""
input workshop_order_by {
  acceptances_aggregate: acceptance_aggregate_order_by
  date: order_by
  name: order_by
  venue: order_by
  workshop_id: order_by
}

"""
select columns of table "workshop"
"""
enum workshop_select_column {
  """column name"""
  date

  """column name"""
  name

  """column name"""
  venue

  """column name"""
  workshop_id
}

"""
input type for updating data in table "workshop"
"""
input workshop_set_input {
  date: String
  name: String
  venue: String
  workshop_id: Int
}

"""aggregate stddev on columns"""
type workshop_stddev_fields {
  workshop_id: Float
}

"""
order by stddev() on columns of table "workshop"
"""
input workshop_stddev_order_by {
  workshop_id: order_by
}

"""aggregate stddev_pop on columns"""
type workshop_stddev_pop_fields {
  workshop_id: Float
}

"""
order by stddev_pop() on columns of table "workshop"
"""
input workshop_stddev_pop_order_by {
  workshop_id: order_by
}

"""aggregate stddev_samp on columns"""
type workshop_stddev_samp_fields {
  workshop_id: Float
}

"""
order by stddev_samp() on columns of table "workshop"
"""
input workshop_stddev_samp_order_by {
  workshop_id: order_by
}

"""aggregate sum on columns"""
type workshop_sum_fields {
  workshop_id: Int
}

"""
order by sum() on columns of table "workshop"
"""
input workshop_sum_order_by {
  workshop_id: order_by
}

"""
update columns of table "workshop"
"""
enum workshop_update_column {
  """column name"""
  date

  """column name"""
  name

  """column name"""
  venue

  """column name"""
  workshop_id
}

"""aggregate var_pop on columns"""
type workshop_var_pop_fields {
  workshop_id: Float
}

"""
order by var_pop() on columns of table "workshop"
"""
input workshop_var_pop_order_by {
  workshop_id: order_by
}

"""aggregate var_samp on columns"""
type workshop_var_samp_fields {
  workshop_id: Float
}

"""
order by var_samp() on columns of table "workshop"
"""
input workshop_var_samp_order_by {
  workshop_id: order_by
}

"""aggregate variance on columns"""
type workshop_variance_fields {
  workshop_id: Float
}

"""
order by variance() on columns of table "workshop"
"""
input workshop_variance_order_by {
  workshop_id: order_by
}
