schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""
Direct the client to resolve this field locally, either from the cache or local resolvers.
"""
directive @client(
  """
  When true, the client will never use the cache for this value. See
  https://www.apollographql.com/docs/react/essentials/local-state/#forcing-resolvers-with-clientalways-true
  """
  always: Boolean
) on FIELD | FRAGMENT_DEFINITION | INLINE_FRAGMENT

"""
Export this locally resolved field as a variable to be used in the remainder of this query. See
https://www.apollographql.com/docs/react/essentials/local-state/#using-client-fields-as-variables
"""
directive @export(
  """The variable name to export this field as."""
  as: String!
) on FIELD

"""
Specify a custom store key for this result. See
https://www.apollographql.com/docs/react/advanced/caching/#the-connection-directive
"""
directive @connection(
  """Specify the store key."""
  key: String!

  """
  An array of query argument names to include in the generated custom store key.
  """
  filter: [String!]
) on FIELD

"""
columns and relationships of "all_star"
"""
type all_star {
  game_id: String
  game_num: bigint
  gp: numeric
  league_id: String

  """An object relationship"""
  player: player
  player_id: String
  starting_pos: numeric
  team_id: String
  year: bigint
}

"""
aggregated selection of "all_star"
"""
type all_star_aggregate {
  aggregate: all_star_aggregate_fields
  nodes: [all_star!]!
}

"""
aggregate fields of "all_star"
"""
type all_star_aggregate_fields {
  avg: all_star_avg_fields
  count(columns: [all_star_select_column!], distinct: Boolean): Int
  max: all_star_max_fields
  min: all_star_min_fields
  stddev: all_star_stddev_fields
  stddev_pop: all_star_stddev_pop_fields
  stddev_samp: all_star_stddev_samp_fields
  sum: all_star_sum_fields
  var_pop: all_star_var_pop_fields
  var_samp: all_star_var_samp_fields
  variance: all_star_variance_fields
}

"""
order by aggregate values of table "all_star"
"""
input all_star_aggregate_order_by {
  avg: all_star_avg_order_by
  count: order_by
  max: all_star_max_order_by
  min: all_star_min_order_by
  stddev: all_star_stddev_order_by
  stddev_pop: all_star_stddev_pop_order_by
  stddev_samp: all_star_stddev_samp_order_by
  sum: all_star_sum_order_by
  var_pop: all_star_var_pop_order_by
  var_samp: all_star_var_samp_order_by
  variance: all_star_variance_order_by
}

"""
input type for inserting array relation for remote table "all_star"
"""
input all_star_arr_rel_insert_input {
  data: [all_star_insert_input!]!
}

"""aggregate avg on columns"""
type all_star_avg_fields {
  game_num: Float
  gp: Float
  starting_pos: Float
  year: Float
}

"""
order by avg() on columns of table "all_star"
"""
input all_star_avg_order_by {
  game_num: order_by
  gp: order_by
  starting_pos: order_by
  year: order_by
}

"""
Boolean expression to filter rows from the table "all_star". All fields are combined with a logical 'AND'.
"""
input all_star_bool_exp {
  _and: [all_star_bool_exp]
  _not: all_star_bool_exp
  _or: [all_star_bool_exp]
  game_id: String_comparison_exp
  game_num: bigint_comparison_exp
  gp: numeric_comparison_exp
  league_id: String_comparison_exp
  player: player_bool_exp
  player_id: String_comparison_exp
  starting_pos: numeric_comparison_exp
  team_id: String_comparison_exp
  year: bigint_comparison_exp
}

"""
input type for incrementing integer column in table "all_star"
"""
input all_star_inc_input {
  game_num: bigint
  gp: numeric
  starting_pos: numeric
  year: bigint
}

"""
input type for inserting data into table "all_star"
"""
input all_star_insert_input {
  game_id: String
  game_num: bigint
  gp: numeric
  league_id: String
  player: player_obj_rel_insert_input
  player_id: String
  starting_pos: numeric
  team_id: String
  year: bigint
}

"""aggregate max on columns"""
type all_star_max_fields {
  game_id: String
  game_num: bigint
  gp: numeric
  league_id: String
  player_id: String
  starting_pos: numeric
  team_id: String
  year: bigint
}

"""
order by max() on columns of table "all_star"
"""
input all_star_max_order_by {
  game_id: order_by
  game_num: order_by
  gp: order_by
  league_id: order_by
  player_id: order_by
  starting_pos: order_by
  team_id: order_by
  year: order_by
}

"""aggregate min on columns"""
type all_star_min_fields {
  game_id: String
  game_num: bigint
  gp: numeric
  league_id: String
  player_id: String
  starting_pos: numeric
  team_id: String
  year: bigint
}

"""
order by min() on columns of table "all_star"
"""
input all_star_min_order_by {
  game_id: order_by
  game_num: order_by
  gp: order_by
  league_id: order_by
  player_id: order_by
  starting_pos: order_by
  team_id: order_by
  year: order_by
}

"""
response of any mutation on the table "all_star"
"""
type all_star_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [all_star!]!
}

"""
input type for inserting object relation for remote table "all_star"
"""
input all_star_obj_rel_insert_input {
  data: all_star_insert_input!
}

"""
ordering options when selecting data from "all_star"
"""
input all_star_order_by {
  game_id: order_by
  game_num: order_by
  gp: order_by
  league_id: order_by
  player: player_order_by
  player_id: order_by
  starting_pos: order_by
  team_id: order_by
  year: order_by
}

"""
select columns of table "all_star"
"""
enum all_star_select_column {
  """column name"""
  game_id

  """column name"""
  game_num

  """column name"""
  gp

  """column name"""
  league_id

  """column name"""
  player_id

  """column name"""
  starting_pos

  """column name"""
  team_id

  """column name"""
  year
}

"""
input type for updating data in table "all_star"
"""
input all_star_set_input {
  game_id: String
  game_num: bigint
  gp: numeric
  league_id: String
  player_id: String
  starting_pos: numeric
  team_id: String
  year: bigint
}

"""aggregate stddev on columns"""
type all_star_stddev_fields {
  game_num: Float
  gp: Float
  starting_pos: Float
  year: Float
}

"""
order by stddev() on columns of table "all_star"
"""
input all_star_stddev_order_by {
  game_num: order_by
  gp: order_by
  starting_pos: order_by
  year: order_by
}

"""aggregate stddev_pop on columns"""
type all_star_stddev_pop_fields {
  game_num: Float
  gp: Float
  starting_pos: Float
  year: Float
}

"""
order by stddev_pop() on columns of table "all_star"
"""
input all_star_stddev_pop_order_by {
  game_num: order_by
  gp: order_by
  starting_pos: order_by
  year: order_by
}

"""aggregate stddev_samp on columns"""
type all_star_stddev_samp_fields {
  game_num: Float
  gp: Float
  starting_pos: Float
  year: Float
}

"""
order by stddev_samp() on columns of table "all_star"
"""
input all_star_stddev_samp_order_by {
  game_num: order_by
  gp: order_by
  starting_pos: order_by
  year: order_by
}

"""aggregate sum on columns"""
type all_star_sum_fields {
  game_num: bigint
  gp: numeric
  starting_pos: numeric
  year: bigint
}

"""
order by sum() on columns of table "all_star"
"""
input all_star_sum_order_by {
  game_num: order_by
  gp: order_by
  starting_pos: order_by
  year: order_by
}

"""aggregate var_pop on columns"""
type all_star_var_pop_fields {
  game_num: Float
  gp: Float
  starting_pos: Float
  year: Float
}

"""
order by var_pop() on columns of table "all_star"
"""
input all_star_var_pop_order_by {
  game_num: order_by
  gp: order_by
  starting_pos: order_by
  year: order_by
}

"""aggregate var_samp on columns"""
type all_star_var_samp_fields {
  game_num: Float
  gp: Float
  starting_pos: Float
  year: Float
}

"""
order by var_samp() on columns of table "all_star"
"""
input all_star_var_samp_order_by {
  game_num: order_by
  gp: order_by
  starting_pos: order_by
  year: order_by
}

"""aggregate variance on columns"""
type all_star_variance_fields {
  game_num: Float
  gp: Float
  starting_pos: Float
  year: Float
}

"""
order by variance() on columns of table "all_star"
"""
input all_star_variance_order_by {
  game_num: order_by
  gp: order_by
  starting_pos: order_by
  year: order_by
}

"""
columns and relationships of "appearances"
"""
type appearances {
  g_1b: bigint
  g_2b: bigint
  g_3b: bigint
  g_all: numeric
  g_batting: bigint
  g_c: bigint
  g_cf: bigint
  g_defense: numeric
  g_dh: numeric
  g_lf: bigint
  g_of: bigint
  g_p: bigint
  g_ph: numeric
  g_pr: numeric
  g_rf: bigint
  g_ss: bigint
  gs: numeric
  league_id: String
  player_id: String
  team_id: String
  year: bigint
}

"""
aggregated selection of "appearances"
"""
type appearances_aggregate {
  aggregate: appearances_aggregate_fields
  nodes: [appearances!]!
}

"""
aggregate fields of "appearances"
"""
type appearances_aggregate_fields {
  avg: appearances_avg_fields
  count(columns: [appearances_select_column!], distinct: Boolean): Int
  max: appearances_max_fields
  min: appearances_min_fields
  stddev: appearances_stddev_fields
  stddev_pop: appearances_stddev_pop_fields
  stddev_samp: appearances_stddev_samp_fields
  sum: appearances_sum_fields
  var_pop: appearances_var_pop_fields
  var_samp: appearances_var_samp_fields
  variance: appearances_variance_fields
}

"""
order by aggregate values of table "appearances"
"""
input appearances_aggregate_order_by {
  avg: appearances_avg_order_by
  count: order_by
  max: appearances_max_order_by
  min: appearances_min_order_by
  stddev: appearances_stddev_order_by
  stddev_pop: appearances_stddev_pop_order_by
  stddev_samp: appearances_stddev_samp_order_by
  sum: appearances_sum_order_by
  var_pop: appearances_var_pop_order_by
  var_samp: appearances_var_samp_order_by
  variance: appearances_variance_order_by
}

"""
input type for inserting array relation for remote table "appearances"
"""
input appearances_arr_rel_insert_input {
  data: [appearances_insert_input!]!
}

"""aggregate avg on columns"""
type appearances_avg_fields {
  g_1b: Float
  g_2b: Float
  g_3b: Float
  g_all: Float
  g_batting: Float
  g_c: Float
  g_cf: Float
  g_defense: Float
  g_dh: Float
  g_lf: Float
  g_of: Float
  g_p: Float
  g_ph: Float
  g_pr: Float
  g_rf: Float
  g_ss: Float
  gs: Float
  year: Float
}

"""
order by avg() on columns of table "appearances"
"""
input appearances_avg_order_by {
  g_1b: order_by
  g_2b: order_by
  g_3b: order_by
  g_all: order_by
  g_batting: order_by
  g_c: order_by
  g_cf: order_by
  g_defense: order_by
  g_dh: order_by
  g_lf: order_by
  g_of: order_by
  g_p: order_by
  g_ph: order_by
  g_pr: order_by
  g_rf: order_by
  g_ss: order_by
  gs: order_by
  year: order_by
}

"""
Boolean expression to filter rows from the table "appearances". All fields are combined with a logical 'AND'.
"""
input appearances_bool_exp {
  _and: [appearances_bool_exp]
  _not: appearances_bool_exp
  _or: [appearances_bool_exp]
  g_1b: bigint_comparison_exp
  g_2b: bigint_comparison_exp
  g_3b: bigint_comparison_exp
  g_all: numeric_comparison_exp
  g_batting: bigint_comparison_exp
  g_c: bigint_comparison_exp
  g_cf: bigint_comparison_exp
  g_defense: numeric_comparison_exp
  g_dh: numeric_comparison_exp
  g_lf: bigint_comparison_exp
  g_of: bigint_comparison_exp
  g_p: bigint_comparison_exp
  g_ph: numeric_comparison_exp
  g_pr: numeric_comparison_exp
  g_rf: bigint_comparison_exp
  g_ss: bigint_comparison_exp
  gs: numeric_comparison_exp
  league_id: String_comparison_exp
  player_id: String_comparison_exp
  team_id: String_comparison_exp
  year: bigint_comparison_exp
}

"""
input type for incrementing integer column in table "appearances"
"""
input appearances_inc_input {
  g_1b: bigint
  g_2b: bigint
  g_3b: bigint
  g_all: numeric
  g_batting: bigint
  g_c: bigint
  g_cf: bigint
  g_defense: numeric
  g_dh: numeric
  g_lf: bigint
  g_of: bigint
  g_p: bigint
  g_ph: numeric
  g_pr: numeric
  g_rf: bigint
  g_ss: bigint
  gs: numeric
  year: bigint
}

"""
input type for inserting data into table "appearances"
"""
input appearances_insert_input {
  g_1b: bigint
  g_2b: bigint
  g_3b: bigint
  g_all: numeric
  g_batting: bigint
  g_c: bigint
  g_cf: bigint
  g_defense: numeric
  g_dh: numeric
  g_lf: bigint
  g_of: bigint
  g_p: bigint
  g_ph: numeric
  g_pr: numeric
  g_rf: bigint
  g_ss: bigint
  gs: numeric
  league_id: String
  player_id: String
  team_id: String
  year: bigint
}

"""aggregate max on columns"""
type appearances_max_fields {
  g_1b: bigint
  g_2b: bigint
  g_3b: bigint
  g_all: numeric
  g_batting: bigint
  g_c: bigint
  g_cf: bigint
  g_defense: numeric
  g_dh: numeric
  g_lf: bigint
  g_of: bigint
  g_p: bigint
  g_ph: numeric
  g_pr: numeric
  g_rf: bigint
  g_ss: bigint
  gs: numeric
  league_id: String
  player_id: String
  team_id: String
  year: bigint
}

"""
order by max() on columns of table "appearances"
"""
input appearances_max_order_by {
  g_1b: order_by
  g_2b: order_by
  g_3b: order_by
  g_all: order_by
  g_batting: order_by
  g_c: order_by
  g_cf: order_by
  g_defense: order_by
  g_dh: order_by
  g_lf: order_by
  g_of: order_by
  g_p: order_by
  g_ph: order_by
  g_pr: order_by
  g_rf: order_by
  g_ss: order_by
  gs: order_by
  league_id: order_by
  player_id: order_by
  team_id: order_by
  year: order_by
}

"""aggregate min on columns"""
type appearances_min_fields {
  g_1b: bigint
  g_2b: bigint
  g_3b: bigint
  g_all: numeric
  g_batting: bigint
  g_c: bigint
  g_cf: bigint
  g_defense: numeric
  g_dh: numeric
  g_lf: bigint
  g_of: bigint
  g_p: bigint
  g_ph: numeric
  g_pr: numeric
  g_rf: bigint
  g_ss: bigint
  gs: numeric
  league_id: String
  player_id: String
  team_id: String
  year: bigint
}

"""
order by min() on columns of table "appearances"
"""
input appearances_min_order_by {
  g_1b: order_by
  g_2b: order_by
  g_3b: order_by
  g_all: order_by
  g_batting: order_by
  g_c: order_by
  g_cf: order_by
  g_defense: order_by
  g_dh: order_by
  g_lf: order_by
  g_of: order_by
  g_p: order_by
  g_ph: order_by
  g_pr: order_by
  g_rf: order_by
  g_ss: order_by
  gs: order_by
  league_id: order_by
  player_id: order_by
  team_id: order_by
  year: order_by
}

"""
response of any mutation on the table "appearances"
"""
type appearances_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [appearances!]!
}

"""
input type for inserting object relation for remote table "appearances"
"""
input appearances_obj_rel_insert_input {
  data: appearances_insert_input!
}

"""
ordering options when selecting data from "appearances"
"""
input appearances_order_by {
  g_1b: order_by
  g_2b: order_by
  g_3b: order_by
  g_all: order_by
  g_batting: order_by
  g_c: order_by
  g_cf: order_by
  g_defense: order_by
  g_dh: order_by
  g_lf: order_by
  g_of: order_by
  g_p: order_by
  g_ph: order_by
  g_pr: order_by
  g_rf: order_by
  g_ss: order_by
  gs: order_by
  league_id: order_by
  player_id: order_by
  team_id: order_by
  year: order_by
}

"""
select columns of table "appearances"
"""
enum appearances_select_column {
  """column name"""
  g_1b

  """column name"""
  g_2b

  """column name"""
  g_3b

  """column name"""
  g_all

  """column name"""
  g_batting

  """column name"""
  g_c

  """column name"""
  g_cf

  """column name"""
  g_defense

  """column name"""
  g_dh

  """column name"""
  g_lf

  """column name"""
  g_of

  """column name"""
  g_p

  """column name"""
  g_ph

  """column name"""
  g_pr

  """column name"""
  g_rf

  """column name"""
  g_ss

  """column name"""
  gs

  """column name"""
  league_id

  """column name"""
  player_id

  """column name"""
  team_id

  """column name"""
  year
}

"""
input type for updating data in table "appearances"
"""
input appearances_set_input {
  g_1b: bigint
  g_2b: bigint
  g_3b: bigint
  g_all: numeric
  g_batting: bigint
  g_c: bigint
  g_cf: bigint
  g_defense: numeric
  g_dh: numeric
  g_lf: bigint
  g_of: bigint
  g_p: bigint
  g_ph: numeric
  g_pr: numeric
  g_rf: bigint
  g_ss: bigint
  gs: numeric
  league_id: String
  player_id: String
  team_id: String
  year: bigint
}

"""aggregate stddev on columns"""
type appearances_stddev_fields {
  g_1b: Float
  g_2b: Float
  g_3b: Float
  g_all: Float
  g_batting: Float
  g_c: Float
  g_cf: Float
  g_defense: Float
  g_dh: Float
  g_lf: Float
  g_of: Float
  g_p: Float
  g_ph: Float
  g_pr: Float
  g_rf: Float
  g_ss: Float
  gs: Float
  year: Float
}

"""
order by stddev() on columns of table "appearances"
"""
input appearances_stddev_order_by {
  g_1b: order_by
  g_2b: order_by
  g_3b: order_by
  g_all: order_by
  g_batting: order_by
  g_c: order_by
  g_cf: order_by
  g_defense: order_by
  g_dh: order_by
  g_lf: order_by
  g_of: order_by
  g_p: order_by
  g_ph: order_by
  g_pr: order_by
  g_rf: order_by
  g_ss: order_by
  gs: order_by
  year: order_by
}

"""aggregate stddev_pop on columns"""
type appearances_stddev_pop_fields {
  g_1b: Float
  g_2b: Float
  g_3b: Float
  g_all: Float
  g_batting: Float
  g_c: Float
  g_cf: Float
  g_defense: Float
  g_dh: Float
  g_lf: Float
  g_of: Float
  g_p: Float
  g_ph: Float
  g_pr: Float
  g_rf: Float
  g_ss: Float
  gs: Float
  year: Float
}

"""
order by stddev_pop() on columns of table "appearances"
"""
input appearances_stddev_pop_order_by {
  g_1b: order_by
  g_2b: order_by
  g_3b: order_by
  g_all: order_by
  g_batting: order_by
  g_c: order_by
  g_cf: order_by
  g_defense: order_by
  g_dh: order_by
  g_lf: order_by
  g_of: order_by
  g_p: order_by
  g_ph: order_by
  g_pr: order_by
  g_rf: order_by
  g_ss: order_by
  gs: order_by
  year: order_by
}

"""aggregate stddev_samp on columns"""
type appearances_stddev_samp_fields {
  g_1b: Float
  g_2b: Float
  g_3b: Float
  g_all: Float
  g_batting: Float
  g_c: Float
  g_cf: Float
  g_defense: Float
  g_dh: Float
  g_lf: Float
  g_of: Float
  g_p: Float
  g_ph: Float
  g_pr: Float
  g_rf: Float
  g_ss: Float
  gs: Float
  year: Float
}

"""
order by stddev_samp() on columns of table "appearances"
"""
input appearances_stddev_samp_order_by {
  g_1b: order_by
  g_2b: order_by
  g_3b: order_by
  g_all: order_by
  g_batting: order_by
  g_c: order_by
  g_cf: order_by
  g_defense: order_by
  g_dh: order_by
  g_lf: order_by
  g_of: order_by
  g_p: order_by
  g_ph: order_by
  g_pr: order_by
  g_rf: order_by
  g_ss: order_by
  gs: order_by
  year: order_by
}

"""aggregate sum on columns"""
type appearances_sum_fields {
  g_1b: bigint
  g_2b: bigint
  g_3b: bigint
  g_all: numeric
  g_batting: bigint
  g_c: bigint
  g_cf: bigint
  g_defense: numeric
  g_dh: numeric
  g_lf: bigint
  g_of: bigint
  g_p: bigint
  g_ph: numeric
  g_pr: numeric
  g_rf: bigint
  g_ss: bigint
  gs: numeric
  year: bigint
}

"""
order by sum() on columns of table "appearances"
"""
input appearances_sum_order_by {
  g_1b: order_by
  g_2b: order_by
  g_3b: order_by
  g_all: order_by
  g_batting: order_by
  g_c: order_by
  g_cf: order_by
  g_defense: order_by
  g_dh: order_by
  g_lf: order_by
  g_of: order_by
  g_p: order_by
  g_ph: order_by
  g_pr: order_by
  g_rf: order_by
  g_ss: order_by
  gs: order_by
  year: order_by
}

"""aggregate var_pop on columns"""
type appearances_var_pop_fields {
  g_1b: Float
  g_2b: Float
  g_3b: Float
  g_all: Float
  g_batting: Float
  g_c: Float
  g_cf: Float
  g_defense: Float
  g_dh: Float
  g_lf: Float
  g_of: Float
  g_p: Float
  g_ph: Float
  g_pr: Float
  g_rf: Float
  g_ss: Float
  gs: Float
  year: Float
}

"""
order by var_pop() on columns of table "appearances"
"""
input appearances_var_pop_order_by {
  g_1b: order_by
  g_2b: order_by
  g_3b: order_by
  g_all: order_by
  g_batting: order_by
  g_c: order_by
  g_cf: order_by
  g_defense: order_by
  g_dh: order_by
  g_lf: order_by
  g_of: order_by
  g_p: order_by
  g_ph: order_by
  g_pr: order_by
  g_rf: order_by
  g_ss: order_by
  gs: order_by
  year: order_by
}

"""aggregate var_samp on columns"""
type appearances_var_samp_fields {
  g_1b: Float
  g_2b: Float
  g_3b: Float
  g_all: Float
  g_batting: Float
  g_c: Float
  g_cf: Float
  g_defense: Float
  g_dh: Float
  g_lf: Float
  g_of: Float
  g_p: Float
  g_ph: Float
  g_pr: Float
  g_rf: Float
  g_ss: Float
  gs: Float
  year: Float
}

"""
order by var_samp() on columns of table "appearances"
"""
input appearances_var_samp_order_by {
  g_1b: order_by
  g_2b: order_by
  g_3b: order_by
  g_all: order_by
  g_batting: order_by
  g_c: order_by
  g_cf: order_by
  g_defense: order_by
  g_dh: order_by
  g_lf: order_by
  g_of: order_by
  g_p: order_by
  g_ph: order_by
  g_pr: order_by
  g_rf: order_by
  g_ss: order_by
  gs: order_by
  year: order_by
}

"""aggregate variance on columns"""
type appearances_variance_fields {
  g_1b: Float
  g_2b: Float
  g_3b: Float
  g_all: Float
  g_batting: Float
  g_c: Float
  g_cf: Float
  g_defense: Float
  g_dh: Float
  g_lf: Float
  g_of: Float
  g_p: Float
  g_ph: Float
  g_pr: Float
  g_rf: Float
  g_ss: Float
  gs: Float
  year: Float
}

"""
order by variance() on columns of table "appearances"
"""
input appearances_variance_order_by {
  g_1b: order_by
  g_2b: order_by
  g_3b: order_by
  g_all: order_by
  g_batting: order_by
  g_c: order_by
  g_cf: order_by
  g_defense: order_by
  g_dh: order_by
  g_lf: order_by
  g_of: order_by
  g_p: order_by
  g_ph: order_by
  g_pr: order_by
  g_rf: order_by
  g_ss: order_by
  gs: order_by
  year: order_by
}

"""
columns and relationships of "batting"
"""
type batting {
  ab: numeric
  bb: numeric
  cs: numeric
  double: numeric
  g: bigint
  g_idp: numeric
  h: numeric
  hbp: numeric
  hr: numeric
  ibb: numeric
  league_id: String
  player_id: String
  r: numeric
  rbi: numeric
  sb: numeric
  sf: numeric
  sh: numeric
  so: numeric
  stint: bigint
  team_id: String
  triple: numeric
  year: bigint
}

"""
aggregated selection of "batting"
"""
type batting_aggregate {
  aggregate: batting_aggregate_fields
  nodes: [batting!]!
}

"""
aggregate fields of "batting"
"""
type batting_aggregate_fields {
  avg: batting_avg_fields
  count(columns: [batting_select_column!], distinct: Boolean): Int
  max: batting_max_fields
  min: batting_min_fields
  stddev: batting_stddev_fields
  stddev_pop: batting_stddev_pop_fields
  stddev_samp: batting_stddev_samp_fields
  sum: batting_sum_fields
  var_pop: batting_var_pop_fields
  var_samp: batting_var_samp_fields
  variance: batting_variance_fields
}

"""
order by aggregate values of table "batting"
"""
input batting_aggregate_order_by {
  avg: batting_avg_order_by
  count: order_by
  max: batting_max_order_by
  min: batting_min_order_by
  stddev: batting_stddev_order_by
  stddev_pop: batting_stddev_pop_order_by
  stddev_samp: batting_stddev_samp_order_by
  sum: batting_sum_order_by
  var_pop: batting_var_pop_order_by
  var_samp: batting_var_samp_order_by
  variance: batting_variance_order_by
}

"""
input type for inserting array relation for remote table "batting"
"""
input batting_arr_rel_insert_input {
  data: [batting_insert_input!]!
}

"""aggregate avg on columns"""
type batting_avg_fields {
  ab: Float
  bb: Float
  cs: Float
  double: Float
  g: Float
  g_idp: Float
  h: Float
  hbp: Float
  hr: Float
  ibb: Float
  r: Float
  rbi: Float
  sb: Float
  sf: Float
  sh: Float
  so: Float
  stint: Float
  triple: Float
  year: Float
}

"""
order by avg() on columns of table "batting"
"""
input batting_avg_order_by {
  ab: order_by
  bb: order_by
  cs: order_by
  double: order_by
  g: order_by
  g_idp: order_by
  h: order_by
  hbp: order_by
  hr: order_by
  ibb: order_by
  r: order_by
  rbi: order_by
  sb: order_by
  sf: order_by
  sh: order_by
  so: order_by
  stint: order_by
  triple: order_by
  year: order_by
}

"""
Boolean expression to filter rows from the table "batting". All fields are combined with a logical 'AND'.
"""
input batting_bool_exp {
  _and: [batting_bool_exp]
  _not: batting_bool_exp
  _or: [batting_bool_exp]
  ab: numeric_comparison_exp
  bb: numeric_comparison_exp
  cs: numeric_comparison_exp
  double: numeric_comparison_exp
  g: bigint_comparison_exp
  g_idp: numeric_comparison_exp
  h: numeric_comparison_exp
  hbp: numeric_comparison_exp
  hr: numeric_comparison_exp
  ibb: numeric_comparison_exp
  league_id: String_comparison_exp
  player_id: String_comparison_exp
  r: numeric_comparison_exp
  rbi: numeric_comparison_exp
  sb: numeric_comparison_exp
  sf: numeric_comparison_exp
  sh: numeric_comparison_exp
  so: numeric_comparison_exp
  stint: bigint_comparison_exp
  team_id: String_comparison_exp
  triple: numeric_comparison_exp
  year: bigint_comparison_exp
}

"""
input type for incrementing integer column in table "batting"
"""
input batting_inc_input {
  ab: numeric
  bb: numeric
  cs: numeric
  double: numeric
  g: bigint
  g_idp: numeric
  h: numeric
  hbp: numeric
  hr: numeric
  ibb: numeric
  r: numeric
  rbi: numeric
  sb: numeric
  sf: numeric
  sh: numeric
  so: numeric
  stint: bigint
  triple: numeric
  year: bigint
}

"""
input type for inserting data into table "batting"
"""
input batting_insert_input {
  ab: numeric
  bb: numeric
  cs: numeric
  double: numeric
  g: bigint
  g_idp: numeric
  h: numeric
  hbp: numeric
  hr: numeric
  ibb: numeric
  league_id: String
  player_id: String
  r: numeric
  rbi: numeric
  sb: numeric
  sf: numeric
  sh: numeric
  so: numeric
  stint: bigint
  team_id: String
  triple: numeric
  year: bigint
}

"""aggregate max on columns"""
type batting_max_fields {
  ab: numeric
  bb: numeric
  cs: numeric
  double: numeric
  g: bigint
  g_idp: numeric
  h: numeric
  hbp: numeric
  hr: numeric
  ibb: numeric
  league_id: String
  player_id: String
  r: numeric
  rbi: numeric
  sb: numeric
  sf: numeric
  sh: numeric
  so: numeric
  stint: bigint
  team_id: String
  triple: numeric
  year: bigint
}

"""
order by max() on columns of table "batting"
"""
input batting_max_order_by {
  ab: order_by
  bb: order_by
  cs: order_by
  double: order_by
  g: order_by
  g_idp: order_by
  h: order_by
  hbp: order_by
  hr: order_by
  ibb: order_by
  league_id: order_by
  player_id: order_by
  r: order_by
  rbi: order_by
  sb: order_by
  sf: order_by
  sh: order_by
  so: order_by
  stint: order_by
  team_id: order_by
  triple: order_by
  year: order_by
}

"""aggregate min on columns"""
type batting_min_fields {
  ab: numeric
  bb: numeric
  cs: numeric
  double: numeric
  g: bigint
  g_idp: numeric
  h: numeric
  hbp: numeric
  hr: numeric
  ibb: numeric
  league_id: String
  player_id: String
  r: numeric
  rbi: numeric
  sb: numeric
  sf: numeric
  sh: numeric
  so: numeric
  stint: bigint
  team_id: String
  triple: numeric
  year: bigint
}

"""
order by min() on columns of table "batting"
"""
input batting_min_order_by {
  ab: order_by
  bb: order_by
  cs: order_by
  double: order_by
  g: order_by
  g_idp: order_by
  h: order_by
  hbp: order_by
  hr: order_by
  ibb: order_by
  league_id: order_by
  player_id: order_by
  r: order_by
  rbi: order_by
  sb: order_by
  sf: order_by
  sh: order_by
  so: order_by
  stint: order_by
  team_id: order_by
  triple: order_by
  year: order_by
}

"""
response of any mutation on the table "batting"
"""
type batting_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [batting!]!
}

"""
input type for inserting object relation for remote table "batting"
"""
input batting_obj_rel_insert_input {
  data: batting_insert_input!
}

"""
ordering options when selecting data from "batting"
"""
input batting_order_by {
  ab: order_by
  bb: order_by
  cs: order_by
  double: order_by
  g: order_by
  g_idp: order_by
  h: order_by
  hbp: order_by
  hr: order_by
  ibb: order_by
  league_id: order_by
  player_id: order_by
  r: order_by
  rbi: order_by
  sb: order_by
  sf: order_by
  sh: order_by
  so: order_by
  stint: order_by
  team_id: order_by
  triple: order_by
  year: order_by
}

"""
columns and relationships of "batting_postseason"
"""
type batting_postseason {
  ab: bigint
  bb: bigint
  cs: numeric
  double: bigint
  g: bigint
  g_idp: numeric
  h: bigint
  hbp: numeric
  hr: bigint
  ibb: numeric
  league_id: String
  player_id: String
  r: bigint
  rbi: bigint
  round: String
  sb: bigint
  sf: numeric
  sh: numeric
  so: bigint
  team_id: String
  triple: bigint
  year: bigint
}

"""
aggregated selection of "batting_postseason"
"""
type batting_postseason_aggregate {
  aggregate: batting_postseason_aggregate_fields
  nodes: [batting_postseason!]!
}

"""
aggregate fields of "batting_postseason"
"""
type batting_postseason_aggregate_fields {
  avg: batting_postseason_avg_fields
  count(columns: [batting_postseason_select_column!], distinct: Boolean): Int
  max: batting_postseason_max_fields
  min: batting_postseason_min_fields
  stddev: batting_postseason_stddev_fields
  stddev_pop: batting_postseason_stddev_pop_fields
  stddev_samp: batting_postseason_stddev_samp_fields
  sum: batting_postseason_sum_fields
  var_pop: batting_postseason_var_pop_fields
  var_samp: batting_postseason_var_samp_fields
  variance: batting_postseason_variance_fields
}

"""
order by aggregate values of table "batting_postseason"
"""
input batting_postseason_aggregate_order_by {
  avg: batting_postseason_avg_order_by
  count: order_by
  max: batting_postseason_max_order_by
  min: batting_postseason_min_order_by
  stddev: batting_postseason_stddev_order_by
  stddev_pop: batting_postseason_stddev_pop_order_by
  stddev_samp: batting_postseason_stddev_samp_order_by
  sum: batting_postseason_sum_order_by
  var_pop: batting_postseason_var_pop_order_by
  var_samp: batting_postseason_var_samp_order_by
  variance: batting_postseason_variance_order_by
}

"""
input type for inserting array relation for remote table "batting_postseason"
"""
input batting_postseason_arr_rel_insert_input {
  data: [batting_postseason_insert_input!]!
}

"""aggregate avg on columns"""
type batting_postseason_avg_fields {
  ab: Float
  bb: Float
  cs: Float
  double: Float
  g: Float
  g_idp: Float
  h: Float
  hbp: Float
  hr: Float
  ibb: Float
  r: Float
  rbi: Float
  sb: Float
  sf: Float
  sh: Float
  so: Float
  triple: Float
  year: Float
}

"""
order by avg() on columns of table "batting_postseason"
"""
input batting_postseason_avg_order_by {
  ab: order_by
  bb: order_by
  cs: order_by
  double: order_by
  g: order_by
  g_idp: order_by
  h: order_by
  hbp: order_by
  hr: order_by
  ibb: order_by
  r: order_by
  rbi: order_by
  sb: order_by
  sf: order_by
  sh: order_by
  so: order_by
  triple: order_by
  year: order_by
}

"""
Boolean expression to filter rows from the table "batting_postseason". All fields are combined with a logical 'AND'.
"""
input batting_postseason_bool_exp {
  _and: [batting_postseason_bool_exp]
  _not: batting_postseason_bool_exp
  _or: [batting_postseason_bool_exp]
  ab: bigint_comparison_exp
  bb: bigint_comparison_exp
  cs: numeric_comparison_exp
  double: bigint_comparison_exp
  g: bigint_comparison_exp
  g_idp: numeric_comparison_exp
  h: bigint_comparison_exp
  hbp: numeric_comparison_exp
  hr: bigint_comparison_exp
  ibb: numeric_comparison_exp
  league_id: String_comparison_exp
  player_id: String_comparison_exp
  r: bigint_comparison_exp
  rbi: bigint_comparison_exp
  round: String_comparison_exp
  sb: bigint_comparison_exp
  sf: numeric_comparison_exp
  sh: numeric_comparison_exp
  so: bigint_comparison_exp
  team_id: String_comparison_exp
  triple: bigint_comparison_exp
  year: bigint_comparison_exp
}

"""
input type for incrementing integer column in table "batting_postseason"
"""
input batting_postseason_inc_input {
  ab: bigint
  bb: bigint
  cs: numeric
  double: bigint
  g: bigint
  g_idp: numeric
  h: bigint
  hbp: numeric
  hr: bigint
  ibb: numeric
  r: bigint
  rbi: bigint
  sb: bigint
  sf: numeric
  sh: numeric
  so: bigint
  triple: bigint
  year: bigint
}

"""
input type for inserting data into table "batting_postseason"
"""
input batting_postseason_insert_input {
  ab: bigint
  bb: bigint
  cs: numeric
  double: bigint
  g: bigint
  g_idp: numeric
  h: bigint
  hbp: numeric
  hr: bigint
  ibb: numeric
  league_id: String
  player_id: String
  r: bigint
  rbi: bigint
  round: String
  sb: bigint
  sf: numeric
  sh: numeric
  so: bigint
  team_id: String
  triple: bigint
  year: bigint
}

"""aggregate max on columns"""
type batting_postseason_max_fields {
  ab: bigint
  bb: bigint
  cs: numeric
  double: bigint
  g: bigint
  g_idp: numeric
  h: bigint
  hbp: numeric
  hr: bigint
  ibb: numeric
  league_id: String
  player_id: String
  r: bigint
  rbi: bigint
  round: String
  sb: bigint
  sf: numeric
  sh: numeric
  so: bigint
  team_id: String
  triple: bigint
  year: bigint
}

"""
order by max() on columns of table "batting_postseason"
"""
input batting_postseason_max_order_by {
  ab: order_by
  bb: order_by
  cs: order_by
  double: order_by
  g: order_by
  g_idp: order_by
  h: order_by
  hbp: order_by
  hr: order_by
  ibb: order_by
  league_id: order_by
  player_id: order_by
  r: order_by
  rbi: order_by
  round: order_by
  sb: order_by
  sf: order_by
  sh: order_by
  so: order_by
  team_id: order_by
  triple: order_by
  year: order_by
}

"""aggregate min on columns"""
type batting_postseason_min_fields {
  ab: bigint
  bb: bigint
  cs: numeric
  double: bigint
  g: bigint
  g_idp: numeric
  h: bigint
  hbp: numeric
  hr: bigint
  ibb: numeric
  league_id: String
  player_id: String
  r: bigint
  rbi: bigint
  round: String
  sb: bigint
  sf: numeric
  sh: numeric
  so: bigint
  team_id: String
  triple: bigint
  year: bigint
}

"""
order by min() on columns of table "batting_postseason"
"""
input batting_postseason_min_order_by {
  ab: order_by
  bb: order_by
  cs: order_by
  double: order_by
  g: order_by
  g_idp: order_by
  h: order_by
  hbp: order_by
  hr: order_by
  ibb: order_by
  league_id: order_by
  player_id: order_by
  r: order_by
  rbi: order_by
  round: order_by
  sb: order_by
  sf: order_by
  sh: order_by
  so: order_by
  team_id: order_by
  triple: order_by
  year: order_by
}

"""
response of any mutation on the table "batting_postseason"
"""
type batting_postseason_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [batting_postseason!]!
}

"""
input type for inserting object relation for remote table "batting_postseason"
"""
input batting_postseason_obj_rel_insert_input {
  data: batting_postseason_insert_input!
}

"""
ordering options when selecting data from "batting_postseason"
"""
input batting_postseason_order_by {
  ab: order_by
  bb: order_by
  cs: order_by
  double: order_by
  g: order_by
  g_idp: order_by
  h: order_by
  hbp: order_by
  hr: order_by
  ibb: order_by
  league_id: order_by
  player_id: order_by
  r: order_by
  rbi: order_by
  round: order_by
  sb: order_by
  sf: order_by
  sh: order_by
  so: order_by
  team_id: order_by
  triple: order_by
  year: order_by
}

"""
select columns of table "batting_postseason"
"""
enum batting_postseason_select_column {
  """column name"""
  ab

  """column name"""
  bb

  """column name"""
  cs

  """column name"""
  double

  """column name"""
  g

  """column name"""
  g_idp

  """column name"""
  h

  """column name"""
  hbp

  """column name"""
  hr

  """column name"""
  ibb

  """column name"""
  league_id

  """column name"""
  player_id

  """column name"""
  r

  """column name"""
  rbi

  """column name"""
  round

  """column name"""
  sb

  """column name"""
  sf

  """column name"""
  sh

  """column name"""
  so

  """column name"""
  team_id

  """column name"""
  triple

  """column name"""
  year
}

"""
input type for updating data in table "batting_postseason"
"""
input batting_postseason_set_input {
  ab: bigint
  bb: bigint
  cs: numeric
  double: bigint
  g: bigint
  g_idp: numeric
  h: bigint
  hbp: numeric
  hr: bigint
  ibb: numeric
  league_id: String
  player_id: String
  r: bigint
  rbi: bigint
  round: String
  sb: bigint
  sf: numeric
  sh: numeric
  so: bigint
  team_id: String
  triple: bigint
  year: bigint
}

"""aggregate stddev on columns"""
type batting_postseason_stddev_fields {
  ab: Float
  bb: Float
  cs: Float
  double: Float
  g: Float
  g_idp: Float
  h: Float
  hbp: Float
  hr: Float
  ibb: Float
  r: Float
  rbi: Float
  sb: Float
  sf: Float
  sh: Float
  so: Float
  triple: Float
  year: Float
}

"""
order by stddev() on columns of table "batting_postseason"
"""
input batting_postseason_stddev_order_by {
  ab: order_by
  bb: order_by
  cs: order_by
  double: order_by
  g: order_by
  g_idp: order_by
  h: order_by
  hbp: order_by
  hr: order_by
  ibb: order_by
  r: order_by
  rbi: order_by
  sb: order_by
  sf: order_by
  sh: order_by
  so: order_by
  triple: order_by
  year: order_by
}

"""aggregate stddev_pop on columns"""
type batting_postseason_stddev_pop_fields {
  ab: Float
  bb: Float
  cs: Float
  double: Float
  g: Float
  g_idp: Float
  h: Float
  hbp: Float
  hr: Float
  ibb: Float
  r: Float
  rbi: Float
  sb: Float
  sf: Float
  sh: Float
  so: Float
  triple: Float
  year: Float
}

"""
order by stddev_pop() on columns of table "batting_postseason"
"""
input batting_postseason_stddev_pop_order_by {
  ab: order_by
  bb: order_by
  cs: order_by
  double: order_by
  g: order_by
  g_idp: order_by
  h: order_by
  hbp: order_by
  hr: order_by
  ibb: order_by
  r: order_by
  rbi: order_by
  sb: order_by
  sf: order_by
  sh: order_by
  so: order_by
  triple: order_by
  year: order_by
}

"""aggregate stddev_samp on columns"""
type batting_postseason_stddev_samp_fields {
  ab: Float
  bb: Float
  cs: Float
  double: Float
  g: Float
  g_idp: Float
  h: Float
  hbp: Float
  hr: Float
  ibb: Float
  r: Float
  rbi: Float
  sb: Float
  sf: Float
  sh: Float
  so: Float
  triple: Float
  year: Float
}

"""
order by stddev_samp() on columns of table "batting_postseason"
"""
input batting_postseason_stddev_samp_order_by {
  ab: order_by
  bb: order_by
  cs: order_by
  double: order_by
  g: order_by
  g_idp: order_by
  h: order_by
  hbp: order_by
  hr: order_by
  ibb: order_by
  r: order_by
  rbi: order_by
  sb: order_by
  sf: order_by
  sh: order_by
  so: order_by
  triple: order_by
  year: order_by
}

"""aggregate sum on columns"""
type batting_postseason_sum_fields {
  ab: bigint
  bb: bigint
  cs: numeric
  double: bigint
  g: bigint
  g_idp: numeric
  h: bigint
  hbp: numeric
  hr: bigint
  ibb: numeric
  r: bigint
  rbi: bigint
  sb: bigint
  sf: numeric
  sh: numeric
  so: bigint
  triple: bigint
  year: bigint
}

"""
order by sum() on columns of table "batting_postseason"
"""
input batting_postseason_sum_order_by {
  ab: order_by
  bb: order_by
  cs: order_by
  double: order_by
  g: order_by
  g_idp: order_by
  h: order_by
  hbp: order_by
  hr: order_by
  ibb: order_by
  r: order_by
  rbi: order_by
  sb: order_by
  sf: order_by
  sh: order_by
  so: order_by
  triple: order_by
  year: order_by
}

"""aggregate var_pop on columns"""
type batting_postseason_var_pop_fields {
  ab: Float
  bb: Float
  cs: Float
  double: Float
  g: Float
  g_idp: Float
  h: Float
  hbp: Float
  hr: Float
  ibb: Float
  r: Float
  rbi: Float
  sb: Float
  sf: Float
  sh: Float
  so: Float
  triple: Float
  year: Float
}

"""
order by var_pop() on columns of table "batting_postseason"
"""
input batting_postseason_var_pop_order_by {
  ab: order_by
  bb: order_by
  cs: order_by
  double: order_by
  g: order_by
  g_idp: order_by
  h: order_by
  hbp: order_by
  hr: order_by
  ibb: order_by
  r: order_by
  rbi: order_by
  sb: order_by
  sf: order_by
  sh: order_by
  so: order_by
  triple: order_by
  year: order_by
}

"""aggregate var_samp on columns"""
type batting_postseason_var_samp_fields {
  ab: Float
  bb: Float
  cs: Float
  double: Float
  g: Float
  g_idp: Float
  h: Float
  hbp: Float
  hr: Float
  ibb: Float
  r: Float
  rbi: Float
  sb: Float
  sf: Float
  sh: Float
  so: Float
  triple: Float
  year: Float
}

"""
order by var_samp() on columns of table "batting_postseason"
"""
input batting_postseason_var_samp_order_by {
  ab: order_by
  bb: order_by
  cs: order_by
  double: order_by
  g: order_by
  g_idp: order_by
  h: order_by
  hbp: order_by
  hr: order_by
  ibb: order_by
  r: order_by
  rbi: order_by
  sb: order_by
  sf: order_by
  sh: order_by
  so: order_by
  triple: order_by
  year: order_by
}

"""aggregate variance on columns"""
type batting_postseason_variance_fields {
  ab: Float
  bb: Float
  cs: Float
  double: Float
  g: Float
  g_idp: Float
  h: Float
  hbp: Float
  hr: Float
  ibb: Float
  r: Float
  rbi: Float
  sb: Float
  sf: Float
  sh: Float
  so: Float
  triple: Float
  year: Float
}

"""
order by variance() on columns of table "batting_postseason"
"""
input batting_postseason_variance_order_by {
  ab: order_by
  bb: order_by
  cs: order_by
  double: order_by
  g: order_by
  g_idp: order_by
  h: order_by
  hbp: order_by
  hr: order_by
  ibb: order_by
  r: order_by
  rbi: order_by
  sb: order_by
  sf: order_by
  sh: order_by
  so: order_by
  triple: order_by
  year: order_by
}

"""
select columns of table "batting"
"""
enum batting_select_column {
  """column name"""
  ab

  """column name"""
  bb

  """column name"""
  cs

  """column name"""
  double

  """column name"""
  g

  """column name"""
  g_idp

  """column name"""
  h

  """column name"""
  hbp

  """column name"""
  hr

  """column name"""
  ibb

  """column name"""
  league_id

  """column name"""
  player_id

  """column name"""
  r

  """column name"""
  rbi

  """column name"""
  sb

  """column name"""
  sf

  """column name"""
  sh

  """column name"""
  so

  """column name"""
  stint

  """column name"""
  team_id

  """column name"""
  triple

  """column name"""
  year
}

"""
input type for updating data in table "batting"
"""
input batting_set_input {
  ab: numeric
  bb: numeric
  cs: numeric
  double: numeric
  g: bigint
  g_idp: numeric
  h: numeric
  hbp: numeric
  hr: numeric
  ibb: numeric
  league_id: String
  player_id: String
  r: numeric
  rbi: numeric
  sb: numeric
  sf: numeric
  sh: numeric
  so: numeric
  stint: bigint
  team_id: String
  triple: numeric
  year: bigint
}

"""aggregate stddev on columns"""
type batting_stddev_fields {
  ab: Float
  bb: Float
  cs: Float
  double: Float
  g: Float
  g_idp: Float
  h: Float
  hbp: Float
  hr: Float
  ibb: Float
  r: Float
  rbi: Float
  sb: Float
  sf: Float
  sh: Float
  so: Float
  stint: Float
  triple: Float
  year: Float
}

"""
order by stddev() on columns of table "batting"
"""
input batting_stddev_order_by {
  ab: order_by
  bb: order_by
  cs: order_by
  double: order_by
  g: order_by
  g_idp: order_by
  h: order_by
  hbp: order_by
  hr: order_by
  ibb: order_by
  r: order_by
  rbi: order_by
  sb: order_by
  sf: order_by
  sh: order_by
  so: order_by
  stint: order_by
  triple: order_by
  year: order_by
}

"""aggregate stddev_pop on columns"""
type batting_stddev_pop_fields {
  ab: Float
  bb: Float
  cs: Float
  double: Float
  g: Float
  g_idp: Float
  h: Float
  hbp: Float
  hr: Float
  ibb: Float
  r: Float
  rbi: Float
  sb: Float
  sf: Float
  sh: Float
  so: Float
  stint: Float
  triple: Float
  year: Float
}

"""
order by stddev_pop() on columns of table "batting"
"""
input batting_stddev_pop_order_by {
  ab: order_by
  bb: order_by
  cs: order_by
  double: order_by
  g: order_by
  g_idp: order_by
  h: order_by
  hbp: order_by
  hr: order_by
  ibb: order_by
  r: order_by
  rbi: order_by
  sb: order_by
  sf: order_by
  sh: order_by
  so: order_by
  stint: order_by
  triple: order_by
  year: order_by
}

"""aggregate stddev_samp on columns"""
type batting_stddev_samp_fields {
  ab: Float
  bb: Float
  cs: Float
  double: Float
  g: Float
  g_idp: Float
  h: Float
  hbp: Float
  hr: Float
  ibb: Float
  r: Float
  rbi: Float
  sb: Float
  sf: Float
  sh: Float
  so: Float
  stint: Float
  triple: Float
  year: Float
}

"""
order by stddev_samp() on columns of table "batting"
"""
input batting_stddev_samp_order_by {
  ab: order_by
  bb: order_by
  cs: order_by
  double: order_by
  g: order_by
  g_idp: order_by
  h: order_by
  hbp: order_by
  hr: order_by
  ibb: order_by
  r: order_by
  rbi: order_by
  sb: order_by
  sf: order_by
  sh: order_by
  so: order_by
  stint: order_by
  triple: order_by
  year: order_by
}

"""aggregate sum on columns"""
type batting_sum_fields {
  ab: numeric
  bb: numeric
  cs: numeric
  double: numeric
  g: bigint
  g_idp: numeric
  h: numeric
  hbp: numeric
  hr: numeric
  ibb: numeric
  r: numeric
  rbi: numeric
  sb: numeric
  sf: numeric
  sh: numeric
  so: numeric
  stint: bigint
  triple: numeric
  year: bigint
}

"""
order by sum() on columns of table "batting"
"""
input batting_sum_order_by {
  ab: order_by
  bb: order_by
  cs: order_by
  double: order_by
  g: order_by
  g_idp: order_by
  h: order_by
  hbp: order_by
  hr: order_by
  ibb: order_by
  r: order_by
  rbi: order_by
  sb: order_by
  sf: order_by
  sh: order_by
  so: order_by
  stint: order_by
  triple: order_by
  year: order_by
}

"""aggregate var_pop on columns"""
type batting_var_pop_fields {
  ab: Float
  bb: Float
  cs: Float
  double: Float
  g: Float
  g_idp: Float
  h: Float
  hbp: Float
  hr: Float
  ibb: Float
  r: Float
  rbi: Float
  sb: Float
  sf: Float
  sh: Float
  so: Float
  stint: Float
  triple: Float
  year: Float
}

"""
order by var_pop() on columns of table "batting"
"""
input batting_var_pop_order_by {
  ab: order_by
  bb: order_by
  cs: order_by
  double: order_by
  g: order_by
  g_idp: order_by
  h: order_by
  hbp: order_by
  hr: order_by
  ibb: order_by
  r: order_by
  rbi: order_by
  sb: order_by
  sf: order_by
  sh: order_by
  so: order_by
  stint: order_by
  triple: order_by
  year: order_by
}

"""aggregate var_samp on columns"""
type batting_var_samp_fields {
  ab: Float
  bb: Float
  cs: Float
  double: Float
  g: Float
  g_idp: Float
  h: Float
  hbp: Float
  hr: Float
  ibb: Float
  r: Float
  rbi: Float
  sb: Float
  sf: Float
  sh: Float
  so: Float
  stint: Float
  triple: Float
  year: Float
}

"""
order by var_samp() on columns of table "batting"
"""
input batting_var_samp_order_by {
  ab: order_by
  bb: order_by
  cs: order_by
  double: order_by
  g: order_by
  g_idp: order_by
  h: order_by
  hbp: order_by
  hr: order_by
  ibb: order_by
  r: order_by
  rbi: order_by
  sb: order_by
  sf: order_by
  sh: order_by
  so: order_by
  stint: order_by
  triple: order_by
  year: order_by
}

"""aggregate variance on columns"""
type batting_variance_fields {
  ab: Float
  bb: Float
  cs: Float
  double: Float
  g: Float
  g_idp: Float
  h: Float
  hbp: Float
  hr: Float
  ibb: Float
  r: Float
  rbi: Float
  sb: Float
  sf: Float
  sh: Float
  so: Float
  stint: Float
  triple: Float
  year: Float
}

"""
order by variance() on columns of table "batting"
"""
input batting_variance_order_by {
  ab: order_by
  bb: order_by
  cs: order_by
  double: order_by
  g: order_by
  g_idp: order_by
  h: order_by
  hbp: order_by
  hr: order_by
  ibb: order_by
  r: order_by
  rbi: order_by
  sb: order_by
  sf: order_by
  sh: order_by
  so: order_by
  stint: order_by
  triple: order_by
  year: order_by
}

scalar bigint

"""
expression to compare columns of type bigint. All fields are combined with logical 'AND'.
"""
input bigint_comparison_exp {
  _eq: bigint
  _gt: bigint
  _gte: bigint
  _in: [bigint!]
  _is_null: Boolean
  _lt: bigint
  _lte: bigint
  _neq: bigint
  _nin: [bigint!]
}

"""
columns and relationships of "college"
"""
type college {
  city: String
  college_id: String!
  country: String
  name_full: String

  """An array relationship"""
  players(
    """distinct select on columns"""
    distinct_on: [player_college_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [player_college_order_by!]

    """filter the rows returned"""
    where: player_college_bool_exp
  ): [player_college!]!

  """An aggregated array relationship"""
  players_aggregate(
    """distinct select on columns"""
    distinct_on: [player_college_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [player_college_order_by!]

    """filter the rows returned"""
    where: player_college_bool_exp
  ): player_college_aggregate!
  state: String
}

"""
aggregated selection of "college"
"""
type college_aggregate {
  aggregate: college_aggregate_fields
  nodes: [college!]!
}

"""
aggregate fields of "college"
"""
type college_aggregate_fields {
  count(columns: [college_select_column!], distinct: Boolean): Int
  max: college_max_fields
  min: college_min_fields
}

"""
order by aggregate values of table "college"
"""
input college_aggregate_order_by {
  count: order_by
  max: college_max_order_by
  min: college_min_order_by
}

"""
input type for inserting array relation for remote table "college"
"""
input college_arr_rel_insert_input {
  data: [college_insert_input!]!
  on_conflict: college_on_conflict
}

"""
Boolean expression to filter rows from the table "college". All fields are combined with a logical 'AND'.
"""
input college_bool_exp {
  _and: [college_bool_exp]
  _not: college_bool_exp
  _or: [college_bool_exp]
  city: String_comparison_exp
  college_id: String_comparison_exp
  country: String_comparison_exp
  name_full: String_comparison_exp
  players: player_college_bool_exp
  state: String_comparison_exp
}

"""
unique or primary key constraints on table "college"
"""
enum college_constraint {
  """unique or primary key constraint"""
  college_college_id_key

  """unique or primary key constraint"""
  college_pkey
}

"""
input type for inserting data into table "college"
"""
input college_insert_input {
  city: String
  college_id: String
  country: String
  name_full: String
  players: player_college_arr_rel_insert_input
  state: String
}

"""aggregate max on columns"""
type college_max_fields {
  city: String
  college_id: String
  country: String
  name_full: String
  state: String
}

"""
order by max() on columns of table "college"
"""
input college_max_order_by {
  city: order_by
  college_id: order_by
  country: order_by
  name_full: order_by
  state: order_by
}

"""aggregate min on columns"""
type college_min_fields {
  city: String
  college_id: String
  country: String
  name_full: String
  state: String
}

"""
order by min() on columns of table "college"
"""
input college_min_order_by {
  city: order_by
  college_id: order_by
  country: order_by
  name_full: order_by
  state: order_by
}

"""
response of any mutation on the table "college"
"""
type college_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [college!]!
}

"""
input type for inserting object relation for remote table "college"
"""
input college_obj_rel_insert_input {
  data: college_insert_input!
  on_conflict: college_on_conflict
}

"""
on conflict condition type for table "college"
"""
input college_on_conflict {
  constraint: college_constraint!
  update_columns: [college_update_column!]!
  where: college_bool_exp
}

"""
ordering options when selecting data from "college"
"""
input college_order_by {
  city: order_by
  college_id: order_by
  country: order_by
  name_full: order_by
  players_aggregate: player_college_aggregate_order_by
  state: order_by
}

"""
primary key columns input for table: "college"
"""
input college_pk_columns_input {
  college_id: String!
}

"""
select columns of table "college"
"""
enum college_select_column {
  """column name"""
  city

  """column name"""
  college_id

  """column name"""
  country

  """column name"""
  name_full

  """column name"""
  state
}

"""
input type for updating data in table "college"
"""
input college_set_input {
  city: String
  college_id: String
  country: String
  name_full: String
  state: String
}

"""
update columns of table "college"
"""
enum college_update_column {
  """column name"""
  city

  """column name"""
  college_id

  """column name"""
  country

  """column name"""
  name_full

  """column name"""
  state
}

"""
columns and relationships of "fielding"
"""
type fielding {
  a: numeric
  cs: numeric
  dp: numeric
  e: numeric
  g: bigint
  gs: numeric
  inn_outs: numeric
  league_id: String
  pb: numeric
  player_id: String
  po: numeric
  pos: String
  sb: numeric
  stint: bigint
  team_id: String
  wp: numeric
  year: bigint
  zr: numeric
}

"""
aggregated selection of "fielding"
"""
type fielding_aggregate {
  aggregate: fielding_aggregate_fields
  nodes: [fielding!]!
}

"""
aggregate fields of "fielding"
"""
type fielding_aggregate_fields {
  avg: fielding_avg_fields
  count(columns: [fielding_select_column!], distinct: Boolean): Int
  max: fielding_max_fields
  min: fielding_min_fields
  stddev: fielding_stddev_fields
  stddev_pop: fielding_stddev_pop_fields
  stddev_samp: fielding_stddev_samp_fields
  sum: fielding_sum_fields
  var_pop: fielding_var_pop_fields
  var_samp: fielding_var_samp_fields
  variance: fielding_variance_fields
}

"""
order by aggregate values of table "fielding"
"""
input fielding_aggregate_order_by {
  avg: fielding_avg_order_by
  count: order_by
  max: fielding_max_order_by
  min: fielding_min_order_by
  stddev: fielding_stddev_order_by
  stddev_pop: fielding_stddev_pop_order_by
  stddev_samp: fielding_stddev_samp_order_by
  sum: fielding_sum_order_by
  var_pop: fielding_var_pop_order_by
  var_samp: fielding_var_samp_order_by
  variance: fielding_variance_order_by
}

"""
input type for inserting array relation for remote table "fielding"
"""
input fielding_arr_rel_insert_input {
  data: [fielding_insert_input!]!
}

"""aggregate avg on columns"""
type fielding_avg_fields {
  a: Float
  cs: Float
  dp: Float
  e: Float
  g: Float
  gs: Float
  inn_outs: Float
  pb: Float
  po: Float
  sb: Float
  stint: Float
  wp: Float
  year: Float
  zr: Float
}

"""
order by avg() on columns of table "fielding"
"""
input fielding_avg_order_by {
  a: order_by
  cs: order_by
  dp: order_by
  e: order_by
  g: order_by
  gs: order_by
  inn_outs: order_by
  pb: order_by
  po: order_by
  sb: order_by
  stint: order_by
  wp: order_by
  year: order_by
  zr: order_by
}

"""
Boolean expression to filter rows from the table "fielding". All fields are combined with a logical 'AND'.
"""
input fielding_bool_exp {
  _and: [fielding_bool_exp]
  _not: fielding_bool_exp
  _or: [fielding_bool_exp]
  a: numeric_comparison_exp
  cs: numeric_comparison_exp
  dp: numeric_comparison_exp
  e: numeric_comparison_exp
  g: bigint_comparison_exp
  gs: numeric_comparison_exp
  inn_outs: numeric_comparison_exp
  league_id: String_comparison_exp
  pb: numeric_comparison_exp
  player_id: String_comparison_exp
  po: numeric_comparison_exp
  pos: String_comparison_exp
  sb: numeric_comparison_exp
  stint: bigint_comparison_exp
  team_id: String_comparison_exp
  wp: numeric_comparison_exp
  year: bigint_comparison_exp
  zr: numeric_comparison_exp
}

"""
input type for incrementing integer column in table "fielding"
"""
input fielding_inc_input {
  a: numeric
  cs: numeric
  dp: numeric
  e: numeric
  g: bigint
  gs: numeric
  inn_outs: numeric
  pb: numeric
  po: numeric
  sb: numeric
  stint: bigint
  wp: numeric
  year: bigint
  zr: numeric
}

"""
input type for inserting data into table "fielding"
"""
input fielding_insert_input {
  a: numeric
  cs: numeric
  dp: numeric
  e: numeric
  g: bigint
  gs: numeric
  inn_outs: numeric
  league_id: String
  pb: numeric
  player_id: String
  po: numeric
  pos: String
  sb: numeric
  stint: bigint
  team_id: String
  wp: numeric
  year: bigint
  zr: numeric
}

"""aggregate max on columns"""
type fielding_max_fields {
  a: numeric
  cs: numeric
  dp: numeric
  e: numeric
  g: bigint
  gs: numeric
  inn_outs: numeric
  league_id: String
  pb: numeric
  player_id: String
  po: numeric
  pos: String
  sb: numeric
  stint: bigint
  team_id: String
  wp: numeric
  year: bigint
  zr: numeric
}

"""
order by max() on columns of table "fielding"
"""
input fielding_max_order_by {
  a: order_by
  cs: order_by
  dp: order_by
  e: order_by
  g: order_by
  gs: order_by
  inn_outs: order_by
  league_id: order_by
  pb: order_by
  player_id: order_by
  po: order_by
  pos: order_by
  sb: order_by
  stint: order_by
  team_id: order_by
  wp: order_by
  year: order_by
  zr: order_by
}

"""aggregate min on columns"""
type fielding_min_fields {
  a: numeric
  cs: numeric
  dp: numeric
  e: numeric
  g: bigint
  gs: numeric
  inn_outs: numeric
  league_id: String
  pb: numeric
  player_id: String
  po: numeric
  pos: String
  sb: numeric
  stint: bigint
  team_id: String
  wp: numeric
  year: bigint
  zr: numeric
}

"""
order by min() on columns of table "fielding"
"""
input fielding_min_order_by {
  a: order_by
  cs: order_by
  dp: order_by
  e: order_by
  g: order_by
  gs: order_by
  inn_outs: order_by
  league_id: order_by
  pb: order_by
  player_id: order_by
  po: order_by
  pos: order_by
  sb: order_by
  stint: order_by
  team_id: order_by
  wp: order_by
  year: order_by
  zr: order_by
}

"""
response of any mutation on the table "fielding"
"""
type fielding_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [fielding!]!
}

"""
input type for inserting object relation for remote table "fielding"
"""
input fielding_obj_rel_insert_input {
  data: fielding_insert_input!
}

"""
ordering options when selecting data from "fielding"
"""
input fielding_order_by {
  a: order_by
  cs: order_by
  dp: order_by
  e: order_by
  g: order_by
  gs: order_by
  inn_outs: order_by
  league_id: order_by
  pb: order_by
  player_id: order_by
  po: order_by
  pos: order_by
  sb: order_by
  stint: order_by
  team_id: order_by
  wp: order_by
  year: order_by
  zr: order_by
}

"""
columns and relationships of "fielding_outfield"
"""
type fielding_outfield {
  gcf: numeric
  glf: numeric
  grf: numeric
  player_id: String
  stint: bigint
  year: bigint
}

"""
aggregated selection of "fielding_outfield"
"""
type fielding_outfield_aggregate {
  aggregate: fielding_outfield_aggregate_fields
  nodes: [fielding_outfield!]!
}

"""
aggregate fields of "fielding_outfield"
"""
type fielding_outfield_aggregate_fields {
  avg: fielding_outfield_avg_fields
  count(columns: [fielding_outfield_select_column!], distinct: Boolean): Int
  max: fielding_outfield_max_fields
  min: fielding_outfield_min_fields
  stddev: fielding_outfield_stddev_fields
  stddev_pop: fielding_outfield_stddev_pop_fields
  stddev_samp: fielding_outfield_stddev_samp_fields
  sum: fielding_outfield_sum_fields
  var_pop: fielding_outfield_var_pop_fields
  var_samp: fielding_outfield_var_samp_fields
  variance: fielding_outfield_variance_fields
}

"""
order by aggregate values of table "fielding_outfield"
"""
input fielding_outfield_aggregate_order_by {
  avg: fielding_outfield_avg_order_by
  count: order_by
  max: fielding_outfield_max_order_by
  min: fielding_outfield_min_order_by
  stddev: fielding_outfield_stddev_order_by
  stddev_pop: fielding_outfield_stddev_pop_order_by
  stddev_samp: fielding_outfield_stddev_samp_order_by
  sum: fielding_outfield_sum_order_by
  var_pop: fielding_outfield_var_pop_order_by
  var_samp: fielding_outfield_var_samp_order_by
  variance: fielding_outfield_variance_order_by
}

"""
input type for inserting array relation for remote table "fielding_outfield"
"""
input fielding_outfield_arr_rel_insert_input {
  data: [fielding_outfield_insert_input!]!
}

"""aggregate avg on columns"""
type fielding_outfield_avg_fields {
  gcf: Float
  glf: Float
  grf: Float
  stint: Float
  year: Float
}

"""
order by avg() on columns of table "fielding_outfield"
"""
input fielding_outfield_avg_order_by {
  gcf: order_by
  glf: order_by
  grf: order_by
  stint: order_by
  year: order_by
}

"""
Boolean expression to filter rows from the table "fielding_outfield". All fields are combined with a logical 'AND'.
"""
input fielding_outfield_bool_exp {
  _and: [fielding_outfield_bool_exp]
  _not: fielding_outfield_bool_exp
  _or: [fielding_outfield_bool_exp]
  gcf: numeric_comparison_exp
  glf: numeric_comparison_exp
  grf: numeric_comparison_exp
  player_id: String_comparison_exp
  stint: bigint_comparison_exp
  year: bigint_comparison_exp
}

"""
input type for incrementing integer column in table "fielding_outfield"
"""
input fielding_outfield_inc_input {
  gcf: numeric
  glf: numeric
  grf: numeric
  stint: bigint
  year: bigint
}

"""
input type for inserting data into table "fielding_outfield"
"""
input fielding_outfield_insert_input {
  gcf: numeric
  glf: numeric
  grf: numeric
  player_id: String
  stint: bigint
  year: bigint
}

"""aggregate max on columns"""
type fielding_outfield_max_fields {
  gcf: numeric
  glf: numeric
  grf: numeric
  player_id: String
  stint: bigint
  year: bigint
}

"""
order by max() on columns of table "fielding_outfield"
"""
input fielding_outfield_max_order_by {
  gcf: order_by
  glf: order_by
  grf: order_by
  player_id: order_by
  stint: order_by
  year: order_by
}

"""aggregate min on columns"""
type fielding_outfield_min_fields {
  gcf: numeric
  glf: numeric
  grf: numeric
  player_id: String
  stint: bigint
  year: bigint
}

"""
order by min() on columns of table "fielding_outfield"
"""
input fielding_outfield_min_order_by {
  gcf: order_by
  glf: order_by
  grf: order_by
  player_id: order_by
  stint: order_by
  year: order_by
}

"""
response of any mutation on the table "fielding_outfield"
"""
type fielding_outfield_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [fielding_outfield!]!
}

"""
input type for inserting object relation for remote table "fielding_outfield"
"""
input fielding_outfield_obj_rel_insert_input {
  data: fielding_outfield_insert_input!
}

"""
ordering options when selecting data from "fielding_outfield"
"""
input fielding_outfield_order_by {
  gcf: order_by
  glf: order_by
  grf: order_by
  player_id: order_by
  stint: order_by
  year: order_by
}

"""
select columns of table "fielding_outfield"
"""
enum fielding_outfield_select_column {
  """column name"""
  gcf

  """column name"""
  glf

  """column name"""
  grf

  """column name"""
  player_id

  """column name"""
  stint

  """column name"""
  year
}

"""
input type for updating data in table "fielding_outfield"
"""
input fielding_outfield_set_input {
  gcf: numeric
  glf: numeric
  grf: numeric
  player_id: String
  stint: bigint
  year: bigint
}

"""aggregate stddev on columns"""
type fielding_outfield_stddev_fields {
  gcf: Float
  glf: Float
  grf: Float
  stint: Float
  year: Float
}

"""
order by stddev() on columns of table "fielding_outfield"
"""
input fielding_outfield_stddev_order_by {
  gcf: order_by
  glf: order_by
  grf: order_by
  stint: order_by
  year: order_by
}

"""aggregate stddev_pop on columns"""
type fielding_outfield_stddev_pop_fields {
  gcf: Float
  glf: Float
  grf: Float
  stint: Float
  year: Float
}

"""
order by stddev_pop() on columns of table "fielding_outfield"
"""
input fielding_outfield_stddev_pop_order_by {
  gcf: order_by
  glf: order_by
  grf: order_by
  stint: order_by
  year: order_by
}

"""aggregate stddev_samp on columns"""
type fielding_outfield_stddev_samp_fields {
  gcf: Float
  glf: Float
  grf: Float
  stint: Float
  year: Float
}

"""
order by stddev_samp() on columns of table "fielding_outfield"
"""
input fielding_outfield_stddev_samp_order_by {
  gcf: order_by
  glf: order_by
  grf: order_by
  stint: order_by
  year: order_by
}

"""aggregate sum on columns"""
type fielding_outfield_sum_fields {
  gcf: numeric
  glf: numeric
  grf: numeric
  stint: bigint
  year: bigint
}

"""
order by sum() on columns of table "fielding_outfield"
"""
input fielding_outfield_sum_order_by {
  gcf: order_by
  glf: order_by
  grf: order_by
  stint: order_by
  year: order_by
}

"""aggregate var_pop on columns"""
type fielding_outfield_var_pop_fields {
  gcf: Float
  glf: Float
  grf: Float
  stint: Float
  year: Float
}

"""
order by var_pop() on columns of table "fielding_outfield"
"""
input fielding_outfield_var_pop_order_by {
  gcf: order_by
  glf: order_by
  grf: order_by
  stint: order_by
  year: order_by
}

"""aggregate var_samp on columns"""
type fielding_outfield_var_samp_fields {
  gcf: Float
  glf: Float
  grf: Float
  stint: Float
  year: Float
}

"""
order by var_samp() on columns of table "fielding_outfield"
"""
input fielding_outfield_var_samp_order_by {
  gcf: order_by
  glf: order_by
  grf: order_by
  stint: order_by
  year: order_by
}

"""aggregate variance on columns"""
type fielding_outfield_variance_fields {
  gcf: Float
  glf: Float
  grf: Float
  stint: Float
  year: Float
}

"""
order by variance() on columns of table "fielding_outfield"
"""
input fielding_outfield_variance_order_by {
  gcf: order_by
  glf: order_by
  grf: order_by
  stint: order_by
  year: order_by
}

"""
columns and relationships of "fielding_postseason"
"""
type fielding_postseason {
  a: bigint
  cs: numeric
  dp: bigint
  e: bigint
  g: bigint
  gs: numeric
  inn_outs: numeric
  league_id: String
  pb: numeric
  player_id: String
  po: bigint
  pos: String
  round: String
  sb: numeric
  team_id: String
  tp: bigint
  year: bigint
}

"""
aggregated selection of "fielding_postseason"
"""
type fielding_postseason_aggregate {
  aggregate: fielding_postseason_aggregate_fields
  nodes: [fielding_postseason!]!
}

"""
aggregate fields of "fielding_postseason"
"""
type fielding_postseason_aggregate_fields {
  avg: fielding_postseason_avg_fields
  count(columns: [fielding_postseason_select_column!], distinct: Boolean): Int
  max: fielding_postseason_max_fields
  min: fielding_postseason_min_fields
  stddev: fielding_postseason_stddev_fields
  stddev_pop: fielding_postseason_stddev_pop_fields
  stddev_samp: fielding_postseason_stddev_samp_fields
  sum: fielding_postseason_sum_fields
  var_pop: fielding_postseason_var_pop_fields
  var_samp: fielding_postseason_var_samp_fields
  variance: fielding_postseason_variance_fields
}

"""
order by aggregate values of table "fielding_postseason"
"""
input fielding_postseason_aggregate_order_by {
  avg: fielding_postseason_avg_order_by
  count: order_by
  max: fielding_postseason_max_order_by
  min: fielding_postseason_min_order_by
  stddev: fielding_postseason_stddev_order_by
  stddev_pop: fielding_postseason_stddev_pop_order_by
  stddev_samp: fielding_postseason_stddev_samp_order_by
  sum: fielding_postseason_sum_order_by
  var_pop: fielding_postseason_var_pop_order_by
  var_samp: fielding_postseason_var_samp_order_by
  variance: fielding_postseason_variance_order_by
}

"""
input type for inserting array relation for remote table "fielding_postseason"
"""
input fielding_postseason_arr_rel_insert_input {
  data: [fielding_postseason_insert_input!]!
}

"""aggregate avg on columns"""
type fielding_postseason_avg_fields {
  a: Float
  cs: Float
  dp: Float
  e: Float
  g: Float
  gs: Float
  inn_outs: Float
  pb: Float
  po: Float
  sb: Float
  tp: Float
  year: Float
}

"""
order by avg() on columns of table "fielding_postseason"
"""
input fielding_postseason_avg_order_by {
  a: order_by
  cs: order_by
  dp: order_by
  e: order_by
  g: order_by
  gs: order_by
  inn_outs: order_by
  pb: order_by
  po: order_by
  sb: order_by
  tp: order_by
  year: order_by
}

"""
Boolean expression to filter rows from the table "fielding_postseason". All fields are combined with a logical 'AND'.
"""
input fielding_postseason_bool_exp {
  _and: [fielding_postseason_bool_exp]
  _not: fielding_postseason_bool_exp
  _or: [fielding_postseason_bool_exp]
  a: bigint_comparison_exp
  cs: numeric_comparison_exp
  dp: bigint_comparison_exp
  e: bigint_comparison_exp
  g: bigint_comparison_exp
  gs: numeric_comparison_exp
  inn_outs: numeric_comparison_exp
  league_id: String_comparison_exp
  pb: numeric_comparison_exp
  player_id: String_comparison_exp
  po: bigint_comparison_exp
  pos: String_comparison_exp
  round: String_comparison_exp
  sb: numeric_comparison_exp
  team_id: String_comparison_exp
  tp: bigint_comparison_exp
  year: bigint_comparison_exp
}

"""
input type for incrementing integer column in table "fielding_postseason"
"""
input fielding_postseason_inc_input {
  a: bigint
  cs: numeric
  dp: bigint
  e: bigint
  g: bigint
  gs: numeric
  inn_outs: numeric
  pb: numeric
  po: bigint
  sb: numeric
  tp: bigint
  year: bigint
}

"""
input type for inserting data into table "fielding_postseason"
"""
input fielding_postseason_insert_input {
  a: bigint
  cs: numeric
  dp: bigint
  e: bigint
  g: bigint
  gs: numeric
  inn_outs: numeric
  league_id: String
  pb: numeric
  player_id: String
  po: bigint
  pos: String
  round: String
  sb: numeric
  team_id: String
  tp: bigint
  year: bigint
}

"""aggregate max on columns"""
type fielding_postseason_max_fields {
  a: bigint
  cs: numeric
  dp: bigint
  e: bigint
  g: bigint
  gs: numeric
  inn_outs: numeric
  league_id: String
  pb: numeric
  player_id: String
  po: bigint
  pos: String
  round: String
  sb: numeric
  team_id: String
  tp: bigint
  year: bigint
}

"""
order by max() on columns of table "fielding_postseason"
"""
input fielding_postseason_max_order_by {
  a: order_by
  cs: order_by
  dp: order_by
  e: order_by
  g: order_by
  gs: order_by
  inn_outs: order_by
  league_id: order_by
  pb: order_by
  player_id: order_by
  po: order_by
  pos: order_by
  round: order_by
  sb: order_by
  team_id: order_by
  tp: order_by
  year: order_by
}

"""aggregate min on columns"""
type fielding_postseason_min_fields {
  a: bigint
  cs: numeric
  dp: bigint
  e: bigint
  g: bigint
  gs: numeric
  inn_outs: numeric
  league_id: String
  pb: numeric
  player_id: String
  po: bigint
  pos: String
  round: String
  sb: numeric
  team_id: String
  tp: bigint
  year: bigint
}

"""
order by min() on columns of table "fielding_postseason"
"""
input fielding_postseason_min_order_by {
  a: order_by
  cs: order_by
  dp: order_by
  e: order_by
  g: order_by
  gs: order_by
  inn_outs: order_by
  league_id: order_by
  pb: order_by
  player_id: order_by
  po: order_by
  pos: order_by
  round: order_by
  sb: order_by
  team_id: order_by
  tp: order_by
  year: order_by
}

"""
response of any mutation on the table "fielding_postseason"
"""
type fielding_postseason_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [fielding_postseason!]!
}

"""
input type for inserting object relation for remote table "fielding_postseason"
"""
input fielding_postseason_obj_rel_insert_input {
  data: fielding_postseason_insert_input!
}

"""
ordering options when selecting data from "fielding_postseason"
"""
input fielding_postseason_order_by {
  a: order_by
  cs: order_by
  dp: order_by
  e: order_by
  g: order_by
  gs: order_by
  inn_outs: order_by
  league_id: order_by
  pb: order_by
  player_id: order_by
  po: order_by
  pos: order_by
  round: order_by
  sb: order_by
  team_id: order_by
  tp: order_by
  year: order_by
}

"""
select columns of table "fielding_postseason"
"""
enum fielding_postseason_select_column {
  """column name"""
  a

  """column name"""
  cs

  """column name"""
  dp

  """column name"""
  e

  """column name"""
  g

  """column name"""
  gs

  """column name"""
  inn_outs

  """column name"""
  league_id

  """column name"""
  pb

  """column name"""
  player_id

  """column name"""
  po

  """column name"""
  pos

  """column name"""
  round

  """column name"""
  sb

  """column name"""
  team_id

  """column name"""
  tp

  """column name"""
  year
}

"""
input type for updating data in table "fielding_postseason"
"""
input fielding_postseason_set_input {
  a: bigint
  cs: numeric
  dp: bigint
  e: bigint
  g: bigint
  gs: numeric
  inn_outs: numeric
  league_id: String
  pb: numeric
  player_id: String
  po: bigint
  pos: String
  round: String
  sb: numeric
  team_id: String
  tp: bigint
  year: bigint
}

"""aggregate stddev on columns"""
type fielding_postseason_stddev_fields {
  a: Float
  cs: Float
  dp: Float
  e: Float
  g: Float
  gs: Float
  inn_outs: Float
  pb: Float
  po: Float
  sb: Float
  tp: Float
  year: Float
}

"""
order by stddev() on columns of table "fielding_postseason"
"""
input fielding_postseason_stddev_order_by {
  a: order_by
  cs: order_by
  dp: order_by
  e: order_by
  g: order_by
  gs: order_by
  inn_outs: order_by
  pb: order_by
  po: order_by
  sb: order_by
  tp: order_by
  year: order_by
}

"""aggregate stddev_pop on columns"""
type fielding_postseason_stddev_pop_fields {
  a: Float
  cs: Float
  dp: Float
  e: Float
  g: Float
  gs: Float
  inn_outs: Float
  pb: Float
  po: Float
  sb: Float
  tp: Float
  year: Float
}

"""
order by stddev_pop() on columns of table "fielding_postseason"
"""
input fielding_postseason_stddev_pop_order_by {
  a: order_by
  cs: order_by
  dp: order_by
  e: order_by
  g: order_by
  gs: order_by
  inn_outs: order_by
  pb: order_by
  po: order_by
  sb: order_by
  tp: order_by
  year: order_by
}

"""aggregate stddev_samp on columns"""
type fielding_postseason_stddev_samp_fields {
  a: Float
  cs: Float
  dp: Float
  e: Float
  g: Float
  gs: Float
  inn_outs: Float
  pb: Float
  po: Float
  sb: Float
  tp: Float
  year: Float
}

"""
order by stddev_samp() on columns of table "fielding_postseason"
"""
input fielding_postseason_stddev_samp_order_by {
  a: order_by
  cs: order_by
  dp: order_by
  e: order_by
  g: order_by
  gs: order_by
  inn_outs: order_by
  pb: order_by
  po: order_by
  sb: order_by
  tp: order_by
  year: order_by
}

"""aggregate sum on columns"""
type fielding_postseason_sum_fields {
  a: bigint
  cs: numeric
  dp: bigint
  e: bigint
  g: bigint
  gs: numeric
  inn_outs: numeric
  pb: numeric
  po: bigint
  sb: numeric
  tp: bigint
  year: bigint
}

"""
order by sum() on columns of table "fielding_postseason"
"""
input fielding_postseason_sum_order_by {
  a: order_by
  cs: order_by
  dp: order_by
  e: order_by
  g: order_by
  gs: order_by
  inn_outs: order_by
  pb: order_by
  po: order_by
  sb: order_by
  tp: order_by
  year: order_by
}

"""aggregate var_pop on columns"""
type fielding_postseason_var_pop_fields {
  a: Float
  cs: Float
  dp: Float
  e: Float
  g: Float
  gs: Float
  inn_outs: Float
  pb: Float
  po: Float
  sb: Float
  tp: Float
  year: Float
}

"""
order by var_pop() on columns of table "fielding_postseason"
"""
input fielding_postseason_var_pop_order_by {
  a: order_by
  cs: order_by
  dp: order_by
  e: order_by
  g: order_by
  gs: order_by
  inn_outs: order_by
  pb: order_by
  po: order_by
  sb: order_by
  tp: order_by
  year: order_by
}

"""aggregate var_samp on columns"""
type fielding_postseason_var_samp_fields {
  a: Float
  cs: Float
  dp: Float
  e: Float
  g: Float
  gs: Float
  inn_outs: Float
  pb: Float
  po: Float
  sb: Float
  tp: Float
  year: Float
}

"""
order by var_samp() on columns of table "fielding_postseason"
"""
input fielding_postseason_var_samp_order_by {
  a: order_by
  cs: order_by
  dp: order_by
  e: order_by
  g: order_by
  gs: order_by
  inn_outs: order_by
  pb: order_by
  po: order_by
  sb: order_by
  tp: order_by
  year: order_by
}

"""aggregate variance on columns"""
type fielding_postseason_variance_fields {
  a: Float
  cs: Float
  dp: Float
  e: Float
  g: Float
  gs: Float
  inn_outs: Float
  pb: Float
  po: Float
  sb: Float
  tp: Float
  year: Float
}

"""
order by variance() on columns of table "fielding_postseason"
"""
input fielding_postseason_variance_order_by {
  a: order_by
  cs: order_by
  dp: order_by
  e: order_by
  g: order_by
  gs: order_by
  inn_outs: order_by
  pb: order_by
  po: order_by
  sb: order_by
  tp: order_by
  year: order_by
}

"""
select columns of table "fielding"
"""
enum fielding_select_column {
  """column name"""
  a

  """column name"""
  cs

  """column name"""
  dp

  """column name"""
  e

  """column name"""
  g

  """column name"""
  gs

  """column name"""
  inn_outs

  """column name"""
  league_id

  """column name"""
  pb

  """column name"""
  player_id

  """column name"""
  po

  """column name"""
  pos

  """column name"""
  sb

  """column name"""
  stint

  """column name"""
  team_id

  """column name"""
  wp

  """column name"""
  year

  """column name"""
  zr
}

"""
input type for updating data in table "fielding"
"""
input fielding_set_input {
  a: numeric
  cs: numeric
  dp: numeric
  e: numeric
  g: bigint
  gs: numeric
  inn_outs: numeric
  league_id: String
  pb: numeric
  player_id: String
  po: numeric
  pos: String
  sb: numeric
  stint: bigint
  team_id: String
  wp: numeric
  year: bigint
  zr: numeric
}

"""aggregate stddev on columns"""
type fielding_stddev_fields {
  a: Float
  cs: Float
  dp: Float
  e: Float
  g: Float
  gs: Float
  inn_outs: Float
  pb: Float
  po: Float
  sb: Float
  stint: Float
  wp: Float
  year: Float
  zr: Float
}

"""
order by stddev() on columns of table "fielding"
"""
input fielding_stddev_order_by {
  a: order_by
  cs: order_by
  dp: order_by
  e: order_by
  g: order_by
  gs: order_by
  inn_outs: order_by
  pb: order_by
  po: order_by
  sb: order_by
  stint: order_by
  wp: order_by
  year: order_by
  zr: order_by
}

"""aggregate stddev_pop on columns"""
type fielding_stddev_pop_fields {
  a: Float
  cs: Float
  dp: Float
  e: Float
  g: Float
  gs: Float
  inn_outs: Float
  pb: Float
  po: Float
  sb: Float
  stint: Float
  wp: Float
  year: Float
  zr: Float
}

"""
order by stddev_pop() on columns of table "fielding"
"""
input fielding_stddev_pop_order_by {
  a: order_by
  cs: order_by
  dp: order_by
  e: order_by
  g: order_by
  gs: order_by
  inn_outs: order_by
  pb: order_by
  po: order_by
  sb: order_by
  stint: order_by
  wp: order_by
  year: order_by
  zr: order_by
}

"""aggregate stddev_samp on columns"""
type fielding_stddev_samp_fields {
  a: Float
  cs: Float
  dp: Float
  e: Float
  g: Float
  gs: Float
  inn_outs: Float
  pb: Float
  po: Float
  sb: Float
  stint: Float
  wp: Float
  year: Float
  zr: Float
}

"""
order by stddev_samp() on columns of table "fielding"
"""
input fielding_stddev_samp_order_by {
  a: order_by
  cs: order_by
  dp: order_by
  e: order_by
  g: order_by
  gs: order_by
  inn_outs: order_by
  pb: order_by
  po: order_by
  sb: order_by
  stint: order_by
  wp: order_by
  year: order_by
  zr: order_by
}

"""aggregate sum on columns"""
type fielding_sum_fields {
  a: numeric
  cs: numeric
  dp: numeric
  e: numeric
  g: bigint
  gs: numeric
  inn_outs: numeric
  pb: numeric
  po: numeric
  sb: numeric
  stint: bigint
  wp: numeric
  year: bigint
  zr: numeric
}

"""
order by sum() on columns of table "fielding"
"""
input fielding_sum_order_by {
  a: order_by
  cs: order_by
  dp: order_by
  e: order_by
  g: order_by
  gs: order_by
  inn_outs: order_by
  pb: order_by
  po: order_by
  sb: order_by
  stint: order_by
  wp: order_by
  year: order_by
  zr: order_by
}

"""aggregate var_pop on columns"""
type fielding_var_pop_fields {
  a: Float
  cs: Float
  dp: Float
  e: Float
  g: Float
  gs: Float
  inn_outs: Float
  pb: Float
  po: Float
  sb: Float
  stint: Float
  wp: Float
  year: Float
  zr: Float
}

"""
order by var_pop() on columns of table "fielding"
"""
input fielding_var_pop_order_by {
  a: order_by
  cs: order_by
  dp: order_by
  e: order_by
  g: order_by
  gs: order_by
  inn_outs: order_by
  pb: order_by
  po: order_by
  sb: order_by
  stint: order_by
  wp: order_by
  year: order_by
  zr: order_by
}

"""aggregate var_samp on columns"""
type fielding_var_samp_fields {
  a: Float
  cs: Float
  dp: Float
  e: Float
  g: Float
  gs: Float
  inn_outs: Float
  pb: Float
  po: Float
  sb: Float
  stint: Float
  wp: Float
  year: Float
  zr: Float
}

"""
order by var_samp() on columns of table "fielding"
"""
input fielding_var_samp_order_by {
  a: order_by
  cs: order_by
  dp: order_by
  e: order_by
  g: order_by
  gs: order_by
  inn_outs: order_by
  pb: order_by
  po: order_by
  sb: order_by
  stint: order_by
  wp: order_by
  year: order_by
  zr: order_by
}

"""aggregate variance on columns"""
type fielding_variance_fields {
  a: Float
  cs: Float
  dp: Float
  e: Float
  g: Float
  gs: Float
  inn_outs: Float
  pb: Float
  po: Float
  sb: Float
  stint: Float
  wp: Float
  year: Float
  zr: Float
}

"""
order by variance() on columns of table "fielding"
"""
input fielding_variance_order_by {
  a: order_by
  cs: order_by
  dp: order_by
  e: order_by
  g: order_by
  gs: order_by
  inn_outs: order_by
  pb: order_by
  po: order_by
  sb: order_by
  stint: order_by
  wp: order_by
  year: order_by
  zr: order_by
}

"""
columns and relationships of "hall_of_fame"
"""
type hall_of_fame {
  ballots: numeric
  category: String
  inducted: String
  needed: numeric
  needed_note: String
  player_id: String
  votedby: String
  votes: numeric
  yearid: bigint
}

"""
aggregated selection of "hall_of_fame"
"""
type hall_of_fame_aggregate {
  aggregate: hall_of_fame_aggregate_fields
  nodes: [hall_of_fame!]!
}

"""
aggregate fields of "hall_of_fame"
"""
type hall_of_fame_aggregate_fields {
  avg: hall_of_fame_avg_fields
  count(columns: [hall_of_fame_select_column!], distinct: Boolean): Int
  max: hall_of_fame_max_fields
  min: hall_of_fame_min_fields
  stddev: hall_of_fame_stddev_fields
  stddev_pop: hall_of_fame_stddev_pop_fields
  stddev_samp: hall_of_fame_stddev_samp_fields
  sum: hall_of_fame_sum_fields
  var_pop: hall_of_fame_var_pop_fields
  var_samp: hall_of_fame_var_samp_fields
  variance: hall_of_fame_variance_fields
}

"""
order by aggregate values of table "hall_of_fame"
"""
input hall_of_fame_aggregate_order_by {
  avg: hall_of_fame_avg_order_by
  count: order_by
  max: hall_of_fame_max_order_by
  min: hall_of_fame_min_order_by
  stddev: hall_of_fame_stddev_order_by
  stddev_pop: hall_of_fame_stddev_pop_order_by
  stddev_samp: hall_of_fame_stddev_samp_order_by
  sum: hall_of_fame_sum_order_by
  var_pop: hall_of_fame_var_pop_order_by
  var_samp: hall_of_fame_var_samp_order_by
  variance: hall_of_fame_variance_order_by
}

"""
input type for inserting array relation for remote table "hall_of_fame"
"""
input hall_of_fame_arr_rel_insert_input {
  data: [hall_of_fame_insert_input!]!
}

"""aggregate avg on columns"""
type hall_of_fame_avg_fields {
  ballots: Float
  needed: Float
  votes: Float
  yearid: Float
}

"""
order by avg() on columns of table "hall_of_fame"
"""
input hall_of_fame_avg_order_by {
  ballots: order_by
  needed: order_by
  votes: order_by
  yearid: order_by
}

"""
Boolean expression to filter rows from the table "hall_of_fame". All fields are combined with a logical 'AND'.
"""
input hall_of_fame_bool_exp {
  _and: [hall_of_fame_bool_exp]
  _not: hall_of_fame_bool_exp
  _or: [hall_of_fame_bool_exp]
  ballots: numeric_comparison_exp
  category: String_comparison_exp
  inducted: String_comparison_exp
  needed: numeric_comparison_exp
  needed_note: String_comparison_exp
  player_id: String_comparison_exp
  votedby: String_comparison_exp
  votes: numeric_comparison_exp
  yearid: bigint_comparison_exp
}

"""
input type for incrementing integer column in table "hall_of_fame"
"""
input hall_of_fame_inc_input {
  ballots: numeric
  needed: numeric
  votes: numeric
  yearid: bigint
}

"""
input type for inserting data into table "hall_of_fame"
"""
input hall_of_fame_insert_input {
  ballots: numeric
  category: String
  inducted: String
  needed: numeric
  needed_note: String
  player_id: String
  votedby: String
  votes: numeric
  yearid: bigint
}

"""aggregate max on columns"""
type hall_of_fame_max_fields {
  ballots: numeric
  category: String
  inducted: String
  needed: numeric
  needed_note: String
  player_id: String
  votedby: String
  votes: numeric
  yearid: bigint
}

"""
order by max() on columns of table "hall_of_fame"
"""
input hall_of_fame_max_order_by {
  ballots: order_by
  category: order_by
  inducted: order_by
  needed: order_by
  needed_note: order_by
  player_id: order_by
  votedby: order_by
  votes: order_by
  yearid: order_by
}

"""aggregate min on columns"""
type hall_of_fame_min_fields {
  ballots: numeric
  category: String
  inducted: String
  needed: numeric
  needed_note: String
  player_id: String
  votedby: String
  votes: numeric
  yearid: bigint
}

"""
order by min() on columns of table "hall_of_fame"
"""
input hall_of_fame_min_order_by {
  ballots: order_by
  category: order_by
  inducted: order_by
  needed: order_by
  needed_note: order_by
  player_id: order_by
  votedby: order_by
  votes: order_by
  yearid: order_by
}

"""
response of any mutation on the table "hall_of_fame"
"""
type hall_of_fame_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [hall_of_fame!]!
}

"""
input type for inserting object relation for remote table "hall_of_fame"
"""
input hall_of_fame_obj_rel_insert_input {
  data: hall_of_fame_insert_input!
}

"""
ordering options when selecting data from "hall_of_fame"
"""
input hall_of_fame_order_by {
  ballots: order_by
  category: order_by
  inducted: order_by
  needed: order_by
  needed_note: order_by
  player_id: order_by
  votedby: order_by
  votes: order_by
  yearid: order_by
}

"""
select columns of table "hall_of_fame"
"""
enum hall_of_fame_select_column {
  """column name"""
  ballots

  """column name"""
  category

  """column name"""
  inducted

  """column name"""
  needed

  """column name"""
  needed_note

  """column name"""
  player_id

  """column name"""
  votedby

  """column name"""
  votes

  """column name"""
  yearid
}

"""
input type for updating data in table "hall_of_fame"
"""
input hall_of_fame_set_input {
  ballots: numeric
  category: String
  inducted: String
  needed: numeric
  needed_note: String
  player_id: String
  votedby: String
  votes: numeric
  yearid: bigint
}

"""aggregate stddev on columns"""
type hall_of_fame_stddev_fields {
  ballots: Float
  needed: Float
  votes: Float
  yearid: Float
}

"""
order by stddev() on columns of table "hall_of_fame"
"""
input hall_of_fame_stddev_order_by {
  ballots: order_by
  needed: order_by
  votes: order_by
  yearid: order_by
}

"""aggregate stddev_pop on columns"""
type hall_of_fame_stddev_pop_fields {
  ballots: Float
  needed: Float
  votes: Float
  yearid: Float
}

"""
order by stddev_pop() on columns of table "hall_of_fame"
"""
input hall_of_fame_stddev_pop_order_by {
  ballots: order_by
  needed: order_by
  votes: order_by
  yearid: order_by
}

"""aggregate stddev_samp on columns"""
type hall_of_fame_stddev_samp_fields {
  ballots: Float
  needed: Float
  votes: Float
  yearid: Float
}

"""
order by stddev_samp() on columns of table "hall_of_fame"
"""
input hall_of_fame_stddev_samp_order_by {
  ballots: order_by
  needed: order_by
  votes: order_by
  yearid: order_by
}

"""aggregate sum on columns"""
type hall_of_fame_sum_fields {
  ballots: numeric
  needed: numeric
  votes: numeric
  yearid: bigint
}

"""
order by sum() on columns of table "hall_of_fame"
"""
input hall_of_fame_sum_order_by {
  ballots: order_by
  needed: order_by
  votes: order_by
  yearid: order_by
}

"""aggregate var_pop on columns"""
type hall_of_fame_var_pop_fields {
  ballots: Float
  needed: Float
  votes: Float
  yearid: Float
}

"""
order by var_pop() on columns of table "hall_of_fame"
"""
input hall_of_fame_var_pop_order_by {
  ballots: order_by
  needed: order_by
  votes: order_by
  yearid: order_by
}

"""aggregate var_samp on columns"""
type hall_of_fame_var_samp_fields {
  ballots: Float
  needed: Float
  votes: Float
  yearid: Float
}

"""
order by var_samp() on columns of table "hall_of_fame"
"""
input hall_of_fame_var_samp_order_by {
  ballots: order_by
  needed: order_by
  votes: order_by
  yearid: order_by
}

"""aggregate variance on columns"""
type hall_of_fame_variance_fields {
  ballots: Float
  needed: Float
  votes: Float
  yearid: Float
}

"""
order by variance() on columns of table "hall_of_fame"
"""
input hall_of_fame_variance_order_by {
  ballots: order_by
  needed: order_by
  votes: order_by
  yearid: order_by
}

"""
columns and relationships of "home_game"
"""
type home_game {
  attendance: bigint
  games: bigint
  league_id: String
  openings: bigint

  """An object relationship"""
  park: park
  park_id: String
  span_first: String
  span_last: String

  """An object relationship"""
  team: team
  team_id: String
  year: bigint
}

"""
aggregated selection of "home_game"
"""
type home_game_aggregate {
  aggregate: home_game_aggregate_fields
  nodes: [home_game!]!
}

"""
aggregate fields of "home_game"
"""
type home_game_aggregate_fields {
  avg: home_game_avg_fields
  count(columns: [home_game_select_column!], distinct: Boolean): Int
  max: home_game_max_fields
  min: home_game_min_fields
  stddev: home_game_stddev_fields
  stddev_pop: home_game_stddev_pop_fields
  stddev_samp: home_game_stddev_samp_fields
  sum: home_game_sum_fields
  var_pop: home_game_var_pop_fields
  var_samp: home_game_var_samp_fields
  variance: home_game_variance_fields
}

"""
order by aggregate values of table "home_game"
"""
input home_game_aggregate_order_by {
  avg: home_game_avg_order_by
  count: order_by
  max: home_game_max_order_by
  min: home_game_min_order_by
  stddev: home_game_stddev_order_by
  stddev_pop: home_game_stddev_pop_order_by
  stddev_samp: home_game_stddev_samp_order_by
  sum: home_game_sum_order_by
  var_pop: home_game_var_pop_order_by
  var_samp: home_game_var_samp_order_by
  variance: home_game_variance_order_by
}

"""
input type for inserting array relation for remote table "home_game"
"""
input home_game_arr_rel_insert_input {
  data: [home_game_insert_input!]!
}

"""aggregate avg on columns"""
type home_game_avg_fields {
  attendance: Float
  games: Float
  openings: Float
  year: Float
}

"""
order by avg() on columns of table "home_game"
"""
input home_game_avg_order_by {
  attendance: order_by
  games: order_by
  openings: order_by
  year: order_by
}

"""
Boolean expression to filter rows from the table "home_game". All fields are combined with a logical 'AND'.
"""
input home_game_bool_exp {
  _and: [home_game_bool_exp]
  _not: home_game_bool_exp
  _or: [home_game_bool_exp]
  attendance: bigint_comparison_exp
  games: bigint_comparison_exp
  league_id: String_comparison_exp
  openings: bigint_comparison_exp
  park: park_bool_exp
  park_id: String_comparison_exp
  span_first: String_comparison_exp
  span_last: String_comparison_exp
  team: team_bool_exp
  team_id: String_comparison_exp
  year: bigint_comparison_exp
}

"""
input type for incrementing integer column in table "home_game"
"""
input home_game_inc_input {
  attendance: bigint
  games: bigint
  openings: bigint
  year: bigint
}

"""
input type for inserting data into table "home_game"
"""
input home_game_insert_input {
  attendance: bigint
  games: bigint
  league_id: String
  openings: bigint
  park: park_obj_rel_insert_input
  park_id: String
  span_first: String
  span_last: String
  team: team_obj_rel_insert_input
  team_id: String
  year: bigint
}

"""aggregate max on columns"""
type home_game_max_fields {
  attendance: bigint
  games: bigint
  league_id: String
  openings: bigint
  park_id: String
  span_first: String
  span_last: String
  team_id: String
  year: bigint
}

"""
order by max() on columns of table "home_game"
"""
input home_game_max_order_by {
  attendance: order_by
  games: order_by
  league_id: order_by
  openings: order_by
  park_id: order_by
  span_first: order_by
  span_last: order_by
  team_id: order_by
  year: order_by
}

"""aggregate min on columns"""
type home_game_min_fields {
  attendance: bigint
  games: bigint
  league_id: String
  openings: bigint
  park_id: String
  span_first: String
  span_last: String
  team_id: String
  year: bigint
}

"""
order by min() on columns of table "home_game"
"""
input home_game_min_order_by {
  attendance: order_by
  games: order_by
  league_id: order_by
  openings: order_by
  park_id: order_by
  span_first: order_by
  span_last: order_by
  team_id: order_by
  year: order_by
}

"""
response of any mutation on the table "home_game"
"""
type home_game_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [home_game!]!
}

"""
input type for inserting object relation for remote table "home_game"
"""
input home_game_obj_rel_insert_input {
  data: home_game_insert_input!
}

"""
ordering options when selecting data from "home_game"
"""
input home_game_order_by {
  attendance: order_by
  games: order_by
  league_id: order_by
  openings: order_by
  park: park_order_by
  park_id: order_by
  span_first: order_by
  span_last: order_by
  team: team_order_by
  team_id: order_by
  year: order_by
}

"""
select columns of table "home_game"
"""
enum home_game_select_column {
  """column name"""
  attendance

  """column name"""
  games

  """column name"""
  league_id

  """column name"""
  openings

  """column name"""
  park_id

  """column name"""
  span_first

  """column name"""
  span_last

  """column name"""
  team_id

  """column name"""
  year
}

"""
input type for updating data in table "home_game"
"""
input home_game_set_input {
  attendance: bigint
  games: bigint
  league_id: String
  openings: bigint
  park_id: String
  span_first: String
  span_last: String
  team_id: String
  year: bigint
}

"""aggregate stddev on columns"""
type home_game_stddev_fields {
  attendance: Float
  games: Float
  openings: Float
  year: Float
}

"""
order by stddev() on columns of table "home_game"
"""
input home_game_stddev_order_by {
  attendance: order_by
  games: order_by
  openings: order_by
  year: order_by
}

"""aggregate stddev_pop on columns"""
type home_game_stddev_pop_fields {
  attendance: Float
  games: Float
  openings: Float
  year: Float
}

"""
order by stddev_pop() on columns of table "home_game"
"""
input home_game_stddev_pop_order_by {
  attendance: order_by
  games: order_by
  openings: order_by
  year: order_by
}

"""aggregate stddev_samp on columns"""
type home_game_stddev_samp_fields {
  attendance: Float
  games: Float
  openings: Float
  year: Float
}

"""
order by stddev_samp() on columns of table "home_game"
"""
input home_game_stddev_samp_order_by {
  attendance: order_by
  games: order_by
  openings: order_by
  year: order_by
}

"""aggregate sum on columns"""
type home_game_sum_fields {
  attendance: bigint
  games: bigint
  openings: bigint
  year: bigint
}

"""
order by sum() on columns of table "home_game"
"""
input home_game_sum_order_by {
  attendance: order_by
  games: order_by
  openings: order_by
  year: order_by
}

"""aggregate var_pop on columns"""
type home_game_var_pop_fields {
  attendance: Float
  games: Float
  openings: Float
  year: Float
}

"""
order by var_pop() on columns of table "home_game"
"""
input home_game_var_pop_order_by {
  attendance: order_by
  games: order_by
  openings: order_by
  year: order_by
}

"""aggregate var_samp on columns"""
type home_game_var_samp_fields {
  attendance: Float
  games: Float
  openings: Float
  year: Float
}

"""
order by var_samp() on columns of table "home_game"
"""
input home_game_var_samp_order_by {
  attendance: order_by
  games: order_by
  openings: order_by
  year: order_by
}

"""aggregate variance on columns"""
type home_game_variance_fields {
  attendance: Float
  games: Float
  openings: Float
  year: Float
}

"""
order by variance() on columns of table "home_game"
"""
input home_game_variance_order_by {
  attendance: order_by
  games: order_by
  openings: order_by
  year: order_by
}

"""
columns and relationships of "manager"
"""
type manager {
  g: bigint
  inseason: bigint
  l: bigint
  league_id: String
  player_id: String
  plyr_mgr: String
  rank: numeric
  team_id: String
  w: bigint
  year: bigint
}

"""
aggregated selection of "manager"
"""
type manager_aggregate {
  aggregate: manager_aggregate_fields
  nodes: [manager!]!
}

"""
aggregate fields of "manager"
"""
type manager_aggregate_fields {
  avg: manager_avg_fields
  count(columns: [manager_select_column!], distinct: Boolean): Int
  max: manager_max_fields
  min: manager_min_fields
  stddev: manager_stddev_fields
  stddev_pop: manager_stddev_pop_fields
  stddev_samp: manager_stddev_samp_fields
  sum: manager_sum_fields
  var_pop: manager_var_pop_fields
  var_samp: manager_var_samp_fields
  variance: manager_variance_fields
}

"""
order by aggregate values of table "manager"
"""
input manager_aggregate_order_by {
  avg: manager_avg_order_by
  count: order_by
  max: manager_max_order_by
  min: manager_min_order_by
  stddev: manager_stddev_order_by
  stddev_pop: manager_stddev_pop_order_by
  stddev_samp: manager_stddev_samp_order_by
  sum: manager_sum_order_by
  var_pop: manager_var_pop_order_by
  var_samp: manager_var_samp_order_by
  variance: manager_variance_order_by
}

"""
input type for inserting array relation for remote table "manager"
"""
input manager_arr_rel_insert_input {
  data: [manager_insert_input!]!
}

"""aggregate avg on columns"""
type manager_avg_fields {
  g: Float
  inseason: Float
  l: Float
  rank: Float
  w: Float
  year: Float
}

"""
order by avg() on columns of table "manager"
"""
input manager_avg_order_by {
  g: order_by
  inseason: order_by
  l: order_by
  rank: order_by
  w: order_by
  year: order_by
}

"""
columns and relationships of "manager_award"
"""
type manager_award {
  award_id: String
  league_id: String
  notes: numeric

  """An object relationship"""
  player: player
  player_id: String
  tie: String
  year: bigint
}

"""
aggregated selection of "manager_award"
"""
type manager_award_aggregate {
  aggregate: manager_award_aggregate_fields
  nodes: [manager_award!]!
}

"""
aggregate fields of "manager_award"
"""
type manager_award_aggregate_fields {
  avg: manager_award_avg_fields
  count(columns: [manager_award_select_column!], distinct: Boolean): Int
  max: manager_award_max_fields
  min: manager_award_min_fields
  stddev: manager_award_stddev_fields
  stddev_pop: manager_award_stddev_pop_fields
  stddev_samp: manager_award_stddev_samp_fields
  sum: manager_award_sum_fields
  var_pop: manager_award_var_pop_fields
  var_samp: manager_award_var_samp_fields
  variance: manager_award_variance_fields
}

"""
order by aggregate values of table "manager_award"
"""
input manager_award_aggregate_order_by {
  avg: manager_award_avg_order_by
  count: order_by
  max: manager_award_max_order_by
  min: manager_award_min_order_by
  stddev: manager_award_stddev_order_by
  stddev_pop: manager_award_stddev_pop_order_by
  stddev_samp: manager_award_stddev_samp_order_by
  sum: manager_award_sum_order_by
  var_pop: manager_award_var_pop_order_by
  var_samp: manager_award_var_samp_order_by
  variance: manager_award_variance_order_by
}

"""
input type for inserting array relation for remote table "manager_award"
"""
input manager_award_arr_rel_insert_input {
  data: [manager_award_insert_input!]!
}

"""aggregate avg on columns"""
type manager_award_avg_fields {
  notes: Float
  year: Float
}

"""
order by avg() on columns of table "manager_award"
"""
input manager_award_avg_order_by {
  notes: order_by
  year: order_by
}

"""
Boolean expression to filter rows from the table "manager_award". All fields are combined with a logical 'AND'.
"""
input manager_award_bool_exp {
  _and: [manager_award_bool_exp]
  _not: manager_award_bool_exp
  _or: [manager_award_bool_exp]
  award_id: String_comparison_exp
  league_id: String_comparison_exp
  notes: numeric_comparison_exp
  player: player_bool_exp
  player_id: String_comparison_exp
  tie: String_comparison_exp
  year: bigint_comparison_exp
}

"""
input type for incrementing integer column in table "manager_award"
"""
input manager_award_inc_input {
  notes: numeric
  year: bigint
}

"""
input type for inserting data into table "manager_award"
"""
input manager_award_insert_input {
  award_id: String
  league_id: String
  notes: numeric
  player: player_obj_rel_insert_input
  player_id: String
  tie: String
  year: bigint
}

"""aggregate max on columns"""
type manager_award_max_fields {
  award_id: String
  league_id: String
  notes: numeric
  player_id: String
  tie: String
  year: bigint
}

"""
order by max() on columns of table "manager_award"
"""
input manager_award_max_order_by {
  award_id: order_by
  league_id: order_by
  notes: order_by
  player_id: order_by
  tie: order_by
  year: order_by
}

"""aggregate min on columns"""
type manager_award_min_fields {
  award_id: String
  league_id: String
  notes: numeric
  player_id: String
  tie: String
  year: bigint
}

"""
order by min() on columns of table "manager_award"
"""
input manager_award_min_order_by {
  award_id: order_by
  league_id: order_by
  notes: order_by
  player_id: order_by
  tie: order_by
  year: order_by
}

"""
response of any mutation on the table "manager_award"
"""
type manager_award_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [manager_award!]!
}

"""
input type for inserting object relation for remote table "manager_award"
"""
input manager_award_obj_rel_insert_input {
  data: manager_award_insert_input!
}

"""
ordering options when selecting data from "manager_award"
"""
input manager_award_order_by {
  award_id: order_by
  league_id: order_by
  notes: order_by
  player: player_order_by
  player_id: order_by
  tie: order_by
  year: order_by
}

"""
select columns of table "manager_award"
"""
enum manager_award_select_column {
  """column name"""
  award_id

  """column name"""
  league_id

  """column name"""
  notes

  """column name"""
  player_id

  """column name"""
  tie

  """column name"""
  year
}

"""
input type for updating data in table "manager_award"
"""
input manager_award_set_input {
  award_id: String
  league_id: String
  notes: numeric
  player_id: String
  tie: String
  year: bigint
}

"""aggregate stddev on columns"""
type manager_award_stddev_fields {
  notes: Float
  year: Float
}

"""
order by stddev() on columns of table "manager_award"
"""
input manager_award_stddev_order_by {
  notes: order_by
  year: order_by
}

"""aggregate stddev_pop on columns"""
type manager_award_stddev_pop_fields {
  notes: Float
  year: Float
}

"""
order by stddev_pop() on columns of table "manager_award"
"""
input manager_award_stddev_pop_order_by {
  notes: order_by
  year: order_by
}

"""aggregate stddev_samp on columns"""
type manager_award_stddev_samp_fields {
  notes: Float
  year: Float
}

"""
order by stddev_samp() on columns of table "manager_award"
"""
input manager_award_stddev_samp_order_by {
  notes: order_by
  year: order_by
}

"""aggregate sum on columns"""
type manager_award_sum_fields {
  notes: numeric
  year: bigint
}

"""
order by sum() on columns of table "manager_award"
"""
input manager_award_sum_order_by {
  notes: order_by
  year: order_by
}

"""aggregate var_pop on columns"""
type manager_award_var_pop_fields {
  notes: Float
  year: Float
}

"""
order by var_pop() on columns of table "manager_award"
"""
input manager_award_var_pop_order_by {
  notes: order_by
  year: order_by
}

"""aggregate var_samp on columns"""
type manager_award_var_samp_fields {
  notes: Float
  year: Float
}

"""
order by var_samp() on columns of table "manager_award"
"""
input manager_award_var_samp_order_by {
  notes: order_by
  year: order_by
}

"""aggregate variance on columns"""
type manager_award_variance_fields {
  notes: Float
  year: Float
}

"""
order by variance() on columns of table "manager_award"
"""
input manager_award_variance_order_by {
  notes: order_by
  year: order_by
}

"""
columns and relationships of "manager_award_vote"
"""
type manager_award_vote {
  award_id: String
  league_id: String
  player_id: String
  points_max: bigint
  points_won: bigint
  votes_first: bigint
  year: bigint
}

"""
aggregated selection of "manager_award_vote"
"""
type manager_award_vote_aggregate {
  aggregate: manager_award_vote_aggregate_fields
  nodes: [manager_award_vote!]!
}

"""
aggregate fields of "manager_award_vote"
"""
type manager_award_vote_aggregate_fields {
  avg: manager_award_vote_avg_fields
  count(columns: [manager_award_vote_select_column!], distinct: Boolean): Int
  max: manager_award_vote_max_fields
  min: manager_award_vote_min_fields
  stddev: manager_award_vote_stddev_fields
  stddev_pop: manager_award_vote_stddev_pop_fields
  stddev_samp: manager_award_vote_stddev_samp_fields
  sum: manager_award_vote_sum_fields
  var_pop: manager_award_vote_var_pop_fields
  var_samp: manager_award_vote_var_samp_fields
  variance: manager_award_vote_variance_fields
}

"""
order by aggregate values of table "manager_award_vote"
"""
input manager_award_vote_aggregate_order_by {
  avg: manager_award_vote_avg_order_by
  count: order_by
  max: manager_award_vote_max_order_by
  min: manager_award_vote_min_order_by
  stddev: manager_award_vote_stddev_order_by
  stddev_pop: manager_award_vote_stddev_pop_order_by
  stddev_samp: manager_award_vote_stddev_samp_order_by
  sum: manager_award_vote_sum_order_by
  var_pop: manager_award_vote_var_pop_order_by
  var_samp: manager_award_vote_var_samp_order_by
  variance: manager_award_vote_variance_order_by
}

"""
input type for inserting array relation for remote table "manager_award_vote"
"""
input manager_award_vote_arr_rel_insert_input {
  data: [manager_award_vote_insert_input!]!
}

"""aggregate avg on columns"""
type manager_award_vote_avg_fields {
  points_max: Float
  points_won: Float
  votes_first: Float
  year: Float
}

"""
order by avg() on columns of table "manager_award_vote"
"""
input manager_award_vote_avg_order_by {
  points_max: order_by
  points_won: order_by
  votes_first: order_by
  year: order_by
}

"""
Boolean expression to filter rows from the table "manager_award_vote". All fields are combined with a logical 'AND'.
"""
input manager_award_vote_bool_exp {
  _and: [manager_award_vote_bool_exp]
  _not: manager_award_vote_bool_exp
  _or: [manager_award_vote_bool_exp]
  award_id: String_comparison_exp
  league_id: String_comparison_exp
  player_id: String_comparison_exp
  points_max: bigint_comparison_exp
  points_won: bigint_comparison_exp
  votes_first: bigint_comparison_exp
  year: bigint_comparison_exp
}

"""
input type for incrementing integer column in table "manager_award_vote"
"""
input manager_award_vote_inc_input {
  points_max: bigint
  points_won: bigint
  votes_first: bigint
  year: bigint
}

"""
input type for inserting data into table "manager_award_vote"
"""
input manager_award_vote_insert_input {
  award_id: String
  league_id: String
  player_id: String
  points_max: bigint
  points_won: bigint
  votes_first: bigint
  year: bigint
}

"""aggregate max on columns"""
type manager_award_vote_max_fields {
  award_id: String
  league_id: String
  player_id: String
  points_max: bigint
  points_won: bigint
  votes_first: bigint
  year: bigint
}

"""
order by max() on columns of table "manager_award_vote"
"""
input manager_award_vote_max_order_by {
  award_id: order_by
  league_id: order_by
  player_id: order_by
  points_max: order_by
  points_won: order_by
  votes_first: order_by
  year: order_by
}

"""aggregate min on columns"""
type manager_award_vote_min_fields {
  award_id: String
  league_id: String
  player_id: String
  points_max: bigint
  points_won: bigint
  votes_first: bigint
  year: bigint
}

"""
order by min() on columns of table "manager_award_vote"
"""
input manager_award_vote_min_order_by {
  award_id: order_by
  league_id: order_by
  player_id: order_by
  points_max: order_by
  points_won: order_by
  votes_first: order_by
  year: order_by
}

"""
response of any mutation on the table "manager_award_vote"
"""
type manager_award_vote_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [manager_award_vote!]!
}

"""
input type for inserting object relation for remote table "manager_award_vote"
"""
input manager_award_vote_obj_rel_insert_input {
  data: manager_award_vote_insert_input!
}

"""
ordering options when selecting data from "manager_award_vote"
"""
input manager_award_vote_order_by {
  award_id: order_by
  league_id: order_by
  player_id: order_by
  points_max: order_by
  points_won: order_by
  votes_first: order_by
  year: order_by
}

"""
select columns of table "manager_award_vote"
"""
enum manager_award_vote_select_column {
  """column name"""
  award_id

  """column name"""
  league_id

  """column name"""
  player_id

  """column name"""
  points_max

  """column name"""
  points_won

  """column name"""
  votes_first

  """column name"""
  year
}

"""
input type for updating data in table "manager_award_vote"
"""
input manager_award_vote_set_input {
  award_id: String
  league_id: String
  player_id: String
  points_max: bigint
  points_won: bigint
  votes_first: bigint
  year: bigint
}

"""aggregate stddev on columns"""
type manager_award_vote_stddev_fields {
  points_max: Float
  points_won: Float
  votes_first: Float
  year: Float
}

"""
order by stddev() on columns of table "manager_award_vote"
"""
input manager_award_vote_stddev_order_by {
  points_max: order_by
  points_won: order_by
  votes_first: order_by
  year: order_by
}

"""aggregate stddev_pop on columns"""
type manager_award_vote_stddev_pop_fields {
  points_max: Float
  points_won: Float
  votes_first: Float
  year: Float
}

"""
order by stddev_pop() on columns of table "manager_award_vote"
"""
input manager_award_vote_stddev_pop_order_by {
  points_max: order_by
  points_won: order_by
  votes_first: order_by
  year: order_by
}

"""aggregate stddev_samp on columns"""
type manager_award_vote_stddev_samp_fields {
  points_max: Float
  points_won: Float
  votes_first: Float
  year: Float
}

"""
order by stddev_samp() on columns of table "manager_award_vote"
"""
input manager_award_vote_stddev_samp_order_by {
  points_max: order_by
  points_won: order_by
  votes_first: order_by
  year: order_by
}

"""aggregate sum on columns"""
type manager_award_vote_sum_fields {
  points_max: bigint
  points_won: bigint
  votes_first: bigint
  year: bigint
}

"""
order by sum() on columns of table "manager_award_vote"
"""
input manager_award_vote_sum_order_by {
  points_max: order_by
  points_won: order_by
  votes_first: order_by
  year: order_by
}

"""aggregate var_pop on columns"""
type manager_award_vote_var_pop_fields {
  points_max: Float
  points_won: Float
  votes_first: Float
  year: Float
}

"""
order by var_pop() on columns of table "manager_award_vote"
"""
input manager_award_vote_var_pop_order_by {
  points_max: order_by
  points_won: order_by
  votes_first: order_by
  year: order_by
}

"""aggregate var_samp on columns"""
type manager_award_vote_var_samp_fields {
  points_max: Float
  points_won: Float
  votes_first: Float
  year: Float
}

"""
order by var_samp() on columns of table "manager_award_vote"
"""
input manager_award_vote_var_samp_order_by {
  points_max: order_by
  points_won: order_by
  votes_first: order_by
  year: order_by
}

"""aggregate variance on columns"""
type manager_award_vote_variance_fields {
  points_max: Float
  points_won: Float
  votes_first: Float
  year: Float
}

"""
order by variance() on columns of table "manager_award_vote"
"""
input manager_award_vote_variance_order_by {
  points_max: order_by
  points_won: order_by
  votes_first: order_by
  year: order_by
}

"""
Boolean expression to filter rows from the table "manager". All fields are combined with a logical 'AND'.
"""
input manager_bool_exp {
  _and: [manager_bool_exp]
  _not: manager_bool_exp
  _or: [manager_bool_exp]
  g: bigint_comparison_exp
  inseason: bigint_comparison_exp
  l: bigint_comparison_exp
  league_id: String_comparison_exp
  player_id: String_comparison_exp
  plyr_mgr: String_comparison_exp
  rank: numeric_comparison_exp
  team_id: String_comparison_exp
  w: bigint_comparison_exp
  year: bigint_comparison_exp
}

"""
columns and relationships of "manager_half"
"""
type manager_half {
  g: bigint
  half: bigint
  inseason: bigint
  l: bigint
  league_id: String
  player_id: String
  rank: bigint
  team_id: String
  w: bigint
  year: bigint
}

"""
aggregated selection of "manager_half"
"""
type manager_half_aggregate {
  aggregate: manager_half_aggregate_fields
  nodes: [manager_half!]!
}

"""
aggregate fields of "manager_half"
"""
type manager_half_aggregate_fields {
  avg: manager_half_avg_fields
  count(columns: [manager_half_select_column!], distinct: Boolean): Int
  max: manager_half_max_fields
  min: manager_half_min_fields
  stddev: manager_half_stddev_fields
  stddev_pop: manager_half_stddev_pop_fields
  stddev_samp: manager_half_stddev_samp_fields
  sum: manager_half_sum_fields
  var_pop: manager_half_var_pop_fields
  var_samp: manager_half_var_samp_fields
  variance: manager_half_variance_fields
}

"""
order by aggregate values of table "manager_half"
"""
input manager_half_aggregate_order_by {
  avg: manager_half_avg_order_by
  count: order_by
  max: manager_half_max_order_by
  min: manager_half_min_order_by
  stddev: manager_half_stddev_order_by
  stddev_pop: manager_half_stddev_pop_order_by
  stddev_samp: manager_half_stddev_samp_order_by
  sum: manager_half_sum_order_by
  var_pop: manager_half_var_pop_order_by
  var_samp: manager_half_var_samp_order_by
  variance: manager_half_variance_order_by
}

"""
input type for inserting array relation for remote table "manager_half"
"""
input manager_half_arr_rel_insert_input {
  data: [manager_half_insert_input!]!
}

"""aggregate avg on columns"""
type manager_half_avg_fields {
  g: Float
  half: Float
  inseason: Float
  l: Float
  rank: Float
  w: Float
  year: Float
}

"""
order by avg() on columns of table "manager_half"
"""
input manager_half_avg_order_by {
  g: order_by
  half: order_by
  inseason: order_by
  l: order_by
  rank: order_by
  w: order_by
  year: order_by
}

"""
Boolean expression to filter rows from the table "manager_half". All fields are combined with a logical 'AND'.
"""
input manager_half_bool_exp {
  _and: [manager_half_bool_exp]
  _not: manager_half_bool_exp
  _or: [manager_half_bool_exp]
  g: bigint_comparison_exp
  half: bigint_comparison_exp
  inseason: bigint_comparison_exp
  l: bigint_comparison_exp
  league_id: String_comparison_exp
  player_id: String_comparison_exp
  rank: bigint_comparison_exp
  team_id: String_comparison_exp
  w: bigint_comparison_exp
  year: bigint_comparison_exp
}

"""
input type for incrementing integer column in table "manager_half"
"""
input manager_half_inc_input {
  g: bigint
  half: bigint
  inseason: bigint
  l: bigint
  rank: bigint
  w: bigint
  year: bigint
}

"""
input type for inserting data into table "manager_half"
"""
input manager_half_insert_input {
  g: bigint
  half: bigint
  inseason: bigint
  l: bigint
  league_id: String
  player_id: String
  rank: bigint
  team_id: String
  w: bigint
  year: bigint
}

"""aggregate max on columns"""
type manager_half_max_fields {
  g: bigint
  half: bigint
  inseason: bigint
  l: bigint
  league_id: String
  player_id: String
  rank: bigint
  team_id: String
  w: bigint
  year: bigint
}

"""
order by max() on columns of table "manager_half"
"""
input manager_half_max_order_by {
  g: order_by
  half: order_by
  inseason: order_by
  l: order_by
  league_id: order_by
  player_id: order_by
  rank: order_by
  team_id: order_by
  w: order_by
  year: order_by
}

"""aggregate min on columns"""
type manager_half_min_fields {
  g: bigint
  half: bigint
  inseason: bigint
  l: bigint
  league_id: String
  player_id: String
  rank: bigint
  team_id: String
  w: bigint
  year: bigint
}

"""
order by min() on columns of table "manager_half"
"""
input manager_half_min_order_by {
  g: order_by
  half: order_by
  inseason: order_by
  l: order_by
  league_id: order_by
  player_id: order_by
  rank: order_by
  team_id: order_by
  w: order_by
  year: order_by
}

"""
response of any mutation on the table "manager_half"
"""
type manager_half_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [manager_half!]!
}

"""
input type for inserting object relation for remote table "manager_half"
"""
input manager_half_obj_rel_insert_input {
  data: manager_half_insert_input!
}

"""
ordering options when selecting data from "manager_half"
"""
input manager_half_order_by {
  g: order_by
  half: order_by
  inseason: order_by
  l: order_by
  league_id: order_by
  player_id: order_by
  rank: order_by
  team_id: order_by
  w: order_by
  year: order_by
}

"""
select columns of table "manager_half"
"""
enum manager_half_select_column {
  """column name"""
  g

  """column name"""
  half

  """column name"""
  inseason

  """column name"""
  l

  """column name"""
  league_id

  """column name"""
  player_id

  """column name"""
  rank

  """column name"""
  team_id

  """column name"""
  w

  """column name"""
  year
}

"""
input type for updating data in table "manager_half"
"""
input manager_half_set_input {
  g: bigint
  half: bigint
  inseason: bigint
  l: bigint
  league_id: String
  player_id: String
  rank: bigint
  team_id: String
  w: bigint
  year: bigint
}

"""aggregate stddev on columns"""
type manager_half_stddev_fields {
  g: Float
  half: Float
  inseason: Float
  l: Float
  rank: Float
  w: Float
  year: Float
}

"""
order by stddev() on columns of table "manager_half"
"""
input manager_half_stddev_order_by {
  g: order_by
  half: order_by
  inseason: order_by
  l: order_by
  rank: order_by
  w: order_by
  year: order_by
}

"""aggregate stddev_pop on columns"""
type manager_half_stddev_pop_fields {
  g: Float
  half: Float
  inseason: Float
  l: Float
  rank: Float
  w: Float
  year: Float
}

"""
order by stddev_pop() on columns of table "manager_half"
"""
input manager_half_stddev_pop_order_by {
  g: order_by
  half: order_by
  inseason: order_by
  l: order_by
  rank: order_by
  w: order_by
  year: order_by
}

"""aggregate stddev_samp on columns"""
type manager_half_stddev_samp_fields {
  g: Float
  half: Float
  inseason: Float
  l: Float
  rank: Float
  w: Float
  year: Float
}

"""
order by stddev_samp() on columns of table "manager_half"
"""
input manager_half_stddev_samp_order_by {
  g: order_by
  half: order_by
  inseason: order_by
  l: order_by
  rank: order_by
  w: order_by
  year: order_by
}

"""aggregate sum on columns"""
type manager_half_sum_fields {
  g: bigint
  half: bigint
  inseason: bigint
  l: bigint
  rank: bigint
  w: bigint
  year: bigint
}

"""
order by sum() on columns of table "manager_half"
"""
input manager_half_sum_order_by {
  g: order_by
  half: order_by
  inseason: order_by
  l: order_by
  rank: order_by
  w: order_by
  year: order_by
}

"""aggregate var_pop on columns"""
type manager_half_var_pop_fields {
  g: Float
  half: Float
  inseason: Float
  l: Float
  rank: Float
  w: Float
  year: Float
}

"""
order by var_pop() on columns of table "manager_half"
"""
input manager_half_var_pop_order_by {
  g: order_by
  half: order_by
  inseason: order_by
  l: order_by
  rank: order_by
  w: order_by
  year: order_by
}

"""aggregate var_samp on columns"""
type manager_half_var_samp_fields {
  g: Float
  half: Float
  inseason: Float
  l: Float
  rank: Float
  w: Float
  year: Float
}

"""
order by var_samp() on columns of table "manager_half"
"""
input manager_half_var_samp_order_by {
  g: order_by
  half: order_by
  inseason: order_by
  l: order_by
  rank: order_by
  w: order_by
  year: order_by
}

"""aggregate variance on columns"""
type manager_half_variance_fields {
  g: Float
  half: Float
  inseason: Float
  l: Float
  rank: Float
  w: Float
  year: Float
}

"""
order by variance() on columns of table "manager_half"
"""
input manager_half_variance_order_by {
  g: order_by
  half: order_by
  inseason: order_by
  l: order_by
  rank: order_by
  w: order_by
  year: order_by
}

"""
input type for incrementing integer column in table "manager"
"""
input manager_inc_input {
  g: bigint
  inseason: bigint
  l: bigint
  rank: numeric
  w: bigint
  year: bigint
}

"""
input type for inserting data into table "manager"
"""
input manager_insert_input {
  g: bigint
  inseason: bigint
  l: bigint
  league_id: String
  player_id: String
  plyr_mgr: String
  rank: numeric
  team_id: String
  w: bigint
  year: bigint
}

"""aggregate max on columns"""
type manager_max_fields {
  g: bigint
  inseason: bigint
  l: bigint
  league_id: String
  player_id: String
  plyr_mgr: String
  rank: numeric
  team_id: String
  w: bigint
  year: bigint
}

"""
order by max() on columns of table "manager"
"""
input manager_max_order_by {
  g: order_by
  inseason: order_by
  l: order_by
  league_id: order_by
  player_id: order_by
  plyr_mgr: order_by
  rank: order_by
  team_id: order_by
  w: order_by
  year: order_by
}

"""aggregate min on columns"""
type manager_min_fields {
  g: bigint
  inseason: bigint
  l: bigint
  league_id: String
  player_id: String
  plyr_mgr: String
  rank: numeric
  team_id: String
  w: bigint
  year: bigint
}

"""
order by min() on columns of table "manager"
"""
input manager_min_order_by {
  g: order_by
  inseason: order_by
  l: order_by
  league_id: order_by
  player_id: order_by
  plyr_mgr: order_by
  rank: order_by
  team_id: order_by
  w: order_by
  year: order_by
}

"""
response of any mutation on the table "manager"
"""
type manager_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [manager!]!
}

"""
input type for inserting object relation for remote table "manager"
"""
input manager_obj_rel_insert_input {
  data: manager_insert_input!
}

"""
ordering options when selecting data from "manager"
"""
input manager_order_by {
  g: order_by
  inseason: order_by
  l: order_by
  league_id: order_by
  player_id: order_by
  plyr_mgr: order_by
  rank: order_by
  team_id: order_by
  w: order_by
  year: order_by
}

"""
select columns of table "manager"
"""
enum manager_select_column {
  """column name"""
  g

  """column name"""
  inseason

  """column name"""
  l

  """column name"""
  league_id

  """column name"""
  player_id

  """column name"""
  plyr_mgr

  """column name"""
  rank

  """column name"""
  team_id

  """column name"""
  w

  """column name"""
  year
}

"""
input type for updating data in table "manager"
"""
input manager_set_input {
  g: bigint
  inseason: bigint
  l: bigint
  league_id: String
  player_id: String
  plyr_mgr: String
  rank: numeric
  team_id: String
  w: bigint
  year: bigint
}

"""aggregate stddev on columns"""
type manager_stddev_fields {
  g: Float
  inseason: Float
  l: Float
  rank: Float
  w: Float
  year: Float
}

"""
order by stddev() on columns of table "manager"
"""
input manager_stddev_order_by {
  g: order_by
  inseason: order_by
  l: order_by
  rank: order_by
  w: order_by
  year: order_by
}

"""aggregate stddev_pop on columns"""
type manager_stddev_pop_fields {
  g: Float
  inseason: Float
  l: Float
  rank: Float
  w: Float
  year: Float
}

"""
order by stddev_pop() on columns of table "manager"
"""
input manager_stddev_pop_order_by {
  g: order_by
  inseason: order_by
  l: order_by
  rank: order_by
  w: order_by
  year: order_by
}

"""aggregate stddev_samp on columns"""
type manager_stddev_samp_fields {
  g: Float
  inseason: Float
  l: Float
  rank: Float
  w: Float
  year: Float
}

"""
order by stddev_samp() on columns of table "manager"
"""
input manager_stddev_samp_order_by {
  g: order_by
  inseason: order_by
  l: order_by
  rank: order_by
  w: order_by
  year: order_by
}

"""aggregate sum on columns"""
type manager_sum_fields {
  g: bigint
  inseason: bigint
  l: bigint
  rank: numeric
  w: bigint
  year: bigint
}

"""
order by sum() on columns of table "manager"
"""
input manager_sum_order_by {
  g: order_by
  inseason: order_by
  l: order_by
  rank: order_by
  w: order_by
  year: order_by
}

"""aggregate var_pop on columns"""
type manager_var_pop_fields {
  g: Float
  inseason: Float
  l: Float
  rank: Float
  w: Float
  year: Float
}

"""
order by var_pop() on columns of table "manager"
"""
input manager_var_pop_order_by {
  g: order_by
  inseason: order_by
  l: order_by
  rank: order_by
  w: order_by
  year: order_by
}

"""aggregate var_samp on columns"""
type manager_var_samp_fields {
  g: Float
  inseason: Float
  l: Float
  rank: Float
  w: Float
  year: Float
}

"""
order by var_samp() on columns of table "manager"
"""
input manager_var_samp_order_by {
  g: order_by
  inseason: order_by
  l: order_by
  rank: order_by
  w: order_by
  year: order_by
}

"""aggregate variance on columns"""
type manager_variance_fields {
  g: Float
  inseason: Float
  l: Float
  rank: Float
  w: Float
  year: Float
}

"""
order by variance() on columns of table "manager"
"""
input manager_variance_order_by {
  g: order_by
  inseason: order_by
  l: order_by
  rank: order_by
  w: order_by
  year: order_by
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "all_star"
  """
  delete_all_star(
    """filter the rows which have to be deleted"""
    where: all_star_bool_exp!
  ): all_star_mutation_response

  """
  delete data from the table: "appearances"
  """
  delete_appearances(
    """filter the rows which have to be deleted"""
    where: appearances_bool_exp!
  ): appearances_mutation_response

  """
  delete data from the table: "batting"
  """
  delete_batting(
    """filter the rows which have to be deleted"""
    where: batting_bool_exp!
  ): batting_mutation_response

  """
  delete data from the table: "batting_postseason"
  """
  delete_batting_postseason(
    """filter the rows which have to be deleted"""
    where: batting_postseason_bool_exp!
  ): batting_postseason_mutation_response

  """
  delete data from the table: "college"
  """
  delete_college(
    """filter the rows which have to be deleted"""
    where: college_bool_exp!
  ): college_mutation_response

  """
  delete single row from the table: "college"
  """
  delete_college_by_pk(college_id: String!): college

  """
  delete data from the table: "fielding"
  """
  delete_fielding(
    """filter the rows which have to be deleted"""
    where: fielding_bool_exp!
  ): fielding_mutation_response

  """
  delete data from the table: "fielding_outfield"
  """
  delete_fielding_outfield(
    """filter the rows which have to be deleted"""
    where: fielding_outfield_bool_exp!
  ): fielding_outfield_mutation_response

  """
  delete data from the table: "fielding_postseason"
  """
  delete_fielding_postseason(
    """filter the rows which have to be deleted"""
    where: fielding_postseason_bool_exp!
  ): fielding_postseason_mutation_response

  """
  delete data from the table: "hall_of_fame"
  """
  delete_hall_of_fame(
    """filter the rows which have to be deleted"""
    where: hall_of_fame_bool_exp!
  ): hall_of_fame_mutation_response

  """
  delete data from the table: "home_game"
  """
  delete_home_game(
    """filter the rows which have to be deleted"""
    where: home_game_bool_exp!
  ): home_game_mutation_response

  """
  delete data from the table: "manager"
  """
  delete_manager(
    """filter the rows which have to be deleted"""
    where: manager_bool_exp!
  ): manager_mutation_response

  """
  delete data from the table: "manager_award"
  """
  delete_manager_award(
    """filter the rows which have to be deleted"""
    where: manager_award_bool_exp!
  ): manager_award_mutation_response

  """
  delete data from the table: "manager_award_vote"
  """
  delete_manager_award_vote(
    """filter the rows which have to be deleted"""
    where: manager_award_vote_bool_exp!
  ): manager_award_vote_mutation_response

  """
  delete data from the table: "manager_half"
  """
  delete_manager_half(
    """filter the rows which have to be deleted"""
    where: manager_half_bool_exp!
  ): manager_half_mutation_response

  """
  delete data from the table: "park"
  """
  delete_park(
    """filter the rows which have to be deleted"""
    where: park_bool_exp!
  ): park_mutation_response

  """
  delete data from the table: "pitching"
  """
  delete_pitching(
    """filter the rows which have to be deleted"""
    where: pitching_bool_exp!
  ): pitching_mutation_response

  """
  delete data from the table: "pitching_postseason"
  """
  delete_pitching_postseason(
    """filter the rows which have to be deleted"""
    where: pitching_postseason_bool_exp!
  ): pitching_postseason_mutation_response

  """
  delete data from the table: "player"
  """
  delete_player(
    """filter the rows which have to be deleted"""
    where: player_bool_exp!
  ): player_mutation_response

  """
  delete data from the table: "player_award"
  """
  delete_player_award(
    """filter the rows which have to be deleted"""
    where: player_award_bool_exp!
  ): player_award_mutation_response

  """
  delete data from the table: "player_award_vote"
  """
  delete_player_award_vote(
    """filter the rows which have to be deleted"""
    where: player_award_vote_bool_exp!
  ): player_award_vote_mutation_response

  """
  delete data from the table: "player_college"
  """
  delete_player_college(
    """filter the rows which have to be deleted"""
    where: player_college_bool_exp!
  ): player_college_mutation_response

  """
  delete single row from the table: "player_college"
  """
  delete_player_college_by_pk(college_id: String!, player_id: String!, year: bigint!): player_college

  """
  delete data from the table: "postseason"
  """
  delete_postseason(
    """filter the rows which have to be deleted"""
    where: postseason_bool_exp!
  ): postseason_mutation_response

  """
  delete data from the table: "salary"
  """
  delete_salary(
    """filter the rows which have to be deleted"""
    where: salary_bool_exp!
  ): salary_mutation_response

  """
  delete single row from the table: "salary"
  """
  delete_salary_by_pk(league_id: String!, player_id: String!, team_id: String!, year: bigint!): salary

  """
  delete data from the table: "team"
  """
  delete_team(
    """filter the rows which have to be deleted"""
    where: team_bool_exp!
  ): team_mutation_response

  """
  delete single row from the table: "team"
  """
  delete_team_by_pk(team_id: String!, year: bigint!): team

  """
  delete data from the table: "team_franchise"
  """
  delete_team_franchise(
    """filter the rows which have to be deleted"""
    where: team_franchise_bool_exp!
  ): team_franchise_mutation_response

  """
  delete single row from the table: "team_franchise"
  """
  delete_team_franchise_by_pk(franchise_id: String!): team_franchise

  """
  delete data from the table: "team_half"
  """
  delete_team_half(
    """filter the rows which have to be deleted"""
    where: team_half_bool_exp!
  ): team_half_mutation_response

  """
  insert data into the table: "all_star"
  """
  insert_all_star(
    """the rows to be inserted"""
    objects: [all_star_insert_input!]!
  ): all_star_mutation_response

  """
  insert a single row into the table: "all_star"
  """
  insert_all_star_one(
    """the row to be inserted"""
    object: all_star_insert_input!
  ): all_star

  """
  insert data into the table: "appearances"
  """
  insert_appearances(
    """the rows to be inserted"""
    objects: [appearances_insert_input!]!
  ): appearances_mutation_response

  """
  insert a single row into the table: "appearances"
  """
  insert_appearances_one(
    """the row to be inserted"""
    object: appearances_insert_input!
  ): appearances

  """
  insert data into the table: "batting"
  """
  insert_batting(
    """the rows to be inserted"""
    objects: [batting_insert_input!]!
  ): batting_mutation_response

  """
  insert a single row into the table: "batting"
  """
  insert_batting_one(
    """the row to be inserted"""
    object: batting_insert_input!
  ): batting

  """
  insert data into the table: "batting_postseason"
  """
  insert_batting_postseason(
    """the rows to be inserted"""
    objects: [batting_postseason_insert_input!]!
  ): batting_postseason_mutation_response

  """
  insert a single row into the table: "batting_postseason"
  """
  insert_batting_postseason_one(
    """the row to be inserted"""
    object: batting_postseason_insert_input!
  ): batting_postseason

  """
  insert data into the table: "college"
  """
  insert_college(
    """the rows to be inserted"""
    objects: [college_insert_input!]!

    """on conflict condition"""
    on_conflict: college_on_conflict
  ): college_mutation_response

  """
  insert a single row into the table: "college"
  """
  insert_college_one(
    """the row to be inserted"""
    object: college_insert_input!

    """on conflict condition"""
    on_conflict: college_on_conflict
  ): college

  """
  insert data into the table: "fielding"
  """
  insert_fielding(
    """the rows to be inserted"""
    objects: [fielding_insert_input!]!
  ): fielding_mutation_response

  """
  insert a single row into the table: "fielding"
  """
  insert_fielding_one(
    """the row to be inserted"""
    object: fielding_insert_input!
  ): fielding

  """
  insert data into the table: "fielding_outfield"
  """
  insert_fielding_outfield(
    """the rows to be inserted"""
    objects: [fielding_outfield_insert_input!]!
  ): fielding_outfield_mutation_response

  """
  insert a single row into the table: "fielding_outfield"
  """
  insert_fielding_outfield_one(
    """the row to be inserted"""
    object: fielding_outfield_insert_input!
  ): fielding_outfield

  """
  insert data into the table: "fielding_postseason"
  """
  insert_fielding_postseason(
    """the rows to be inserted"""
    objects: [fielding_postseason_insert_input!]!
  ): fielding_postseason_mutation_response

  """
  insert a single row into the table: "fielding_postseason"
  """
  insert_fielding_postseason_one(
    """the row to be inserted"""
    object: fielding_postseason_insert_input!
  ): fielding_postseason

  """
  insert data into the table: "hall_of_fame"
  """
  insert_hall_of_fame(
    """the rows to be inserted"""
    objects: [hall_of_fame_insert_input!]!
  ): hall_of_fame_mutation_response

  """
  insert a single row into the table: "hall_of_fame"
  """
  insert_hall_of_fame_one(
    """the row to be inserted"""
    object: hall_of_fame_insert_input!
  ): hall_of_fame

  """
  insert data into the table: "home_game"
  """
  insert_home_game(
    """the rows to be inserted"""
    objects: [home_game_insert_input!]!
  ): home_game_mutation_response

  """
  insert a single row into the table: "home_game"
  """
  insert_home_game_one(
    """the row to be inserted"""
    object: home_game_insert_input!
  ): home_game

  """
  insert data into the table: "manager"
  """
  insert_manager(
    """the rows to be inserted"""
    objects: [manager_insert_input!]!
  ): manager_mutation_response

  """
  insert data into the table: "manager_award"
  """
  insert_manager_award(
    """the rows to be inserted"""
    objects: [manager_award_insert_input!]!
  ): manager_award_mutation_response

  """
  insert a single row into the table: "manager_award"
  """
  insert_manager_award_one(
    """the row to be inserted"""
    object: manager_award_insert_input!
  ): manager_award

  """
  insert data into the table: "manager_award_vote"
  """
  insert_manager_award_vote(
    """the rows to be inserted"""
    objects: [manager_award_vote_insert_input!]!
  ): manager_award_vote_mutation_response

  """
  insert a single row into the table: "manager_award_vote"
  """
  insert_manager_award_vote_one(
    """the row to be inserted"""
    object: manager_award_vote_insert_input!
  ): manager_award_vote

  """
  insert data into the table: "manager_half"
  """
  insert_manager_half(
    """the rows to be inserted"""
    objects: [manager_half_insert_input!]!
  ): manager_half_mutation_response

  """
  insert a single row into the table: "manager_half"
  """
  insert_manager_half_one(
    """the row to be inserted"""
    object: manager_half_insert_input!
  ): manager_half

  """
  insert a single row into the table: "manager"
  """
  insert_manager_one(
    """the row to be inserted"""
    object: manager_insert_input!
  ): manager

  """
  insert data into the table: "park"
  """
  insert_park(
    """the rows to be inserted"""
    objects: [park_insert_input!]!

    """on conflict condition"""
    on_conflict: park_on_conflict
  ): park_mutation_response

  """
  insert a single row into the table: "park"
  """
  insert_park_one(
    """the row to be inserted"""
    object: park_insert_input!

    """on conflict condition"""
    on_conflict: park_on_conflict
  ): park

  """
  insert data into the table: "pitching"
  """
  insert_pitching(
    """the rows to be inserted"""
    objects: [pitching_insert_input!]!
  ): pitching_mutation_response

  """
  insert a single row into the table: "pitching"
  """
  insert_pitching_one(
    """the row to be inserted"""
    object: pitching_insert_input!
  ): pitching

  """
  insert data into the table: "pitching_postseason"
  """
  insert_pitching_postseason(
    """the rows to be inserted"""
    objects: [pitching_postseason_insert_input!]!
  ): pitching_postseason_mutation_response

  """
  insert a single row into the table: "pitching_postseason"
  """
  insert_pitching_postseason_one(
    """the row to be inserted"""
    object: pitching_postseason_insert_input!
  ): pitching_postseason

  """
  insert data into the table: "player"
  """
  insert_player(
    """the rows to be inserted"""
    objects: [player_insert_input!]!

    """on conflict condition"""
    on_conflict: player_on_conflict
  ): player_mutation_response

  """
  insert data into the table: "player_award"
  """
  insert_player_award(
    """the rows to be inserted"""
    objects: [player_award_insert_input!]!
  ): player_award_mutation_response

  """
  insert a single row into the table: "player_award"
  """
  insert_player_award_one(
    """the row to be inserted"""
    object: player_award_insert_input!
  ): player_award

  """
  insert data into the table: "player_award_vote"
  """
  insert_player_award_vote(
    """the rows to be inserted"""
    objects: [player_award_vote_insert_input!]!
  ): player_award_vote_mutation_response

  """
  insert a single row into the table: "player_award_vote"
  """
  insert_player_award_vote_one(
    """the row to be inserted"""
    object: player_award_vote_insert_input!
  ): player_award_vote

  """
  insert data into the table: "player_college"
  """
  insert_player_college(
    """the rows to be inserted"""
    objects: [player_college_insert_input!]!

    """on conflict condition"""
    on_conflict: player_college_on_conflict
  ): player_college_mutation_response

  """
  insert a single row into the table: "player_college"
  """
  insert_player_college_one(
    """the row to be inserted"""
    object: player_college_insert_input!

    """on conflict condition"""
    on_conflict: player_college_on_conflict
  ): player_college

  """
  insert a single row into the table: "player"
  """
  insert_player_one(
    """the row to be inserted"""
    object: player_insert_input!

    """on conflict condition"""
    on_conflict: player_on_conflict
  ): player

  """
  insert data into the table: "postseason"
  """
  insert_postseason(
    """the rows to be inserted"""
    objects: [postseason_insert_input!]!
  ): postseason_mutation_response

  """
  insert a single row into the table: "postseason"
  """
  insert_postseason_one(
    """the row to be inserted"""
    object: postseason_insert_input!
  ): postseason

  """
  insert data into the table: "salary"
  """
  insert_salary(
    """the rows to be inserted"""
    objects: [salary_insert_input!]!

    """on conflict condition"""
    on_conflict: salary_on_conflict
  ): salary_mutation_response

  """
  insert a single row into the table: "salary"
  """
  insert_salary_one(
    """the row to be inserted"""
    object: salary_insert_input!

    """on conflict condition"""
    on_conflict: salary_on_conflict
  ): salary

  """
  insert data into the table: "team"
  """
  insert_team(
    """the rows to be inserted"""
    objects: [team_insert_input!]!

    """on conflict condition"""
    on_conflict: team_on_conflict
  ): team_mutation_response

  """
  insert data into the table: "team_franchise"
  """
  insert_team_franchise(
    """the rows to be inserted"""
    objects: [team_franchise_insert_input!]!

    """on conflict condition"""
    on_conflict: team_franchise_on_conflict
  ): team_franchise_mutation_response

  """
  insert a single row into the table: "team_franchise"
  """
  insert_team_franchise_one(
    """the row to be inserted"""
    object: team_franchise_insert_input!

    """on conflict condition"""
    on_conflict: team_franchise_on_conflict
  ): team_franchise

  """
  insert data into the table: "team_half"
  """
  insert_team_half(
    """the rows to be inserted"""
    objects: [team_half_insert_input!]!
  ): team_half_mutation_response

  """
  insert a single row into the table: "team_half"
  """
  insert_team_half_one(
    """the row to be inserted"""
    object: team_half_insert_input!
  ): team_half

  """
  insert a single row into the table: "team"
  """
  insert_team_one(
    """the row to be inserted"""
    object: team_insert_input!

    """on conflict condition"""
    on_conflict: team_on_conflict
  ): team

  """
  update data of the table: "all_star"
  """
  update_all_star(
    """increments the integer columns with given value of the filtered values"""
    _inc: all_star_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: all_star_set_input

    """filter the rows which have to be updated"""
    where: all_star_bool_exp!
  ): all_star_mutation_response

  """
  update data of the table: "appearances"
  """
  update_appearances(
    """increments the integer columns with given value of the filtered values"""
    _inc: appearances_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: appearances_set_input

    """filter the rows which have to be updated"""
    where: appearances_bool_exp!
  ): appearances_mutation_response

  """
  update data of the table: "batting"
  """
  update_batting(
    """increments the integer columns with given value of the filtered values"""
    _inc: batting_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: batting_set_input

    """filter the rows which have to be updated"""
    where: batting_bool_exp!
  ): batting_mutation_response

  """
  update data of the table: "batting_postseason"
  """
  update_batting_postseason(
    """increments the integer columns with given value of the filtered values"""
    _inc: batting_postseason_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: batting_postseason_set_input

    """filter the rows which have to be updated"""
    where: batting_postseason_bool_exp!
  ): batting_postseason_mutation_response

  """
  update data of the table: "college"
  """
  update_college(
    """sets the columns of the filtered rows to the given values"""
    _set: college_set_input

    """filter the rows which have to be updated"""
    where: college_bool_exp!
  ): college_mutation_response

  """
  update single row of the table: "college"
  """
  update_college_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: college_set_input
    pk_columns: college_pk_columns_input!
  ): college

  """
  update data of the table: "fielding"
  """
  update_fielding(
    """increments the integer columns with given value of the filtered values"""
    _inc: fielding_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: fielding_set_input

    """filter the rows which have to be updated"""
    where: fielding_bool_exp!
  ): fielding_mutation_response

  """
  update data of the table: "fielding_outfield"
  """
  update_fielding_outfield(
    """increments the integer columns with given value of the filtered values"""
    _inc: fielding_outfield_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: fielding_outfield_set_input

    """filter the rows which have to be updated"""
    where: fielding_outfield_bool_exp!
  ): fielding_outfield_mutation_response

  """
  update data of the table: "fielding_postseason"
  """
  update_fielding_postseason(
    """increments the integer columns with given value of the filtered values"""
    _inc: fielding_postseason_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: fielding_postseason_set_input

    """filter the rows which have to be updated"""
    where: fielding_postseason_bool_exp!
  ): fielding_postseason_mutation_response

  """
  update data of the table: "hall_of_fame"
  """
  update_hall_of_fame(
    """increments the integer columns with given value of the filtered values"""
    _inc: hall_of_fame_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: hall_of_fame_set_input

    """filter the rows which have to be updated"""
    where: hall_of_fame_bool_exp!
  ): hall_of_fame_mutation_response

  """
  update data of the table: "home_game"
  """
  update_home_game(
    """increments the integer columns with given value of the filtered values"""
    _inc: home_game_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: home_game_set_input

    """filter the rows which have to be updated"""
    where: home_game_bool_exp!
  ): home_game_mutation_response

  """
  update data of the table: "manager"
  """
  update_manager(
    """increments the integer columns with given value of the filtered values"""
    _inc: manager_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: manager_set_input

    """filter the rows which have to be updated"""
    where: manager_bool_exp!
  ): manager_mutation_response

  """
  update data of the table: "manager_award"
  """
  update_manager_award(
    """increments the integer columns with given value of the filtered values"""
    _inc: manager_award_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: manager_award_set_input

    """filter the rows which have to be updated"""
    where: manager_award_bool_exp!
  ): manager_award_mutation_response

  """
  update data of the table: "manager_award_vote"
  """
  update_manager_award_vote(
    """increments the integer columns with given value of the filtered values"""
    _inc: manager_award_vote_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: manager_award_vote_set_input

    """filter the rows which have to be updated"""
    where: manager_award_vote_bool_exp!
  ): manager_award_vote_mutation_response

  """
  update data of the table: "manager_half"
  """
  update_manager_half(
    """increments the integer columns with given value of the filtered values"""
    _inc: manager_half_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: manager_half_set_input

    """filter the rows which have to be updated"""
    where: manager_half_bool_exp!
  ): manager_half_mutation_response

  """
  update data of the table: "park"
  """
  update_park(
    """sets the columns of the filtered rows to the given values"""
    _set: park_set_input

    """filter the rows which have to be updated"""
    where: park_bool_exp!
  ): park_mutation_response

  """
  update data of the table: "pitching"
  """
  update_pitching(
    """increments the integer columns with given value of the filtered values"""
    _inc: pitching_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: pitching_set_input

    """filter the rows which have to be updated"""
    where: pitching_bool_exp!
  ): pitching_mutation_response

  """
  update data of the table: "pitching_postseason"
  """
  update_pitching_postseason(
    """increments the integer columns with given value of the filtered values"""
    _inc: pitching_postseason_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: pitching_postseason_set_input

    """filter the rows which have to be updated"""
    where: pitching_postseason_bool_exp!
  ): pitching_postseason_mutation_response

  """
  update data of the table: "player"
  """
  update_player(
    """increments the integer columns with given value of the filtered values"""
    _inc: player_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: player_set_input

    """filter the rows which have to be updated"""
    where: player_bool_exp!
  ): player_mutation_response

  """
  update data of the table: "player_award"
  """
  update_player_award(
    """increments the integer columns with given value of the filtered values"""
    _inc: player_award_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: player_award_set_input

    """filter the rows which have to be updated"""
    where: player_award_bool_exp!
  ): player_award_mutation_response

  """
  update data of the table: "player_award_vote"
  """
  update_player_award_vote(
    """increments the integer columns with given value of the filtered values"""
    _inc: player_award_vote_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: player_award_vote_set_input

    """filter the rows which have to be updated"""
    where: player_award_vote_bool_exp!
  ): player_award_vote_mutation_response

  """
  update data of the table: "player_college"
  """
  update_player_college(
    """increments the integer columns with given value of the filtered values"""
    _inc: player_college_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: player_college_set_input

    """filter the rows which have to be updated"""
    where: player_college_bool_exp!
  ): player_college_mutation_response

  """
  update single row of the table: "player_college"
  """
  update_player_college_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: player_college_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: player_college_set_input
    pk_columns: player_college_pk_columns_input!
  ): player_college

  """
  update data of the table: "postseason"
  """
  update_postseason(
    """increments the integer columns with given value of the filtered values"""
    _inc: postseason_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: postseason_set_input

    """filter the rows which have to be updated"""
    where: postseason_bool_exp!
  ): postseason_mutation_response

  """
  update data of the table: "salary"
  """
  update_salary(
    """increments the integer columns with given value of the filtered values"""
    _inc: salary_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: salary_set_input

    """filter the rows which have to be updated"""
    where: salary_bool_exp!
  ): salary_mutation_response

  """
  update single row of the table: "salary"
  """
  update_salary_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: salary_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: salary_set_input
    pk_columns: salary_pk_columns_input!
  ): salary

  """
  update data of the table: "team"
  """
  update_team(
    """increments the integer columns with given value of the filtered values"""
    _inc: team_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: team_set_input

    """filter the rows which have to be updated"""
    where: team_bool_exp!
  ): team_mutation_response

  """
  update single row of the table: "team"
  """
  update_team_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: team_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: team_set_input
    pk_columns: team_pk_columns_input!
  ): team

  """
  update data of the table: "team_franchise"
  """
  update_team_franchise(
    """sets the columns of the filtered rows to the given values"""
    _set: team_franchise_set_input

    """filter the rows which have to be updated"""
    where: team_franchise_bool_exp!
  ): team_franchise_mutation_response

  """
  update single row of the table: "team_franchise"
  """
  update_team_franchise_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: team_franchise_set_input
    pk_columns: team_franchise_pk_columns_input!
  ): team_franchise

  """
  update data of the table: "team_half"
  """
  update_team_half(
    """increments the integer columns with given value of the filtered values"""
    _inc: team_half_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: team_half_set_input

    """filter the rows which have to be updated"""
    where: team_half_bool_exp!
  ): team_half_mutation_response
}

scalar numeric

"""
expression to compare columns of type numeric. All fields are combined with logical 'AND'.
"""
input numeric_comparison_exp {
  _eq: numeric
  _gt: numeric
  _gte: numeric
  _in: [numeric!]
  _is_null: Boolean
  _lt: numeric
  _lte: numeric
  _neq: numeric
  _nin: [numeric!]
}

"""column ordering options"""
enum order_by {
  """in the ascending order, nulls last"""
  asc

  """in the ascending order, nulls first"""
  asc_nulls_first

  """in the ascending order, nulls last"""
  asc_nulls_last

  """in the descending order, nulls first"""
  desc

  """in the descending order, nulls first"""
  desc_nulls_first

  """in the descending order, nulls last"""
  desc_nulls_last
}

"""
columns and relationships of "park"
"""
type park {
  city: String
  country: String

  """An array relationship"""
  home_games(
    """distinct select on columns"""
    distinct_on: [home_game_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [home_game_order_by!]

    """filter the rows returned"""
    where: home_game_bool_exp
  ): [home_game!]!

  """An aggregated array relationship"""
  home_games_aggregate(
    """distinct select on columns"""
    distinct_on: [home_game_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [home_game_order_by!]

    """filter the rows returned"""
    where: home_game_bool_exp
  ): home_game_aggregate!
  park_alias: String
  park_id: String
  park_name: String
  state: String
}

"""
aggregated selection of "park"
"""
type park_aggregate {
  aggregate: park_aggregate_fields
  nodes: [park!]!
}

"""
aggregate fields of "park"
"""
type park_aggregate_fields {
  count(columns: [park_select_column!], distinct: Boolean): Int
  max: park_max_fields
  min: park_min_fields
}

"""
order by aggregate values of table "park"
"""
input park_aggregate_order_by {
  count: order_by
  max: park_max_order_by
  min: park_min_order_by
}

"""
input type for inserting array relation for remote table "park"
"""
input park_arr_rel_insert_input {
  data: [park_insert_input!]!
  on_conflict: park_on_conflict
}

"""
Boolean expression to filter rows from the table "park". All fields are combined with a logical 'AND'.
"""
input park_bool_exp {
  _and: [park_bool_exp]
  _not: park_bool_exp
  _or: [park_bool_exp]
  city: String_comparison_exp
  country: String_comparison_exp
  home_games: home_game_bool_exp
  park_alias: String_comparison_exp
  park_id: String_comparison_exp
  park_name: String_comparison_exp
  state: String_comparison_exp
}

"""
unique or primary key constraints on table "park"
"""
enum park_constraint {
  """unique or primary key constraint"""
  park_park_id_key
}

"""
input type for inserting data into table "park"
"""
input park_insert_input {
  city: String
  country: String
  home_games: home_game_arr_rel_insert_input
  park_alias: String
  park_id: String
  park_name: String
  state: String
}

"""aggregate max on columns"""
type park_max_fields {
  city: String
  country: String
  park_alias: String
  park_id: String
  park_name: String
  state: String
}

"""
order by max() on columns of table "park"
"""
input park_max_order_by {
  city: order_by
  country: order_by
  park_alias: order_by
  park_id: order_by
  park_name: order_by
  state: order_by
}

"""aggregate min on columns"""
type park_min_fields {
  city: String
  country: String
  park_alias: String
  park_id: String
  park_name: String
  state: String
}

"""
order by min() on columns of table "park"
"""
input park_min_order_by {
  city: order_by
  country: order_by
  park_alias: order_by
  park_id: order_by
  park_name: order_by
  state: order_by
}

"""
response of any mutation on the table "park"
"""
type park_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [park!]!
}

"""
input type for inserting object relation for remote table "park"
"""
input park_obj_rel_insert_input {
  data: park_insert_input!
  on_conflict: park_on_conflict
}

"""
on conflict condition type for table "park"
"""
input park_on_conflict {
  constraint: park_constraint!
  update_columns: [park_update_column!]!
  where: park_bool_exp
}

"""
ordering options when selecting data from "park"
"""
input park_order_by {
  city: order_by
  country: order_by
  home_games_aggregate: home_game_aggregate_order_by
  park_alias: order_by
  park_id: order_by
  park_name: order_by
  state: order_by
}

"""
select columns of table "park"
"""
enum park_select_column {
  """column name"""
  city

  """column name"""
  country

  """column name"""
  park_alias

  """column name"""
  park_id

  """column name"""
  park_name

  """column name"""
  state
}

"""
input type for updating data in table "park"
"""
input park_set_input {
  city: String
  country: String
  park_alias: String
  park_id: String
  park_name: String
  state: String
}

"""
update columns of table "park"
"""
enum park_update_column {
  """column name"""
  city

  """column name"""
  country

  """column name"""
  park_alias

  """column name"""
  park_id

  """column name"""
  park_name

  """column name"""
  state
}

"""
columns and relationships of "pitching"
"""
type pitching {
  baopp: numeric
  bb: bigint
  bfp: numeric
  bk: bigint
  cg: bigint
  er: bigint
  era: numeric
  g: bigint
  g_idp: numeric
  gf: numeric
  gs: bigint
  h: bigint
  hbp: numeric
  hr: bigint
  ibb: numeric
  ipouts: numeric
  l: bigint
  league_id: String
  player_id: String
  r: bigint
  sf: numeric
  sh: numeric
  sho: bigint
  so: bigint
  stint: bigint
  sv: bigint
  team_id: String
  w: bigint
  wp: numeric
  year: bigint
}

"""
aggregated selection of "pitching"
"""
type pitching_aggregate {
  aggregate: pitching_aggregate_fields
  nodes: [pitching!]!
}

"""
aggregate fields of "pitching"
"""
type pitching_aggregate_fields {
  avg: pitching_avg_fields
  count(columns: [pitching_select_column!], distinct: Boolean): Int
  max: pitching_max_fields
  min: pitching_min_fields
  stddev: pitching_stddev_fields
  stddev_pop: pitching_stddev_pop_fields
  stddev_samp: pitching_stddev_samp_fields
  sum: pitching_sum_fields
  var_pop: pitching_var_pop_fields
  var_samp: pitching_var_samp_fields
  variance: pitching_variance_fields
}

"""
order by aggregate values of table "pitching"
"""
input pitching_aggregate_order_by {
  avg: pitching_avg_order_by
  count: order_by
  max: pitching_max_order_by
  min: pitching_min_order_by
  stddev: pitching_stddev_order_by
  stddev_pop: pitching_stddev_pop_order_by
  stddev_samp: pitching_stddev_samp_order_by
  sum: pitching_sum_order_by
  var_pop: pitching_var_pop_order_by
  var_samp: pitching_var_samp_order_by
  variance: pitching_variance_order_by
}

"""
input type for inserting array relation for remote table "pitching"
"""
input pitching_arr_rel_insert_input {
  data: [pitching_insert_input!]!
}

"""aggregate avg on columns"""
type pitching_avg_fields {
  baopp: Float
  bb: Float
  bfp: Float
  bk: Float
  cg: Float
  er: Float
  era: Float
  g: Float
  g_idp: Float
  gf: Float
  gs: Float
  h: Float
  hbp: Float
  hr: Float
  ibb: Float
  ipouts: Float
  l: Float
  r: Float
  sf: Float
  sh: Float
  sho: Float
  so: Float
  stint: Float
  sv: Float
  w: Float
  wp: Float
  year: Float
}

"""
order by avg() on columns of table "pitching"
"""
input pitching_avg_order_by {
  baopp: order_by
  bb: order_by
  bfp: order_by
  bk: order_by
  cg: order_by
  er: order_by
  era: order_by
  g: order_by
  g_idp: order_by
  gf: order_by
  gs: order_by
  h: order_by
  hbp: order_by
  hr: order_by
  ibb: order_by
  ipouts: order_by
  l: order_by
  r: order_by
  sf: order_by
  sh: order_by
  sho: order_by
  so: order_by
  stint: order_by
  sv: order_by
  w: order_by
  wp: order_by
  year: order_by
}

"""
Boolean expression to filter rows from the table "pitching". All fields are combined with a logical 'AND'.
"""
input pitching_bool_exp {
  _and: [pitching_bool_exp]
  _not: pitching_bool_exp
  _or: [pitching_bool_exp]
  baopp: numeric_comparison_exp
  bb: bigint_comparison_exp
  bfp: numeric_comparison_exp
  bk: bigint_comparison_exp
  cg: bigint_comparison_exp
  er: bigint_comparison_exp
  era: numeric_comparison_exp
  g: bigint_comparison_exp
  g_idp: numeric_comparison_exp
  gf: numeric_comparison_exp
  gs: bigint_comparison_exp
  h: bigint_comparison_exp
  hbp: numeric_comparison_exp
  hr: bigint_comparison_exp
  ibb: numeric_comparison_exp
  ipouts: numeric_comparison_exp
  l: bigint_comparison_exp
  league_id: String_comparison_exp
  player_id: String_comparison_exp
  r: bigint_comparison_exp
  sf: numeric_comparison_exp
  sh: numeric_comparison_exp
  sho: bigint_comparison_exp
  so: bigint_comparison_exp
  stint: bigint_comparison_exp
  sv: bigint_comparison_exp
  team_id: String_comparison_exp
  w: bigint_comparison_exp
  wp: numeric_comparison_exp
  year: bigint_comparison_exp
}

"""
input type for incrementing integer column in table "pitching"
"""
input pitching_inc_input {
  baopp: numeric
  bb: bigint
  bfp: numeric
  bk: bigint
  cg: bigint
  er: bigint
  era: numeric
  g: bigint
  g_idp: numeric
  gf: numeric
  gs: bigint
  h: bigint
  hbp: numeric
  hr: bigint
  ibb: numeric
  ipouts: numeric
  l: bigint
  r: bigint
  sf: numeric
  sh: numeric
  sho: bigint
  so: bigint
  stint: bigint
  sv: bigint
  w: bigint
  wp: numeric
  year: bigint
}

"""
input type for inserting data into table "pitching"
"""
input pitching_insert_input {
  baopp: numeric
  bb: bigint
  bfp: numeric
  bk: bigint
  cg: bigint
  er: bigint
  era: numeric
  g: bigint
  g_idp: numeric
  gf: numeric
  gs: bigint
  h: bigint
  hbp: numeric
  hr: bigint
  ibb: numeric
  ipouts: numeric
  l: bigint
  league_id: String
  player_id: String
  r: bigint
  sf: numeric
  sh: numeric
  sho: bigint
  so: bigint
  stint: bigint
  sv: bigint
  team_id: String
  w: bigint
  wp: numeric
  year: bigint
}

"""aggregate max on columns"""
type pitching_max_fields {
  baopp: numeric
  bb: bigint
  bfp: numeric
  bk: bigint
  cg: bigint
  er: bigint
  era: numeric
  g: bigint
  g_idp: numeric
  gf: numeric
  gs: bigint
  h: bigint
  hbp: numeric
  hr: bigint
  ibb: numeric
  ipouts: numeric
  l: bigint
  league_id: String
  player_id: String
  r: bigint
  sf: numeric
  sh: numeric
  sho: bigint
  so: bigint
  stint: bigint
  sv: bigint
  team_id: String
  w: bigint
  wp: numeric
  year: bigint
}

"""
order by max() on columns of table "pitching"
"""
input pitching_max_order_by {
  baopp: order_by
  bb: order_by
  bfp: order_by
  bk: order_by
  cg: order_by
  er: order_by
  era: order_by
  g: order_by
  g_idp: order_by
  gf: order_by
  gs: order_by
  h: order_by
  hbp: order_by
  hr: order_by
  ibb: order_by
  ipouts: order_by
  l: order_by
  league_id: order_by
  player_id: order_by
  r: order_by
  sf: order_by
  sh: order_by
  sho: order_by
  so: order_by
  stint: order_by
  sv: order_by
  team_id: order_by
  w: order_by
  wp: order_by
  year: order_by
}

"""aggregate min on columns"""
type pitching_min_fields {
  baopp: numeric
  bb: bigint
  bfp: numeric
  bk: bigint
  cg: bigint
  er: bigint
  era: numeric
  g: bigint
  g_idp: numeric
  gf: numeric
  gs: bigint
  h: bigint
  hbp: numeric
  hr: bigint
  ibb: numeric
  ipouts: numeric
  l: bigint
  league_id: String
  player_id: String
  r: bigint
  sf: numeric
  sh: numeric
  sho: bigint
  so: bigint
  stint: bigint
  sv: bigint
  team_id: String
  w: bigint
  wp: numeric
  year: bigint
}

"""
order by min() on columns of table "pitching"
"""
input pitching_min_order_by {
  baopp: order_by
  bb: order_by
  bfp: order_by
  bk: order_by
  cg: order_by
  er: order_by
  era: order_by
  g: order_by
  g_idp: order_by
  gf: order_by
  gs: order_by
  h: order_by
  hbp: order_by
  hr: order_by
  ibb: order_by
  ipouts: order_by
  l: order_by
  league_id: order_by
  player_id: order_by
  r: order_by
  sf: order_by
  sh: order_by
  sho: order_by
  so: order_by
  stint: order_by
  sv: order_by
  team_id: order_by
  w: order_by
  wp: order_by
  year: order_by
}

"""
response of any mutation on the table "pitching"
"""
type pitching_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [pitching!]!
}

"""
input type for inserting object relation for remote table "pitching"
"""
input pitching_obj_rel_insert_input {
  data: pitching_insert_input!
}

"""
ordering options when selecting data from "pitching"
"""
input pitching_order_by {
  baopp: order_by
  bb: order_by
  bfp: order_by
  bk: order_by
  cg: order_by
  er: order_by
  era: order_by
  g: order_by
  g_idp: order_by
  gf: order_by
  gs: order_by
  h: order_by
  hbp: order_by
  hr: order_by
  ibb: order_by
  ipouts: order_by
  l: order_by
  league_id: order_by
  player_id: order_by
  r: order_by
  sf: order_by
  sh: order_by
  sho: order_by
  so: order_by
  stint: order_by
  sv: order_by
  team_id: order_by
  w: order_by
  wp: order_by
  year: order_by
}

"""
columns and relationships of "pitching_postseason"
"""
type pitching_postseason {
  baopp: String
  bb: bigint
  bfp: numeric
  bk: numeric
  cg: bigint
  er: bigint
  era: numeric
  g: bigint
  g_idp: numeric
  gf: bigint
  gs: bigint
  h: bigint
  hbp: numeric
  hr: bigint
  ibb: numeric
  ipouts: bigint
  l: bigint
  league_id: String
  player_id: String
  r: bigint
  round: String
  sf: numeric
  sh: numeric
  sho: bigint
  so: bigint
  sv: bigint
  team_id: String
  w: bigint
  wp: numeric
  year: bigint
}

"""
aggregated selection of "pitching_postseason"
"""
type pitching_postseason_aggregate {
  aggregate: pitching_postseason_aggregate_fields
  nodes: [pitching_postseason!]!
}

"""
aggregate fields of "pitching_postseason"
"""
type pitching_postseason_aggregate_fields {
  avg: pitching_postseason_avg_fields
  count(columns: [pitching_postseason_select_column!], distinct: Boolean): Int
  max: pitching_postseason_max_fields
  min: pitching_postseason_min_fields
  stddev: pitching_postseason_stddev_fields
  stddev_pop: pitching_postseason_stddev_pop_fields
  stddev_samp: pitching_postseason_stddev_samp_fields
  sum: pitching_postseason_sum_fields
  var_pop: pitching_postseason_var_pop_fields
  var_samp: pitching_postseason_var_samp_fields
  variance: pitching_postseason_variance_fields
}

"""
order by aggregate values of table "pitching_postseason"
"""
input pitching_postseason_aggregate_order_by {
  avg: pitching_postseason_avg_order_by
  count: order_by
  max: pitching_postseason_max_order_by
  min: pitching_postseason_min_order_by
  stddev: pitching_postseason_stddev_order_by
  stddev_pop: pitching_postseason_stddev_pop_order_by
  stddev_samp: pitching_postseason_stddev_samp_order_by
  sum: pitching_postseason_sum_order_by
  var_pop: pitching_postseason_var_pop_order_by
  var_samp: pitching_postseason_var_samp_order_by
  variance: pitching_postseason_variance_order_by
}

"""
input type for inserting array relation for remote table "pitching_postseason"
"""
input pitching_postseason_arr_rel_insert_input {
  data: [pitching_postseason_insert_input!]!
}

"""aggregate avg on columns"""
type pitching_postseason_avg_fields {
  bb: Float
  bfp: Float
  bk: Float
  cg: Float
  er: Float
  era: Float
  g: Float
  g_idp: Float
  gf: Float
  gs: Float
  h: Float
  hbp: Float
  hr: Float
  ibb: Float
  ipouts: Float
  l: Float
  r: Float
  sf: Float
  sh: Float
  sho: Float
  so: Float
  sv: Float
  w: Float
  wp: Float
  year: Float
}

"""
order by avg() on columns of table "pitching_postseason"
"""
input pitching_postseason_avg_order_by {
  bb: order_by
  bfp: order_by
  bk: order_by
  cg: order_by
  er: order_by
  era: order_by
  g: order_by
  g_idp: order_by
  gf: order_by
  gs: order_by
  h: order_by
  hbp: order_by
  hr: order_by
  ibb: order_by
  ipouts: order_by
  l: order_by
  r: order_by
  sf: order_by
  sh: order_by
  sho: order_by
  so: order_by
  sv: order_by
  w: order_by
  wp: order_by
  year: order_by
}

"""
Boolean expression to filter rows from the table "pitching_postseason". All fields are combined with a logical 'AND'.
"""
input pitching_postseason_bool_exp {
  _and: [pitching_postseason_bool_exp]
  _not: pitching_postseason_bool_exp
  _or: [pitching_postseason_bool_exp]
  baopp: String_comparison_exp
  bb: bigint_comparison_exp
  bfp: numeric_comparison_exp
  bk: numeric_comparison_exp
  cg: bigint_comparison_exp
  er: bigint_comparison_exp
  era: numeric_comparison_exp
  g: bigint_comparison_exp
  g_idp: numeric_comparison_exp
  gf: bigint_comparison_exp
  gs: bigint_comparison_exp
  h: bigint_comparison_exp
  hbp: numeric_comparison_exp
  hr: bigint_comparison_exp
  ibb: numeric_comparison_exp
  ipouts: bigint_comparison_exp
  l: bigint_comparison_exp
  league_id: String_comparison_exp
  player_id: String_comparison_exp
  r: bigint_comparison_exp
  round: String_comparison_exp
  sf: numeric_comparison_exp
  sh: numeric_comparison_exp
  sho: bigint_comparison_exp
  so: bigint_comparison_exp
  sv: bigint_comparison_exp
  team_id: String_comparison_exp
  w: bigint_comparison_exp
  wp: numeric_comparison_exp
  year: bigint_comparison_exp
}

"""
input type for incrementing integer column in table "pitching_postseason"
"""
input pitching_postseason_inc_input {
  bb: bigint
  bfp: numeric
  bk: numeric
  cg: bigint
  er: bigint
  era: numeric
  g: bigint
  g_idp: numeric
  gf: bigint
  gs: bigint
  h: bigint
  hbp: numeric
  hr: bigint
  ibb: numeric
  ipouts: bigint
  l: bigint
  r: bigint
  sf: numeric
  sh: numeric
  sho: bigint
  so: bigint
  sv: bigint
  w: bigint
  wp: numeric
  year: bigint
}

"""
input type for inserting data into table "pitching_postseason"
"""
input pitching_postseason_insert_input {
  baopp: String
  bb: bigint
  bfp: numeric
  bk: numeric
  cg: bigint
  er: bigint
  era: numeric
  g: bigint
  g_idp: numeric
  gf: bigint
  gs: bigint
  h: bigint
  hbp: numeric
  hr: bigint
  ibb: numeric
  ipouts: bigint
  l: bigint
  league_id: String
  player_id: String
  r: bigint
  round: String
  sf: numeric
  sh: numeric
  sho: bigint
  so: bigint
  sv: bigint
  team_id: String
  w: bigint
  wp: numeric
  year: bigint
}

"""aggregate max on columns"""
type pitching_postseason_max_fields {
  baopp: String
  bb: bigint
  bfp: numeric
  bk: numeric
  cg: bigint
  er: bigint
  era: numeric
  g: bigint
  g_idp: numeric
  gf: bigint
  gs: bigint
  h: bigint
  hbp: numeric
  hr: bigint
  ibb: numeric
  ipouts: bigint
  l: bigint
  league_id: String
  player_id: String
  r: bigint
  round: String
  sf: numeric
  sh: numeric
  sho: bigint
  so: bigint
  sv: bigint
  team_id: String
  w: bigint
  wp: numeric
  year: bigint
}

"""
order by max() on columns of table "pitching_postseason"
"""
input pitching_postseason_max_order_by {
  baopp: order_by
  bb: order_by
  bfp: order_by
  bk: order_by
  cg: order_by
  er: order_by
  era: order_by
  g: order_by
  g_idp: order_by
  gf: order_by
  gs: order_by
  h: order_by
  hbp: order_by
  hr: order_by
  ibb: order_by
  ipouts: order_by
  l: order_by
  league_id: order_by
  player_id: order_by
  r: order_by
  round: order_by
  sf: order_by
  sh: order_by
  sho: order_by
  so: order_by
  sv: order_by
  team_id: order_by
  w: order_by
  wp: order_by
  year: order_by
}

"""aggregate min on columns"""
type pitching_postseason_min_fields {
  baopp: String
  bb: bigint
  bfp: numeric
  bk: numeric
  cg: bigint
  er: bigint
  era: numeric
  g: bigint
  g_idp: numeric
  gf: bigint
  gs: bigint
  h: bigint
  hbp: numeric
  hr: bigint
  ibb: numeric
  ipouts: bigint
  l: bigint
  league_id: String
  player_id: String
  r: bigint
  round: String
  sf: numeric
  sh: numeric
  sho: bigint
  so: bigint
  sv: bigint
  team_id: String
  w: bigint
  wp: numeric
  year: bigint
}

"""
order by min() on columns of table "pitching_postseason"
"""
input pitching_postseason_min_order_by {
  baopp: order_by
  bb: order_by
  bfp: order_by
  bk: order_by
  cg: order_by
  er: order_by
  era: order_by
  g: order_by
  g_idp: order_by
  gf: order_by
  gs: order_by
  h: order_by
  hbp: order_by
  hr: order_by
  ibb: order_by
  ipouts: order_by
  l: order_by
  league_id: order_by
  player_id: order_by
  r: order_by
  round: order_by
  sf: order_by
  sh: order_by
  sho: order_by
  so: order_by
  sv: order_by
  team_id: order_by
  w: order_by
  wp: order_by
  year: order_by
}

"""
response of any mutation on the table "pitching_postseason"
"""
type pitching_postseason_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [pitching_postseason!]!
}

"""
input type for inserting object relation for remote table "pitching_postseason"
"""
input pitching_postseason_obj_rel_insert_input {
  data: pitching_postseason_insert_input!
}

"""
ordering options when selecting data from "pitching_postseason"
"""
input pitching_postseason_order_by {
  baopp: order_by
  bb: order_by
  bfp: order_by
  bk: order_by
  cg: order_by
  er: order_by
  era: order_by
  g: order_by
  g_idp: order_by
  gf: order_by
  gs: order_by
  h: order_by
  hbp: order_by
  hr: order_by
  ibb: order_by
  ipouts: order_by
  l: order_by
  league_id: order_by
  player_id: order_by
  r: order_by
  round: order_by
  sf: order_by
  sh: order_by
  sho: order_by
  so: order_by
  sv: order_by
  team_id: order_by
  w: order_by
  wp: order_by
  year: order_by
}

"""
select columns of table "pitching_postseason"
"""
enum pitching_postseason_select_column {
  """column name"""
  baopp

  """column name"""
  bb

  """column name"""
  bfp

  """column name"""
  bk

  """column name"""
  cg

  """column name"""
  er

  """column name"""
  era

  """column name"""
  g

  """column name"""
  g_idp

  """column name"""
  gf

  """column name"""
  gs

  """column name"""
  h

  """column name"""
  hbp

  """column name"""
  hr

  """column name"""
  ibb

  """column name"""
  ipouts

  """column name"""
  l

  """column name"""
  league_id

  """column name"""
  player_id

  """column name"""
  r

  """column name"""
  round

  """column name"""
  sf

  """column name"""
  sh

  """column name"""
  sho

  """column name"""
  so

  """column name"""
  sv

  """column name"""
  team_id

  """column name"""
  w

  """column name"""
  wp

  """column name"""
  year
}

"""
input type for updating data in table "pitching_postseason"
"""
input pitching_postseason_set_input {
  baopp: String
  bb: bigint
  bfp: numeric
  bk: numeric
  cg: bigint
  er: bigint
  era: numeric
  g: bigint
  g_idp: numeric
  gf: bigint
  gs: bigint
  h: bigint
  hbp: numeric
  hr: bigint
  ibb: numeric
  ipouts: bigint
  l: bigint
  league_id: String
  player_id: String
  r: bigint
  round: String
  sf: numeric
  sh: numeric
  sho: bigint
  so: bigint
  sv: bigint
  team_id: String
  w: bigint
  wp: numeric
  year: bigint
}

"""aggregate stddev on columns"""
type pitching_postseason_stddev_fields {
  bb: Float
  bfp: Float
  bk: Float
  cg: Float
  er: Float
  era: Float
  g: Float
  g_idp: Float
  gf: Float
  gs: Float
  h: Float
  hbp: Float
  hr: Float
  ibb: Float
  ipouts: Float
  l: Float
  r: Float
  sf: Float
  sh: Float
  sho: Float
  so: Float
  sv: Float
  w: Float
  wp: Float
  year: Float
}

"""
order by stddev() on columns of table "pitching_postseason"
"""
input pitching_postseason_stddev_order_by {
  bb: order_by
  bfp: order_by
  bk: order_by
  cg: order_by
  er: order_by
  era: order_by
  g: order_by
  g_idp: order_by
  gf: order_by
  gs: order_by
  h: order_by
  hbp: order_by
  hr: order_by
  ibb: order_by
  ipouts: order_by
  l: order_by
  r: order_by
  sf: order_by
  sh: order_by
  sho: order_by
  so: order_by
  sv: order_by
  w: order_by
  wp: order_by
  year: order_by
}

"""aggregate stddev_pop on columns"""
type pitching_postseason_stddev_pop_fields {
  bb: Float
  bfp: Float
  bk: Float
  cg: Float
  er: Float
  era: Float
  g: Float
  g_idp: Float
  gf: Float
  gs: Float
  h: Float
  hbp: Float
  hr: Float
  ibb: Float
  ipouts: Float
  l: Float
  r: Float
  sf: Float
  sh: Float
  sho: Float
  so: Float
  sv: Float
  w: Float
  wp: Float
  year: Float
}

"""
order by stddev_pop() on columns of table "pitching_postseason"
"""
input pitching_postseason_stddev_pop_order_by {
  bb: order_by
  bfp: order_by
  bk: order_by
  cg: order_by
  er: order_by
  era: order_by
  g: order_by
  g_idp: order_by
  gf: order_by
  gs: order_by
  h: order_by
  hbp: order_by
  hr: order_by
  ibb: order_by
  ipouts: order_by
  l: order_by
  r: order_by
  sf: order_by
  sh: order_by
  sho: order_by
  so: order_by
  sv: order_by
  w: order_by
  wp: order_by
  year: order_by
}

"""aggregate stddev_samp on columns"""
type pitching_postseason_stddev_samp_fields {
  bb: Float
  bfp: Float
  bk: Float
  cg: Float
  er: Float
  era: Float
  g: Float
  g_idp: Float
  gf: Float
  gs: Float
  h: Float
  hbp: Float
  hr: Float
  ibb: Float
  ipouts: Float
  l: Float
  r: Float
  sf: Float
  sh: Float
  sho: Float
  so: Float
  sv: Float
  w: Float
  wp: Float
  year: Float
}

"""
order by stddev_samp() on columns of table "pitching_postseason"
"""
input pitching_postseason_stddev_samp_order_by {
  bb: order_by
  bfp: order_by
  bk: order_by
  cg: order_by
  er: order_by
  era: order_by
  g: order_by
  g_idp: order_by
  gf: order_by
  gs: order_by
  h: order_by
  hbp: order_by
  hr: order_by
  ibb: order_by
  ipouts: order_by
  l: order_by
  r: order_by
  sf: order_by
  sh: order_by
  sho: order_by
  so: order_by
  sv: order_by
  w: order_by
  wp: order_by
  year: order_by
}

"""aggregate sum on columns"""
type pitching_postseason_sum_fields {
  bb: bigint
  bfp: numeric
  bk: numeric
  cg: bigint
  er: bigint
  era: numeric
  g: bigint
  g_idp: numeric
  gf: bigint
  gs: bigint
  h: bigint
  hbp: numeric
  hr: bigint
  ibb: numeric
  ipouts: bigint
  l: bigint
  r: bigint
  sf: numeric
  sh: numeric
  sho: bigint
  so: bigint
  sv: bigint
  w: bigint
  wp: numeric
  year: bigint
}

"""
order by sum() on columns of table "pitching_postseason"
"""
input pitching_postseason_sum_order_by {
  bb: order_by
  bfp: order_by
  bk: order_by
  cg: order_by
  er: order_by
  era: order_by
  g: order_by
  g_idp: order_by
  gf: order_by
  gs: order_by
  h: order_by
  hbp: order_by
  hr: order_by
  ibb: order_by
  ipouts: order_by
  l: order_by
  r: order_by
  sf: order_by
  sh: order_by
  sho: order_by
  so: order_by
  sv: order_by
  w: order_by
  wp: order_by
  year: order_by
}

"""aggregate var_pop on columns"""
type pitching_postseason_var_pop_fields {
  bb: Float
  bfp: Float
  bk: Float
  cg: Float
  er: Float
  era: Float
  g: Float
  g_idp: Float
  gf: Float
  gs: Float
  h: Float
  hbp: Float
  hr: Float
  ibb: Float
  ipouts: Float
  l: Float
  r: Float
  sf: Float
  sh: Float
  sho: Float
  so: Float
  sv: Float
  w: Float
  wp: Float
  year: Float
}

"""
order by var_pop() on columns of table "pitching_postseason"
"""
input pitching_postseason_var_pop_order_by {
  bb: order_by
  bfp: order_by
  bk: order_by
  cg: order_by
  er: order_by
  era: order_by
  g: order_by
  g_idp: order_by
  gf: order_by
  gs: order_by
  h: order_by
  hbp: order_by
  hr: order_by
  ibb: order_by
  ipouts: order_by
  l: order_by
  r: order_by
  sf: order_by
  sh: order_by
  sho: order_by
  so: order_by
  sv: order_by
  w: order_by
  wp: order_by
  year: order_by
}

"""aggregate var_samp on columns"""
type pitching_postseason_var_samp_fields {
  bb: Float
  bfp: Float
  bk: Float
  cg: Float
  er: Float
  era: Float
  g: Float
  g_idp: Float
  gf: Float
  gs: Float
  h: Float
  hbp: Float
  hr: Float
  ibb: Float
  ipouts: Float
  l: Float
  r: Float
  sf: Float
  sh: Float
  sho: Float
  so: Float
  sv: Float
  w: Float
  wp: Float
  year: Float
}

"""
order by var_samp() on columns of table "pitching_postseason"
"""
input pitching_postseason_var_samp_order_by {
  bb: order_by
  bfp: order_by
  bk: order_by
  cg: order_by
  er: order_by
  era: order_by
  g: order_by
  g_idp: order_by
  gf: order_by
  gs: order_by
  h: order_by
  hbp: order_by
  hr: order_by
  ibb: order_by
  ipouts: order_by
  l: order_by
  r: order_by
  sf: order_by
  sh: order_by
  sho: order_by
  so: order_by
  sv: order_by
  w: order_by
  wp: order_by
  year: order_by
}

"""aggregate variance on columns"""
type pitching_postseason_variance_fields {
  bb: Float
  bfp: Float
  bk: Float
  cg: Float
  er: Float
  era: Float
  g: Float
  g_idp: Float
  gf: Float
  gs: Float
  h: Float
  hbp: Float
  hr: Float
  ibb: Float
  ipouts: Float
  l: Float
  r: Float
  sf: Float
  sh: Float
  sho: Float
  so: Float
  sv: Float
  w: Float
  wp: Float
  year: Float
}

"""
order by variance() on columns of table "pitching_postseason"
"""
input pitching_postseason_variance_order_by {
  bb: order_by
  bfp: order_by
  bk: order_by
  cg: order_by
  er: order_by
  era: order_by
  g: order_by
  g_idp: order_by
  gf: order_by
  gs: order_by
  h: order_by
  hbp: order_by
  hr: order_by
  ibb: order_by
  ipouts: order_by
  l: order_by
  r: order_by
  sf: order_by
  sh: order_by
  sho: order_by
  so: order_by
  sv: order_by
  w: order_by
  wp: order_by
  year: order_by
}

"""
select columns of table "pitching"
"""
enum pitching_select_column {
  """column name"""
  baopp

  """column name"""
  bb

  """column name"""
  bfp

  """column name"""
  bk

  """column name"""
  cg

  """column name"""
  er

  """column name"""
  era

  """column name"""
  g

  """column name"""
  g_idp

  """column name"""
  gf

  """column name"""
  gs

  """column name"""
  h

  """column name"""
  hbp

  """column name"""
  hr

  """column name"""
  ibb

  """column name"""
  ipouts

  """column name"""
  l

  """column name"""
  league_id

  """column name"""
  player_id

  """column name"""
  r

  """column name"""
  sf

  """column name"""
  sh

  """column name"""
  sho

  """column name"""
  so

  """column name"""
  stint

  """column name"""
  sv

  """column name"""
  team_id

  """column name"""
  w

  """column name"""
  wp

  """column name"""
  year
}

"""
input type for updating data in table "pitching"
"""
input pitching_set_input {
  baopp: numeric
  bb: bigint
  bfp: numeric
  bk: bigint
  cg: bigint
  er: bigint
  era: numeric
  g: bigint
  g_idp: numeric
  gf: numeric
  gs: bigint
  h: bigint
  hbp: numeric
  hr: bigint
  ibb: numeric
  ipouts: numeric
  l: bigint
  league_id: String
  player_id: String
  r: bigint
  sf: numeric
  sh: numeric
  sho: bigint
  so: bigint
  stint: bigint
  sv: bigint
  team_id: String
  w: bigint
  wp: numeric
  year: bigint
}

"""aggregate stddev on columns"""
type pitching_stddev_fields {
  baopp: Float
  bb: Float
  bfp: Float
  bk: Float
  cg: Float
  er: Float
  era: Float
  g: Float
  g_idp: Float
  gf: Float
  gs: Float
  h: Float
  hbp: Float
  hr: Float
  ibb: Float
  ipouts: Float
  l: Float
  r: Float
  sf: Float
  sh: Float
  sho: Float
  so: Float
  stint: Float
  sv: Float
  w: Float
  wp: Float
  year: Float
}

"""
order by stddev() on columns of table "pitching"
"""
input pitching_stddev_order_by {
  baopp: order_by
  bb: order_by
  bfp: order_by
  bk: order_by
  cg: order_by
  er: order_by
  era: order_by
  g: order_by
  g_idp: order_by
  gf: order_by
  gs: order_by
  h: order_by
  hbp: order_by
  hr: order_by
  ibb: order_by
  ipouts: order_by
  l: order_by
  r: order_by
  sf: order_by
  sh: order_by
  sho: order_by
  so: order_by
  stint: order_by
  sv: order_by
  w: order_by
  wp: order_by
  year: order_by
}

"""aggregate stddev_pop on columns"""
type pitching_stddev_pop_fields {
  baopp: Float
  bb: Float
  bfp: Float
  bk: Float
  cg: Float
  er: Float
  era: Float
  g: Float
  g_idp: Float
  gf: Float
  gs: Float
  h: Float
  hbp: Float
  hr: Float
  ibb: Float
  ipouts: Float
  l: Float
  r: Float
  sf: Float
  sh: Float
  sho: Float
  so: Float
  stint: Float
  sv: Float
  w: Float
  wp: Float
  year: Float
}

"""
order by stddev_pop() on columns of table "pitching"
"""
input pitching_stddev_pop_order_by {
  baopp: order_by
  bb: order_by
  bfp: order_by
  bk: order_by
  cg: order_by
  er: order_by
  era: order_by
  g: order_by
  g_idp: order_by
  gf: order_by
  gs: order_by
  h: order_by
  hbp: order_by
  hr: order_by
  ibb: order_by
  ipouts: order_by
  l: order_by
  r: order_by
  sf: order_by
  sh: order_by
  sho: order_by
  so: order_by
  stint: order_by
  sv: order_by
  w: order_by
  wp: order_by
  year: order_by
}

"""aggregate stddev_samp on columns"""
type pitching_stddev_samp_fields {
  baopp: Float
  bb: Float
  bfp: Float
  bk: Float
  cg: Float
  er: Float
  era: Float
  g: Float
  g_idp: Float
  gf: Float
  gs: Float
  h: Float
  hbp: Float
  hr: Float
  ibb: Float
  ipouts: Float
  l: Float
  r: Float
  sf: Float
  sh: Float
  sho: Float
  so: Float
  stint: Float
  sv: Float
  w: Float
  wp: Float
  year: Float
}

"""
order by stddev_samp() on columns of table "pitching"
"""
input pitching_stddev_samp_order_by {
  baopp: order_by
  bb: order_by
  bfp: order_by
  bk: order_by
  cg: order_by
  er: order_by
  era: order_by
  g: order_by
  g_idp: order_by
  gf: order_by
  gs: order_by
  h: order_by
  hbp: order_by
  hr: order_by
  ibb: order_by
  ipouts: order_by
  l: order_by
  r: order_by
  sf: order_by
  sh: order_by
  sho: order_by
  so: order_by
  stint: order_by
  sv: order_by
  w: order_by
  wp: order_by
  year: order_by
}

"""aggregate sum on columns"""
type pitching_sum_fields {
  baopp: numeric
  bb: bigint
  bfp: numeric
  bk: bigint
  cg: bigint
  er: bigint
  era: numeric
  g: bigint
  g_idp: numeric
  gf: numeric
  gs: bigint
  h: bigint
  hbp: numeric
  hr: bigint
  ibb: numeric
  ipouts: numeric
  l: bigint
  r: bigint
  sf: numeric
  sh: numeric
  sho: bigint
  so: bigint
  stint: bigint
  sv: bigint
  w: bigint
  wp: numeric
  year: bigint
}

"""
order by sum() on columns of table "pitching"
"""
input pitching_sum_order_by {
  baopp: order_by
  bb: order_by
  bfp: order_by
  bk: order_by
  cg: order_by
  er: order_by
  era: order_by
  g: order_by
  g_idp: order_by
  gf: order_by
  gs: order_by
  h: order_by
  hbp: order_by
  hr: order_by
  ibb: order_by
  ipouts: order_by
  l: order_by
  r: order_by
  sf: order_by
  sh: order_by
  sho: order_by
  so: order_by
  stint: order_by
  sv: order_by
  w: order_by
  wp: order_by
  year: order_by
}

"""aggregate var_pop on columns"""
type pitching_var_pop_fields {
  baopp: Float
  bb: Float
  bfp: Float
  bk: Float
  cg: Float
  er: Float
  era: Float
  g: Float
  g_idp: Float
  gf: Float
  gs: Float
  h: Float
  hbp: Float
  hr: Float
  ibb: Float
  ipouts: Float
  l: Float
  r: Float
  sf: Float
  sh: Float
  sho: Float
  so: Float
  stint: Float
  sv: Float
  w: Float
  wp: Float
  year: Float
}

"""
order by var_pop() on columns of table "pitching"
"""
input pitching_var_pop_order_by {
  baopp: order_by
  bb: order_by
  bfp: order_by
  bk: order_by
  cg: order_by
  er: order_by
  era: order_by
  g: order_by
  g_idp: order_by
  gf: order_by
  gs: order_by
  h: order_by
  hbp: order_by
  hr: order_by
  ibb: order_by
  ipouts: order_by
  l: order_by
  r: order_by
  sf: order_by
  sh: order_by
  sho: order_by
  so: order_by
  stint: order_by
  sv: order_by
  w: order_by
  wp: order_by
  year: order_by
}

"""aggregate var_samp on columns"""
type pitching_var_samp_fields {
  baopp: Float
  bb: Float
  bfp: Float
  bk: Float
  cg: Float
  er: Float
  era: Float
  g: Float
  g_idp: Float
  gf: Float
  gs: Float
  h: Float
  hbp: Float
  hr: Float
  ibb: Float
  ipouts: Float
  l: Float
  r: Float
  sf: Float
  sh: Float
  sho: Float
  so: Float
  stint: Float
  sv: Float
  w: Float
  wp: Float
  year: Float
}

"""
order by var_samp() on columns of table "pitching"
"""
input pitching_var_samp_order_by {
  baopp: order_by
  bb: order_by
  bfp: order_by
  bk: order_by
  cg: order_by
  er: order_by
  era: order_by
  g: order_by
  g_idp: order_by
  gf: order_by
  gs: order_by
  h: order_by
  hbp: order_by
  hr: order_by
  ibb: order_by
  ipouts: order_by
  l: order_by
  r: order_by
  sf: order_by
  sh: order_by
  sho: order_by
  so: order_by
  stint: order_by
  sv: order_by
  w: order_by
  wp: order_by
  year: order_by
}

"""aggregate variance on columns"""
type pitching_variance_fields {
  baopp: Float
  bb: Float
  bfp: Float
  bk: Float
  cg: Float
  er: Float
  era: Float
  g: Float
  g_idp: Float
  gf: Float
  gs: Float
  h: Float
  hbp: Float
  hr: Float
  ibb: Float
  ipouts: Float
  l: Float
  r: Float
  sf: Float
  sh: Float
  sho: Float
  so: Float
  stint: Float
  sv: Float
  w: Float
  wp: Float
  year: Float
}

"""
order by variance() on columns of table "pitching"
"""
input pitching_variance_order_by {
  baopp: order_by
  bb: order_by
  bfp: order_by
  bk: order_by
  cg: order_by
  er: order_by
  era: order_by
  g: order_by
  g_idp: order_by
  gf: order_by
  gs: order_by
  h: order_by
  hbp: order_by
  hr: order_by
  ibb: order_by
  ipouts: order_by
  l: order_by
  r: order_by
  sf: order_by
  sh: order_by
  sho: order_by
  so: order_by
  stint: order_by
  sv: order_by
  w: order_by
  wp: order_by
  year: order_by
}

"""
columns and relationships of "player"
"""
type player {
  """An array relationship"""
  all_stars(
    """distinct select on columns"""
    distinct_on: [all_star_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [all_star_order_by!]

    """filter the rows returned"""
    where: all_star_bool_exp
  ): [all_star!]!

  """An aggregated array relationship"""
  all_stars_aggregate(
    """distinct select on columns"""
    distinct_on: [all_star_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [all_star_order_by!]

    """filter the rows returned"""
    where: all_star_bool_exp
  ): all_star_aggregate!
  bats: String
  bbref_id: String
  birth_city: String
  birth_country: String
  birth_day: numeric
  birth_month: numeric
  birth_state: String
  birth_year: numeric
  death_city: String
  death_country: String
  death_day: numeric
  death_month: numeric
  death_state: String
  death_year: numeric
  debut: String
  final_game: String
  height: numeric

  """An array relationship"""
  manager_awards(
    """distinct select on columns"""
    distinct_on: [manager_award_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [manager_award_order_by!]

    """filter the rows returned"""
    where: manager_award_bool_exp
  ): [manager_award!]!

  """An aggregated array relationship"""
  manager_awards_aggregate(
    """distinct select on columns"""
    distinct_on: [manager_award_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [manager_award_order_by!]

    """filter the rows returned"""
    where: manager_award_bool_exp
  ): manager_award_aggregate!
  name_first: String
  name_given: String
  name_last: String

  """An array relationship"""
  player_awards(
    """distinct select on columns"""
    distinct_on: [player_award_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [player_award_order_by!]

    """filter the rows returned"""
    where: player_award_bool_exp
  ): [player_award!]!

  """An aggregated array relationship"""
  player_awards_aggregate(
    """distinct select on columns"""
    distinct_on: [player_award_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [player_award_order_by!]

    """filter the rows returned"""
    where: player_award_bool_exp
  ): player_award_aggregate!

  """An array relationship"""
  player_colleges(
    """distinct select on columns"""
    distinct_on: [player_college_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [player_college_order_by!]

    """filter the rows returned"""
    where: player_college_bool_exp
  ): [player_college!]!

  """An aggregated array relationship"""
  player_colleges_aggregate(
    """distinct select on columns"""
    distinct_on: [player_college_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [player_college_order_by!]

    """filter the rows returned"""
    where: player_college_bool_exp
  ): player_college_aggregate!
  player_id: String
  retro_id: String
  throws: String
  weight: numeric
}

"""
aggregated selection of "player"
"""
type player_aggregate {
  aggregate: player_aggregate_fields
  nodes: [player!]!
}

"""
aggregate fields of "player"
"""
type player_aggregate_fields {
  avg: player_avg_fields
  count(columns: [player_select_column!], distinct: Boolean): Int
  max: player_max_fields
  min: player_min_fields
  stddev: player_stddev_fields
  stddev_pop: player_stddev_pop_fields
  stddev_samp: player_stddev_samp_fields
  sum: player_sum_fields
  var_pop: player_var_pop_fields
  var_samp: player_var_samp_fields
  variance: player_variance_fields
}

"""
order by aggregate values of table "player"
"""
input player_aggregate_order_by {
  avg: player_avg_order_by
  count: order_by
  max: player_max_order_by
  min: player_min_order_by
  stddev: player_stddev_order_by
  stddev_pop: player_stddev_pop_order_by
  stddev_samp: player_stddev_samp_order_by
  sum: player_sum_order_by
  var_pop: player_var_pop_order_by
  var_samp: player_var_samp_order_by
  variance: player_variance_order_by
}

"""
input type for inserting array relation for remote table "player"
"""
input player_arr_rel_insert_input {
  data: [player_insert_input!]!
  on_conflict: player_on_conflict
}

"""aggregate avg on columns"""
type player_avg_fields {
  birth_day: Float
  birth_month: Float
  birth_year: Float
  death_day: Float
  death_month: Float
  death_year: Float
  height: Float
  weight: Float
}

"""
order by avg() on columns of table "player"
"""
input player_avg_order_by {
  birth_day: order_by
  birth_month: order_by
  birth_year: order_by
  death_day: order_by
  death_month: order_by
  death_year: order_by
  height: order_by
  weight: order_by
}

"""
columns and relationships of "player_award"
"""
type player_award {
  award_id: String
  league_id: String
  notes: String

  """An object relationship"""
  player: player
  player_id: String
  tie: String
  year: bigint
}

"""
aggregated selection of "player_award"
"""
type player_award_aggregate {
  aggregate: player_award_aggregate_fields
  nodes: [player_award!]!
}

"""
aggregate fields of "player_award"
"""
type player_award_aggregate_fields {
  avg: player_award_avg_fields
  count(columns: [player_award_select_column!], distinct: Boolean): Int
  max: player_award_max_fields
  min: player_award_min_fields
  stddev: player_award_stddev_fields
  stddev_pop: player_award_stddev_pop_fields
  stddev_samp: player_award_stddev_samp_fields
  sum: player_award_sum_fields
  var_pop: player_award_var_pop_fields
  var_samp: player_award_var_samp_fields
  variance: player_award_variance_fields
}

"""
order by aggregate values of table "player_award"
"""
input player_award_aggregate_order_by {
  avg: player_award_avg_order_by
  count: order_by
  max: player_award_max_order_by
  min: player_award_min_order_by
  stddev: player_award_stddev_order_by
  stddev_pop: player_award_stddev_pop_order_by
  stddev_samp: player_award_stddev_samp_order_by
  sum: player_award_sum_order_by
  var_pop: player_award_var_pop_order_by
  var_samp: player_award_var_samp_order_by
  variance: player_award_variance_order_by
}

"""
input type for inserting array relation for remote table "player_award"
"""
input player_award_arr_rel_insert_input {
  data: [player_award_insert_input!]!
}

"""aggregate avg on columns"""
type player_award_avg_fields {
  year: Float
}

"""
order by avg() on columns of table "player_award"
"""
input player_award_avg_order_by {
  year: order_by
}

"""
Boolean expression to filter rows from the table "player_award". All fields are combined with a logical 'AND'.
"""
input player_award_bool_exp {
  _and: [player_award_bool_exp]
  _not: player_award_bool_exp
  _or: [player_award_bool_exp]
  award_id: String_comparison_exp
  league_id: String_comparison_exp
  notes: String_comparison_exp
  player: player_bool_exp
  player_id: String_comparison_exp
  tie: String_comparison_exp
  year: bigint_comparison_exp
}

"""
input type for incrementing integer column in table "player_award"
"""
input player_award_inc_input {
  year: bigint
}

"""
input type for inserting data into table "player_award"
"""
input player_award_insert_input {
  award_id: String
  league_id: String
  notes: String
  player: player_obj_rel_insert_input
  player_id: String
  tie: String
  year: bigint
}

"""aggregate max on columns"""
type player_award_max_fields {
  award_id: String
  league_id: String
  notes: String
  player_id: String
  tie: String
  year: bigint
}

"""
order by max() on columns of table "player_award"
"""
input player_award_max_order_by {
  award_id: order_by
  league_id: order_by
  notes: order_by
  player_id: order_by
  tie: order_by
  year: order_by
}

"""aggregate min on columns"""
type player_award_min_fields {
  award_id: String
  league_id: String
  notes: String
  player_id: String
  tie: String
  year: bigint
}

"""
order by min() on columns of table "player_award"
"""
input player_award_min_order_by {
  award_id: order_by
  league_id: order_by
  notes: order_by
  player_id: order_by
  tie: order_by
  year: order_by
}

"""
response of any mutation on the table "player_award"
"""
type player_award_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [player_award!]!
}

"""
input type for inserting object relation for remote table "player_award"
"""
input player_award_obj_rel_insert_input {
  data: player_award_insert_input!
}

"""
ordering options when selecting data from "player_award"
"""
input player_award_order_by {
  award_id: order_by
  league_id: order_by
  notes: order_by
  player: player_order_by
  player_id: order_by
  tie: order_by
  year: order_by
}

"""
select columns of table "player_award"
"""
enum player_award_select_column {
  """column name"""
  award_id

  """column name"""
  league_id

  """column name"""
  notes

  """column name"""
  player_id

  """column name"""
  tie

  """column name"""
  year
}

"""
input type for updating data in table "player_award"
"""
input player_award_set_input {
  award_id: String
  league_id: String
  notes: String
  player_id: String
  tie: String
  year: bigint
}

"""aggregate stddev on columns"""
type player_award_stddev_fields {
  year: Float
}

"""
order by stddev() on columns of table "player_award"
"""
input player_award_stddev_order_by {
  year: order_by
}

"""aggregate stddev_pop on columns"""
type player_award_stddev_pop_fields {
  year: Float
}

"""
order by stddev_pop() on columns of table "player_award"
"""
input player_award_stddev_pop_order_by {
  year: order_by
}

"""aggregate stddev_samp on columns"""
type player_award_stddev_samp_fields {
  year: Float
}

"""
order by stddev_samp() on columns of table "player_award"
"""
input player_award_stddev_samp_order_by {
  year: order_by
}

"""aggregate sum on columns"""
type player_award_sum_fields {
  year: bigint
}

"""
order by sum() on columns of table "player_award"
"""
input player_award_sum_order_by {
  year: order_by
}

"""aggregate var_pop on columns"""
type player_award_var_pop_fields {
  year: Float
}

"""
order by var_pop() on columns of table "player_award"
"""
input player_award_var_pop_order_by {
  year: order_by
}

"""aggregate var_samp on columns"""
type player_award_var_samp_fields {
  year: Float
}

"""
order by var_samp() on columns of table "player_award"
"""
input player_award_var_samp_order_by {
  year: order_by
}

"""aggregate variance on columns"""
type player_award_variance_fields {
  year: Float
}

"""
order by variance() on columns of table "player_award"
"""
input player_award_variance_order_by {
  year: order_by
}

"""
columns and relationships of "player_award_vote"
"""
type player_award_vote {
  award_id: String
  league_id: String
  player_id: String
  points_max: bigint
  points_won: numeric
  votes_first: numeric
  year: bigint
}

"""
aggregated selection of "player_award_vote"
"""
type player_award_vote_aggregate {
  aggregate: player_award_vote_aggregate_fields
  nodes: [player_award_vote!]!
}

"""
aggregate fields of "player_award_vote"
"""
type player_award_vote_aggregate_fields {
  avg: player_award_vote_avg_fields
  count(columns: [player_award_vote_select_column!], distinct: Boolean): Int
  max: player_award_vote_max_fields
  min: player_award_vote_min_fields
  stddev: player_award_vote_stddev_fields
  stddev_pop: player_award_vote_stddev_pop_fields
  stddev_samp: player_award_vote_stddev_samp_fields
  sum: player_award_vote_sum_fields
  var_pop: player_award_vote_var_pop_fields
  var_samp: player_award_vote_var_samp_fields
  variance: player_award_vote_variance_fields
}

"""
order by aggregate values of table "player_award_vote"
"""
input player_award_vote_aggregate_order_by {
  avg: player_award_vote_avg_order_by
  count: order_by
  max: player_award_vote_max_order_by
  min: player_award_vote_min_order_by
  stddev: player_award_vote_stddev_order_by
  stddev_pop: player_award_vote_stddev_pop_order_by
  stddev_samp: player_award_vote_stddev_samp_order_by
  sum: player_award_vote_sum_order_by
  var_pop: player_award_vote_var_pop_order_by
  var_samp: player_award_vote_var_samp_order_by
  variance: player_award_vote_variance_order_by
}

"""
input type for inserting array relation for remote table "player_award_vote"
"""
input player_award_vote_arr_rel_insert_input {
  data: [player_award_vote_insert_input!]!
}

"""aggregate avg on columns"""
type player_award_vote_avg_fields {
  points_max: Float
  points_won: Float
  votes_first: Float
  year: Float
}

"""
order by avg() on columns of table "player_award_vote"
"""
input player_award_vote_avg_order_by {
  points_max: order_by
  points_won: order_by
  votes_first: order_by
  year: order_by
}

"""
Boolean expression to filter rows from the table "player_award_vote". All fields are combined with a logical 'AND'.
"""
input player_award_vote_bool_exp {
  _and: [player_award_vote_bool_exp]
  _not: player_award_vote_bool_exp
  _or: [player_award_vote_bool_exp]
  award_id: String_comparison_exp
  league_id: String_comparison_exp
  player_id: String_comparison_exp
  points_max: bigint_comparison_exp
  points_won: numeric_comparison_exp
  votes_first: numeric_comparison_exp
  year: bigint_comparison_exp
}

"""
input type for incrementing integer column in table "player_award_vote"
"""
input player_award_vote_inc_input {
  points_max: bigint
  points_won: numeric
  votes_first: numeric
  year: bigint
}

"""
input type for inserting data into table "player_award_vote"
"""
input player_award_vote_insert_input {
  award_id: String
  league_id: String
  player_id: String
  points_max: bigint
  points_won: numeric
  votes_first: numeric
  year: bigint
}

"""aggregate max on columns"""
type player_award_vote_max_fields {
  award_id: String
  league_id: String
  player_id: String
  points_max: bigint
  points_won: numeric
  votes_first: numeric
  year: bigint
}

"""
order by max() on columns of table "player_award_vote"
"""
input player_award_vote_max_order_by {
  award_id: order_by
  league_id: order_by
  player_id: order_by
  points_max: order_by
  points_won: order_by
  votes_first: order_by
  year: order_by
}

"""aggregate min on columns"""
type player_award_vote_min_fields {
  award_id: String
  league_id: String
  player_id: String
  points_max: bigint
  points_won: numeric
  votes_first: numeric
  year: bigint
}

"""
order by min() on columns of table "player_award_vote"
"""
input player_award_vote_min_order_by {
  award_id: order_by
  league_id: order_by
  player_id: order_by
  points_max: order_by
  points_won: order_by
  votes_first: order_by
  year: order_by
}

"""
response of any mutation on the table "player_award_vote"
"""
type player_award_vote_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [player_award_vote!]!
}

"""
input type for inserting object relation for remote table "player_award_vote"
"""
input player_award_vote_obj_rel_insert_input {
  data: player_award_vote_insert_input!
}

"""
ordering options when selecting data from "player_award_vote"
"""
input player_award_vote_order_by {
  award_id: order_by
  league_id: order_by
  player_id: order_by
  points_max: order_by
  points_won: order_by
  votes_first: order_by
  year: order_by
}

"""
select columns of table "player_award_vote"
"""
enum player_award_vote_select_column {
  """column name"""
  award_id

  """column name"""
  league_id

  """column name"""
  player_id

  """column name"""
  points_max

  """column name"""
  points_won

  """column name"""
  votes_first

  """column name"""
  year
}

"""
input type for updating data in table "player_award_vote"
"""
input player_award_vote_set_input {
  award_id: String
  league_id: String
  player_id: String
  points_max: bigint
  points_won: numeric
  votes_first: numeric
  year: bigint
}

"""aggregate stddev on columns"""
type player_award_vote_stddev_fields {
  points_max: Float
  points_won: Float
  votes_first: Float
  year: Float
}

"""
order by stddev() on columns of table "player_award_vote"
"""
input player_award_vote_stddev_order_by {
  points_max: order_by
  points_won: order_by
  votes_first: order_by
  year: order_by
}

"""aggregate stddev_pop on columns"""
type player_award_vote_stddev_pop_fields {
  points_max: Float
  points_won: Float
  votes_first: Float
  year: Float
}

"""
order by stddev_pop() on columns of table "player_award_vote"
"""
input player_award_vote_stddev_pop_order_by {
  points_max: order_by
  points_won: order_by
  votes_first: order_by
  year: order_by
}

"""aggregate stddev_samp on columns"""
type player_award_vote_stddev_samp_fields {
  points_max: Float
  points_won: Float
  votes_first: Float
  year: Float
}

"""
order by stddev_samp() on columns of table "player_award_vote"
"""
input player_award_vote_stddev_samp_order_by {
  points_max: order_by
  points_won: order_by
  votes_first: order_by
  year: order_by
}

"""aggregate sum on columns"""
type player_award_vote_sum_fields {
  points_max: bigint
  points_won: numeric
  votes_first: numeric
  year: bigint
}

"""
order by sum() on columns of table "player_award_vote"
"""
input player_award_vote_sum_order_by {
  points_max: order_by
  points_won: order_by
  votes_first: order_by
  year: order_by
}

"""aggregate var_pop on columns"""
type player_award_vote_var_pop_fields {
  points_max: Float
  points_won: Float
  votes_first: Float
  year: Float
}

"""
order by var_pop() on columns of table "player_award_vote"
"""
input player_award_vote_var_pop_order_by {
  points_max: order_by
  points_won: order_by
  votes_first: order_by
  year: order_by
}

"""aggregate var_samp on columns"""
type player_award_vote_var_samp_fields {
  points_max: Float
  points_won: Float
  votes_first: Float
  year: Float
}

"""
order by var_samp() on columns of table "player_award_vote"
"""
input player_award_vote_var_samp_order_by {
  points_max: order_by
  points_won: order_by
  votes_first: order_by
  year: order_by
}

"""aggregate variance on columns"""
type player_award_vote_variance_fields {
  points_max: Float
  points_won: Float
  votes_first: Float
  year: Float
}

"""
order by variance() on columns of table "player_award_vote"
"""
input player_award_vote_variance_order_by {
  points_max: order_by
  points_won: order_by
  votes_first: order_by
  year: order_by
}

"""
Boolean expression to filter rows from the table "player". All fields are combined with a logical 'AND'.
"""
input player_bool_exp {
  _and: [player_bool_exp]
  _not: player_bool_exp
  _or: [player_bool_exp]
  all_stars: all_star_bool_exp
  bats: String_comparison_exp
  bbref_id: String_comparison_exp
  birth_city: String_comparison_exp
  birth_country: String_comparison_exp
  birth_day: numeric_comparison_exp
  birth_month: numeric_comparison_exp
  birth_state: String_comparison_exp
  birth_year: numeric_comparison_exp
  death_city: String_comparison_exp
  death_country: String_comparison_exp
  death_day: numeric_comparison_exp
  death_month: numeric_comparison_exp
  death_state: String_comparison_exp
  death_year: numeric_comparison_exp
  debut: String_comparison_exp
  final_game: String_comparison_exp
  height: numeric_comparison_exp
  manager_awards: manager_award_bool_exp
  name_first: String_comparison_exp
  name_given: String_comparison_exp
  name_last: String_comparison_exp
  player_awards: player_award_bool_exp
  player_colleges: player_college_bool_exp
  player_id: String_comparison_exp
  retro_id: String_comparison_exp
  throws: String_comparison_exp
  weight: numeric_comparison_exp
}

"""
columns and relationships of "player_college"
"""
type player_college {
  """An object relationship"""
  college: college
  college_id: String!

  """An object relationship"""
  player: player!
  player_id: String!
  year: bigint!
}

"""
aggregated selection of "player_college"
"""
type player_college_aggregate {
  aggregate: player_college_aggregate_fields
  nodes: [player_college!]!
}

"""
aggregate fields of "player_college"
"""
type player_college_aggregate_fields {
  avg: player_college_avg_fields
  count(columns: [player_college_select_column!], distinct: Boolean): Int
  max: player_college_max_fields
  min: player_college_min_fields
  stddev: player_college_stddev_fields
  stddev_pop: player_college_stddev_pop_fields
  stddev_samp: player_college_stddev_samp_fields
  sum: player_college_sum_fields
  var_pop: player_college_var_pop_fields
  var_samp: player_college_var_samp_fields
  variance: player_college_variance_fields
}

"""
order by aggregate values of table "player_college"
"""
input player_college_aggregate_order_by {
  avg: player_college_avg_order_by
  count: order_by
  max: player_college_max_order_by
  min: player_college_min_order_by
  stddev: player_college_stddev_order_by
  stddev_pop: player_college_stddev_pop_order_by
  stddev_samp: player_college_stddev_samp_order_by
  sum: player_college_sum_order_by
  var_pop: player_college_var_pop_order_by
  var_samp: player_college_var_samp_order_by
  variance: player_college_variance_order_by
}

"""
input type for inserting array relation for remote table "player_college"
"""
input player_college_arr_rel_insert_input {
  data: [player_college_insert_input!]!
  on_conflict: player_college_on_conflict
}

"""aggregate avg on columns"""
type player_college_avg_fields {
  year: Float
}

"""
order by avg() on columns of table "player_college"
"""
input player_college_avg_order_by {
  year: order_by
}

"""
Boolean expression to filter rows from the table "player_college". All fields are combined with a logical 'AND'.
"""
input player_college_bool_exp {
  _and: [player_college_bool_exp]
  _not: player_college_bool_exp
  _or: [player_college_bool_exp]
  college: college_bool_exp
  college_id: String_comparison_exp
  player: player_bool_exp
  player_id: String_comparison_exp
  year: bigint_comparison_exp
}

"""
unique or primary key constraints on table "player_college"
"""
enum player_college_constraint {
  """unique or primary key constraint"""
  player_college_pkey
}

"""
input type for incrementing integer column in table "player_college"
"""
input player_college_inc_input {
  year: bigint
}

"""
input type for inserting data into table "player_college"
"""
input player_college_insert_input {
  college: college_obj_rel_insert_input
  college_id: String
  player: player_obj_rel_insert_input
  player_id: String
  year: bigint
}

"""aggregate max on columns"""
type player_college_max_fields {
  college_id: String
  player_id: String
  year: bigint
}

"""
order by max() on columns of table "player_college"
"""
input player_college_max_order_by {
  college_id: order_by
  player_id: order_by
  year: order_by
}

"""aggregate min on columns"""
type player_college_min_fields {
  college_id: String
  player_id: String
  year: bigint
}

"""
order by min() on columns of table "player_college"
"""
input player_college_min_order_by {
  college_id: order_by
  player_id: order_by
  year: order_by
}

"""
response of any mutation on the table "player_college"
"""
type player_college_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [player_college!]!
}

"""
input type for inserting object relation for remote table "player_college"
"""
input player_college_obj_rel_insert_input {
  data: player_college_insert_input!
  on_conflict: player_college_on_conflict
}

"""
on conflict condition type for table "player_college"
"""
input player_college_on_conflict {
  constraint: player_college_constraint!
  update_columns: [player_college_update_column!]!
  where: player_college_bool_exp
}

"""
ordering options when selecting data from "player_college"
"""
input player_college_order_by {
  college: college_order_by
  college_id: order_by
  player: player_order_by
  player_id: order_by
  year: order_by
}

"""
primary key columns input for table: "player_college"
"""
input player_college_pk_columns_input {
  college_id: String!
  player_id: String!
  year: bigint!
}

"""
select columns of table "player_college"
"""
enum player_college_select_column {
  """column name"""
  college_id

  """column name"""
  player_id

  """column name"""
  year
}

"""
input type for updating data in table "player_college"
"""
input player_college_set_input {
  college_id: String
  player_id: String
  year: bigint
}

"""aggregate stddev on columns"""
type player_college_stddev_fields {
  year: Float
}

"""
order by stddev() on columns of table "player_college"
"""
input player_college_stddev_order_by {
  year: order_by
}

"""aggregate stddev_pop on columns"""
type player_college_stddev_pop_fields {
  year: Float
}

"""
order by stddev_pop() on columns of table "player_college"
"""
input player_college_stddev_pop_order_by {
  year: order_by
}

"""aggregate stddev_samp on columns"""
type player_college_stddev_samp_fields {
  year: Float
}

"""
order by stddev_samp() on columns of table "player_college"
"""
input player_college_stddev_samp_order_by {
  year: order_by
}

"""aggregate sum on columns"""
type player_college_sum_fields {
  year: bigint
}

"""
order by sum() on columns of table "player_college"
"""
input player_college_sum_order_by {
  year: order_by
}

"""
update columns of table "player_college"
"""
enum player_college_update_column {
  """column name"""
  college_id

  """column name"""
  player_id

  """column name"""
  year
}

"""aggregate var_pop on columns"""
type player_college_var_pop_fields {
  year: Float
}

"""
order by var_pop() on columns of table "player_college"
"""
input player_college_var_pop_order_by {
  year: order_by
}

"""aggregate var_samp on columns"""
type player_college_var_samp_fields {
  year: Float
}

"""
order by var_samp() on columns of table "player_college"
"""
input player_college_var_samp_order_by {
  year: order_by
}

"""aggregate variance on columns"""
type player_college_variance_fields {
  year: Float
}

"""
order by variance() on columns of table "player_college"
"""
input player_college_variance_order_by {
  year: order_by
}

"""
unique or primary key constraints on table "player"
"""
enum player_constraint {
  """unique or primary key constraint"""
  player_player_id_key
}

"""
input type for incrementing integer column in table "player"
"""
input player_inc_input {
  birth_day: numeric
  birth_month: numeric
  birth_year: numeric
  death_day: numeric
  death_month: numeric
  death_year: numeric
  height: numeric
  weight: numeric
}

"""
input type for inserting data into table "player"
"""
input player_insert_input {
  all_stars: all_star_arr_rel_insert_input
  bats: String
  bbref_id: String
  birth_city: String
  birth_country: String
  birth_day: numeric
  birth_month: numeric
  birth_state: String
  birth_year: numeric
  death_city: String
  death_country: String
  death_day: numeric
  death_month: numeric
  death_state: String
  death_year: numeric
  debut: String
  final_game: String
  height: numeric
  manager_awards: manager_award_arr_rel_insert_input
  name_first: String
  name_given: String
  name_last: String
  player_awards: player_award_arr_rel_insert_input
  player_colleges: player_college_arr_rel_insert_input
  player_id: String
  retro_id: String
  throws: String
  weight: numeric
}

"""aggregate max on columns"""
type player_max_fields {
  bats: String
  bbref_id: String
  birth_city: String
  birth_country: String
  birth_day: numeric
  birth_month: numeric
  birth_state: String
  birth_year: numeric
  death_city: String
  death_country: String
  death_day: numeric
  death_month: numeric
  death_state: String
  death_year: numeric
  debut: String
  final_game: String
  height: numeric
  name_first: String
  name_given: String
  name_last: String
  player_id: String
  retro_id: String
  throws: String
  weight: numeric
}

"""
order by max() on columns of table "player"
"""
input player_max_order_by {
  bats: order_by
  bbref_id: order_by
  birth_city: order_by
  birth_country: order_by
  birth_day: order_by
  birth_month: order_by
  birth_state: order_by
  birth_year: order_by
  death_city: order_by
  death_country: order_by
  death_day: order_by
  death_month: order_by
  death_state: order_by
  death_year: order_by
  debut: order_by
  final_game: order_by
  height: order_by
  name_first: order_by
  name_given: order_by
  name_last: order_by
  player_id: order_by
  retro_id: order_by
  throws: order_by
  weight: order_by
}

"""aggregate min on columns"""
type player_min_fields {
  bats: String
  bbref_id: String
  birth_city: String
  birth_country: String
  birth_day: numeric
  birth_month: numeric
  birth_state: String
  birth_year: numeric
  death_city: String
  death_country: String
  death_day: numeric
  death_month: numeric
  death_state: String
  death_year: numeric
  debut: String
  final_game: String
  height: numeric
  name_first: String
  name_given: String
  name_last: String
  player_id: String
  retro_id: String
  throws: String
  weight: numeric
}

"""
order by min() on columns of table "player"
"""
input player_min_order_by {
  bats: order_by
  bbref_id: order_by
  birth_city: order_by
  birth_country: order_by
  birth_day: order_by
  birth_month: order_by
  birth_state: order_by
  birth_year: order_by
  death_city: order_by
  death_country: order_by
  death_day: order_by
  death_month: order_by
  death_state: order_by
  death_year: order_by
  debut: order_by
  final_game: order_by
  height: order_by
  name_first: order_by
  name_given: order_by
  name_last: order_by
  player_id: order_by
  retro_id: order_by
  throws: order_by
  weight: order_by
}

"""
response of any mutation on the table "player"
"""
type player_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [player!]!
}

"""
input type for inserting object relation for remote table "player"
"""
input player_obj_rel_insert_input {
  data: player_insert_input!
  on_conflict: player_on_conflict
}

"""
on conflict condition type for table "player"
"""
input player_on_conflict {
  constraint: player_constraint!
  update_columns: [player_update_column!]!
  where: player_bool_exp
}

"""
ordering options when selecting data from "player"
"""
input player_order_by {
  all_stars_aggregate: all_star_aggregate_order_by
  bats: order_by
  bbref_id: order_by
  birth_city: order_by
  birth_country: order_by
  birth_day: order_by
  birth_month: order_by
  birth_state: order_by
  birth_year: order_by
  death_city: order_by
  death_country: order_by
  death_day: order_by
  death_month: order_by
  death_state: order_by
  death_year: order_by
  debut: order_by
  final_game: order_by
  height: order_by
  manager_awards_aggregate: manager_award_aggregate_order_by
  name_first: order_by
  name_given: order_by
  name_last: order_by
  player_awards_aggregate: player_award_aggregate_order_by
  player_colleges_aggregate: player_college_aggregate_order_by
  player_id: order_by
  retro_id: order_by
  throws: order_by
  weight: order_by
}

"""
select columns of table "player"
"""
enum player_select_column {
  """column name"""
  bats

  """column name"""
  bbref_id

  """column name"""
  birth_city

  """column name"""
  birth_country

  """column name"""
  birth_day

  """column name"""
  birth_month

  """column name"""
  birth_state

  """column name"""
  birth_year

  """column name"""
  death_city

  """column name"""
  death_country

  """column name"""
  death_day

  """column name"""
  death_month

  """column name"""
  death_state

  """column name"""
  death_year

  """column name"""
  debut

  """column name"""
  final_game

  """column name"""
  height

  """column name"""
  name_first

  """column name"""
  name_given

  """column name"""
  name_last

  """column name"""
  player_id

  """column name"""
  retro_id

  """column name"""
  throws

  """column name"""
  weight
}

"""
input type for updating data in table "player"
"""
input player_set_input {
  bats: String
  bbref_id: String
  birth_city: String
  birth_country: String
  birth_day: numeric
  birth_month: numeric
  birth_state: String
  birth_year: numeric
  death_city: String
  death_country: String
  death_day: numeric
  death_month: numeric
  death_state: String
  death_year: numeric
  debut: String
  final_game: String
  height: numeric
  name_first: String
  name_given: String
  name_last: String
  player_id: String
  retro_id: String
  throws: String
  weight: numeric
}

"""aggregate stddev on columns"""
type player_stddev_fields {
  birth_day: Float
  birth_month: Float
  birth_year: Float
  death_day: Float
  death_month: Float
  death_year: Float
  height: Float
  weight: Float
}

"""
order by stddev() on columns of table "player"
"""
input player_stddev_order_by {
  birth_day: order_by
  birth_month: order_by
  birth_year: order_by
  death_day: order_by
  death_month: order_by
  death_year: order_by
  height: order_by
  weight: order_by
}

"""aggregate stddev_pop on columns"""
type player_stddev_pop_fields {
  birth_day: Float
  birth_month: Float
  birth_year: Float
  death_day: Float
  death_month: Float
  death_year: Float
  height: Float
  weight: Float
}

"""
order by stddev_pop() on columns of table "player"
"""
input player_stddev_pop_order_by {
  birth_day: order_by
  birth_month: order_by
  birth_year: order_by
  death_day: order_by
  death_month: order_by
  death_year: order_by
  height: order_by
  weight: order_by
}

"""aggregate stddev_samp on columns"""
type player_stddev_samp_fields {
  birth_day: Float
  birth_month: Float
  birth_year: Float
  death_day: Float
  death_month: Float
  death_year: Float
  height: Float
  weight: Float
}

"""
order by stddev_samp() on columns of table "player"
"""
input player_stddev_samp_order_by {
  birth_day: order_by
  birth_month: order_by
  birth_year: order_by
  death_day: order_by
  death_month: order_by
  death_year: order_by
  height: order_by
  weight: order_by
}

"""aggregate sum on columns"""
type player_sum_fields {
  birth_day: numeric
  birth_month: numeric
  birth_year: numeric
  death_day: numeric
  death_month: numeric
  death_year: numeric
  height: numeric
  weight: numeric
}

"""
order by sum() on columns of table "player"
"""
input player_sum_order_by {
  birth_day: order_by
  birth_month: order_by
  birth_year: order_by
  death_day: order_by
  death_month: order_by
  death_year: order_by
  height: order_by
  weight: order_by
}

"""
update columns of table "player"
"""
enum player_update_column {
  """column name"""
  bats

  """column name"""
  bbref_id

  """column name"""
  birth_city

  """column name"""
  birth_country

  """column name"""
  birth_day

  """column name"""
  birth_month

  """column name"""
  birth_state

  """column name"""
  birth_year

  """column name"""
  death_city

  """column name"""
  death_country

  """column name"""
  death_day

  """column name"""
  death_month

  """column name"""
  death_state

  """column name"""
  death_year

  """column name"""
  debut

  """column name"""
  final_game

  """column name"""
  height

  """column name"""
  name_first

  """column name"""
  name_given

  """column name"""
  name_last

  """column name"""
  player_id

  """column name"""
  retro_id

  """column name"""
  throws

  """column name"""
  weight
}

"""aggregate var_pop on columns"""
type player_var_pop_fields {
  birth_day: Float
  birth_month: Float
  birth_year: Float
  death_day: Float
  death_month: Float
  death_year: Float
  height: Float
  weight: Float
}

"""
order by var_pop() on columns of table "player"
"""
input player_var_pop_order_by {
  birth_day: order_by
  birth_month: order_by
  birth_year: order_by
  death_day: order_by
  death_month: order_by
  death_year: order_by
  height: order_by
  weight: order_by
}

"""aggregate var_samp on columns"""
type player_var_samp_fields {
  birth_day: Float
  birth_month: Float
  birth_year: Float
  death_day: Float
  death_month: Float
  death_year: Float
  height: Float
  weight: Float
}

"""
order by var_samp() on columns of table "player"
"""
input player_var_samp_order_by {
  birth_day: order_by
  birth_month: order_by
  birth_year: order_by
  death_day: order_by
  death_month: order_by
  death_year: order_by
  height: order_by
  weight: order_by
}

"""aggregate variance on columns"""
type player_variance_fields {
  birth_day: Float
  birth_month: Float
  birth_year: Float
  death_day: Float
  death_month: Float
  death_year: Float
  height: Float
  weight: Float
}

"""
order by variance() on columns of table "player"
"""
input player_variance_order_by {
  birth_day: order_by
  birth_month: order_by
  birth_year: order_by
  death_day: order_by
  death_month: order_by
  death_year: order_by
  height: order_by
  weight: order_by
}

"""
columns and relationships of "postseason"
"""
type postseason {
  league_id_loser: String
  league_id_winner: String
  losses: bigint
  round: String
  team_id_loser: String
  team_id_winner: String

  """An object relationship"""
  team_loser: team

  """An object relationship"""
  team_winner: team
  ties: bigint
  wins: bigint
  year: bigint
}

"""
aggregated selection of "postseason"
"""
type postseason_aggregate {
  aggregate: postseason_aggregate_fields
  nodes: [postseason!]!
}

"""
aggregate fields of "postseason"
"""
type postseason_aggregate_fields {
  avg: postseason_avg_fields
  count(columns: [postseason_select_column!], distinct: Boolean): Int
  max: postseason_max_fields
  min: postseason_min_fields
  stddev: postseason_stddev_fields
  stddev_pop: postseason_stddev_pop_fields
  stddev_samp: postseason_stddev_samp_fields
  sum: postseason_sum_fields
  var_pop: postseason_var_pop_fields
  var_samp: postseason_var_samp_fields
  variance: postseason_variance_fields
}

"""
order by aggregate values of table "postseason"
"""
input postseason_aggregate_order_by {
  avg: postseason_avg_order_by
  count: order_by
  max: postseason_max_order_by
  min: postseason_min_order_by
  stddev: postseason_stddev_order_by
  stddev_pop: postseason_stddev_pop_order_by
  stddev_samp: postseason_stddev_samp_order_by
  sum: postseason_sum_order_by
  var_pop: postseason_var_pop_order_by
  var_samp: postseason_var_samp_order_by
  variance: postseason_variance_order_by
}

"""
input type for inserting array relation for remote table "postseason"
"""
input postseason_arr_rel_insert_input {
  data: [postseason_insert_input!]!
}

"""aggregate avg on columns"""
type postseason_avg_fields {
  losses: Float
  ties: Float
  wins: Float
  year: Float
}

"""
order by avg() on columns of table "postseason"
"""
input postseason_avg_order_by {
  losses: order_by
  ties: order_by
  wins: order_by
  year: order_by
}

"""
Boolean expression to filter rows from the table "postseason". All fields are combined with a logical 'AND'.
"""
input postseason_bool_exp {
  _and: [postseason_bool_exp]
  _not: postseason_bool_exp
  _or: [postseason_bool_exp]
  league_id_loser: String_comparison_exp
  league_id_winner: String_comparison_exp
  losses: bigint_comparison_exp
  round: String_comparison_exp
  team_id_loser: String_comparison_exp
  team_id_winner: String_comparison_exp
  team_loser: team_bool_exp
  team_winner: team_bool_exp
  ties: bigint_comparison_exp
  wins: bigint_comparison_exp
  year: bigint_comparison_exp
}

"""
input type for incrementing integer column in table "postseason"
"""
input postseason_inc_input {
  losses: bigint
  ties: bigint
  wins: bigint
  year: bigint
}

"""
input type for inserting data into table "postseason"
"""
input postseason_insert_input {
  league_id_loser: String
  league_id_winner: String
  losses: bigint
  round: String
  team_id_loser: String
  team_id_winner: String
  team_loser: team_obj_rel_insert_input
  team_winner: team_obj_rel_insert_input
  ties: bigint
  wins: bigint
  year: bigint
}

"""aggregate max on columns"""
type postseason_max_fields {
  league_id_loser: String
  league_id_winner: String
  losses: bigint
  round: String
  team_id_loser: String
  team_id_winner: String
  ties: bigint
  wins: bigint
  year: bigint
}

"""
order by max() on columns of table "postseason"
"""
input postseason_max_order_by {
  league_id_loser: order_by
  league_id_winner: order_by
  losses: order_by
  round: order_by
  team_id_loser: order_by
  team_id_winner: order_by
  ties: order_by
  wins: order_by
  year: order_by
}

"""aggregate min on columns"""
type postseason_min_fields {
  league_id_loser: String
  league_id_winner: String
  losses: bigint
  round: String
  team_id_loser: String
  team_id_winner: String
  ties: bigint
  wins: bigint
  year: bigint
}

"""
order by min() on columns of table "postseason"
"""
input postseason_min_order_by {
  league_id_loser: order_by
  league_id_winner: order_by
  losses: order_by
  round: order_by
  team_id_loser: order_by
  team_id_winner: order_by
  ties: order_by
  wins: order_by
  year: order_by
}

"""
response of any mutation on the table "postseason"
"""
type postseason_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [postseason!]!
}

"""
input type for inserting object relation for remote table "postseason"
"""
input postseason_obj_rel_insert_input {
  data: postseason_insert_input!
}

"""
ordering options when selecting data from "postseason"
"""
input postseason_order_by {
  league_id_loser: order_by
  league_id_winner: order_by
  losses: order_by
  round: order_by
  team_id_loser: order_by
  team_id_winner: order_by
  team_loser: team_order_by
  team_winner: team_order_by
  ties: order_by
  wins: order_by
  year: order_by
}

"""
select columns of table "postseason"
"""
enum postseason_select_column {
  """column name"""
  league_id_loser

  """column name"""
  league_id_winner

  """column name"""
  losses

  """column name"""
  round

  """column name"""
  team_id_loser

  """column name"""
  team_id_winner

  """column name"""
  ties

  """column name"""
  wins

  """column name"""
  year
}

"""
input type for updating data in table "postseason"
"""
input postseason_set_input {
  league_id_loser: String
  league_id_winner: String
  losses: bigint
  round: String
  team_id_loser: String
  team_id_winner: String
  ties: bigint
  wins: bigint
  year: bigint
}

"""aggregate stddev on columns"""
type postseason_stddev_fields {
  losses: Float
  ties: Float
  wins: Float
  year: Float
}

"""
order by stddev() on columns of table "postseason"
"""
input postseason_stddev_order_by {
  losses: order_by
  ties: order_by
  wins: order_by
  year: order_by
}

"""aggregate stddev_pop on columns"""
type postseason_stddev_pop_fields {
  losses: Float
  ties: Float
  wins: Float
  year: Float
}

"""
order by stddev_pop() on columns of table "postseason"
"""
input postseason_stddev_pop_order_by {
  losses: order_by
  ties: order_by
  wins: order_by
  year: order_by
}

"""aggregate stddev_samp on columns"""
type postseason_stddev_samp_fields {
  losses: Float
  ties: Float
  wins: Float
  year: Float
}

"""
order by stddev_samp() on columns of table "postseason"
"""
input postseason_stddev_samp_order_by {
  losses: order_by
  ties: order_by
  wins: order_by
  year: order_by
}

"""aggregate sum on columns"""
type postseason_sum_fields {
  losses: bigint
  ties: bigint
  wins: bigint
  year: bigint
}

"""
order by sum() on columns of table "postseason"
"""
input postseason_sum_order_by {
  losses: order_by
  ties: order_by
  wins: order_by
  year: order_by
}

"""aggregate var_pop on columns"""
type postseason_var_pop_fields {
  losses: Float
  ties: Float
  wins: Float
  year: Float
}

"""
order by var_pop() on columns of table "postseason"
"""
input postseason_var_pop_order_by {
  losses: order_by
  ties: order_by
  wins: order_by
  year: order_by
}

"""aggregate var_samp on columns"""
type postseason_var_samp_fields {
  losses: Float
  ties: Float
  wins: Float
  year: Float
}

"""
order by var_samp() on columns of table "postseason"
"""
input postseason_var_samp_order_by {
  losses: order_by
  ties: order_by
  wins: order_by
  year: order_by
}

"""aggregate variance on columns"""
type postseason_variance_fields {
  losses: Float
  ties: Float
  wins: Float
  year: Float
}

"""
order by variance() on columns of table "postseason"
"""
input postseason_variance_order_by {
  losses: order_by
  ties: order_by
  wins: order_by
  year: order_by
}

"""query root"""
type query_root {
  """
  fetch data from the table: "all_star"
  """
  all_star(
    """distinct select on columns"""
    distinct_on: [all_star_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [all_star_order_by!]

    """filter the rows returned"""
    where: all_star_bool_exp
  ): [all_star!]!

  """
  fetch aggregated fields from the table: "all_star"
  """
  all_star_aggregate(
    """distinct select on columns"""
    distinct_on: [all_star_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [all_star_order_by!]

    """filter the rows returned"""
    where: all_star_bool_exp
  ): all_star_aggregate!

  """
  fetch data from the table: "appearances"
  """
  appearances(
    """distinct select on columns"""
    distinct_on: [appearances_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [appearances_order_by!]

    """filter the rows returned"""
    where: appearances_bool_exp
  ): [appearances!]!

  """
  fetch aggregated fields from the table: "appearances"
  """
  appearances_aggregate(
    """distinct select on columns"""
    distinct_on: [appearances_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [appearances_order_by!]

    """filter the rows returned"""
    where: appearances_bool_exp
  ): appearances_aggregate!

  """
  fetch data from the table: "batting"
  """
  batting(
    """distinct select on columns"""
    distinct_on: [batting_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [batting_order_by!]

    """filter the rows returned"""
    where: batting_bool_exp
  ): [batting!]!

  """
  fetch aggregated fields from the table: "batting"
  """
  batting_aggregate(
    """distinct select on columns"""
    distinct_on: [batting_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [batting_order_by!]

    """filter the rows returned"""
    where: batting_bool_exp
  ): batting_aggregate!

  """
  fetch data from the table: "batting_postseason"
  """
  batting_postseason(
    """distinct select on columns"""
    distinct_on: [batting_postseason_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [batting_postseason_order_by!]

    """filter the rows returned"""
    where: batting_postseason_bool_exp
  ): [batting_postseason!]!

  """
  fetch aggregated fields from the table: "batting_postseason"
  """
  batting_postseason_aggregate(
    """distinct select on columns"""
    distinct_on: [batting_postseason_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [batting_postseason_order_by!]

    """filter the rows returned"""
    where: batting_postseason_bool_exp
  ): batting_postseason_aggregate!

  """
  fetch data from the table: "college"
  """
  college(
    """distinct select on columns"""
    distinct_on: [college_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [college_order_by!]

    """filter the rows returned"""
    where: college_bool_exp
  ): [college!]!

  """
  fetch aggregated fields from the table: "college"
  """
  college_aggregate(
    """distinct select on columns"""
    distinct_on: [college_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [college_order_by!]

    """filter the rows returned"""
    where: college_bool_exp
  ): college_aggregate!

  """fetch data from the table: "college" using primary key columns"""
  college_by_pk(college_id: String!): college

  """
  fetch data from the table: "fielding"
  """
  fielding(
    """distinct select on columns"""
    distinct_on: [fielding_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [fielding_order_by!]

    """filter the rows returned"""
    where: fielding_bool_exp
  ): [fielding!]!

  """
  fetch aggregated fields from the table: "fielding"
  """
  fielding_aggregate(
    """distinct select on columns"""
    distinct_on: [fielding_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [fielding_order_by!]

    """filter the rows returned"""
    where: fielding_bool_exp
  ): fielding_aggregate!

  """
  fetch data from the table: "fielding_outfield"
  """
  fielding_outfield(
    """distinct select on columns"""
    distinct_on: [fielding_outfield_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [fielding_outfield_order_by!]

    """filter the rows returned"""
    where: fielding_outfield_bool_exp
  ): [fielding_outfield!]!

  """
  fetch aggregated fields from the table: "fielding_outfield"
  """
  fielding_outfield_aggregate(
    """distinct select on columns"""
    distinct_on: [fielding_outfield_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [fielding_outfield_order_by!]

    """filter the rows returned"""
    where: fielding_outfield_bool_exp
  ): fielding_outfield_aggregate!

  """
  fetch data from the table: "fielding_postseason"
  """
  fielding_postseason(
    """distinct select on columns"""
    distinct_on: [fielding_postseason_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [fielding_postseason_order_by!]

    """filter the rows returned"""
    where: fielding_postseason_bool_exp
  ): [fielding_postseason!]!

  """
  fetch aggregated fields from the table: "fielding_postseason"
  """
  fielding_postseason_aggregate(
    """distinct select on columns"""
    distinct_on: [fielding_postseason_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [fielding_postseason_order_by!]

    """filter the rows returned"""
    where: fielding_postseason_bool_exp
  ): fielding_postseason_aggregate!

  """
  fetch data from the table: "hall_of_fame"
  """
  hall_of_fame(
    """distinct select on columns"""
    distinct_on: [hall_of_fame_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [hall_of_fame_order_by!]

    """filter the rows returned"""
    where: hall_of_fame_bool_exp
  ): [hall_of_fame!]!

  """
  fetch aggregated fields from the table: "hall_of_fame"
  """
  hall_of_fame_aggregate(
    """distinct select on columns"""
    distinct_on: [hall_of_fame_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [hall_of_fame_order_by!]

    """filter the rows returned"""
    where: hall_of_fame_bool_exp
  ): hall_of_fame_aggregate!

  """
  fetch data from the table: "home_game"
  """
  home_game(
    """distinct select on columns"""
    distinct_on: [home_game_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [home_game_order_by!]

    """filter the rows returned"""
    where: home_game_bool_exp
  ): [home_game!]!

  """
  fetch aggregated fields from the table: "home_game"
  """
  home_game_aggregate(
    """distinct select on columns"""
    distinct_on: [home_game_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [home_game_order_by!]

    """filter the rows returned"""
    where: home_game_bool_exp
  ): home_game_aggregate!

  """
  fetch data from the table: "manager"
  """
  manager(
    """distinct select on columns"""
    distinct_on: [manager_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [manager_order_by!]

    """filter the rows returned"""
    where: manager_bool_exp
  ): [manager!]!

  """
  fetch aggregated fields from the table: "manager"
  """
  manager_aggregate(
    """distinct select on columns"""
    distinct_on: [manager_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [manager_order_by!]

    """filter the rows returned"""
    where: manager_bool_exp
  ): manager_aggregate!

  """
  fetch data from the table: "manager_award"
  """
  manager_award(
    """distinct select on columns"""
    distinct_on: [manager_award_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [manager_award_order_by!]

    """filter the rows returned"""
    where: manager_award_bool_exp
  ): [manager_award!]!

  """
  fetch aggregated fields from the table: "manager_award"
  """
  manager_award_aggregate(
    """distinct select on columns"""
    distinct_on: [manager_award_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [manager_award_order_by!]

    """filter the rows returned"""
    where: manager_award_bool_exp
  ): manager_award_aggregate!

  """
  fetch data from the table: "manager_award_vote"
  """
  manager_award_vote(
    """distinct select on columns"""
    distinct_on: [manager_award_vote_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [manager_award_vote_order_by!]

    """filter the rows returned"""
    where: manager_award_vote_bool_exp
  ): [manager_award_vote!]!

  """
  fetch aggregated fields from the table: "manager_award_vote"
  """
  manager_award_vote_aggregate(
    """distinct select on columns"""
    distinct_on: [manager_award_vote_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [manager_award_vote_order_by!]

    """filter the rows returned"""
    where: manager_award_vote_bool_exp
  ): manager_award_vote_aggregate!

  """
  fetch data from the table: "manager_half"
  """
  manager_half(
    """distinct select on columns"""
    distinct_on: [manager_half_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [manager_half_order_by!]

    """filter the rows returned"""
    where: manager_half_bool_exp
  ): [manager_half!]!

  """
  fetch aggregated fields from the table: "manager_half"
  """
  manager_half_aggregate(
    """distinct select on columns"""
    distinct_on: [manager_half_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [manager_half_order_by!]

    """filter the rows returned"""
    where: manager_half_bool_exp
  ): manager_half_aggregate!

  """
  fetch data from the table: "park"
  """
  park(
    """distinct select on columns"""
    distinct_on: [park_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [park_order_by!]

    """filter the rows returned"""
    where: park_bool_exp
  ): [park!]!

  """
  fetch aggregated fields from the table: "park"
  """
  park_aggregate(
    """distinct select on columns"""
    distinct_on: [park_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [park_order_by!]

    """filter the rows returned"""
    where: park_bool_exp
  ): park_aggregate!

  """
  fetch data from the table: "pitching"
  """
  pitching(
    """distinct select on columns"""
    distinct_on: [pitching_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [pitching_order_by!]

    """filter the rows returned"""
    where: pitching_bool_exp
  ): [pitching!]!

  """
  fetch aggregated fields from the table: "pitching"
  """
  pitching_aggregate(
    """distinct select on columns"""
    distinct_on: [pitching_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [pitching_order_by!]

    """filter the rows returned"""
    where: pitching_bool_exp
  ): pitching_aggregate!

  """
  fetch data from the table: "pitching_postseason"
  """
  pitching_postseason(
    """distinct select on columns"""
    distinct_on: [pitching_postseason_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [pitching_postseason_order_by!]

    """filter the rows returned"""
    where: pitching_postseason_bool_exp
  ): [pitching_postseason!]!

  """
  fetch aggregated fields from the table: "pitching_postseason"
  """
  pitching_postseason_aggregate(
    """distinct select on columns"""
    distinct_on: [pitching_postseason_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [pitching_postseason_order_by!]

    """filter the rows returned"""
    where: pitching_postseason_bool_exp
  ): pitching_postseason_aggregate!

  """
  fetch data from the table: "player"
  """
  player(
    """distinct select on columns"""
    distinct_on: [player_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [player_order_by!]

    """filter the rows returned"""
    where: player_bool_exp
  ): [player!]!

  """
  fetch aggregated fields from the table: "player"
  """
  player_aggregate(
    """distinct select on columns"""
    distinct_on: [player_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [player_order_by!]

    """filter the rows returned"""
    where: player_bool_exp
  ): player_aggregate!

  """
  fetch data from the table: "player_award"
  """
  player_award(
    """distinct select on columns"""
    distinct_on: [player_award_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [player_award_order_by!]

    """filter the rows returned"""
    where: player_award_bool_exp
  ): [player_award!]!

  """
  fetch aggregated fields from the table: "player_award"
  """
  player_award_aggregate(
    """distinct select on columns"""
    distinct_on: [player_award_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [player_award_order_by!]

    """filter the rows returned"""
    where: player_award_bool_exp
  ): player_award_aggregate!

  """
  fetch data from the table: "player_award_vote"
  """
  player_award_vote(
    """distinct select on columns"""
    distinct_on: [player_award_vote_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [player_award_vote_order_by!]

    """filter the rows returned"""
    where: player_award_vote_bool_exp
  ): [player_award_vote!]!

  """
  fetch aggregated fields from the table: "player_award_vote"
  """
  player_award_vote_aggregate(
    """distinct select on columns"""
    distinct_on: [player_award_vote_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [player_award_vote_order_by!]

    """filter the rows returned"""
    where: player_award_vote_bool_exp
  ): player_award_vote_aggregate!

  """
  fetch data from the table: "player_college"
  """
  player_college(
    """distinct select on columns"""
    distinct_on: [player_college_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [player_college_order_by!]

    """filter the rows returned"""
    where: player_college_bool_exp
  ): [player_college!]!

  """
  fetch aggregated fields from the table: "player_college"
  """
  player_college_aggregate(
    """distinct select on columns"""
    distinct_on: [player_college_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [player_college_order_by!]

    """filter the rows returned"""
    where: player_college_bool_exp
  ): player_college_aggregate!

  """fetch data from the table: "player_college" using primary key columns"""
  player_college_by_pk(college_id: String!, player_id: String!, year: bigint!): player_college

  """
  fetch data from the table: "postseason"
  """
  postseason(
    """distinct select on columns"""
    distinct_on: [postseason_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [postseason_order_by!]

    """filter the rows returned"""
    where: postseason_bool_exp
  ): [postseason!]!

  """
  fetch aggregated fields from the table: "postseason"
  """
  postseason_aggregate(
    """distinct select on columns"""
    distinct_on: [postseason_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [postseason_order_by!]

    """filter the rows returned"""
    where: postseason_bool_exp
  ): postseason_aggregate!

  """
  fetch data from the table: "salary"
  """
  salary(
    """distinct select on columns"""
    distinct_on: [salary_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [salary_order_by!]

    """filter the rows returned"""
    where: salary_bool_exp
  ): [salary!]!

  """
  fetch aggregated fields from the table: "salary"
  """
  salary_aggregate(
    """distinct select on columns"""
    distinct_on: [salary_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [salary_order_by!]

    """filter the rows returned"""
    where: salary_bool_exp
  ): salary_aggregate!

  """fetch data from the table: "salary" using primary key columns"""
  salary_by_pk(league_id: String!, player_id: String!, team_id: String!, year: bigint!): salary

  """
  fetch data from the table: "team"
  """
  team(
    """distinct select on columns"""
    distinct_on: [team_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [team_order_by!]

    """filter the rows returned"""
    where: team_bool_exp
  ): [team!]!

  """
  fetch aggregated fields from the table: "team"
  """
  team_aggregate(
    """distinct select on columns"""
    distinct_on: [team_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [team_order_by!]

    """filter the rows returned"""
    where: team_bool_exp
  ): team_aggregate!

  """fetch data from the table: "team" using primary key columns"""
  team_by_pk(team_id: String!, year: bigint!): team

  """
  fetch data from the table: "team_franchise"
  """
  team_franchise(
    """distinct select on columns"""
    distinct_on: [team_franchise_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [team_franchise_order_by!]

    """filter the rows returned"""
    where: team_franchise_bool_exp
  ): [team_franchise!]!

  """
  fetch aggregated fields from the table: "team_franchise"
  """
  team_franchise_aggregate(
    """distinct select on columns"""
    distinct_on: [team_franchise_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [team_franchise_order_by!]

    """filter the rows returned"""
    where: team_franchise_bool_exp
  ): team_franchise_aggregate!

  """fetch data from the table: "team_franchise" using primary key columns"""
  team_franchise_by_pk(franchise_id: String!): team_franchise

  """
  fetch data from the table: "team_half"
  """
  team_half(
    """distinct select on columns"""
    distinct_on: [team_half_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [team_half_order_by!]

    """filter the rows returned"""
    where: team_half_bool_exp
  ): [team_half!]!

  """
  fetch aggregated fields from the table: "team_half"
  """
  team_half_aggregate(
    """distinct select on columns"""
    distinct_on: [team_half_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [team_half_order_by!]

    """filter the rows returned"""
    where: team_half_bool_exp
  ): team_half_aggregate!
}

"""
columns and relationships of "salary"
"""
type salary {
  league_id: String!

  """An object relationship"""
  player: player
  player_id: String!
  salary: bigint

  """An object relationship"""
  team: team
  team_id: String!
  year: bigint!
}

"""
aggregated selection of "salary"
"""
type salary_aggregate {
  aggregate: salary_aggregate_fields
  nodes: [salary!]!
}

"""
aggregate fields of "salary"
"""
type salary_aggregate_fields {
  avg: salary_avg_fields
  count(columns: [salary_select_column!], distinct: Boolean): Int
  max: salary_max_fields
  min: salary_min_fields
  stddev: salary_stddev_fields
  stddev_pop: salary_stddev_pop_fields
  stddev_samp: salary_stddev_samp_fields
  sum: salary_sum_fields
  var_pop: salary_var_pop_fields
  var_samp: salary_var_samp_fields
  variance: salary_variance_fields
}

"""
order by aggregate values of table "salary"
"""
input salary_aggregate_order_by {
  avg: salary_avg_order_by
  count: order_by
  max: salary_max_order_by
  min: salary_min_order_by
  stddev: salary_stddev_order_by
  stddev_pop: salary_stddev_pop_order_by
  stddev_samp: salary_stddev_samp_order_by
  sum: salary_sum_order_by
  var_pop: salary_var_pop_order_by
  var_samp: salary_var_samp_order_by
  variance: salary_variance_order_by
}

"""
input type for inserting array relation for remote table "salary"
"""
input salary_arr_rel_insert_input {
  data: [salary_insert_input!]!
  on_conflict: salary_on_conflict
}

"""aggregate avg on columns"""
type salary_avg_fields {
  salary: Float
  year: Float
}

"""
order by avg() on columns of table "salary"
"""
input salary_avg_order_by {
  salary: order_by
  year: order_by
}

"""
Boolean expression to filter rows from the table "salary". All fields are combined with a logical 'AND'.
"""
input salary_bool_exp {
  _and: [salary_bool_exp]
  _not: salary_bool_exp
  _or: [salary_bool_exp]
  league_id: String_comparison_exp
  player: player_bool_exp
  player_id: String_comparison_exp
  salary: bigint_comparison_exp
  team: team_bool_exp
  team_id: String_comparison_exp
  year: bigint_comparison_exp
}

"""
unique or primary key constraints on table "salary"
"""
enum salary_constraint {
  """unique or primary key constraint"""
  salary_pkey
}

"""
input type for incrementing integer column in table "salary"
"""
input salary_inc_input {
  salary: bigint
  year: bigint
}

"""
input type for inserting data into table "salary"
"""
input salary_insert_input {
  league_id: String
  player: player_obj_rel_insert_input
  player_id: String
  salary: bigint
  team: team_obj_rel_insert_input
  team_id: String
  year: bigint
}

"""aggregate max on columns"""
type salary_max_fields {
  league_id: String
  player_id: String
  salary: bigint
  team_id: String
  year: bigint
}

"""
order by max() on columns of table "salary"
"""
input salary_max_order_by {
  league_id: order_by
  player_id: order_by
  salary: order_by
  team_id: order_by
  year: order_by
}

"""aggregate min on columns"""
type salary_min_fields {
  league_id: String
  player_id: String
  salary: bigint
  team_id: String
  year: bigint
}

"""
order by min() on columns of table "salary"
"""
input salary_min_order_by {
  league_id: order_by
  player_id: order_by
  salary: order_by
  team_id: order_by
  year: order_by
}

"""
response of any mutation on the table "salary"
"""
type salary_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [salary!]!
}

"""
input type for inserting object relation for remote table "salary"
"""
input salary_obj_rel_insert_input {
  data: salary_insert_input!
  on_conflict: salary_on_conflict
}

"""
on conflict condition type for table "salary"
"""
input salary_on_conflict {
  constraint: salary_constraint!
  update_columns: [salary_update_column!]!
  where: salary_bool_exp
}

"""
ordering options when selecting data from "salary"
"""
input salary_order_by {
  league_id: order_by
  player: player_order_by
  player_id: order_by
  salary: order_by
  team: team_order_by
  team_id: order_by
  year: order_by
}

"""
primary key columns input for table: "salary"
"""
input salary_pk_columns_input {
  league_id: String!
  player_id: String!
  team_id: String!
  year: bigint!
}

"""
select columns of table "salary"
"""
enum salary_select_column {
  """column name"""
  league_id

  """column name"""
  player_id

  """column name"""
  salary

  """column name"""
  team_id

  """column name"""
  year
}

"""
input type for updating data in table "salary"
"""
input salary_set_input {
  league_id: String
  player_id: String
  salary: bigint
  team_id: String
  year: bigint
}

"""aggregate stddev on columns"""
type salary_stddev_fields {
  salary: Float
  year: Float
}

"""
order by stddev() on columns of table "salary"
"""
input salary_stddev_order_by {
  salary: order_by
  year: order_by
}

"""aggregate stddev_pop on columns"""
type salary_stddev_pop_fields {
  salary: Float
  year: Float
}

"""
order by stddev_pop() on columns of table "salary"
"""
input salary_stddev_pop_order_by {
  salary: order_by
  year: order_by
}

"""aggregate stddev_samp on columns"""
type salary_stddev_samp_fields {
  salary: Float
  year: Float
}

"""
order by stddev_samp() on columns of table "salary"
"""
input salary_stddev_samp_order_by {
  salary: order_by
  year: order_by
}

"""aggregate sum on columns"""
type salary_sum_fields {
  salary: bigint
  year: bigint
}

"""
order by sum() on columns of table "salary"
"""
input salary_sum_order_by {
  salary: order_by
  year: order_by
}

"""
update columns of table "salary"
"""
enum salary_update_column {
  """column name"""
  league_id

  """column name"""
  player_id

  """column name"""
  salary

  """column name"""
  team_id

  """column name"""
  year
}

"""aggregate var_pop on columns"""
type salary_var_pop_fields {
  salary: Float
  year: Float
}

"""
order by var_pop() on columns of table "salary"
"""
input salary_var_pop_order_by {
  salary: order_by
  year: order_by
}

"""aggregate var_samp on columns"""
type salary_var_samp_fields {
  salary: Float
  year: Float
}

"""
order by var_samp() on columns of table "salary"
"""
input salary_var_samp_order_by {
  salary: order_by
  year: order_by
}

"""aggregate variance on columns"""
type salary_variance_fields {
  salary: Float
  year: Float
}

"""
order by variance() on columns of table "salary"
"""
input salary_variance_order_by {
  salary: order_by
  year: order_by
}

"""
expression to compare columns of type String. All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String
  _ilike: String
  _in: [String!]
  _is_null: Boolean
  _like: String
  _lt: String
  _lte: String
  _neq: String
  _nilike: String
  _nin: [String!]
  _nlike: String
  _nsimilar: String
  _similar: String
}

"""subscription root"""
type subscription_root {
  """
  fetch data from the table: "all_star"
  """
  all_star(
    """distinct select on columns"""
    distinct_on: [all_star_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [all_star_order_by!]

    """filter the rows returned"""
    where: all_star_bool_exp
  ): [all_star!]!

  """
  fetch aggregated fields from the table: "all_star"
  """
  all_star_aggregate(
    """distinct select on columns"""
    distinct_on: [all_star_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [all_star_order_by!]

    """filter the rows returned"""
    where: all_star_bool_exp
  ): all_star_aggregate!

  """
  fetch data from the table: "appearances"
  """
  appearances(
    """distinct select on columns"""
    distinct_on: [appearances_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [appearances_order_by!]

    """filter the rows returned"""
    where: appearances_bool_exp
  ): [appearances!]!

  """
  fetch aggregated fields from the table: "appearances"
  """
  appearances_aggregate(
    """distinct select on columns"""
    distinct_on: [appearances_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [appearances_order_by!]

    """filter the rows returned"""
    where: appearances_bool_exp
  ): appearances_aggregate!

  """
  fetch data from the table: "batting"
  """
  batting(
    """distinct select on columns"""
    distinct_on: [batting_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [batting_order_by!]

    """filter the rows returned"""
    where: batting_bool_exp
  ): [batting!]!

  """
  fetch aggregated fields from the table: "batting"
  """
  batting_aggregate(
    """distinct select on columns"""
    distinct_on: [batting_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [batting_order_by!]

    """filter the rows returned"""
    where: batting_bool_exp
  ): batting_aggregate!

  """
  fetch data from the table: "batting_postseason"
  """
  batting_postseason(
    """distinct select on columns"""
    distinct_on: [batting_postseason_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [batting_postseason_order_by!]

    """filter the rows returned"""
    where: batting_postseason_bool_exp
  ): [batting_postseason!]!

  """
  fetch aggregated fields from the table: "batting_postseason"
  """
  batting_postseason_aggregate(
    """distinct select on columns"""
    distinct_on: [batting_postseason_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [batting_postseason_order_by!]

    """filter the rows returned"""
    where: batting_postseason_bool_exp
  ): batting_postseason_aggregate!

  """
  fetch data from the table: "college"
  """
  college(
    """distinct select on columns"""
    distinct_on: [college_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [college_order_by!]

    """filter the rows returned"""
    where: college_bool_exp
  ): [college!]!

  """
  fetch aggregated fields from the table: "college"
  """
  college_aggregate(
    """distinct select on columns"""
    distinct_on: [college_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [college_order_by!]

    """filter the rows returned"""
    where: college_bool_exp
  ): college_aggregate!

  """fetch data from the table: "college" using primary key columns"""
  college_by_pk(college_id: String!): college

  """
  fetch data from the table: "fielding"
  """
  fielding(
    """distinct select on columns"""
    distinct_on: [fielding_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [fielding_order_by!]

    """filter the rows returned"""
    where: fielding_bool_exp
  ): [fielding!]!

  """
  fetch aggregated fields from the table: "fielding"
  """
  fielding_aggregate(
    """distinct select on columns"""
    distinct_on: [fielding_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [fielding_order_by!]

    """filter the rows returned"""
    where: fielding_bool_exp
  ): fielding_aggregate!

  """
  fetch data from the table: "fielding_outfield"
  """
  fielding_outfield(
    """distinct select on columns"""
    distinct_on: [fielding_outfield_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [fielding_outfield_order_by!]

    """filter the rows returned"""
    where: fielding_outfield_bool_exp
  ): [fielding_outfield!]!

  """
  fetch aggregated fields from the table: "fielding_outfield"
  """
  fielding_outfield_aggregate(
    """distinct select on columns"""
    distinct_on: [fielding_outfield_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [fielding_outfield_order_by!]

    """filter the rows returned"""
    where: fielding_outfield_bool_exp
  ): fielding_outfield_aggregate!

  """
  fetch data from the table: "fielding_postseason"
  """
  fielding_postseason(
    """distinct select on columns"""
    distinct_on: [fielding_postseason_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [fielding_postseason_order_by!]

    """filter the rows returned"""
    where: fielding_postseason_bool_exp
  ): [fielding_postseason!]!

  """
  fetch aggregated fields from the table: "fielding_postseason"
  """
  fielding_postseason_aggregate(
    """distinct select on columns"""
    distinct_on: [fielding_postseason_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [fielding_postseason_order_by!]

    """filter the rows returned"""
    where: fielding_postseason_bool_exp
  ): fielding_postseason_aggregate!

  """
  fetch data from the table: "hall_of_fame"
  """
  hall_of_fame(
    """distinct select on columns"""
    distinct_on: [hall_of_fame_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [hall_of_fame_order_by!]

    """filter the rows returned"""
    where: hall_of_fame_bool_exp
  ): [hall_of_fame!]!

  """
  fetch aggregated fields from the table: "hall_of_fame"
  """
  hall_of_fame_aggregate(
    """distinct select on columns"""
    distinct_on: [hall_of_fame_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [hall_of_fame_order_by!]

    """filter the rows returned"""
    where: hall_of_fame_bool_exp
  ): hall_of_fame_aggregate!

  """
  fetch data from the table: "home_game"
  """
  home_game(
    """distinct select on columns"""
    distinct_on: [home_game_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [home_game_order_by!]

    """filter the rows returned"""
    where: home_game_bool_exp
  ): [home_game!]!

  """
  fetch aggregated fields from the table: "home_game"
  """
  home_game_aggregate(
    """distinct select on columns"""
    distinct_on: [home_game_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [home_game_order_by!]

    """filter the rows returned"""
    where: home_game_bool_exp
  ): home_game_aggregate!

  """
  fetch data from the table: "manager"
  """
  manager(
    """distinct select on columns"""
    distinct_on: [manager_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [manager_order_by!]

    """filter the rows returned"""
    where: manager_bool_exp
  ): [manager!]!

  """
  fetch aggregated fields from the table: "manager"
  """
  manager_aggregate(
    """distinct select on columns"""
    distinct_on: [manager_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [manager_order_by!]

    """filter the rows returned"""
    where: manager_bool_exp
  ): manager_aggregate!

  """
  fetch data from the table: "manager_award"
  """
  manager_award(
    """distinct select on columns"""
    distinct_on: [manager_award_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [manager_award_order_by!]

    """filter the rows returned"""
    where: manager_award_bool_exp
  ): [manager_award!]!

  """
  fetch aggregated fields from the table: "manager_award"
  """
  manager_award_aggregate(
    """distinct select on columns"""
    distinct_on: [manager_award_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [manager_award_order_by!]

    """filter the rows returned"""
    where: manager_award_bool_exp
  ): manager_award_aggregate!

  """
  fetch data from the table: "manager_award_vote"
  """
  manager_award_vote(
    """distinct select on columns"""
    distinct_on: [manager_award_vote_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [manager_award_vote_order_by!]

    """filter the rows returned"""
    where: manager_award_vote_bool_exp
  ): [manager_award_vote!]!

  """
  fetch aggregated fields from the table: "manager_award_vote"
  """
  manager_award_vote_aggregate(
    """distinct select on columns"""
    distinct_on: [manager_award_vote_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [manager_award_vote_order_by!]

    """filter the rows returned"""
    where: manager_award_vote_bool_exp
  ): manager_award_vote_aggregate!

  """
  fetch data from the table: "manager_half"
  """
  manager_half(
    """distinct select on columns"""
    distinct_on: [manager_half_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [manager_half_order_by!]

    """filter the rows returned"""
    where: manager_half_bool_exp
  ): [manager_half!]!

  """
  fetch aggregated fields from the table: "manager_half"
  """
  manager_half_aggregate(
    """distinct select on columns"""
    distinct_on: [manager_half_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [manager_half_order_by!]

    """filter the rows returned"""
    where: manager_half_bool_exp
  ): manager_half_aggregate!

  """
  fetch data from the table: "park"
  """
  park(
    """distinct select on columns"""
    distinct_on: [park_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [park_order_by!]

    """filter the rows returned"""
    where: park_bool_exp
  ): [park!]!

  """
  fetch aggregated fields from the table: "park"
  """
  park_aggregate(
    """distinct select on columns"""
    distinct_on: [park_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [park_order_by!]

    """filter the rows returned"""
    where: park_bool_exp
  ): park_aggregate!

  """
  fetch data from the table: "pitching"
  """
  pitching(
    """distinct select on columns"""
    distinct_on: [pitching_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [pitching_order_by!]

    """filter the rows returned"""
    where: pitching_bool_exp
  ): [pitching!]!

  """
  fetch aggregated fields from the table: "pitching"
  """
  pitching_aggregate(
    """distinct select on columns"""
    distinct_on: [pitching_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [pitching_order_by!]

    """filter the rows returned"""
    where: pitching_bool_exp
  ): pitching_aggregate!

  """
  fetch data from the table: "pitching_postseason"
  """
  pitching_postseason(
    """distinct select on columns"""
    distinct_on: [pitching_postseason_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [pitching_postseason_order_by!]

    """filter the rows returned"""
    where: pitching_postseason_bool_exp
  ): [pitching_postseason!]!

  """
  fetch aggregated fields from the table: "pitching_postseason"
  """
  pitching_postseason_aggregate(
    """distinct select on columns"""
    distinct_on: [pitching_postseason_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [pitching_postseason_order_by!]

    """filter the rows returned"""
    where: pitching_postseason_bool_exp
  ): pitching_postseason_aggregate!

  """
  fetch data from the table: "player"
  """
  player(
    """distinct select on columns"""
    distinct_on: [player_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [player_order_by!]

    """filter the rows returned"""
    where: player_bool_exp
  ): [player!]!

  """
  fetch aggregated fields from the table: "player"
  """
  player_aggregate(
    """distinct select on columns"""
    distinct_on: [player_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [player_order_by!]

    """filter the rows returned"""
    where: player_bool_exp
  ): player_aggregate!

  """
  fetch data from the table: "player_award"
  """
  player_award(
    """distinct select on columns"""
    distinct_on: [player_award_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [player_award_order_by!]

    """filter the rows returned"""
    where: player_award_bool_exp
  ): [player_award!]!

  """
  fetch aggregated fields from the table: "player_award"
  """
  player_award_aggregate(
    """distinct select on columns"""
    distinct_on: [player_award_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [player_award_order_by!]

    """filter the rows returned"""
    where: player_award_bool_exp
  ): player_award_aggregate!

  """
  fetch data from the table: "player_award_vote"
  """
  player_award_vote(
    """distinct select on columns"""
    distinct_on: [player_award_vote_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [player_award_vote_order_by!]

    """filter the rows returned"""
    where: player_award_vote_bool_exp
  ): [player_award_vote!]!

  """
  fetch aggregated fields from the table: "player_award_vote"
  """
  player_award_vote_aggregate(
    """distinct select on columns"""
    distinct_on: [player_award_vote_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [player_award_vote_order_by!]

    """filter the rows returned"""
    where: player_award_vote_bool_exp
  ): player_award_vote_aggregate!

  """
  fetch data from the table: "player_college"
  """
  player_college(
    """distinct select on columns"""
    distinct_on: [player_college_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [player_college_order_by!]

    """filter the rows returned"""
    where: player_college_bool_exp
  ): [player_college!]!

  """
  fetch aggregated fields from the table: "player_college"
  """
  player_college_aggregate(
    """distinct select on columns"""
    distinct_on: [player_college_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [player_college_order_by!]

    """filter the rows returned"""
    where: player_college_bool_exp
  ): player_college_aggregate!

  """fetch data from the table: "player_college" using primary key columns"""
  player_college_by_pk(college_id: String!, player_id: String!, year: bigint!): player_college

  """
  fetch data from the table: "postseason"
  """
  postseason(
    """distinct select on columns"""
    distinct_on: [postseason_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [postseason_order_by!]

    """filter the rows returned"""
    where: postseason_bool_exp
  ): [postseason!]!

  """
  fetch aggregated fields from the table: "postseason"
  """
  postseason_aggregate(
    """distinct select on columns"""
    distinct_on: [postseason_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [postseason_order_by!]

    """filter the rows returned"""
    where: postseason_bool_exp
  ): postseason_aggregate!

  """
  fetch data from the table: "salary"
  """
  salary(
    """distinct select on columns"""
    distinct_on: [salary_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [salary_order_by!]

    """filter the rows returned"""
    where: salary_bool_exp
  ): [salary!]!

  """
  fetch aggregated fields from the table: "salary"
  """
  salary_aggregate(
    """distinct select on columns"""
    distinct_on: [salary_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [salary_order_by!]

    """filter the rows returned"""
    where: salary_bool_exp
  ): salary_aggregate!

  """fetch data from the table: "salary" using primary key columns"""
  salary_by_pk(league_id: String!, player_id: String!, team_id: String!, year: bigint!): salary

  """
  fetch data from the table: "team"
  """
  team(
    """distinct select on columns"""
    distinct_on: [team_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [team_order_by!]

    """filter the rows returned"""
    where: team_bool_exp
  ): [team!]!

  """
  fetch aggregated fields from the table: "team"
  """
  team_aggregate(
    """distinct select on columns"""
    distinct_on: [team_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [team_order_by!]

    """filter the rows returned"""
    where: team_bool_exp
  ): team_aggregate!

  """fetch data from the table: "team" using primary key columns"""
  team_by_pk(team_id: String!, year: bigint!): team

  """
  fetch data from the table: "team_franchise"
  """
  team_franchise(
    """distinct select on columns"""
    distinct_on: [team_franchise_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [team_franchise_order_by!]

    """filter the rows returned"""
    where: team_franchise_bool_exp
  ): [team_franchise!]!

  """
  fetch aggregated fields from the table: "team_franchise"
  """
  team_franchise_aggregate(
    """distinct select on columns"""
    distinct_on: [team_franchise_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [team_franchise_order_by!]

    """filter the rows returned"""
    where: team_franchise_bool_exp
  ): team_franchise_aggregate!

  """fetch data from the table: "team_franchise" using primary key columns"""
  team_franchise_by_pk(franchise_id: String!): team_franchise

  """
  fetch data from the table: "team_half"
  """
  team_half(
    """distinct select on columns"""
    distinct_on: [team_half_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [team_half_order_by!]

    """filter the rows returned"""
    where: team_half_bool_exp
  ): [team_half!]!

  """
  fetch aggregated fields from the table: "team_half"
  """
  team_half_aggregate(
    """distinct select on columns"""
    distinct_on: [team_half_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [team_half_order_by!]

    """filter the rows returned"""
    where: team_half_bool_exp
  ): team_half_aggregate!
}

"""
columns and relationships of "team"
"""
type team {
  ab: bigint
  attendance: numeric
  bb: bigint
  bba: bigint
  bpf: bigint
  cg: bigint
  cs: numeric
  div_id: String
  div_win: String
  double: bigint
  dp: numeric
  e: bigint
  er: bigint
  era: numeric
  fp: numeric
  franchise_id: String
  g: bigint
  ghome: numeric
  h: bigint
  ha: bigint
  hbp: numeric

  """An array relationship"""
  home_games(
    """distinct select on columns"""
    distinct_on: [home_game_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [home_game_order_by!]

    """filter the rows returned"""
    where: home_game_bool_exp
  ): [home_game!]!

  """An aggregated array relationship"""
  home_games_aggregate(
    """distinct select on columns"""
    distinct_on: [home_game_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [home_game_order_by!]

    """filter the rows returned"""
    where: home_game_bool_exp
  ): home_game_aggregate!
  hr: bigint
  hra: bigint
  ipouts: bigint
  l: bigint
  league_id: String
  lg_win: String
  name: String
  park: String

  """An object relationship"""
  postseason_loss: postseason

  """An object relationship"""
  postseason_win: postseason
  ppf: bigint
  r: bigint
  ra: bigint
  rank: bigint

  """An object relationship"""
  salaries: salary
  sb: numeric
  sf: numeric
  sho: bigint
  so: numeric
  soa: bigint
  sv: bigint

  """An object relationship"""
  team_franchise: team_franchise
  team_id: String!
  team_id_br: String
  team_id_lahman45: String
  team_id_retro: String
  triple: bigint
  w: bigint
  wc_win: String
  ws_win: String
  year: bigint!
}

"""
aggregated selection of "team"
"""
type team_aggregate {
  aggregate: team_aggregate_fields
  nodes: [team!]!
}

"""
aggregate fields of "team"
"""
type team_aggregate_fields {
  avg: team_avg_fields
  count(columns: [team_select_column!], distinct: Boolean): Int
  max: team_max_fields
  min: team_min_fields
  stddev: team_stddev_fields
  stddev_pop: team_stddev_pop_fields
  stddev_samp: team_stddev_samp_fields
  sum: team_sum_fields
  var_pop: team_var_pop_fields
  var_samp: team_var_samp_fields
  variance: team_variance_fields
}

"""
order by aggregate values of table "team"
"""
input team_aggregate_order_by {
  avg: team_avg_order_by
  count: order_by
  max: team_max_order_by
  min: team_min_order_by
  stddev: team_stddev_order_by
  stddev_pop: team_stddev_pop_order_by
  stddev_samp: team_stddev_samp_order_by
  sum: team_sum_order_by
  var_pop: team_var_pop_order_by
  var_samp: team_var_samp_order_by
  variance: team_variance_order_by
}

"""
input type for inserting array relation for remote table "team"
"""
input team_arr_rel_insert_input {
  data: [team_insert_input!]!
  on_conflict: team_on_conflict
}

"""aggregate avg on columns"""
type team_avg_fields {
  ab: Float
  attendance: Float
  bb: Float
  bba: Float
  bpf: Float
  cg: Float
  cs: Float
  double: Float
  dp: Float
  e: Float
  er: Float
  era: Float
  fp: Float
  g: Float
  ghome: Float
  h: Float
  ha: Float
  hbp: Float
  hr: Float
  hra: Float
  ipouts: Float
  l: Float
  ppf: Float
  r: Float
  ra: Float
  rank: Float
  sb: Float
  sf: Float
  sho: Float
  so: Float
  soa: Float
  sv: Float
  triple: Float
  w: Float
  year: Float
}

"""
order by avg() on columns of table "team"
"""
input team_avg_order_by {
  ab: order_by
  attendance: order_by
  bb: order_by
  bba: order_by
  bpf: order_by
  cg: order_by
  cs: order_by
  double: order_by
  dp: order_by
  e: order_by
  er: order_by
  era: order_by
  fp: order_by
  g: order_by
  ghome: order_by
  h: order_by
  ha: order_by
  hbp: order_by
  hr: order_by
  hra: order_by
  ipouts: order_by
  l: order_by
  ppf: order_by
  r: order_by
  ra: order_by
  rank: order_by
  sb: order_by
  sf: order_by
  sho: order_by
  so: order_by
  soa: order_by
  sv: order_by
  triple: order_by
  w: order_by
  year: order_by
}

"""
Boolean expression to filter rows from the table "team". All fields are combined with a logical 'AND'.
"""
input team_bool_exp {
  _and: [team_bool_exp]
  _not: team_bool_exp
  _or: [team_bool_exp]
  ab: bigint_comparison_exp
  attendance: numeric_comparison_exp
  bb: bigint_comparison_exp
  bba: bigint_comparison_exp
  bpf: bigint_comparison_exp
  cg: bigint_comparison_exp
  cs: numeric_comparison_exp
  div_id: String_comparison_exp
  div_win: String_comparison_exp
  double: bigint_comparison_exp
  dp: numeric_comparison_exp
  e: bigint_comparison_exp
  er: bigint_comparison_exp
  era: numeric_comparison_exp
  fp: numeric_comparison_exp
  franchise_id: String_comparison_exp
  g: bigint_comparison_exp
  ghome: numeric_comparison_exp
  h: bigint_comparison_exp
  ha: bigint_comparison_exp
  hbp: numeric_comparison_exp
  home_games: home_game_bool_exp
  hr: bigint_comparison_exp
  hra: bigint_comparison_exp
  ipouts: bigint_comparison_exp
  l: bigint_comparison_exp
  league_id: String_comparison_exp
  lg_win: String_comparison_exp
  name: String_comparison_exp
  park: String_comparison_exp
  postseason_loss: postseason_bool_exp
  postseason_win: postseason_bool_exp
  ppf: bigint_comparison_exp
  r: bigint_comparison_exp
  ra: bigint_comparison_exp
  rank: bigint_comparison_exp
  salaries: salary_bool_exp
  sb: numeric_comparison_exp
  sf: numeric_comparison_exp
  sho: bigint_comparison_exp
  so: numeric_comparison_exp
  soa: bigint_comparison_exp
  sv: bigint_comparison_exp
  team_franchise: team_franchise_bool_exp
  team_id: String_comparison_exp
  team_id_br: String_comparison_exp
  team_id_lahman45: String_comparison_exp
  team_id_retro: String_comparison_exp
  triple: bigint_comparison_exp
  w: bigint_comparison_exp
  wc_win: String_comparison_exp
  ws_win: String_comparison_exp
  year: bigint_comparison_exp
}

"""
unique or primary key constraints on table "team"
"""
enum team_constraint {
  """unique or primary key constraint"""
  team_pkey

  """unique or primary key constraint"""
  team_year_team_id_br_key

  """unique or primary key constraint"""
  team_year_team_id_key
}

"""
columns and relationships of "team_franchise"
"""
type team_franchise {
  active: String
  franchise_id: String!
  franchise_name: String
  na_assoc: String

  """An array relationship"""
  teams(
    """distinct select on columns"""
    distinct_on: [team_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [team_order_by!]

    """filter the rows returned"""
    where: team_bool_exp
  ): [team!]!

  """An aggregated array relationship"""
  teams_aggregate(
    """distinct select on columns"""
    distinct_on: [team_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [team_order_by!]

    """filter the rows returned"""
    where: team_bool_exp
  ): team_aggregate!
}

"""
aggregated selection of "team_franchise"
"""
type team_franchise_aggregate {
  aggregate: team_franchise_aggregate_fields
  nodes: [team_franchise!]!
}

"""
aggregate fields of "team_franchise"
"""
type team_franchise_aggregate_fields {
  count(columns: [team_franchise_select_column!], distinct: Boolean): Int
  max: team_franchise_max_fields
  min: team_franchise_min_fields
}

"""
order by aggregate values of table "team_franchise"
"""
input team_franchise_aggregate_order_by {
  count: order_by
  max: team_franchise_max_order_by
  min: team_franchise_min_order_by
}

"""
input type for inserting array relation for remote table "team_franchise"
"""
input team_franchise_arr_rel_insert_input {
  data: [team_franchise_insert_input!]!
  on_conflict: team_franchise_on_conflict
}

"""
Boolean expression to filter rows from the table "team_franchise". All fields are combined with a logical 'AND'.
"""
input team_franchise_bool_exp {
  _and: [team_franchise_bool_exp]
  _not: team_franchise_bool_exp
  _or: [team_franchise_bool_exp]
  active: String_comparison_exp
  franchise_id: String_comparison_exp
  franchise_name: String_comparison_exp
  na_assoc: String_comparison_exp
  teams: team_bool_exp
}

"""
unique or primary key constraints on table "team_franchise"
"""
enum team_franchise_constraint {
  """unique or primary key constraint"""
  team_franchise_franchise_id_key

  """unique or primary key constraint"""
  team_franchise_pkey
}

"""
input type for inserting data into table "team_franchise"
"""
input team_franchise_insert_input {
  active: String
  franchise_id: String
  franchise_name: String
  na_assoc: String
  teams: team_arr_rel_insert_input
}

"""aggregate max on columns"""
type team_franchise_max_fields {
  active: String
  franchise_id: String
  franchise_name: String
  na_assoc: String
}

"""
order by max() on columns of table "team_franchise"
"""
input team_franchise_max_order_by {
  active: order_by
  franchise_id: order_by
  franchise_name: order_by
  na_assoc: order_by
}

"""aggregate min on columns"""
type team_franchise_min_fields {
  active: String
  franchise_id: String
  franchise_name: String
  na_assoc: String
}

"""
order by min() on columns of table "team_franchise"
"""
input team_franchise_min_order_by {
  active: order_by
  franchise_id: order_by
  franchise_name: order_by
  na_assoc: order_by
}

"""
response of any mutation on the table "team_franchise"
"""
type team_franchise_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [team_franchise!]!
}

"""
input type for inserting object relation for remote table "team_franchise"
"""
input team_franchise_obj_rel_insert_input {
  data: team_franchise_insert_input!
  on_conflict: team_franchise_on_conflict
}

"""
on conflict condition type for table "team_franchise"
"""
input team_franchise_on_conflict {
  constraint: team_franchise_constraint!
  update_columns: [team_franchise_update_column!]!
  where: team_franchise_bool_exp
}

"""
ordering options when selecting data from "team_franchise"
"""
input team_franchise_order_by {
  active: order_by
  franchise_id: order_by
  franchise_name: order_by
  na_assoc: order_by
  teams_aggregate: team_aggregate_order_by
}

"""
primary key columns input for table: "team_franchise"
"""
input team_franchise_pk_columns_input {
  franchise_id: String!
}

"""
select columns of table "team_franchise"
"""
enum team_franchise_select_column {
  """column name"""
  active

  """column name"""
  franchise_id

  """column name"""
  franchise_name

  """column name"""
  na_assoc
}

"""
input type for updating data in table "team_franchise"
"""
input team_franchise_set_input {
  active: String
  franchise_id: String
  franchise_name: String
  na_assoc: String
}

"""
update columns of table "team_franchise"
"""
enum team_franchise_update_column {
  """column name"""
  active

  """column name"""
  franchise_id

  """column name"""
  franchise_name

  """column name"""
  na_assoc
}

"""
columns and relationships of "team_half"
"""
type team_half {
  div_id: String
  div_win: String
  g: bigint
  half: bigint
  l: bigint
  league_id: String
  rank: bigint
  team_id: String
  w: bigint
  year: bigint
}

"""
aggregated selection of "team_half"
"""
type team_half_aggregate {
  aggregate: team_half_aggregate_fields
  nodes: [team_half!]!
}

"""
aggregate fields of "team_half"
"""
type team_half_aggregate_fields {
  avg: team_half_avg_fields
  count(columns: [team_half_select_column!], distinct: Boolean): Int
  max: team_half_max_fields
  min: team_half_min_fields
  stddev: team_half_stddev_fields
  stddev_pop: team_half_stddev_pop_fields
  stddev_samp: team_half_stddev_samp_fields
  sum: team_half_sum_fields
  var_pop: team_half_var_pop_fields
  var_samp: team_half_var_samp_fields
  variance: team_half_variance_fields
}

"""
order by aggregate values of table "team_half"
"""
input team_half_aggregate_order_by {
  avg: team_half_avg_order_by
  count: order_by
  max: team_half_max_order_by
  min: team_half_min_order_by
  stddev: team_half_stddev_order_by
  stddev_pop: team_half_stddev_pop_order_by
  stddev_samp: team_half_stddev_samp_order_by
  sum: team_half_sum_order_by
  var_pop: team_half_var_pop_order_by
  var_samp: team_half_var_samp_order_by
  variance: team_half_variance_order_by
}

"""
input type for inserting array relation for remote table "team_half"
"""
input team_half_arr_rel_insert_input {
  data: [team_half_insert_input!]!
}

"""aggregate avg on columns"""
type team_half_avg_fields {
  g: Float
  half: Float
  l: Float
  rank: Float
  w: Float
  year: Float
}

"""
order by avg() on columns of table "team_half"
"""
input team_half_avg_order_by {
  g: order_by
  half: order_by
  l: order_by
  rank: order_by
  w: order_by
  year: order_by
}

"""
Boolean expression to filter rows from the table "team_half". All fields are combined with a logical 'AND'.
"""
input team_half_bool_exp {
  _and: [team_half_bool_exp]
  _not: team_half_bool_exp
  _or: [team_half_bool_exp]
  div_id: String_comparison_exp
  div_win: String_comparison_exp
  g: bigint_comparison_exp
  half: bigint_comparison_exp
  l: bigint_comparison_exp
  league_id: String_comparison_exp
  rank: bigint_comparison_exp
  team_id: String_comparison_exp
  w: bigint_comparison_exp
  year: bigint_comparison_exp
}

"""
input type for incrementing integer column in table "team_half"
"""
input team_half_inc_input {
  g: bigint
  half: bigint
  l: bigint
  rank: bigint
  w: bigint
  year: bigint
}

"""
input type for inserting data into table "team_half"
"""
input team_half_insert_input {
  div_id: String
  div_win: String
  g: bigint
  half: bigint
  l: bigint
  league_id: String
  rank: bigint
  team_id: String
  w: bigint
  year: bigint
}

"""aggregate max on columns"""
type team_half_max_fields {
  div_id: String
  div_win: String
  g: bigint
  half: bigint
  l: bigint
  league_id: String
  rank: bigint
  team_id: String
  w: bigint
  year: bigint
}

"""
order by max() on columns of table "team_half"
"""
input team_half_max_order_by {
  div_id: order_by
  div_win: order_by
  g: order_by
  half: order_by
  l: order_by
  league_id: order_by
  rank: order_by
  team_id: order_by
  w: order_by
  year: order_by
}

"""aggregate min on columns"""
type team_half_min_fields {
  div_id: String
  div_win: String
  g: bigint
  half: bigint
  l: bigint
  league_id: String
  rank: bigint
  team_id: String
  w: bigint
  year: bigint
}

"""
order by min() on columns of table "team_half"
"""
input team_half_min_order_by {
  div_id: order_by
  div_win: order_by
  g: order_by
  half: order_by
  l: order_by
  league_id: order_by
  rank: order_by
  team_id: order_by
  w: order_by
  year: order_by
}

"""
response of any mutation on the table "team_half"
"""
type team_half_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [team_half!]!
}

"""
input type for inserting object relation for remote table "team_half"
"""
input team_half_obj_rel_insert_input {
  data: team_half_insert_input!
}

"""
ordering options when selecting data from "team_half"
"""
input team_half_order_by {
  div_id: order_by
  div_win: order_by
  g: order_by
  half: order_by
  l: order_by
  league_id: order_by
  rank: order_by
  team_id: order_by
  w: order_by
  year: order_by
}

"""
select columns of table "team_half"
"""
enum team_half_select_column {
  """column name"""
  div_id

  """column name"""
  div_win

  """column name"""
  g

  """column name"""
  half

  """column name"""
  l

  """column name"""
  league_id

  """column name"""
  rank

  """column name"""
  team_id

  """column name"""
  w

  """column name"""
  year
}

"""
input type for updating data in table "team_half"
"""
input team_half_set_input {
  div_id: String
  div_win: String
  g: bigint
  half: bigint
  l: bigint
  league_id: String
  rank: bigint
  team_id: String
  w: bigint
  year: bigint
}

"""aggregate stddev on columns"""
type team_half_stddev_fields {
  g: Float
  half: Float
  l: Float
  rank: Float
  w: Float
  year: Float
}

"""
order by stddev() on columns of table "team_half"
"""
input team_half_stddev_order_by {
  g: order_by
  half: order_by
  l: order_by
  rank: order_by
  w: order_by
  year: order_by
}

"""aggregate stddev_pop on columns"""
type team_half_stddev_pop_fields {
  g: Float
  half: Float
  l: Float
  rank: Float
  w: Float
  year: Float
}

"""
order by stddev_pop() on columns of table "team_half"
"""
input team_half_stddev_pop_order_by {
  g: order_by
  half: order_by
  l: order_by
  rank: order_by
  w: order_by
  year: order_by
}

"""aggregate stddev_samp on columns"""
type team_half_stddev_samp_fields {
  g: Float
  half: Float
  l: Float
  rank: Float
  w: Float
  year: Float
}

"""
order by stddev_samp() on columns of table "team_half"
"""
input team_half_stddev_samp_order_by {
  g: order_by
  half: order_by
  l: order_by
  rank: order_by
  w: order_by
  year: order_by
}

"""aggregate sum on columns"""
type team_half_sum_fields {
  g: bigint
  half: bigint
  l: bigint
  rank: bigint
  w: bigint
  year: bigint
}

"""
order by sum() on columns of table "team_half"
"""
input team_half_sum_order_by {
  g: order_by
  half: order_by
  l: order_by
  rank: order_by
  w: order_by
  year: order_by
}

"""aggregate var_pop on columns"""
type team_half_var_pop_fields {
  g: Float
  half: Float
  l: Float
  rank: Float
  w: Float
  year: Float
}

"""
order by var_pop() on columns of table "team_half"
"""
input team_half_var_pop_order_by {
  g: order_by
  half: order_by
  l: order_by
  rank: order_by
  w: order_by
  year: order_by
}

"""aggregate var_samp on columns"""
type team_half_var_samp_fields {
  g: Float
  half: Float
  l: Float
  rank: Float
  w: Float
  year: Float
}

"""
order by var_samp() on columns of table "team_half"
"""
input team_half_var_samp_order_by {
  g: order_by
  half: order_by
  l: order_by
  rank: order_by
  w: order_by
  year: order_by
}

"""aggregate variance on columns"""
type team_half_variance_fields {
  g: Float
  half: Float
  l: Float
  rank: Float
  w: Float
  year: Float
}

"""
order by variance() on columns of table "team_half"
"""
input team_half_variance_order_by {
  g: order_by
  half: order_by
  l: order_by
  rank: order_by
  w: order_by
  year: order_by
}

"""
input type for incrementing integer column in table "team"
"""
input team_inc_input {
  ab: bigint
  attendance: numeric
  bb: bigint
  bba: bigint
  bpf: bigint
  cg: bigint
  cs: numeric
  double: bigint
  dp: numeric
  e: bigint
  er: bigint
  era: numeric
  fp: numeric
  g: bigint
  ghome: numeric
  h: bigint
  ha: bigint
  hbp: numeric
  hr: bigint
  hra: bigint
  ipouts: bigint
  l: bigint
  ppf: bigint
  r: bigint
  ra: bigint
  rank: bigint
  sb: numeric
  sf: numeric
  sho: bigint
  so: numeric
  soa: bigint
  sv: bigint
  triple: bigint
  w: bigint
  year: bigint
}

"""
input type for inserting data into table "team"
"""
input team_insert_input {
  ab: bigint
  attendance: numeric
  bb: bigint
  bba: bigint
  bpf: bigint
  cg: bigint
  cs: numeric
  div_id: String
  div_win: String
  double: bigint
  dp: numeric
  e: bigint
  er: bigint
  era: numeric
  fp: numeric
  franchise_id: String
  g: bigint
  ghome: numeric
  h: bigint
  ha: bigint
  hbp: numeric
  home_games: home_game_arr_rel_insert_input
  hr: bigint
  hra: bigint
  ipouts: bigint
  l: bigint
  league_id: String
  lg_win: String
  name: String
  park: String
  postseason_loss: postseason_obj_rel_insert_input
  postseason_win: postseason_obj_rel_insert_input
  ppf: bigint
  r: bigint
  ra: bigint
  rank: bigint
  salaries: salary_obj_rel_insert_input
  sb: numeric
  sf: numeric
  sho: bigint
  so: numeric
  soa: bigint
  sv: bigint
  team_franchise: team_franchise_obj_rel_insert_input
  team_id: String
  team_id_br: String
  team_id_lahman45: String
  team_id_retro: String
  triple: bigint
  w: bigint
  wc_win: String
  ws_win: String
  year: bigint
}

"""aggregate max on columns"""
type team_max_fields {
  ab: bigint
  attendance: numeric
  bb: bigint
  bba: bigint
  bpf: bigint
  cg: bigint
  cs: numeric
  div_id: String
  div_win: String
  double: bigint
  dp: numeric
  e: bigint
  er: bigint
  era: numeric
  fp: numeric
  franchise_id: String
  g: bigint
  ghome: numeric
  h: bigint
  ha: bigint
  hbp: numeric
  hr: bigint
  hra: bigint
  ipouts: bigint
  l: bigint
  league_id: String
  lg_win: String
  name: String
  park: String
  ppf: bigint
  r: bigint
  ra: bigint
  rank: bigint
  sb: numeric
  sf: numeric
  sho: bigint
  so: numeric
  soa: bigint
  sv: bigint
  team_id: String
  team_id_br: String
  team_id_lahman45: String
  team_id_retro: String
  triple: bigint
  w: bigint
  wc_win: String
  ws_win: String
  year: bigint
}

"""
order by max() on columns of table "team"
"""
input team_max_order_by {
  ab: order_by
  attendance: order_by
  bb: order_by
  bba: order_by
  bpf: order_by
  cg: order_by
  cs: order_by
  div_id: order_by
  div_win: order_by
  double: order_by
  dp: order_by
  e: order_by
  er: order_by
  era: order_by
  fp: order_by
  franchise_id: order_by
  g: order_by
  ghome: order_by
  h: order_by
  ha: order_by
  hbp: order_by
  hr: order_by
  hra: order_by
  ipouts: order_by
  l: order_by
  league_id: order_by
  lg_win: order_by
  name: order_by
  park: order_by
  ppf: order_by
  r: order_by
  ra: order_by
  rank: order_by
  sb: order_by
  sf: order_by
  sho: order_by
  so: order_by
  soa: order_by
  sv: order_by
  team_id: order_by
  team_id_br: order_by
  team_id_lahman45: order_by
  team_id_retro: order_by
  triple: order_by
  w: order_by
  wc_win: order_by
  ws_win: order_by
  year: order_by
}

"""aggregate min on columns"""
type team_min_fields {
  ab: bigint
  attendance: numeric
  bb: bigint
  bba: bigint
  bpf: bigint
  cg: bigint
  cs: numeric
  div_id: String
  div_win: String
  double: bigint
  dp: numeric
  e: bigint
  er: bigint
  era: numeric
  fp: numeric
  franchise_id: String
  g: bigint
  ghome: numeric
  h: bigint
  ha: bigint
  hbp: numeric
  hr: bigint
  hra: bigint
  ipouts: bigint
  l: bigint
  league_id: String
  lg_win: String
  name: String
  park: String
  ppf: bigint
  r: bigint
  ra: bigint
  rank: bigint
  sb: numeric
  sf: numeric
  sho: bigint
  so: numeric
  soa: bigint
  sv: bigint
  team_id: String
  team_id_br: String
  team_id_lahman45: String
  team_id_retro: String
  triple: bigint
  w: bigint
  wc_win: String
  ws_win: String
  year: bigint
}

"""
order by min() on columns of table "team"
"""
input team_min_order_by {
  ab: order_by
  attendance: order_by
  bb: order_by
  bba: order_by
  bpf: order_by
  cg: order_by
  cs: order_by
  div_id: order_by
  div_win: order_by
  double: order_by
  dp: order_by
  e: order_by
  er: order_by
  era: order_by
  fp: order_by
  franchise_id: order_by
  g: order_by
  ghome: order_by
  h: order_by
  ha: order_by
  hbp: order_by
  hr: order_by
  hra: order_by
  ipouts: order_by
  l: order_by
  league_id: order_by
  lg_win: order_by
  name: order_by
  park: order_by
  ppf: order_by
  r: order_by
  ra: order_by
  rank: order_by
  sb: order_by
  sf: order_by
  sho: order_by
  so: order_by
  soa: order_by
  sv: order_by
  team_id: order_by
  team_id_br: order_by
  team_id_lahman45: order_by
  team_id_retro: order_by
  triple: order_by
  w: order_by
  wc_win: order_by
  ws_win: order_by
  year: order_by
}

"""
response of any mutation on the table "team"
"""
type team_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [team!]!
}

"""
input type for inserting object relation for remote table "team"
"""
input team_obj_rel_insert_input {
  data: team_insert_input!
  on_conflict: team_on_conflict
}

"""
on conflict condition type for table "team"
"""
input team_on_conflict {
  constraint: team_constraint!
  update_columns: [team_update_column!]!
  where: team_bool_exp
}

"""
ordering options when selecting data from "team"
"""
input team_order_by {
  ab: order_by
  attendance: order_by
  bb: order_by
  bba: order_by
  bpf: order_by
  cg: order_by
  cs: order_by
  div_id: order_by
  div_win: order_by
  double: order_by
  dp: order_by
  e: order_by
  er: order_by
  era: order_by
  fp: order_by
  franchise_id: order_by
  g: order_by
  ghome: order_by
  h: order_by
  ha: order_by
  hbp: order_by
  home_games_aggregate: home_game_aggregate_order_by
  hr: order_by
  hra: order_by
  ipouts: order_by
  l: order_by
  league_id: order_by
  lg_win: order_by
  name: order_by
  park: order_by
  postseason_loss: postseason_order_by
  postseason_win: postseason_order_by
  ppf: order_by
  r: order_by
  ra: order_by
  rank: order_by
  salaries: salary_order_by
  sb: order_by
  sf: order_by
  sho: order_by
  so: order_by
  soa: order_by
  sv: order_by
  team_franchise: team_franchise_order_by
  team_id: order_by
  team_id_br: order_by
  team_id_lahman45: order_by
  team_id_retro: order_by
  triple: order_by
  w: order_by
  wc_win: order_by
  ws_win: order_by
  year: order_by
}

"""
primary key columns input for table: "team"
"""
input team_pk_columns_input {
  team_id: String!
  year: bigint!
}

"""
select columns of table "team"
"""
enum team_select_column {
  """column name"""
  ab

  """column name"""
  attendance

  """column name"""
  bb

  """column name"""
  bba

  """column name"""
  bpf

  """column name"""
  cg

  """column name"""
  cs

  """column name"""
  div_id

  """column name"""
  div_win

  """column name"""
  double

  """column name"""
  dp

  """column name"""
  e

  """column name"""
  er

  """column name"""
  era

  """column name"""
  fp

  """column name"""
  franchise_id

  """column name"""
  g

  """column name"""
  ghome

  """column name"""
  h

  """column name"""
  ha

  """column name"""
  hbp

  """column name"""
  hr

  """column name"""
  hra

  """column name"""
  ipouts

  """column name"""
  l

  """column name"""
  league_id

  """column name"""
  lg_win

  """column name"""
  name

  """column name"""
  park

  """column name"""
  ppf

  """column name"""
  r

  """column name"""
  ra

  """column name"""
  rank

  """column name"""
  sb

  """column name"""
  sf

  """column name"""
  sho

  """column name"""
  so

  """column name"""
  soa

  """column name"""
  sv

  """column name"""
  team_id

  """column name"""
  team_id_br

  """column name"""
  team_id_lahman45

  """column name"""
  team_id_retro

  """column name"""
  triple

  """column name"""
  w

  """column name"""
  wc_win

  """column name"""
  ws_win

  """column name"""
  year
}

"""
input type for updating data in table "team"
"""
input team_set_input {
  ab: bigint
  attendance: numeric
  bb: bigint
  bba: bigint
  bpf: bigint
  cg: bigint
  cs: numeric
  div_id: String
  div_win: String
  double: bigint
  dp: numeric
  e: bigint
  er: bigint
  era: numeric
  fp: numeric
  franchise_id: String
  g: bigint
  ghome: numeric
  h: bigint
  ha: bigint
  hbp: numeric
  hr: bigint
  hra: bigint
  ipouts: bigint
  l: bigint
  league_id: String
  lg_win: String
  name: String
  park: String
  ppf: bigint
  r: bigint
  ra: bigint
  rank: bigint
  sb: numeric
  sf: numeric
  sho: bigint
  so: numeric
  soa: bigint
  sv: bigint
  team_id: String
  team_id_br: String
  team_id_lahman45: String
  team_id_retro: String
  triple: bigint
  w: bigint
  wc_win: String
  ws_win: String
  year: bigint
}

"""aggregate stddev on columns"""
type team_stddev_fields {
  ab: Float
  attendance: Float
  bb: Float
  bba: Float
  bpf: Float
  cg: Float
  cs: Float
  double: Float
  dp: Float
  e: Float
  er: Float
  era: Float
  fp: Float
  g: Float
  ghome: Float
  h: Float
  ha: Float
  hbp: Float
  hr: Float
  hra: Float
  ipouts: Float
  l: Float
  ppf: Float
  r: Float
  ra: Float
  rank: Float
  sb: Float
  sf: Float
  sho: Float
  so: Float
  soa: Float
  sv: Float
  triple: Float
  w: Float
  year: Float
}

"""
order by stddev() on columns of table "team"
"""
input team_stddev_order_by {
  ab: order_by
  attendance: order_by
  bb: order_by
  bba: order_by
  bpf: order_by
  cg: order_by
  cs: order_by
  double: order_by
  dp: order_by
  e: order_by
  er: order_by
  era: order_by
  fp: order_by
  g: order_by
  ghome: order_by
  h: order_by
  ha: order_by
  hbp: order_by
  hr: order_by
  hra: order_by
  ipouts: order_by
  l: order_by
  ppf: order_by
  r: order_by
  ra: order_by
  rank: order_by
  sb: order_by
  sf: order_by
  sho: order_by
  so: order_by
  soa: order_by
  sv: order_by
  triple: order_by
  w: order_by
  year: order_by
}

"""aggregate stddev_pop on columns"""
type team_stddev_pop_fields {
  ab: Float
  attendance: Float
  bb: Float
  bba: Float
  bpf: Float
  cg: Float
  cs: Float
  double: Float
  dp: Float
  e: Float
  er: Float
  era: Float
  fp: Float
  g: Float
  ghome: Float
  h: Float
  ha: Float
  hbp: Float
  hr: Float
  hra: Float
  ipouts: Float
  l: Float
  ppf: Float
  r: Float
  ra: Float
  rank: Float
  sb: Float
  sf: Float
  sho: Float
  so: Float
  soa: Float
  sv: Float
  triple: Float
  w: Float
  year: Float
}

"""
order by stddev_pop() on columns of table "team"
"""
input team_stddev_pop_order_by {
  ab: order_by
  attendance: order_by
  bb: order_by
  bba: order_by
  bpf: order_by
  cg: order_by
  cs: order_by
  double: order_by
  dp: order_by
  e: order_by
  er: order_by
  era: order_by
  fp: order_by
  g: order_by
  ghome: order_by
  h: order_by
  ha: order_by
  hbp: order_by
  hr: order_by
  hra: order_by
  ipouts: order_by
  l: order_by
  ppf: order_by
  r: order_by
  ra: order_by
  rank: order_by
  sb: order_by
  sf: order_by
  sho: order_by
  so: order_by
  soa: order_by
  sv: order_by
  triple: order_by
  w: order_by
  year: order_by
}

"""aggregate stddev_samp on columns"""
type team_stddev_samp_fields {
  ab: Float
  attendance: Float
  bb: Float
  bba: Float
  bpf: Float
  cg: Float
  cs: Float
  double: Float
  dp: Float
  e: Float
  er: Float
  era: Float
  fp: Float
  g: Float
  ghome: Float
  h: Float
  ha: Float
  hbp: Float
  hr: Float
  hra: Float
  ipouts: Float
  l: Float
  ppf: Float
  r: Float
  ra: Float
  rank: Float
  sb: Float
  sf: Float
  sho: Float
  so: Float
  soa: Float
  sv: Float
  triple: Float
  w: Float
  year: Float
}

"""
order by stddev_samp() on columns of table "team"
"""
input team_stddev_samp_order_by {
  ab: order_by
  attendance: order_by
  bb: order_by
  bba: order_by
  bpf: order_by
  cg: order_by
  cs: order_by
  double: order_by
  dp: order_by
  e: order_by
  er: order_by
  era: order_by
  fp: order_by
  g: order_by
  ghome: order_by
  h: order_by
  ha: order_by
  hbp: order_by
  hr: order_by
  hra: order_by
  ipouts: order_by
  l: order_by
  ppf: order_by
  r: order_by
  ra: order_by
  rank: order_by
  sb: order_by
  sf: order_by
  sho: order_by
  so: order_by
  soa: order_by
  sv: order_by
  triple: order_by
  w: order_by
  year: order_by
}

"""aggregate sum on columns"""
type team_sum_fields {
  ab: bigint
  attendance: numeric
  bb: bigint
  bba: bigint
  bpf: bigint
  cg: bigint
  cs: numeric
  double: bigint
  dp: numeric
  e: bigint
  er: bigint
  era: numeric
  fp: numeric
  g: bigint
  ghome: numeric
  h: bigint
  ha: bigint
  hbp: numeric
  hr: bigint
  hra: bigint
  ipouts: bigint
  l: bigint
  ppf: bigint
  r: bigint
  ra: bigint
  rank: bigint
  sb: numeric
  sf: numeric
  sho: bigint
  so: numeric
  soa: bigint
  sv: bigint
  triple: bigint
  w: bigint
  year: bigint
}

"""
order by sum() on columns of table "team"
"""
input team_sum_order_by {
  ab: order_by
  attendance: order_by
  bb: order_by
  bba: order_by
  bpf: order_by
  cg: order_by
  cs: order_by
  double: order_by
  dp: order_by
  e: order_by
  er: order_by
  era: order_by
  fp: order_by
  g: order_by
  ghome: order_by
  h: order_by
  ha: order_by
  hbp: order_by
  hr: order_by
  hra: order_by
  ipouts: order_by
  l: order_by
  ppf: order_by
  r: order_by
  ra: order_by
  rank: order_by
  sb: order_by
  sf: order_by
  sho: order_by
  so: order_by
  soa: order_by
  sv: order_by
  triple: order_by
  w: order_by
  year: order_by
}

"""
update columns of table "team"
"""
enum team_update_column {
  """column name"""
  ab

  """column name"""
  attendance

  """column name"""
  bb

  """column name"""
  bba

  """column name"""
  bpf

  """column name"""
  cg

  """column name"""
  cs

  """column name"""
  div_id

  """column name"""
  div_win

  """column name"""
  double

  """column name"""
  dp

  """column name"""
  e

  """column name"""
  er

  """column name"""
  era

  """column name"""
  fp

  """column name"""
  franchise_id

  """column name"""
  g

  """column name"""
  ghome

  """column name"""
  h

  """column name"""
  ha

  """column name"""
  hbp

  """column name"""
  hr

  """column name"""
  hra

  """column name"""
  ipouts

  """column name"""
  l

  """column name"""
  league_id

  """column name"""
  lg_win

  """column name"""
  name

  """column name"""
  park

  """column name"""
  ppf

  """column name"""
  r

  """column name"""
  ra

  """column name"""
  rank

  """column name"""
  sb

  """column name"""
  sf

  """column name"""
  sho

  """column name"""
  so

  """column name"""
  soa

  """column name"""
  sv

  """column name"""
  team_id

  """column name"""
  team_id_br

  """column name"""
  team_id_lahman45

  """column name"""
  team_id_retro

  """column name"""
  triple

  """column name"""
  w

  """column name"""
  wc_win

  """column name"""
  ws_win

  """column name"""
  year
}

"""aggregate var_pop on columns"""
type team_var_pop_fields {
  ab: Float
  attendance: Float
  bb: Float
  bba: Float
  bpf: Float
  cg: Float
  cs: Float
  double: Float
  dp: Float
  e: Float
  er: Float
  era: Float
  fp: Float
  g: Float
  ghome: Float
  h: Float
  ha: Float
  hbp: Float
  hr: Float
  hra: Float
  ipouts: Float
  l: Float
  ppf: Float
  r: Float
  ra: Float
  rank: Float
  sb: Float
  sf: Float
  sho: Float
  so: Float
  soa: Float
  sv: Float
  triple: Float
  w: Float
  year: Float
}

"""
order by var_pop() on columns of table "team"
"""
input team_var_pop_order_by {
  ab: order_by
  attendance: order_by
  bb: order_by
  bba: order_by
  bpf: order_by
  cg: order_by
  cs: order_by
  double: order_by
  dp: order_by
  e: order_by
  er: order_by
  era: order_by
  fp: order_by
  g: order_by
  ghome: order_by
  h: order_by
  ha: order_by
  hbp: order_by
  hr: order_by
  hra: order_by
  ipouts: order_by
  l: order_by
  ppf: order_by
  r: order_by
  ra: order_by
  rank: order_by
  sb: order_by
  sf: order_by
  sho: order_by
  so: order_by
  soa: order_by
  sv: order_by
  triple: order_by
  w: order_by
  year: order_by
}

"""aggregate var_samp on columns"""
type team_var_samp_fields {
  ab: Float
  attendance: Float
  bb: Float
  bba: Float
  bpf: Float
  cg: Float
  cs: Float
  double: Float
  dp: Float
  e: Float
  er: Float
  era: Float
  fp: Float
  g: Float
  ghome: Float
  h: Float
  ha: Float
  hbp: Float
  hr: Float
  hra: Float
  ipouts: Float
  l: Float
  ppf: Float
  r: Float
  ra: Float
  rank: Float
  sb: Float
  sf: Float
  sho: Float
  so: Float
  soa: Float
  sv: Float
  triple: Float
  w: Float
  year: Float
}

"""
order by var_samp() on columns of table "team"
"""
input team_var_samp_order_by {
  ab: order_by
  attendance: order_by
  bb: order_by
  bba: order_by
  bpf: order_by
  cg: order_by
  cs: order_by
  double: order_by
  dp: order_by
  e: order_by
  er: order_by
  era: order_by
  fp: order_by
  g: order_by
  ghome: order_by
  h: order_by
  ha: order_by
  hbp: order_by
  hr: order_by
  hra: order_by
  ipouts: order_by
  l: order_by
  ppf: order_by
  r: order_by
  ra: order_by
  rank: order_by
  sb: order_by
  sf: order_by
  sho: order_by
  so: order_by
  soa: order_by
  sv: order_by
  triple: order_by
  w: order_by
  year: order_by
}

"""aggregate variance on columns"""
type team_variance_fields {
  ab: Float
  attendance: Float
  bb: Float
  bba: Float
  bpf: Float
  cg: Float
  cs: Float
  double: Float
  dp: Float
  e: Float
  er: Float
  era: Float
  fp: Float
  g: Float
  ghome: Float
  h: Float
  ha: Float
  hbp: Float
  hr: Float
  hra: Float
  ipouts: Float
  l: Float
  ppf: Float
  r: Float
  ra: Float
  rank: Float
  sb: Float
  sf: Float
  sho: Float
  so: Float
  soa: Float
  sv: Float
  triple: Float
  w: Float
  year: Float
}

"""
order by variance() on columns of table "team"
"""
input team_variance_order_by {
  ab: order_by
  attendance: order_by
  bb: order_by
  bba: order_by
  bpf: order_by
  cg: order_by
  cs: order_by
  double: order_by
  dp: order_by
  e: order_by
  er: order_by
  era: order_by
  fp: order_by
  g: order_by
  ghome: order_by
  h: order_by
  ha: order_by
  hbp: order_by
  hr: order_by
  hra: order_by
  ipouts: order_by
  l: order_by
  ppf: order_by
  r: order_by
  ra: order_by
  rank: order_by
  sb: order_by
  sf: order_by
  sho: order_by
  so: order_by
  soa: order_by
  sv: order_by
  triple: order_by
  w: order_by
  year: order_by
}
