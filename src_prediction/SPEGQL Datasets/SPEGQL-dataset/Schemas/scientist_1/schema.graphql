schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""
Direct the client to resolve this field locally, either from the cache or local resolvers.
"""
directive @client(
  """
  When true, the client will never use the cache for this value. See
  https://www.apollographql.com/docs/react/essentials/local-state/#forcing-resolvers-with-clientalways-true
  """
  always: Boolean
) on FIELD | FRAGMENT_DEFINITION | INLINE_FRAGMENT

"""
Export this locally resolved field as a variable to be used in the remainder of this query. See
https://www.apollographql.com/docs/react/essentials/local-state/#using-client-fields-as-variables
"""
directive @export(
  """The variable name to export this field as."""
  as: String!
) on FIELD

"""
Specify a custom store key for this result. See
https://www.apollographql.com/docs/react/advanced/caching/#the-connection-directive
"""
directive @connection(
  """Specify the store key."""
  key: String!

  """
  An array of query argument names to include in the generated custom store key.
  """
  filter: [String!]
) on FIELD

"""
columns and relationships of "assignedto"
"""
type assignedto {
  project: String

  """An object relationship"""
  projectByProject: projects
  scientist: Int

  """An object relationship"""
  scientistByScientist: scientists
}

"""
aggregated selection of "assignedto"
"""
type assignedto_aggregate {
  aggregate: assignedto_aggregate_fields
  nodes: [assignedto!]!
}

"""
aggregate fields of "assignedto"
"""
type assignedto_aggregate_fields {
  avg: assignedto_avg_fields
  count(columns: [assignedto_select_column!], distinct: Boolean): Int
  max: assignedto_max_fields
  min: assignedto_min_fields
  stddev: assignedto_stddev_fields
  stddev_pop: assignedto_stddev_pop_fields
  stddev_samp: assignedto_stddev_samp_fields
  sum: assignedto_sum_fields
  var_pop: assignedto_var_pop_fields
  var_samp: assignedto_var_samp_fields
  variance: assignedto_variance_fields
}

"""
order by aggregate values of table "assignedto"
"""
input assignedto_aggregate_order_by {
  avg: assignedto_avg_order_by
  count: order_by
  max: assignedto_max_order_by
  min: assignedto_min_order_by
  stddev: assignedto_stddev_order_by
  stddev_pop: assignedto_stddev_pop_order_by
  stddev_samp: assignedto_stddev_samp_order_by
  sum: assignedto_sum_order_by
  var_pop: assignedto_var_pop_order_by
  var_samp: assignedto_var_samp_order_by
  variance: assignedto_variance_order_by
}

"""
input type for inserting array relation for remote table "assignedto"
"""
input assignedto_arr_rel_insert_input {
  data: [assignedto_insert_input!]!
  on_conflict: assignedto_on_conflict
}

"""aggregate avg on columns"""
type assignedto_avg_fields {
  scientist: Float
}

"""
order by avg() on columns of table "assignedto"
"""
input assignedto_avg_order_by {
  scientist: order_by
}

"""
Boolean expression to filter rows from the table "assignedto". All fields are combined with a logical 'AND'.
"""
input assignedto_bool_exp {
  _and: [assignedto_bool_exp]
  _not: assignedto_bool_exp
  _or: [assignedto_bool_exp]
  project: String_comparison_exp
  projectByProject: projects_bool_exp
  scientist: Int_comparison_exp
  scientistByScientist: scientists_bool_exp
}

"""
unique or primary key constraints on table "assignedto"
"""
enum assignedto_constraint {
  """unique or primary key constraint"""
  idx_19617_sqlite_autoindex_assignedto_1
}

"""
input type for incrementing integer column in table "assignedto"
"""
input assignedto_inc_input {
  scientist: Int
}

"""
input type for inserting data into table "assignedto"
"""
input assignedto_insert_input {
  project: String
  projectByProject: projects_obj_rel_insert_input
  scientist: Int
  scientistByScientist: scientists_obj_rel_insert_input
}

"""aggregate max on columns"""
type assignedto_max_fields {
  project: String
  scientist: Int
}

"""
order by max() on columns of table "assignedto"
"""
input assignedto_max_order_by {
  project: order_by
  scientist: order_by
}

"""aggregate min on columns"""
type assignedto_min_fields {
  project: String
  scientist: Int
}

"""
order by min() on columns of table "assignedto"
"""
input assignedto_min_order_by {
  project: order_by
  scientist: order_by
}

"""
response of any mutation on the table "assignedto"
"""
type assignedto_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [assignedto!]!
}

"""
input type for inserting object relation for remote table "assignedto"
"""
input assignedto_obj_rel_insert_input {
  data: assignedto_insert_input!
  on_conflict: assignedto_on_conflict
}

"""
on conflict condition type for table "assignedto"
"""
input assignedto_on_conflict {
  constraint: assignedto_constraint!
  update_columns: [assignedto_update_column!]!
  where: assignedto_bool_exp
}

"""
ordering options when selecting data from "assignedto"
"""
input assignedto_order_by {
  project: order_by
  projectByProject: projects_order_by
  scientist: order_by
  scientistByScientist: scientists_order_by
}

"""
select columns of table "assignedto"
"""
enum assignedto_select_column {
  """column name"""
  project

  """column name"""
  scientist
}

"""
input type for updating data in table "assignedto"
"""
input assignedto_set_input {
  project: String
  scientist: Int
}

"""aggregate stddev on columns"""
type assignedto_stddev_fields {
  scientist: Float
}

"""
order by stddev() on columns of table "assignedto"
"""
input assignedto_stddev_order_by {
  scientist: order_by
}

"""aggregate stddev_pop on columns"""
type assignedto_stddev_pop_fields {
  scientist: Float
}

"""
order by stddev_pop() on columns of table "assignedto"
"""
input assignedto_stddev_pop_order_by {
  scientist: order_by
}

"""aggregate stddev_samp on columns"""
type assignedto_stddev_samp_fields {
  scientist: Float
}

"""
order by stddev_samp() on columns of table "assignedto"
"""
input assignedto_stddev_samp_order_by {
  scientist: order_by
}

"""aggregate sum on columns"""
type assignedto_sum_fields {
  scientist: Int
}

"""
order by sum() on columns of table "assignedto"
"""
input assignedto_sum_order_by {
  scientist: order_by
}

"""
update columns of table "assignedto"
"""
enum assignedto_update_column {
  """column name"""
  project

  """column name"""
  scientist
}

"""aggregate var_pop on columns"""
type assignedto_var_pop_fields {
  scientist: Float
}

"""
order by var_pop() on columns of table "assignedto"
"""
input assignedto_var_pop_order_by {
  scientist: order_by
}

"""aggregate var_samp on columns"""
type assignedto_var_samp_fields {
  scientist: Float
}

"""
order by var_samp() on columns of table "assignedto"
"""
input assignedto_var_samp_order_by {
  scientist: order_by
}

"""aggregate variance on columns"""
type assignedto_variance_fields {
  scientist: Float
}

"""
order by variance() on columns of table "assignedto"
"""
input assignedto_variance_order_by {
  scientist: order_by
}

"""
expression to compare columns of type Int. All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "assignedto"
  """
  delete_assignedto(
    """filter the rows which have to be deleted"""
    where: assignedto_bool_exp!
  ): assignedto_mutation_response

  """
  delete data from the table: "projects"
  """
  delete_projects(
    """filter the rows which have to be deleted"""
    where: projects_bool_exp!
  ): projects_mutation_response

  """
  delete data from the table: "scientists"
  """
  delete_scientists(
    """filter the rows which have to be deleted"""
    where: scientists_bool_exp!
  ): scientists_mutation_response

  """
  insert data into the table: "assignedto"
  """
  insert_assignedto(
    """the rows to be inserted"""
    objects: [assignedto_insert_input!]!

    """on conflict condition"""
    on_conflict: assignedto_on_conflict
  ): assignedto_mutation_response

  """
  insert a single row into the table: "assignedto"
  """
  insert_assignedto_one(
    """the row to be inserted"""
    object: assignedto_insert_input!

    """on conflict condition"""
    on_conflict: assignedto_on_conflict
  ): assignedto

  """
  insert data into the table: "projects"
  """
  insert_projects(
    """the rows to be inserted"""
    objects: [projects_insert_input!]!

    """on conflict condition"""
    on_conflict: projects_on_conflict
  ): projects_mutation_response

  """
  insert a single row into the table: "projects"
  """
  insert_projects_one(
    """the row to be inserted"""
    object: projects_insert_input!

    """on conflict condition"""
    on_conflict: projects_on_conflict
  ): projects

  """
  insert data into the table: "scientists"
  """
  insert_scientists(
    """the rows to be inserted"""
    objects: [scientists_insert_input!]!

    """on conflict condition"""
    on_conflict: scientists_on_conflict
  ): scientists_mutation_response

  """
  insert a single row into the table: "scientists"
  """
  insert_scientists_one(
    """the row to be inserted"""
    object: scientists_insert_input!

    """on conflict condition"""
    on_conflict: scientists_on_conflict
  ): scientists

  """
  update data of the table: "assignedto"
  """
  update_assignedto(
    """increments the integer columns with given value of the filtered values"""
    _inc: assignedto_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: assignedto_set_input

    """filter the rows which have to be updated"""
    where: assignedto_bool_exp!
  ): assignedto_mutation_response

  """
  update data of the table: "projects"
  """
  update_projects(
    """increments the integer columns with given value of the filtered values"""
    _inc: projects_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: projects_set_input

    """filter the rows which have to be updated"""
    where: projects_bool_exp!
  ): projects_mutation_response

  """
  update data of the table: "scientists"
  """
  update_scientists(
    """increments the integer columns with given value of the filtered values"""
    _inc: scientists_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: scientists_set_input

    """filter the rows which have to be updated"""
    where: scientists_bool_exp!
  ): scientists_mutation_response
}

"""column ordering options"""
enum order_by {
  """in the ascending order, nulls last"""
  asc

  """in the ascending order, nulls first"""
  asc_nulls_first

  """in the ascending order, nulls last"""
  asc_nulls_last

  """in the descending order, nulls first"""
  desc

  """in the descending order, nulls first"""
  desc_nulls_first

  """in the descending order, nulls last"""
  desc_nulls_last
}

"""
columns and relationships of "projects"
"""
type projects {
  """An array relationship"""
  assignedtos(
    """distinct select on columns"""
    distinct_on: [assignedto_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [assignedto_order_by!]

    """filter the rows returned"""
    where: assignedto_bool_exp
  ): [assignedto!]!

  """An aggregated array relationship"""
  assignedtos_aggregate(
    """distinct select on columns"""
    distinct_on: [assignedto_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [assignedto_order_by!]

    """filter the rows returned"""
    where: assignedto_bool_exp
  ): assignedto_aggregate!
  code: String
  hours: Int
  name: String
}

"""
aggregated selection of "projects"
"""
type projects_aggregate {
  aggregate: projects_aggregate_fields
  nodes: [projects!]!
}

"""
aggregate fields of "projects"
"""
type projects_aggregate_fields {
  avg: projects_avg_fields
  count(columns: [projects_select_column!], distinct: Boolean): Int
  max: projects_max_fields
  min: projects_min_fields
  stddev: projects_stddev_fields
  stddev_pop: projects_stddev_pop_fields
  stddev_samp: projects_stddev_samp_fields
  sum: projects_sum_fields
  var_pop: projects_var_pop_fields
  var_samp: projects_var_samp_fields
  variance: projects_variance_fields
}

"""
order by aggregate values of table "projects"
"""
input projects_aggregate_order_by {
  avg: projects_avg_order_by
  count: order_by
  max: projects_max_order_by
  min: projects_min_order_by
  stddev: projects_stddev_order_by
  stddev_pop: projects_stddev_pop_order_by
  stddev_samp: projects_stddev_samp_order_by
  sum: projects_sum_order_by
  var_pop: projects_var_pop_order_by
  var_samp: projects_var_samp_order_by
  variance: projects_variance_order_by
}

"""
input type for inserting array relation for remote table "projects"
"""
input projects_arr_rel_insert_input {
  data: [projects_insert_input!]!
  on_conflict: projects_on_conflict
}

"""aggregate avg on columns"""
type projects_avg_fields {
  hours: Float
}

"""
order by avg() on columns of table "projects"
"""
input projects_avg_order_by {
  hours: order_by
}

"""
Boolean expression to filter rows from the table "projects". All fields are combined with a logical 'AND'.
"""
input projects_bool_exp {
  _and: [projects_bool_exp]
  _not: projects_bool_exp
  _or: [projects_bool_exp]
  assignedtos: assignedto_bool_exp
  code: String_comparison_exp
  hours: Int_comparison_exp
  name: String_comparison_exp
}

"""
unique or primary key constraints on table "projects"
"""
enum projects_constraint {
  """unique or primary key constraint"""
  idx_19611_sqlite_autoindex_projects_1
}

"""
input type for incrementing integer column in table "projects"
"""
input projects_inc_input {
  hours: Int
}

"""
input type for inserting data into table "projects"
"""
input projects_insert_input {
  assignedtos: assignedto_arr_rel_insert_input
  code: String
  hours: Int
  name: String
}

"""aggregate max on columns"""
type projects_max_fields {
  code: String
  hours: Int
  name: String
}

"""
order by max() on columns of table "projects"
"""
input projects_max_order_by {
  code: order_by
  hours: order_by
  name: order_by
}

"""aggregate min on columns"""
type projects_min_fields {
  code: String
  hours: Int
  name: String
}

"""
order by min() on columns of table "projects"
"""
input projects_min_order_by {
  code: order_by
  hours: order_by
  name: order_by
}

"""
response of any mutation on the table "projects"
"""
type projects_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [projects!]!
}

"""
input type for inserting object relation for remote table "projects"
"""
input projects_obj_rel_insert_input {
  data: projects_insert_input!
  on_conflict: projects_on_conflict
}

"""
on conflict condition type for table "projects"
"""
input projects_on_conflict {
  constraint: projects_constraint!
  update_columns: [projects_update_column!]!
  where: projects_bool_exp
}

"""
ordering options when selecting data from "projects"
"""
input projects_order_by {
  assignedtos_aggregate: assignedto_aggregate_order_by
  code: order_by
  hours: order_by
  name: order_by
}

"""
select columns of table "projects"
"""
enum projects_select_column {
  """column name"""
  code

  """column name"""
  hours

  """column name"""
  name
}

"""
input type for updating data in table "projects"
"""
input projects_set_input {
  code: String
  hours: Int
  name: String
}

"""aggregate stddev on columns"""
type projects_stddev_fields {
  hours: Float
}

"""
order by stddev() on columns of table "projects"
"""
input projects_stddev_order_by {
  hours: order_by
}

"""aggregate stddev_pop on columns"""
type projects_stddev_pop_fields {
  hours: Float
}

"""
order by stddev_pop() on columns of table "projects"
"""
input projects_stddev_pop_order_by {
  hours: order_by
}

"""aggregate stddev_samp on columns"""
type projects_stddev_samp_fields {
  hours: Float
}

"""
order by stddev_samp() on columns of table "projects"
"""
input projects_stddev_samp_order_by {
  hours: order_by
}

"""aggregate sum on columns"""
type projects_sum_fields {
  hours: Int
}

"""
order by sum() on columns of table "projects"
"""
input projects_sum_order_by {
  hours: order_by
}

"""
update columns of table "projects"
"""
enum projects_update_column {
  """column name"""
  code

  """column name"""
  hours

  """column name"""
  name
}

"""aggregate var_pop on columns"""
type projects_var_pop_fields {
  hours: Float
}

"""
order by var_pop() on columns of table "projects"
"""
input projects_var_pop_order_by {
  hours: order_by
}

"""aggregate var_samp on columns"""
type projects_var_samp_fields {
  hours: Float
}

"""
order by var_samp() on columns of table "projects"
"""
input projects_var_samp_order_by {
  hours: order_by
}

"""aggregate variance on columns"""
type projects_variance_fields {
  hours: Float
}

"""
order by variance() on columns of table "projects"
"""
input projects_variance_order_by {
  hours: order_by
}

"""query root"""
type query_root {
  """
  fetch data from the table: "assignedto"
  """
  assignedto(
    """distinct select on columns"""
    distinct_on: [assignedto_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [assignedto_order_by!]

    """filter the rows returned"""
    where: assignedto_bool_exp
  ): [assignedto!]!

  """
  fetch aggregated fields from the table: "assignedto"
  """
  assignedto_aggregate(
    """distinct select on columns"""
    distinct_on: [assignedto_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [assignedto_order_by!]

    """filter the rows returned"""
    where: assignedto_bool_exp
  ): assignedto_aggregate!

  """
  fetch data from the table: "projects"
  """
  projects(
    """distinct select on columns"""
    distinct_on: [projects_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [projects_order_by!]

    """filter the rows returned"""
    where: projects_bool_exp
  ): [projects!]!

  """
  fetch aggregated fields from the table: "projects"
  """
  projects_aggregate(
    """distinct select on columns"""
    distinct_on: [projects_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [projects_order_by!]

    """filter the rows returned"""
    where: projects_bool_exp
  ): projects_aggregate!

  """
  fetch data from the table: "scientists"
  """
  scientists(
    """distinct select on columns"""
    distinct_on: [scientists_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [scientists_order_by!]

    """filter the rows returned"""
    where: scientists_bool_exp
  ): [scientists!]!

  """
  fetch aggregated fields from the table: "scientists"
  """
  scientists_aggregate(
    """distinct select on columns"""
    distinct_on: [scientists_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [scientists_order_by!]

    """filter the rows returned"""
    where: scientists_bool_exp
  ): scientists_aggregate!
}

"""
columns and relationships of "scientists"
"""
type scientists {
  """An array relationship"""
  assignedtos(
    """distinct select on columns"""
    distinct_on: [assignedto_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [assignedto_order_by!]

    """filter the rows returned"""
    where: assignedto_bool_exp
  ): [assignedto!]!

  """An aggregated array relationship"""
  assignedtos_aggregate(
    """distinct select on columns"""
    distinct_on: [assignedto_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [assignedto_order_by!]

    """filter the rows returned"""
    where: assignedto_bool_exp
  ): assignedto_aggregate!
  name: String
  ssn: Int
}

"""
aggregated selection of "scientists"
"""
type scientists_aggregate {
  aggregate: scientists_aggregate_fields
  nodes: [scientists!]!
}

"""
aggregate fields of "scientists"
"""
type scientists_aggregate_fields {
  avg: scientists_avg_fields
  count(columns: [scientists_select_column!], distinct: Boolean): Int
  max: scientists_max_fields
  min: scientists_min_fields
  stddev: scientists_stddev_fields
  stddev_pop: scientists_stddev_pop_fields
  stddev_samp: scientists_stddev_samp_fields
  sum: scientists_sum_fields
  var_pop: scientists_var_pop_fields
  var_samp: scientists_var_samp_fields
  variance: scientists_variance_fields
}

"""
order by aggregate values of table "scientists"
"""
input scientists_aggregate_order_by {
  avg: scientists_avg_order_by
  count: order_by
  max: scientists_max_order_by
  min: scientists_min_order_by
  stddev: scientists_stddev_order_by
  stddev_pop: scientists_stddev_pop_order_by
  stddev_samp: scientists_stddev_samp_order_by
  sum: scientists_sum_order_by
  var_pop: scientists_var_pop_order_by
  var_samp: scientists_var_samp_order_by
  variance: scientists_variance_order_by
}

"""
input type for inserting array relation for remote table "scientists"
"""
input scientists_arr_rel_insert_input {
  data: [scientists_insert_input!]!
  on_conflict: scientists_on_conflict
}

"""aggregate avg on columns"""
type scientists_avg_fields {
  ssn: Float
}

"""
order by avg() on columns of table "scientists"
"""
input scientists_avg_order_by {
  ssn: order_by
}

"""
Boolean expression to filter rows from the table "scientists". All fields are combined with a logical 'AND'.
"""
input scientists_bool_exp {
  _and: [scientists_bool_exp]
  _not: scientists_bool_exp
  _or: [scientists_bool_exp]
  assignedtos: assignedto_bool_exp
  name: String_comparison_exp
  ssn: Int_comparison_exp
}

"""
unique or primary key constraints on table "scientists"
"""
enum scientists_constraint {
  """unique or primary key constraint"""
  idx_19605_sqlite_autoindex_scientists_1
}

"""
input type for incrementing integer column in table "scientists"
"""
input scientists_inc_input {
  ssn: Int
}

"""
input type for inserting data into table "scientists"
"""
input scientists_insert_input {
  assignedtos: assignedto_arr_rel_insert_input
  name: String
  ssn: Int
}

"""aggregate max on columns"""
type scientists_max_fields {
  name: String
  ssn: Int
}

"""
order by max() on columns of table "scientists"
"""
input scientists_max_order_by {
  name: order_by
  ssn: order_by
}

"""aggregate min on columns"""
type scientists_min_fields {
  name: String
  ssn: Int
}

"""
order by min() on columns of table "scientists"
"""
input scientists_min_order_by {
  name: order_by
  ssn: order_by
}

"""
response of any mutation on the table "scientists"
"""
type scientists_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [scientists!]!
}

"""
input type for inserting object relation for remote table "scientists"
"""
input scientists_obj_rel_insert_input {
  data: scientists_insert_input!
  on_conflict: scientists_on_conflict
}

"""
on conflict condition type for table "scientists"
"""
input scientists_on_conflict {
  constraint: scientists_constraint!
  update_columns: [scientists_update_column!]!
  where: scientists_bool_exp
}

"""
ordering options when selecting data from "scientists"
"""
input scientists_order_by {
  assignedtos_aggregate: assignedto_aggregate_order_by
  name: order_by
  ssn: order_by
}

"""
select columns of table "scientists"
"""
enum scientists_select_column {
  """column name"""
  name

  """column name"""
  ssn
}

"""
input type for updating data in table "scientists"
"""
input scientists_set_input {
  name: String
  ssn: Int
}

"""aggregate stddev on columns"""
type scientists_stddev_fields {
  ssn: Float
}

"""
order by stddev() on columns of table "scientists"
"""
input scientists_stddev_order_by {
  ssn: order_by
}

"""aggregate stddev_pop on columns"""
type scientists_stddev_pop_fields {
  ssn: Float
}

"""
order by stddev_pop() on columns of table "scientists"
"""
input scientists_stddev_pop_order_by {
  ssn: order_by
}

"""aggregate stddev_samp on columns"""
type scientists_stddev_samp_fields {
  ssn: Float
}

"""
order by stddev_samp() on columns of table "scientists"
"""
input scientists_stddev_samp_order_by {
  ssn: order_by
}

"""aggregate sum on columns"""
type scientists_sum_fields {
  ssn: Int
}

"""
order by sum() on columns of table "scientists"
"""
input scientists_sum_order_by {
  ssn: order_by
}

"""
update columns of table "scientists"
"""
enum scientists_update_column {
  """column name"""
  name

  """column name"""
  ssn
}

"""aggregate var_pop on columns"""
type scientists_var_pop_fields {
  ssn: Float
}

"""
order by var_pop() on columns of table "scientists"
"""
input scientists_var_pop_order_by {
  ssn: order_by
}

"""aggregate var_samp on columns"""
type scientists_var_samp_fields {
  ssn: Float
}

"""
order by var_samp() on columns of table "scientists"
"""
input scientists_var_samp_order_by {
  ssn: order_by
}

"""aggregate variance on columns"""
type scientists_variance_fields {
  ssn: Float
}

"""
order by variance() on columns of table "scientists"
"""
input scientists_variance_order_by {
  ssn: order_by
}

"""
expression to compare columns of type String. All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String
  _ilike: String
  _in: [String!]
  _is_null: Boolean
  _like: String
  _lt: String
  _lte: String
  _neq: String
  _nilike: String
  _nin: [String!]
  _nlike: String
  _nsimilar: String
  _similar: String
}

"""subscription root"""
type subscription_root {
  """
  fetch data from the table: "assignedto"
  """
  assignedto(
    """distinct select on columns"""
    distinct_on: [assignedto_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [assignedto_order_by!]

    """filter the rows returned"""
    where: assignedto_bool_exp
  ): [assignedto!]!

  """
  fetch aggregated fields from the table: "assignedto"
  """
  assignedto_aggregate(
    """distinct select on columns"""
    distinct_on: [assignedto_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [assignedto_order_by!]

    """filter the rows returned"""
    where: assignedto_bool_exp
  ): assignedto_aggregate!

  """
  fetch data from the table: "projects"
  """
  projects(
    """distinct select on columns"""
    distinct_on: [projects_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [projects_order_by!]

    """filter the rows returned"""
    where: projects_bool_exp
  ): [projects!]!

  """
  fetch aggregated fields from the table: "projects"
  """
  projects_aggregate(
    """distinct select on columns"""
    distinct_on: [projects_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [projects_order_by!]

    """filter the rows returned"""
    where: projects_bool_exp
  ): projects_aggregate!

  """
  fetch data from the table: "scientists"
  """
  scientists(
    """distinct select on columns"""
    distinct_on: [scientists_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [scientists_order_by!]

    """filter the rows returned"""
    where: scientists_bool_exp
  ): [scientists!]!

  """
  fetch aggregated fields from the table: "scientists"
  """
  scientists_aggregate(
    """distinct select on columns"""
    distinct_on: [scientists_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [scientists_order_by!]

    """filter the rows returned"""
    where: scientists_bool_exp
  ): scientists_aggregate!
}
