schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""
Direct the client to resolve this field locally, either from the cache or local resolvers.
"""
directive @client(
  """
  When true, the client will never use the cache for this value. See
  https://www.apollographql.com/docs/react/essentials/local-state/#forcing-resolvers-with-clientalways-true
  """
  always: Boolean
) on FIELD | FRAGMENT_DEFINITION | INLINE_FRAGMENT

"""
Export this locally resolved field as a variable to be used in the remainder of this query. See
https://www.apollographql.com/docs/react/essentials/local-state/#using-client-fields-as-variables
"""
directive @export(
  """The variable name to export this field as."""
  as: String!
) on FIELD

"""
Specify a custom store key for this result. See
https://www.apollographql.com/docs/react/advanced/caching/#the-connection-directive
"""
directive @connection(
  """Specify the store key."""
  key: String!

  """
  An array of query argument names to include in the generated custom store key.
  """
  filter: [String!]
) on FIELD

scalar bigint

"""
expression to compare columns of type bigint. All fields are combined with logical 'AND'.
"""
input bigint_comparison_exp {
  _eq: bigint
  _gt: bigint
  _gte: bigint
  _in: [bigint!]
  _is_null: Boolean
  _lt: bigint
  _lte: bigint
  _neq: bigint
  _nin: [bigint!]
}

"""
columns and relationships of "dorm"
"""
type dorm {
  dorm_name: String
  dormid: bigint
  gender: String

  """An array relationship"""
  has_amenities(
    """distinct select on columns"""
    distinct_on: [has_amenity_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [has_amenity_order_by!]

    """filter the rows returned"""
    where: has_amenity_bool_exp
  ): [has_amenity!]!

  """An aggregated array relationship"""
  has_amenities_aggregate(
    """distinct select on columns"""
    distinct_on: [has_amenity_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [has_amenity_order_by!]

    """filter the rows returned"""
    where: has_amenity_bool_exp
  ): has_amenity_aggregate!

  """An array relationship"""
  lives_ins(
    """distinct select on columns"""
    distinct_on: [lives_in_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [lives_in_order_by!]

    """filter the rows returned"""
    where: lives_in_bool_exp
  ): [lives_in!]!

  """An aggregated array relationship"""
  lives_ins_aggregate(
    """distinct select on columns"""
    distinct_on: [lives_in_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [lives_in_order_by!]

    """filter the rows returned"""
    where: lives_in_bool_exp
  ): lives_in_aggregate!
  student_capacity: bigint
}

"""
aggregated selection of "dorm"
"""
type dorm_aggregate {
  aggregate: dorm_aggregate_fields
  nodes: [dorm!]!
}

"""
aggregate fields of "dorm"
"""
type dorm_aggregate_fields {
  avg: dorm_avg_fields
  count(columns: [dorm_select_column!], distinct: Boolean): Int
  max: dorm_max_fields
  min: dorm_min_fields
  stddev: dorm_stddev_fields
  stddev_pop: dorm_stddev_pop_fields
  stddev_samp: dorm_stddev_samp_fields
  sum: dorm_sum_fields
  var_pop: dorm_var_pop_fields
  var_samp: dorm_var_samp_fields
  variance: dorm_variance_fields
}

"""
order by aggregate values of table "dorm"
"""
input dorm_aggregate_order_by {
  avg: dorm_avg_order_by
  count: order_by
  max: dorm_max_order_by
  min: dorm_min_order_by
  stddev: dorm_stddev_order_by
  stddev_pop: dorm_stddev_pop_order_by
  stddev_samp: dorm_stddev_samp_order_by
  sum: dorm_sum_order_by
  var_pop: dorm_var_pop_order_by
  var_samp: dorm_var_samp_order_by
  variance: dorm_variance_order_by
}

"""
columns and relationships of "dorm_amenity"
"""
type dorm_amenity {
  amenid: bigint
  amenity_name: String

  """An array relationship"""
  has_amenities(
    """distinct select on columns"""
    distinct_on: [has_amenity_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [has_amenity_order_by!]

    """filter the rows returned"""
    where: has_amenity_bool_exp
  ): [has_amenity!]!

  """An aggregated array relationship"""
  has_amenities_aggregate(
    """distinct select on columns"""
    distinct_on: [has_amenity_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [has_amenity_order_by!]

    """filter the rows returned"""
    where: has_amenity_bool_exp
  ): has_amenity_aggregate!
}

"""
aggregated selection of "dorm_amenity"
"""
type dorm_amenity_aggregate {
  aggregate: dorm_amenity_aggregate_fields
  nodes: [dorm_amenity!]!
}

"""
aggregate fields of "dorm_amenity"
"""
type dorm_amenity_aggregate_fields {
  avg: dorm_amenity_avg_fields
  count(columns: [dorm_amenity_select_column!], distinct: Boolean): Int
  max: dorm_amenity_max_fields
  min: dorm_amenity_min_fields
  stddev: dorm_amenity_stddev_fields
  stddev_pop: dorm_amenity_stddev_pop_fields
  stddev_samp: dorm_amenity_stddev_samp_fields
  sum: dorm_amenity_sum_fields
  var_pop: dorm_amenity_var_pop_fields
  var_samp: dorm_amenity_var_samp_fields
  variance: dorm_amenity_variance_fields
}

"""
order by aggregate values of table "dorm_amenity"
"""
input dorm_amenity_aggregate_order_by {
  avg: dorm_amenity_avg_order_by
  count: order_by
  max: dorm_amenity_max_order_by
  min: dorm_amenity_min_order_by
  stddev: dorm_amenity_stddev_order_by
  stddev_pop: dorm_amenity_stddev_pop_order_by
  stddev_samp: dorm_amenity_stddev_samp_order_by
  sum: dorm_amenity_sum_order_by
  var_pop: dorm_amenity_var_pop_order_by
  var_samp: dorm_amenity_var_samp_order_by
  variance: dorm_amenity_variance_order_by
}

"""
input type for inserting array relation for remote table "dorm_amenity"
"""
input dorm_amenity_arr_rel_insert_input {
  data: [dorm_amenity_insert_input!]!
  on_conflict: dorm_amenity_on_conflict
}

"""aggregate avg on columns"""
type dorm_amenity_avg_fields {
  amenid: Float
}

"""
order by avg() on columns of table "dorm_amenity"
"""
input dorm_amenity_avg_order_by {
  amenid: order_by
}

"""
Boolean expression to filter rows from the table "dorm_amenity". All fields are combined with a logical 'AND'.
"""
input dorm_amenity_bool_exp {
  _and: [dorm_amenity_bool_exp]
  _not: dorm_amenity_bool_exp
  _or: [dorm_amenity_bool_exp]
  amenid: bigint_comparison_exp
  amenity_name: String_comparison_exp
  has_amenities: has_amenity_bool_exp
}

"""
unique or primary key constraints on table "dorm_amenity"
"""
enum dorm_amenity_constraint {
  """unique or primary key constraint"""
  dorm_amenity_amenid_key
}

"""
input type for incrementing integer column in table "dorm_amenity"
"""
input dorm_amenity_inc_input {
  amenid: bigint
}

"""
input type for inserting data into table "dorm_amenity"
"""
input dorm_amenity_insert_input {
  amenid: bigint
  amenity_name: String
  has_amenities: has_amenity_arr_rel_insert_input
}

"""aggregate max on columns"""
type dorm_amenity_max_fields {
  amenid: bigint
  amenity_name: String
}

"""
order by max() on columns of table "dorm_amenity"
"""
input dorm_amenity_max_order_by {
  amenid: order_by
  amenity_name: order_by
}

"""aggregate min on columns"""
type dorm_amenity_min_fields {
  amenid: bigint
  amenity_name: String
}

"""
order by min() on columns of table "dorm_amenity"
"""
input dorm_amenity_min_order_by {
  amenid: order_by
  amenity_name: order_by
}

"""
response of any mutation on the table "dorm_amenity"
"""
type dorm_amenity_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [dorm_amenity!]!
}

"""
input type for inserting object relation for remote table "dorm_amenity"
"""
input dorm_amenity_obj_rel_insert_input {
  data: dorm_amenity_insert_input!
  on_conflict: dorm_amenity_on_conflict
}

"""
on conflict condition type for table "dorm_amenity"
"""
input dorm_amenity_on_conflict {
  constraint: dorm_amenity_constraint!
  update_columns: [dorm_amenity_update_column!]!
  where: dorm_amenity_bool_exp
}

"""
ordering options when selecting data from "dorm_amenity"
"""
input dorm_amenity_order_by {
  amenid: order_by
  amenity_name: order_by
  has_amenities_aggregate: has_amenity_aggregate_order_by
}

"""
select columns of table "dorm_amenity"
"""
enum dorm_amenity_select_column {
  """column name"""
  amenid

  """column name"""
  amenity_name
}

"""
input type for updating data in table "dorm_amenity"
"""
input dorm_amenity_set_input {
  amenid: bigint
  amenity_name: String
}

"""aggregate stddev on columns"""
type dorm_amenity_stddev_fields {
  amenid: Float
}

"""
order by stddev() on columns of table "dorm_amenity"
"""
input dorm_amenity_stddev_order_by {
  amenid: order_by
}

"""aggregate stddev_pop on columns"""
type dorm_amenity_stddev_pop_fields {
  amenid: Float
}

"""
order by stddev_pop() on columns of table "dorm_amenity"
"""
input dorm_amenity_stddev_pop_order_by {
  amenid: order_by
}

"""aggregate stddev_samp on columns"""
type dorm_amenity_stddev_samp_fields {
  amenid: Float
}

"""
order by stddev_samp() on columns of table "dorm_amenity"
"""
input dorm_amenity_stddev_samp_order_by {
  amenid: order_by
}

"""aggregate sum on columns"""
type dorm_amenity_sum_fields {
  amenid: bigint
}

"""
order by sum() on columns of table "dorm_amenity"
"""
input dorm_amenity_sum_order_by {
  amenid: order_by
}

"""
update columns of table "dorm_amenity"
"""
enum dorm_amenity_update_column {
  """column name"""
  amenid

  """column name"""
  amenity_name
}

"""aggregate var_pop on columns"""
type dorm_amenity_var_pop_fields {
  amenid: Float
}

"""
order by var_pop() on columns of table "dorm_amenity"
"""
input dorm_amenity_var_pop_order_by {
  amenid: order_by
}

"""aggregate var_samp on columns"""
type dorm_amenity_var_samp_fields {
  amenid: Float
}

"""
order by var_samp() on columns of table "dorm_amenity"
"""
input dorm_amenity_var_samp_order_by {
  amenid: order_by
}

"""aggregate variance on columns"""
type dorm_amenity_variance_fields {
  amenid: Float
}

"""
order by variance() on columns of table "dorm_amenity"
"""
input dorm_amenity_variance_order_by {
  amenid: order_by
}

"""
input type for inserting array relation for remote table "dorm"
"""
input dorm_arr_rel_insert_input {
  data: [dorm_insert_input!]!
  on_conflict: dorm_on_conflict
}

"""aggregate avg on columns"""
type dorm_avg_fields {
  dormid: Float
  student_capacity: Float
}

"""
order by avg() on columns of table "dorm"
"""
input dorm_avg_order_by {
  dormid: order_by
  student_capacity: order_by
}

"""
Boolean expression to filter rows from the table "dorm". All fields are combined with a logical 'AND'.
"""
input dorm_bool_exp {
  _and: [dorm_bool_exp]
  _not: dorm_bool_exp
  _or: [dorm_bool_exp]
  dorm_name: String_comparison_exp
  dormid: bigint_comparison_exp
  gender: String_comparison_exp
  has_amenities: has_amenity_bool_exp
  lives_ins: lives_in_bool_exp
  student_capacity: bigint_comparison_exp
}

"""
unique or primary key constraints on table "dorm"
"""
enum dorm_constraint {
  """unique or primary key constraint"""
  dorm_dormid_key
}

"""
input type for incrementing integer column in table "dorm"
"""
input dorm_inc_input {
  dormid: bigint
  student_capacity: bigint
}

"""
input type for inserting data into table "dorm"
"""
input dorm_insert_input {
  dorm_name: String
  dormid: bigint
  gender: String
  has_amenities: has_amenity_arr_rel_insert_input
  lives_ins: lives_in_arr_rel_insert_input
  student_capacity: bigint
}

"""aggregate max on columns"""
type dorm_max_fields {
  dorm_name: String
  dormid: bigint
  gender: String
  student_capacity: bigint
}

"""
order by max() on columns of table "dorm"
"""
input dorm_max_order_by {
  dorm_name: order_by
  dormid: order_by
  gender: order_by
  student_capacity: order_by
}

"""aggregate min on columns"""
type dorm_min_fields {
  dorm_name: String
  dormid: bigint
  gender: String
  student_capacity: bigint
}

"""
order by min() on columns of table "dorm"
"""
input dorm_min_order_by {
  dorm_name: order_by
  dormid: order_by
  gender: order_by
  student_capacity: order_by
}

"""
response of any mutation on the table "dorm"
"""
type dorm_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [dorm!]!
}

"""
input type for inserting object relation for remote table "dorm"
"""
input dorm_obj_rel_insert_input {
  data: dorm_insert_input!
  on_conflict: dorm_on_conflict
}

"""
on conflict condition type for table "dorm"
"""
input dorm_on_conflict {
  constraint: dorm_constraint!
  update_columns: [dorm_update_column!]!
  where: dorm_bool_exp
}

"""
ordering options when selecting data from "dorm"
"""
input dorm_order_by {
  dorm_name: order_by
  dormid: order_by
  gender: order_by
  has_amenities_aggregate: has_amenity_aggregate_order_by
  lives_ins_aggregate: lives_in_aggregate_order_by
  student_capacity: order_by
}

"""
select columns of table "dorm"
"""
enum dorm_select_column {
  """column name"""
  dorm_name

  """column name"""
  dormid

  """column name"""
  gender

  """column name"""
  student_capacity
}

"""
input type for updating data in table "dorm"
"""
input dorm_set_input {
  dorm_name: String
  dormid: bigint
  gender: String
  student_capacity: bigint
}

"""aggregate stddev on columns"""
type dorm_stddev_fields {
  dormid: Float
  student_capacity: Float
}

"""
order by stddev() on columns of table "dorm"
"""
input dorm_stddev_order_by {
  dormid: order_by
  student_capacity: order_by
}

"""aggregate stddev_pop on columns"""
type dorm_stddev_pop_fields {
  dormid: Float
  student_capacity: Float
}

"""
order by stddev_pop() on columns of table "dorm"
"""
input dorm_stddev_pop_order_by {
  dormid: order_by
  student_capacity: order_by
}

"""aggregate stddev_samp on columns"""
type dorm_stddev_samp_fields {
  dormid: Float
  student_capacity: Float
}

"""
order by stddev_samp() on columns of table "dorm"
"""
input dorm_stddev_samp_order_by {
  dormid: order_by
  student_capacity: order_by
}

"""aggregate sum on columns"""
type dorm_sum_fields {
  dormid: bigint
  student_capacity: bigint
}

"""
order by sum() on columns of table "dorm"
"""
input dorm_sum_order_by {
  dormid: order_by
  student_capacity: order_by
}

"""
update columns of table "dorm"
"""
enum dorm_update_column {
  """column name"""
  dorm_name

  """column name"""
  dormid

  """column name"""
  gender

  """column name"""
  student_capacity
}

"""aggregate var_pop on columns"""
type dorm_var_pop_fields {
  dormid: Float
  student_capacity: Float
}

"""
order by var_pop() on columns of table "dorm"
"""
input dorm_var_pop_order_by {
  dormid: order_by
  student_capacity: order_by
}

"""aggregate var_samp on columns"""
type dorm_var_samp_fields {
  dormid: Float
  student_capacity: Float
}

"""
order by var_samp() on columns of table "dorm"
"""
input dorm_var_samp_order_by {
  dormid: order_by
  student_capacity: order_by
}

"""aggregate variance on columns"""
type dorm_variance_fields {
  dormid: Float
  student_capacity: Float
}

"""
order by variance() on columns of table "dorm"
"""
input dorm_variance_order_by {
  dormid: order_by
  student_capacity: order_by
}

"""
columns and relationships of "has_amenity"
"""
type has_amenity {
  amenid: bigint

  """An object relationship"""
  dorm: dorm

  """An object relationship"""
  dorm_amenity: dorm_amenity
  dormid: bigint
}

"""
aggregated selection of "has_amenity"
"""
type has_amenity_aggregate {
  aggregate: has_amenity_aggregate_fields
  nodes: [has_amenity!]!
}

"""
aggregate fields of "has_amenity"
"""
type has_amenity_aggregate_fields {
  avg: has_amenity_avg_fields
  count(columns: [has_amenity_select_column!], distinct: Boolean): Int
  max: has_amenity_max_fields
  min: has_amenity_min_fields
  stddev: has_amenity_stddev_fields
  stddev_pop: has_amenity_stddev_pop_fields
  stddev_samp: has_amenity_stddev_samp_fields
  sum: has_amenity_sum_fields
  var_pop: has_amenity_var_pop_fields
  var_samp: has_amenity_var_samp_fields
  variance: has_amenity_variance_fields
}

"""
order by aggregate values of table "has_amenity"
"""
input has_amenity_aggregate_order_by {
  avg: has_amenity_avg_order_by
  count: order_by
  max: has_amenity_max_order_by
  min: has_amenity_min_order_by
  stddev: has_amenity_stddev_order_by
  stddev_pop: has_amenity_stddev_pop_order_by
  stddev_samp: has_amenity_stddev_samp_order_by
  sum: has_amenity_sum_order_by
  var_pop: has_amenity_var_pop_order_by
  var_samp: has_amenity_var_samp_order_by
  variance: has_amenity_variance_order_by
}

"""
input type for inserting array relation for remote table "has_amenity"
"""
input has_amenity_arr_rel_insert_input {
  data: [has_amenity_insert_input!]!
}

"""aggregate avg on columns"""
type has_amenity_avg_fields {
  amenid: Float
  dormid: Float
}

"""
order by avg() on columns of table "has_amenity"
"""
input has_amenity_avg_order_by {
  amenid: order_by
  dormid: order_by
}

"""
Boolean expression to filter rows from the table "has_amenity". All fields are combined with a logical 'AND'.
"""
input has_amenity_bool_exp {
  _and: [has_amenity_bool_exp]
  _not: has_amenity_bool_exp
  _or: [has_amenity_bool_exp]
  amenid: bigint_comparison_exp
  dorm: dorm_bool_exp
  dorm_amenity: dorm_amenity_bool_exp
  dormid: bigint_comparison_exp
}

"""
input type for incrementing integer column in table "has_amenity"
"""
input has_amenity_inc_input {
  amenid: bigint
  dormid: bigint
}

"""
input type for inserting data into table "has_amenity"
"""
input has_amenity_insert_input {
  amenid: bigint
  dorm: dorm_obj_rel_insert_input
  dorm_amenity: dorm_amenity_obj_rel_insert_input
  dormid: bigint
}

"""aggregate max on columns"""
type has_amenity_max_fields {
  amenid: bigint
  dormid: bigint
}

"""
order by max() on columns of table "has_amenity"
"""
input has_amenity_max_order_by {
  amenid: order_by
  dormid: order_by
}

"""aggregate min on columns"""
type has_amenity_min_fields {
  amenid: bigint
  dormid: bigint
}

"""
order by min() on columns of table "has_amenity"
"""
input has_amenity_min_order_by {
  amenid: order_by
  dormid: order_by
}

"""
response of any mutation on the table "has_amenity"
"""
type has_amenity_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [has_amenity!]!
}

"""
input type for inserting object relation for remote table "has_amenity"
"""
input has_amenity_obj_rel_insert_input {
  data: has_amenity_insert_input!
}

"""
ordering options when selecting data from "has_amenity"
"""
input has_amenity_order_by {
  amenid: order_by
  dorm: dorm_order_by
  dorm_amenity: dorm_amenity_order_by
  dormid: order_by
}

"""
select columns of table "has_amenity"
"""
enum has_amenity_select_column {
  """column name"""
  amenid

  """column name"""
  dormid
}

"""
input type for updating data in table "has_amenity"
"""
input has_amenity_set_input {
  amenid: bigint
  dormid: bigint
}

"""aggregate stddev on columns"""
type has_amenity_stddev_fields {
  amenid: Float
  dormid: Float
}

"""
order by stddev() on columns of table "has_amenity"
"""
input has_amenity_stddev_order_by {
  amenid: order_by
  dormid: order_by
}

"""aggregate stddev_pop on columns"""
type has_amenity_stddev_pop_fields {
  amenid: Float
  dormid: Float
}

"""
order by stddev_pop() on columns of table "has_amenity"
"""
input has_amenity_stddev_pop_order_by {
  amenid: order_by
  dormid: order_by
}

"""aggregate stddev_samp on columns"""
type has_amenity_stddev_samp_fields {
  amenid: Float
  dormid: Float
}

"""
order by stddev_samp() on columns of table "has_amenity"
"""
input has_amenity_stddev_samp_order_by {
  amenid: order_by
  dormid: order_by
}

"""aggregate sum on columns"""
type has_amenity_sum_fields {
  amenid: bigint
  dormid: bigint
}

"""
order by sum() on columns of table "has_amenity"
"""
input has_amenity_sum_order_by {
  amenid: order_by
  dormid: order_by
}

"""aggregate var_pop on columns"""
type has_amenity_var_pop_fields {
  amenid: Float
  dormid: Float
}

"""
order by var_pop() on columns of table "has_amenity"
"""
input has_amenity_var_pop_order_by {
  amenid: order_by
  dormid: order_by
}

"""aggregate var_samp on columns"""
type has_amenity_var_samp_fields {
  amenid: Float
  dormid: Float
}

"""
order by var_samp() on columns of table "has_amenity"
"""
input has_amenity_var_samp_order_by {
  amenid: order_by
  dormid: order_by
}

"""aggregate variance on columns"""
type has_amenity_variance_fields {
  amenid: Float
  dormid: Float
}

"""
order by variance() on columns of table "has_amenity"
"""
input has_amenity_variance_order_by {
  amenid: order_by
  dormid: order_by
}

"""
columns and relationships of "lives_in"
"""
type lives_in {
  """An object relationship"""
  dorm: dorm
  dormid: bigint
  room_number: bigint

  """An object relationship"""
  student: student
  stuid: bigint
}

"""
aggregated selection of "lives_in"
"""
type lives_in_aggregate {
  aggregate: lives_in_aggregate_fields
  nodes: [lives_in!]!
}

"""
aggregate fields of "lives_in"
"""
type lives_in_aggregate_fields {
  avg: lives_in_avg_fields
  count(columns: [lives_in_select_column!], distinct: Boolean): Int
  max: lives_in_max_fields
  min: lives_in_min_fields
  stddev: lives_in_stddev_fields
  stddev_pop: lives_in_stddev_pop_fields
  stddev_samp: lives_in_stddev_samp_fields
  sum: lives_in_sum_fields
  var_pop: lives_in_var_pop_fields
  var_samp: lives_in_var_samp_fields
  variance: lives_in_variance_fields
}

"""
order by aggregate values of table "lives_in"
"""
input lives_in_aggregate_order_by {
  avg: lives_in_avg_order_by
  count: order_by
  max: lives_in_max_order_by
  min: lives_in_min_order_by
  stddev: lives_in_stddev_order_by
  stddev_pop: lives_in_stddev_pop_order_by
  stddev_samp: lives_in_stddev_samp_order_by
  sum: lives_in_sum_order_by
  var_pop: lives_in_var_pop_order_by
  var_samp: lives_in_var_samp_order_by
  variance: lives_in_variance_order_by
}

"""
input type for inserting array relation for remote table "lives_in"
"""
input lives_in_arr_rel_insert_input {
  data: [lives_in_insert_input!]!
}

"""aggregate avg on columns"""
type lives_in_avg_fields {
  dormid: Float
  room_number: Float
  stuid: Float
}

"""
order by avg() on columns of table "lives_in"
"""
input lives_in_avg_order_by {
  dormid: order_by
  room_number: order_by
  stuid: order_by
}

"""
Boolean expression to filter rows from the table "lives_in". All fields are combined with a logical 'AND'.
"""
input lives_in_bool_exp {
  _and: [lives_in_bool_exp]
  _not: lives_in_bool_exp
  _or: [lives_in_bool_exp]
  dorm: dorm_bool_exp
  dormid: bigint_comparison_exp
  room_number: bigint_comparison_exp
  student: student_bool_exp
  stuid: bigint_comparison_exp
}

"""
input type for incrementing integer column in table "lives_in"
"""
input lives_in_inc_input {
  dormid: bigint
  room_number: bigint
  stuid: bigint
}

"""
input type for inserting data into table "lives_in"
"""
input lives_in_insert_input {
  dorm: dorm_obj_rel_insert_input
  dormid: bigint
  room_number: bigint
  student: student_obj_rel_insert_input
  stuid: bigint
}

"""aggregate max on columns"""
type lives_in_max_fields {
  dormid: bigint
  room_number: bigint
  stuid: bigint
}

"""
order by max() on columns of table "lives_in"
"""
input lives_in_max_order_by {
  dormid: order_by
  room_number: order_by
  stuid: order_by
}

"""aggregate min on columns"""
type lives_in_min_fields {
  dormid: bigint
  room_number: bigint
  stuid: bigint
}

"""
order by min() on columns of table "lives_in"
"""
input lives_in_min_order_by {
  dormid: order_by
  room_number: order_by
  stuid: order_by
}

"""
response of any mutation on the table "lives_in"
"""
type lives_in_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [lives_in!]!
}

"""
input type for inserting object relation for remote table "lives_in"
"""
input lives_in_obj_rel_insert_input {
  data: lives_in_insert_input!
}

"""
ordering options when selecting data from "lives_in"
"""
input lives_in_order_by {
  dorm: dorm_order_by
  dormid: order_by
  room_number: order_by
  student: student_order_by
  stuid: order_by
}

"""
select columns of table "lives_in"
"""
enum lives_in_select_column {
  """column name"""
  dormid

  """column name"""
  room_number

  """column name"""
  stuid
}

"""
input type for updating data in table "lives_in"
"""
input lives_in_set_input {
  dormid: bigint
  room_number: bigint
  stuid: bigint
}

"""aggregate stddev on columns"""
type lives_in_stddev_fields {
  dormid: Float
  room_number: Float
  stuid: Float
}

"""
order by stddev() on columns of table "lives_in"
"""
input lives_in_stddev_order_by {
  dormid: order_by
  room_number: order_by
  stuid: order_by
}

"""aggregate stddev_pop on columns"""
type lives_in_stddev_pop_fields {
  dormid: Float
  room_number: Float
  stuid: Float
}

"""
order by stddev_pop() on columns of table "lives_in"
"""
input lives_in_stddev_pop_order_by {
  dormid: order_by
  room_number: order_by
  stuid: order_by
}

"""aggregate stddev_samp on columns"""
type lives_in_stddev_samp_fields {
  dormid: Float
  room_number: Float
  stuid: Float
}

"""
order by stddev_samp() on columns of table "lives_in"
"""
input lives_in_stddev_samp_order_by {
  dormid: order_by
  room_number: order_by
  stuid: order_by
}

"""aggregate sum on columns"""
type lives_in_sum_fields {
  dormid: bigint
  room_number: bigint
  stuid: bigint
}

"""
order by sum() on columns of table "lives_in"
"""
input lives_in_sum_order_by {
  dormid: order_by
  room_number: order_by
  stuid: order_by
}

"""aggregate var_pop on columns"""
type lives_in_var_pop_fields {
  dormid: Float
  room_number: Float
  stuid: Float
}

"""
order by var_pop() on columns of table "lives_in"
"""
input lives_in_var_pop_order_by {
  dormid: order_by
  room_number: order_by
  stuid: order_by
}

"""aggregate var_samp on columns"""
type lives_in_var_samp_fields {
  dormid: Float
  room_number: Float
  stuid: Float
}

"""
order by var_samp() on columns of table "lives_in"
"""
input lives_in_var_samp_order_by {
  dormid: order_by
  room_number: order_by
  stuid: order_by
}

"""aggregate variance on columns"""
type lives_in_variance_fields {
  dormid: Float
  room_number: Float
  stuid: Float
}

"""
order by variance() on columns of table "lives_in"
"""
input lives_in_variance_order_by {
  dormid: order_by
  room_number: order_by
  stuid: order_by
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "dorm"
  """
  delete_dorm(
    """filter the rows which have to be deleted"""
    where: dorm_bool_exp!
  ): dorm_mutation_response

  """
  delete data from the table: "dorm_amenity"
  """
  delete_dorm_amenity(
    """filter the rows which have to be deleted"""
    where: dorm_amenity_bool_exp!
  ): dorm_amenity_mutation_response

  """
  delete data from the table: "has_amenity"
  """
  delete_has_amenity(
    """filter the rows which have to be deleted"""
    where: has_amenity_bool_exp!
  ): has_amenity_mutation_response

  """
  delete data from the table: "lives_in"
  """
  delete_lives_in(
    """filter the rows which have to be deleted"""
    where: lives_in_bool_exp!
  ): lives_in_mutation_response

  """
  delete data from the table: "student"
  """
  delete_student(
    """filter the rows which have to be deleted"""
    where: student_bool_exp!
  ): student_mutation_response

  """
  delete single row from the table: "student"
  """
  delete_student_by_pk(stuid: bigint!): student

  """
  insert data into the table: "dorm"
  """
  insert_dorm(
    """the rows to be inserted"""
    objects: [dorm_insert_input!]!

    """on conflict condition"""
    on_conflict: dorm_on_conflict
  ): dorm_mutation_response

  """
  insert data into the table: "dorm_amenity"
  """
  insert_dorm_amenity(
    """the rows to be inserted"""
    objects: [dorm_amenity_insert_input!]!

    """on conflict condition"""
    on_conflict: dorm_amenity_on_conflict
  ): dorm_amenity_mutation_response

  """
  insert a single row into the table: "dorm_amenity"
  """
  insert_dorm_amenity_one(
    """the row to be inserted"""
    object: dorm_amenity_insert_input!

    """on conflict condition"""
    on_conflict: dorm_amenity_on_conflict
  ): dorm_amenity

  """
  insert a single row into the table: "dorm"
  """
  insert_dorm_one(
    """the row to be inserted"""
    object: dorm_insert_input!

    """on conflict condition"""
    on_conflict: dorm_on_conflict
  ): dorm

  """
  insert data into the table: "has_amenity"
  """
  insert_has_amenity(
    """the rows to be inserted"""
    objects: [has_amenity_insert_input!]!
  ): has_amenity_mutation_response

  """
  insert a single row into the table: "has_amenity"
  """
  insert_has_amenity_one(
    """the row to be inserted"""
    object: has_amenity_insert_input!
  ): has_amenity

  """
  insert data into the table: "lives_in"
  """
  insert_lives_in(
    """the rows to be inserted"""
    objects: [lives_in_insert_input!]!
  ): lives_in_mutation_response

  """
  insert a single row into the table: "lives_in"
  """
  insert_lives_in_one(
    """the row to be inserted"""
    object: lives_in_insert_input!
  ): lives_in

  """
  insert data into the table: "student"
  """
  insert_student(
    """the rows to be inserted"""
    objects: [student_insert_input!]!

    """on conflict condition"""
    on_conflict: student_on_conflict
  ): student_mutation_response

  """
  insert a single row into the table: "student"
  """
  insert_student_one(
    """the row to be inserted"""
    object: student_insert_input!

    """on conflict condition"""
    on_conflict: student_on_conflict
  ): student

  """
  update data of the table: "dorm"
  """
  update_dorm(
    """increments the integer columns with given value of the filtered values"""
    _inc: dorm_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: dorm_set_input

    """filter the rows which have to be updated"""
    where: dorm_bool_exp!
  ): dorm_mutation_response

  """
  update data of the table: "dorm_amenity"
  """
  update_dorm_amenity(
    """increments the integer columns with given value of the filtered values"""
    _inc: dorm_amenity_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: dorm_amenity_set_input

    """filter the rows which have to be updated"""
    where: dorm_amenity_bool_exp!
  ): dorm_amenity_mutation_response

  """
  update data of the table: "has_amenity"
  """
  update_has_amenity(
    """increments the integer columns with given value of the filtered values"""
    _inc: has_amenity_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: has_amenity_set_input

    """filter the rows which have to be updated"""
    where: has_amenity_bool_exp!
  ): has_amenity_mutation_response

  """
  update data of the table: "lives_in"
  """
  update_lives_in(
    """increments the integer columns with given value of the filtered values"""
    _inc: lives_in_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: lives_in_set_input

    """filter the rows which have to be updated"""
    where: lives_in_bool_exp!
  ): lives_in_mutation_response

  """
  update data of the table: "student"
  """
  update_student(
    """increments the integer columns with given value of the filtered values"""
    _inc: student_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: student_set_input

    """filter the rows which have to be updated"""
    where: student_bool_exp!
  ): student_mutation_response

  """
  update single row of the table: "student"
  """
  update_student_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: student_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: student_set_input
    pk_columns: student_pk_columns_input!
  ): student
}

"""column ordering options"""
enum order_by {
  """in the ascending order, nulls last"""
  asc

  """in the ascending order, nulls first"""
  asc_nulls_first

  """in the ascending order, nulls last"""
  asc_nulls_last

  """in the descending order, nulls first"""
  desc

  """in the descending order, nulls first"""
  desc_nulls_first

  """in the descending order, nulls last"""
  desc_nulls_last
}

"""query root"""
type query_root {
  """
  fetch data from the table: "dorm"
  """
  dorm(
    """distinct select on columns"""
    distinct_on: [dorm_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [dorm_order_by!]

    """filter the rows returned"""
    where: dorm_bool_exp
  ): [dorm!]!

  """
  fetch aggregated fields from the table: "dorm"
  """
  dorm_aggregate(
    """distinct select on columns"""
    distinct_on: [dorm_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [dorm_order_by!]

    """filter the rows returned"""
    where: dorm_bool_exp
  ): dorm_aggregate!

  """
  fetch data from the table: "dorm_amenity"
  """
  dorm_amenity(
    """distinct select on columns"""
    distinct_on: [dorm_amenity_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [dorm_amenity_order_by!]

    """filter the rows returned"""
    where: dorm_amenity_bool_exp
  ): [dorm_amenity!]!

  """
  fetch aggregated fields from the table: "dorm_amenity"
  """
  dorm_amenity_aggregate(
    """distinct select on columns"""
    distinct_on: [dorm_amenity_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [dorm_amenity_order_by!]

    """filter the rows returned"""
    where: dorm_amenity_bool_exp
  ): dorm_amenity_aggregate!

  """
  fetch data from the table: "has_amenity"
  """
  has_amenity(
    """distinct select on columns"""
    distinct_on: [has_amenity_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [has_amenity_order_by!]

    """filter the rows returned"""
    where: has_amenity_bool_exp
  ): [has_amenity!]!

  """
  fetch aggregated fields from the table: "has_amenity"
  """
  has_amenity_aggregate(
    """distinct select on columns"""
    distinct_on: [has_amenity_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [has_amenity_order_by!]

    """filter the rows returned"""
    where: has_amenity_bool_exp
  ): has_amenity_aggregate!

  """
  fetch data from the table: "lives_in"
  """
  lives_in(
    """distinct select on columns"""
    distinct_on: [lives_in_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [lives_in_order_by!]

    """filter the rows returned"""
    where: lives_in_bool_exp
  ): [lives_in!]!

  """
  fetch aggregated fields from the table: "lives_in"
  """
  lives_in_aggregate(
    """distinct select on columns"""
    distinct_on: [lives_in_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [lives_in_order_by!]

    """filter the rows returned"""
    where: lives_in_bool_exp
  ): lives_in_aggregate!

  """
  fetch data from the table: "student"
  """
  student(
    """distinct select on columns"""
    distinct_on: [student_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [student_order_by!]

    """filter the rows returned"""
    where: student_bool_exp
  ): [student!]!

  """
  fetch aggregated fields from the table: "student"
  """
  student_aggregate(
    """distinct select on columns"""
    distinct_on: [student_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [student_order_by!]

    """filter the rows returned"""
    where: student_bool_exp
  ): student_aggregate!

  """fetch data from the table: "student" using primary key columns"""
  student_by_pk(stuid: bigint!): student
}

"""
expression to compare columns of type String. All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String
  _ilike: String
  _in: [String!]
  _is_null: Boolean
  _like: String
  _lt: String
  _lte: String
  _neq: String
  _nilike: String
  _nin: [String!]
  _nlike: String
  _nsimilar: String
  _similar: String
}

"""
columns and relationships of "student"
"""
type student {
  advisor: bigint
  age: bigint
  city_code: String
  fname: String

  """An array relationship"""
  lives_ins(
    """distinct select on columns"""
    distinct_on: [lives_in_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [lives_in_order_by!]

    """filter the rows returned"""
    where: lives_in_bool_exp
  ): [lives_in!]!

  """An aggregated array relationship"""
  lives_ins_aggregate(
    """distinct select on columns"""
    distinct_on: [lives_in_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [lives_in_order_by!]

    """filter the rows returned"""
    where: lives_in_bool_exp
  ): lives_in_aggregate!
  lname: String
  major: bigint
  sex: String
  stuid: bigint!
}

"""
aggregated selection of "student"
"""
type student_aggregate {
  aggregate: student_aggregate_fields
  nodes: [student!]!
}

"""
aggregate fields of "student"
"""
type student_aggregate_fields {
  avg: student_avg_fields
  count(columns: [student_select_column!], distinct: Boolean): Int
  max: student_max_fields
  min: student_min_fields
  stddev: student_stddev_fields
  stddev_pop: student_stddev_pop_fields
  stddev_samp: student_stddev_samp_fields
  sum: student_sum_fields
  var_pop: student_var_pop_fields
  var_samp: student_var_samp_fields
  variance: student_variance_fields
}

"""
order by aggregate values of table "student"
"""
input student_aggregate_order_by {
  avg: student_avg_order_by
  count: order_by
  max: student_max_order_by
  min: student_min_order_by
  stddev: student_stddev_order_by
  stddev_pop: student_stddev_pop_order_by
  stddev_samp: student_stddev_samp_order_by
  sum: student_sum_order_by
  var_pop: student_var_pop_order_by
  var_samp: student_var_samp_order_by
  variance: student_variance_order_by
}

"""
input type for inserting array relation for remote table "student"
"""
input student_arr_rel_insert_input {
  data: [student_insert_input!]!
  on_conflict: student_on_conflict
}

"""aggregate avg on columns"""
type student_avg_fields {
  advisor: Float
  age: Float
  major: Float
  stuid: Float
}

"""
order by avg() on columns of table "student"
"""
input student_avg_order_by {
  advisor: order_by
  age: order_by
  major: order_by
  stuid: order_by
}

"""
Boolean expression to filter rows from the table "student". All fields are combined with a logical 'AND'.
"""
input student_bool_exp {
  _and: [student_bool_exp]
  _not: student_bool_exp
  _or: [student_bool_exp]
  advisor: bigint_comparison_exp
  age: bigint_comparison_exp
  city_code: String_comparison_exp
  fname: String_comparison_exp
  lives_ins: lives_in_bool_exp
  lname: String_comparison_exp
  major: bigint_comparison_exp
  sex: String_comparison_exp
  stuid: bigint_comparison_exp
}

"""
unique or primary key constraints on table "student"
"""
enum student_constraint {
  """unique or primary key constraint"""
  idx_25388_student_pkey
}

"""
input type for incrementing integer column in table "student"
"""
input student_inc_input {
  advisor: bigint
  age: bigint
  major: bigint
  stuid: bigint
}

"""
input type for inserting data into table "student"
"""
input student_insert_input {
  advisor: bigint
  age: bigint
  city_code: String
  fname: String
  lives_ins: lives_in_arr_rel_insert_input
  lname: String
  major: bigint
  sex: String
  stuid: bigint
}

"""aggregate max on columns"""
type student_max_fields {
  advisor: bigint
  age: bigint
  city_code: String
  fname: String
  lname: String
  major: bigint
  sex: String
  stuid: bigint
}

"""
order by max() on columns of table "student"
"""
input student_max_order_by {
  advisor: order_by
  age: order_by
  city_code: order_by
  fname: order_by
  lname: order_by
  major: order_by
  sex: order_by
  stuid: order_by
}

"""aggregate min on columns"""
type student_min_fields {
  advisor: bigint
  age: bigint
  city_code: String
  fname: String
  lname: String
  major: bigint
  sex: String
  stuid: bigint
}

"""
order by min() on columns of table "student"
"""
input student_min_order_by {
  advisor: order_by
  age: order_by
  city_code: order_by
  fname: order_by
  lname: order_by
  major: order_by
  sex: order_by
  stuid: order_by
}

"""
response of any mutation on the table "student"
"""
type student_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [student!]!
}

"""
input type for inserting object relation for remote table "student"
"""
input student_obj_rel_insert_input {
  data: student_insert_input!
  on_conflict: student_on_conflict
}

"""
on conflict condition type for table "student"
"""
input student_on_conflict {
  constraint: student_constraint!
  update_columns: [student_update_column!]!
  where: student_bool_exp
}

"""
ordering options when selecting data from "student"
"""
input student_order_by {
  advisor: order_by
  age: order_by
  city_code: order_by
  fname: order_by
  lives_ins_aggregate: lives_in_aggregate_order_by
  lname: order_by
  major: order_by
  sex: order_by
  stuid: order_by
}

"""
primary key columns input for table: "student"
"""
input student_pk_columns_input {
  stuid: bigint!
}

"""
select columns of table "student"
"""
enum student_select_column {
  """column name"""
  advisor

  """column name"""
  age

  """column name"""
  city_code

  """column name"""
  fname

  """column name"""
  lname

  """column name"""
  major

  """column name"""
  sex

  """column name"""
  stuid
}

"""
input type for updating data in table "student"
"""
input student_set_input {
  advisor: bigint
  age: bigint
  city_code: String
  fname: String
  lname: String
  major: bigint
  sex: String
  stuid: bigint
}

"""aggregate stddev on columns"""
type student_stddev_fields {
  advisor: Float
  age: Float
  major: Float
  stuid: Float
}

"""
order by stddev() on columns of table "student"
"""
input student_stddev_order_by {
  advisor: order_by
  age: order_by
  major: order_by
  stuid: order_by
}

"""aggregate stddev_pop on columns"""
type student_stddev_pop_fields {
  advisor: Float
  age: Float
  major: Float
  stuid: Float
}

"""
order by stddev_pop() on columns of table "student"
"""
input student_stddev_pop_order_by {
  advisor: order_by
  age: order_by
  major: order_by
  stuid: order_by
}

"""aggregate stddev_samp on columns"""
type student_stddev_samp_fields {
  advisor: Float
  age: Float
  major: Float
  stuid: Float
}

"""
order by stddev_samp() on columns of table "student"
"""
input student_stddev_samp_order_by {
  advisor: order_by
  age: order_by
  major: order_by
  stuid: order_by
}

"""aggregate sum on columns"""
type student_sum_fields {
  advisor: bigint
  age: bigint
  major: bigint
  stuid: bigint
}

"""
order by sum() on columns of table "student"
"""
input student_sum_order_by {
  advisor: order_by
  age: order_by
  major: order_by
  stuid: order_by
}

"""
update columns of table "student"
"""
enum student_update_column {
  """column name"""
  advisor

  """column name"""
  age

  """column name"""
  city_code

  """column name"""
  fname

  """column name"""
  lname

  """column name"""
  major

  """column name"""
  sex

  """column name"""
  stuid
}

"""aggregate var_pop on columns"""
type student_var_pop_fields {
  advisor: Float
  age: Float
  major: Float
  stuid: Float
}

"""
order by var_pop() on columns of table "student"
"""
input student_var_pop_order_by {
  advisor: order_by
  age: order_by
  major: order_by
  stuid: order_by
}

"""aggregate var_samp on columns"""
type student_var_samp_fields {
  advisor: Float
  age: Float
  major: Float
  stuid: Float
}

"""
order by var_samp() on columns of table "student"
"""
input student_var_samp_order_by {
  advisor: order_by
  age: order_by
  major: order_by
  stuid: order_by
}

"""aggregate variance on columns"""
type student_variance_fields {
  advisor: Float
  age: Float
  major: Float
  stuid: Float
}

"""
order by variance() on columns of table "student"
"""
input student_variance_order_by {
  advisor: order_by
  age: order_by
  major: order_by
  stuid: order_by
}

"""subscription root"""
type subscription_root {
  """
  fetch data from the table: "dorm"
  """
  dorm(
    """distinct select on columns"""
    distinct_on: [dorm_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [dorm_order_by!]

    """filter the rows returned"""
    where: dorm_bool_exp
  ): [dorm!]!

  """
  fetch aggregated fields from the table: "dorm"
  """
  dorm_aggregate(
    """distinct select on columns"""
    distinct_on: [dorm_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [dorm_order_by!]

    """filter the rows returned"""
    where: dorm_bool_exp
  ): dorm_aggregate!

  """
  fetch data from the table: "dorm_amenity"
  """
  dorm_amenity(
    """distinct select on columns"""
    distinct_on: [dorm_amenity_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [dorm_amenity_order_by!]

    """filter the rows returned"""
    where: dorm_amenity_bool_exp
  ): [dorm_amenity!]!

  """
  fetch aggregated fields from the table: "dorm_amenity"
  """
  dorm_amenity_aggregate(
    """distinct select on columns"""
    distinct_on: [dorm_amenity_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [dorm_amenity_order_by!]

    """filter the rows returned"""
    where: dorm_amenity_bool_exp
  ): dorm_amenity_aggregate!

  """
  fetch data from the table: "has_amenity"
  """
  has_amenity(
    """distinct select on columns"""
    distinct_on: [has_amenity_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [has_amenity_order_by!]

    """filter the rows returned"""
    where: has_amenity_bool_exp
  ): [has_amenity!]!

  """
  fetch aggregated fields from the table: "has_amenity"
  """
  has_amenity_aggregate(
    """distinct select on columns"""
    distinct_on: [has_amenity_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [has_amenity_order_by!]

    """filter the rows returned"""
    where: has_amenity_bool_exp
  ): has_amenity_aggregate!

  """
  fetch data from the table: "lives_in"
  """
  lives_in(
    """distinct select on columns"""
    distinct_on: [lives_in_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [lives_in_order_by!]

    """filter the rows returned"""
    where: lives_in_bool_exp
  ): [lives_in!]!

  """
  fetch aggregated fields from the table: "lives_in"
  """
  lives_in_aggregate(
    """distinct select on columns"""
    distinct_on: [lives_in_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [lives_in_order_by!]

    """filter the rows returned"""
    where: lives_in_bool_exp
  ): lives_in_aggregate!

  """
  fetch data from the table: "student"
  """
  student(
    """distinct select on columns"""
    distinct_on: [student_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [student_order_by!]

    """filter the rows returned"""
    where: student_bool_exp
  ): [student!]!

  """
  fetch aggregated fields from the table: "student"
  """
  student_aggregate(
    """distinct select on columns"""
    distinct_on: [student_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [student_order_by!]

    """filter the rows returned"""
    where: student_bool_exp
  ): student_aggregate!

  """fetch data from the table: "student" using primary key columns"""
  student_by_pk(stuid: bigint!): student
}
