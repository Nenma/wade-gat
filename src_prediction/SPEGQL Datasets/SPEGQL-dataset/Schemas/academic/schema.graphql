schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""
Direct the client to resolve this field locally, either from the cache or local resolvers.
"""
directive @client(
  """
  When true, the client will never use the cache for this value. See
  https://www.apollographql.com/docs/react/essentials/local-state/#forcing-resolvers-with-clientalways-true
  """
  always: Boolean
) on FIELD | FRAGMENT_DEFINITION | INLINE_FRAGMENT

"""
Export this locally resolved field as a variable to be used in the remainder of this query. See
https://www.apollographql.com/docs/react/essentials/local-state/#using-client-fields-as-variables
"""
directive @export(
  """The variable name to export this field as."""
  as: String!
) on FIELD

"""
Specify a custom store key for this result. See
https://www.apollographql.com/docs/react/advanced/caching/#the-connection-directive
"""
directive @connection(
  """Specify the store key."""
  key: String!

  """
  An array of query argument names to include in the generated custom store key.
  """
  filter: [String!]
) on FIELD

"""
columns and relationships of "author"
"""
type author {
  aid: Int!

  """An array relationship"""
  domain_authors(
    """distinct select on columns"""
    distinct_on: [domain_author_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [domain_author_order_by!]

    """filter the rows returned"""
    where: domain_author_bool_exp
  ): [domain_author!]!

  """An aggregated array relationship"""
  domain_authors_aggregate(
    """distinct select on columns"""
    distinct_on: [domain_author_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [domain_author_order_by!]

    """filter the rows returned"""
    where: domain_author_bool_exp
  ): domain_author_aggregate!
  homepage: String
  name: String
  oid: Int

  """An array relationship"""
  writes(
    """distinct select on columns"""
    distinct_on: [writes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [writes_order_by!]

    """filter the rows returned"""
    where: writes_bool_exp
  ): [writes!]!

  """An aggregated array relationship"""
  writes_aggregate(
    """distinct select on columns"""
    distinct_on: [writes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [writes_order_by!]

    """filter the rows returned"""
    where: writes_bool_exp
  ): writes_aggregate!
}

"""
aggregated selection of "author"
"""
type author_aggregate {
  aggregate: author_aggregate_fields
  nodes: [author!]!
}

"""
aggregate fields of "author"
"""
type author_aggregate_fields {
  avg: author_avg_fields
  count(columns: [author_select_column!], distinct: Boolean): Int
  max: author_max_fields
  min: author_min_fields
  stddev: author_stddev_fields
  stddev_pop: author_stddev_pop_fields
  stddev_samp: author_stddev_samp_fields
  sum: author_sum_fields
  var_pop: author_var_pop_fields
  var_samp: author_var_samp_fields
  variance: author_variance_fields
}

"""
order by aggregate values of table "author"
"""
input author_aggregate_order_by {
  avg: author_avg_order_by
  count: order_by
  max: author_max_order_by
  min: author_min_order_by
  stddev: author_stddev_order_by
  stddev_pop: author_stddev_pop_order_by
  stddev_samp: author_stddev_samp_order_by
  sum: author_sum_order_by
  var_pop: author_var_pop_order_by
  var_samp: author_var_samp_order_by
  variance: author_variance_order_by
}

"""
input type for inserting array relation for remote table "author"
"""
input author_arr_rel_insert_input {
  data: [author_insert_input!]!
  on_conflict: author_on_conflict
}

"""aggregate avg on columns"""
type author_avg_fields {
  aid: Float
  oid: Float
}

"""
order by avg() on columns of table "author"
"""
input author_avg_order_by {
  aid: order_by
  oid: order_by
}

"""
Boolean expression to filter rows from the table "author". All fields are combined with a logical 'AND'.
"""
input author_bool_exp {
  _and: [author_bool_exp]
  _not: author_bool_exp
  _or: [author_bool_exp]
  aid: Int_comparison_exp
  domain_authors: domain_author_bool_exp
  homepage: String_comparison_exp
  name: String_comparison_exp
  oid: Int_comparison_exp
  writes: writes_bool_exp
}

"""
unique or primary key constraints on table "author"
"""
enum author_constraint {
  """unique or primary key constraint"""
  idx_21456_sqlite_autoindex_author_1
}

"""
input type for incrementing integer column in table "author"
"""
input author_inc_input {
  aid: Int
  oid: Int
}

"""
input type for inserting data into table "author"
"""
input author_insert_input {
  aid: Int
  domain_authors: domain_author_arr_rel_insert_input
  homepage: String
  name: String
  oid: Int
  writes: writes_arr_rel_insert_input
}

"""aggregate max on columns"""
type author_max_fields {
  aid: Int
  homepage: String
  name: String
  oid: Int
}

"""
order by max() on columns of table "author"
"""
input author_max_order_by {
  aid: order_by
  homepage: order_by
  name: order_by
  oid: order_by
}

"""aggregate min on columns"""
type author_min_fields {
  aid: Int
  homepage: String
  name: String
  oid: Int
}

"""
order by min() on columns of table "author"
"""
input author_min_order_by {
  aid: order_by
  homepage: order_by
  name: order_by
  oid: order_by
}

"""
response of any mutation on the table "author"
"""
type author_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [author!]!
}

"""
input type for inserting object relation for remote table "author"
"""
input author_obj_rel_insert_input {
  data: author_insert_input!
  on_conflict: author_on_conflict
}

"""
on conflict condition type for table "author"
"""
input author_on_conflict {
  constraint: author_constraint!
  update_columns: [author_update_column!]!
  where: author_bool_exp
}

"""
ordering options when selecting data from "author"
"""
input author_order_by {
  aid: order_by
  domain_authors_aggregate: domain_author_aggregate_order_by
  homepage: order_by
  name: order_by
  oid: order_by
  writes_aggregate: writes_aggregate_order_by
}

"""
primary key columns input for table: "author"
"""
input author_pk_columns_input {
  aid: Int!
}

"""
select columns of table "author"
"""
enum author_select_column {
  """column name"""
  aid

  """column name"""
  homepage

  """column name"""
  name

  """column name"""
  oid
}

"""
input type for updating data in table "author"
"""
input author_set_input {
  aid: Int
  homepage: String
  name: String
  oid: Int
}

"""aggregate stddev on columns"""
type author_stddev_fields {
  aid: Float
  oid: Float
}

"""
order by stddev() on columns of table "author"
"""
input author_stddev_order_by {
  aid: order_by
  oid: order_by
}

"""aggregate stddev_pop on columns"""
type author_stddev_pop_fields {
  aid: Float
  oid: Float
}

"""
order by stddev_pop() on columns of table "author"
"""
input author_stddev_pop_order_by {
  aid: order_by
  oid: order_by
}

"""aggregate stddev_samp on columns"""
type author_stddev_samp_fields {
  aid: Float
  oid: Float
}

"""
order by stddev_samp() on columns of table "author"
"""
input author_stddev_samp_order_by {
  aid: order_by
  oid: order_by
}

"""aggregate sum on columns"""
type author_sum_fields {
  aid: Int
  oid: Int
}

"""
order by sum() on columns of table "author"
"""
input author_sum_order_by {
  aid: order_by
  oid: order_by
}

"""
update columns of table "author"
"""
enum author_update_column {
  """column name"""
  aid

  """column name"""
  homepage

  """column name"""
  name

  """column name"""
  oid
}

"""aggregate var_pop on columns"""
type author_var_pop_fields {
  aid: Float
  oid: Float
}

"""
order by var_pop() on columns of table "author"
"""
input author_var_pop_order_by {
  aid: order_by
  oid: order_by
}

"""aggregate var_samp on columns"""
type author_var_samp_fields {
  aid: Float
  oid: Float
}

"""
order by var_samp() on columns of table "author"
"""
input author_var_samp_order_by {
  aid: order_by
  oid: order_by
}

"""aggregate variance on columns"""
type author_variance_fields {
  aid: Float
  oid: Float
}

"""
order by variance() on columns of table "author"
"""
input author_variance_order_by {
  aid: order_by
  oid: order_by
}

"""
columns and relationships of "cite"
"""
type cite {
  cited: Int
  citing: Int

  """An object relationship"""
  publication: publication

  """An object relationship"""
  publicationByCiting: publication
}

"""
aggregated selection of "cite"
"""
type cite_aggregate {
  aggregate: cite_aggregate_fields
  nodes: [cite!]!
}

"""
aggregate fields of "cite"
"""
type cite_aggregate_fields {
  avg: cite_avg_fields
  count(columns: [cite_select_column!], distinct: Boolean): Int
  max: cite_max_fields
  min: cite_min_fields
  stddev: cite_stddev_fields
  stddev_pop: cite_stddev_pop_fields
  stddev_samp: cite_stddev_samp_fields
  sum: cite_sum_fields
  var_pop: cite_var_pop_fields
  var_samp: cite_var_samp_fields
  variance: cite_variance_fields
}

"""
order by aggregate values of table "cite"
"""
input cite_aggregate_order_by {
  avg: cite_avg_order_by
  count: order_by
  max: cite_max_order_by
  min: cite_min_order_by
  stddev: cite_stddev_order_by
  stddev_pop: cite_stddev_pop_order_by
  stddev_samp: cite_stddev_samp_order_by
  sum: cite_sum_order_by
  var_pop: cite_var_pop_order_by
  var_samp: cite_var_samp_order_by
  variance: cite_variance_order_by
}

"""
input type for inserting array relation for remote table "cite"
"""
input cite_arr_rel_insert_input {
  data: [cite_insert_input!]!
}

"""aggregate avg on columns"""
type cite_avg_fields {
  cited: Float
  citing: Float
}

"""
order by avg() on columns of table "cite"
"""
input cite_avg_order_by {
  cited: order_by
  citing: order_by
}

"""
Boolean expression to filter rows from the table "cite". All fields are combined with a logical 'AND'.
"""
input cite_bool_exp {
  _and: [cite_bool_exp]
  _not: cite_bool_exp
  _or: [cite_bool_exp]
  cited: Int_comparison_exp
  citing: Int_comparison_exp
  publication: publication_bool_exp
  publicationByCiting: publication_bool_exp
}

"""
input type for incrementing integer column in table "cite"
"""
input cite_inc_input {
  cited: Int
  citing: Int
}

"""
input type for inserting data into table "cite"
"""
input cite_insert_input {
  cited: Int
  citing: Int
  publication: publication_obj_rel_insert_input
  publicationByCiting: publication_obj_rel_insert_input
}

"""aggregate max on columns"""
type cite_max_fields {
  cited: Int
  citing: Int
}

"""
order by max() on columns of table "cite"
"""
input cite_max_order_by {
  cited: order_by
  citing: order_by
}

"""aggregate min on columns"""
type cite_min_fields {
  cited: Int
  citing: Int
}

"""
order by min() on columns of table "cite"
"""
input cite_min_order_by {
  cited: order_by
  citing: order_by
}

"""
response of any mutation on the table "cite"
"""
type cite_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [cite!]!
}

"""
input type for inserting object relation for remote table "cite"
"""
input cite_obj_rel_insert_input {
  data: cite_insert_input!
}

"""
ordering options when selecting data from "cite"
"""
input cite_order_by {
  cited: order_by
  citing: order_by
  publication: publication_order_by
  publicationByCiting: publication_order_by
}

"""
select columns of table "cite"
"""
enum cite_select_column {
  """column name"""
  cited

  """column name"""
  citing
}

"""
input type for updating data in table "cite"
"""
input cite_set_input {
  cited: Int
  citing: Int
}

"""aggregate stddev on columns"""
type cite_stddev_fields {
  cited: Float
  citing: Float
}

"""
order by stddev() on columns of table "cite"
"""
input cite_stddev_order_by {
  cited: order_by
  citing: order_by
}

"""aggregate stddev_pop on columns"""
type cite_stddev_pop_fields {
  cited: Float
  citing: Float
}

"""
order by stddev_pop() on columns of table "cite"
"""
input cite_stddev_pop_order_by {
  cited: order_by
  citing: order_by
}

"""aggregate stddev_samp on columns"""
type cite_stddev_samp_fields {
  cited: Float
  citing: Float
}

"""
order by stddev_samp() on columns of table "cite"
"""
input cite_stddev_samp_order_by {
  cited: order_by
  citing: order_by
}

"""aggregate sum on columns"""
type cite_sum_fields {
  cited: Int
  citing: Int
}

"""
order by sum() on columns of table "cite"
"""
input cite_sum_order_by {
  cited: order_by
  citing: order_by
}

"""aggregate var_pop on columns"""
type cite_var_pop_fields {
  cited: Float
  citing: Float
}

"""
order by var_pop() on columns of table "cite"
"""
input cite_var_pop_order_by {
  cited: order_by
  citing: order_by
}

"""aggregate var_samp on columns"""
type cite_var_samp_fields {
  cited: Float
  citing: Float
}

"""
order by var_samp() on columns of table "cite"
"""
input cite_var_samp_order_by {
  cited: order_by
  citing: order_by
}

"""aggregate variance on columns"""
type cite_variance_fields {
  cited: Float
  citing: Float
}

"""
order by variance() on columns of table "cite"
"""
input cite_variance_order_by {
  cited: order_by
  citing: order_by
}

"""
columns and relationships of "conference"
"""
type conference {
  cid: Int!

  """An array relationship"""
  domain_conferences(
    """distinct select on columns"""
    distinct_on: [domain_conference_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [domain_conference_order_by!]

    """filter the rows returned"""
    where: domain_conference_bool_exp
  ): [domain_conference!]!

  """An aggregated array relationship"""
  domain_conferences_aggregate(
    """distinct select on columns"""
    distinct_on: [domain_conference_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [domain_conference_order_by!]

    """filter the rows returned"""
    where: domain_conference_bool_exp
  ): domain_conference_aggregate!
  homepage: String
  name: String
}

"""
aggregated selection of "conference"
"""
type conference_aggregate {
  aggregate: conference_aggregate_fields
  nodes: [conference!]!
}

"""
aggregate fields of "conference"
"""
type conference_aggregate_fields {
  avg: conference_avg_fields
  count(columns: [conference_select_column!], distinct: Boolean): Int
  max: conference_max_fields
  min: conference_min_fields
  stddev: conference_stddev_fields
  stddev_pop: conference_stddev_pop_fields
  stddev_samp: conference_stddev_samp_fields
  sum: conference_sum_fields
  var_pop: conference_var_pop_fields
  var_samp: conference_var_samp_fields
  variance: conference_variance_fields
}

"""
order by aggregate values of table "conference"
"""
input conference_aggregate_order_by {
  avg: conference_avg_order_by
  count: order_by
  max: conference_max_order_by
  min: conference_min_order_by
  stddev: conference_stddev_order_by
  stddev_pop: conference_stddev_pop_order_by
  stddev_samp: conference_stddev_samp_order_by
  sum: conference_sum_order_by
  var_pop: conference_var_pop_order_by
  var_samp: conference_var_samp_order_by
  variance: conference_variance_order_by
}

"""
input type for inserting array relation for remote table "conference"
"""
input conference_arr_rel_insert_input {
  data: [conference_insert_input!]!
  on_conflict: conference_on_conflict
}

"""aggregate avg on columns"""
type conference_avg_fields {
  cid: Float
}

"""
order by avg() on columns of table "conference"
"""
input conference_avg_order_by {
  cid: order_by
}

"""
Boolean expression to filter rows from the table "conference". All fields are combined with a logical 'AND'.
"""
input conference_bool_exp {
  _and: [conference_bool_exp]
  _not: conference_bool_exp
  _or: [conference_bool_exp]
  cid: Int_comparison_exp
  domain_conferences: domain_conference_bool_exp
  homepage: String_comparison_exp
  name: String_comparison_exp
}

"""
unique or primary key constraints on table "conference"
"""
enum conference_constraint {
  """unique or primary key constraint"""
  idx_21462_sqlite_autoindex_conference_1
}

"""
input type for incrementing integer column in table "conference"
"""
input conference_inc_input {
  cid: Int
}

"""
input type for inserting data into table "conference"
"""
input conference_insert_input {
  cid: Int
  domain_conferences: domain_conference_arr_rel_insert_input
  homepage: String
  name: String
}

"""aggregate max on columns"""
type conference_max_fields {
  cid: Int
  homepage: String
  name: String
}

"""
order by max() on columns of table "conference"
"""
input conference_max_order_by {
  cid: order_by
  homepage: order_by
  name: order_by
}

"""aggregate min on columns"""
type conference_min_fields {
  cid: Int
  homepage: String
  name: String
}

"""
order by min() on columns of table "conference"
"""
input conference_min_order_by {
  cid: order_by
  homepage: order_by
  name: order_by
}

"""
response of any mutation on the table "conference"
"""
type conference_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [conference!]!
}

"""
input type for inserting object relation for remote table "conference"
"""
input conference_obj_rel_insert_input {
  data: conference_insert_input!
  on_conflict: conference_on_conflict
}

"""
on conflict condition type for table "conference"
"""
input conference_on_conflict {
  constraint: conference_constraint!
  update_columns: [conference_update_column!]!
  where: conference_bool_exp
}

"""
ordering options when selecting data from "conference"
"""
input conference_order_by {
  cid: order_by
  domain_conferences_aggregate: domain_conference_aggregate_order_by
  homepage: order_by
  name: order_by
}

"""
primary key columns input for table: "conference"
"""
input conference_pk_columns_input {
  cid: Int!
}

"""
select columns of table "conference"
"""
enum conference_select_column {
  """column name"""
  cid

  """column name"""
  homepage

  """column name"""
  name
}

"""
input type for updating data in table "conference"
"""
input conference_set_input {
  cid: Int
  homepage: String
  name: String
}

"""aggregate stddev on columns"""
type conference_stddev_fields {
  cid: Float
}

"""
order by stddev() on columns of table "conference"
"""
input conference_stddev_order_by {
  cid: order_by
}

"""aggregate stddev_pop on columns"""
type conference_stddev_pop_fields {
  cid: Float
}

"""
order by stddev_pop() on columns of table "conference"
"""
input conference_stddev_pop_order_by {
  cid: order_by
}

"""aggregate stddev_samp on columns"""
type conference_stddev_samp_fields {
  cid: Float
}

"""
order by stddev_samp() on columns of table "conference"
"""
input conference_stddev_samp_order_by {
  cid: order_by
}

"""aggregate sum on columns"""
type conference_sum_fields {
  cid: Int
}

"""
order by sum() on columns of table "conference"
"""
input conference_sum_order_by {
  cid: order_by
}

"""
update columns of table "conference"
"""
enum conference_update_column {
  """column name"""
  cid

  """column name"""
  homepage

  """column name"""
  name
}

"""aggregate var_pop on columns"""
type conference_var_pop_fields {
  cid: Float
}

"""
order by var_pop() on columns of table "conference"
"""
input conference_var_pop_order_by {
  cid: order_by
}

"""aggregate var_samp on columns"""
type conference_var_samp_fields {
  cid: Float
}

"""
order by var_samp() on columns of table "conference"
"""
input conference_var_samp_order_by {
  cid: order_by
}

"""aggregate variance on columns"""
type conference_variance_fields {
  cid: Float
}

"""
order by variance() on columns of table "conference"
"""
input conference_variance_order_by {
  cid: order_by
}

"""
columns and relationships of "domain"
"""
type domain {
  did: Int!

  """An array relationship"""
  domain_authors(
    """distinct select on columns"""
    distinct_on: [domain_author_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [domain_author_order_by!]

    """filter the rows returned"""
    where: domain_author_bool_exp
  ): [domain_author!]!

  """An aggregated array relationship"""
  domain_authors_aggregate(
    """distinct select on columns"""
    distinct_on: [domain_author_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [domain_author_order_by!]

    """filter the rows returned"""
    where: domain_author_bool_exp
  ): domain_author_aggregate!

  """An array relationship"""
  domain_conferences(
    """distinct select on columns"""
    distinct_on: [domain_conference_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [domain_conference_order_by!]

    """filter the rows returned"""
    where: domain_conference_bool_exp
  ): [domain_conference!]!

  """An aggregated array relationship"""
  domain_conferences_aggregate(
    """distinct select on columns"""
    distinct_on: [domain_conference_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [domain_conference_order_by!]

    """filter the rows returned"""
    where: domain_conference_bool_exp
  ): domain_conference_aggregate!

  """An array relationship"""
  domain_journals(
    """distinct select on columns"""
    distinct_on: [domain_journal_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [domain_journal_order_by!]

    """filter the rows returned"""
    where: domain_journal_bool_exp
  ): [domain_journal!]!

  """An aggregated array relationship"""
  domain_journals_aggregate(
    """distinct select on columns"""
    distinct_on: [domain_journal_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [domain_journal_order_by!]

    """filter the rows returned"""
    where: domain_journal_bool_exp
  ): domain_journal_aggregate!

  """An array relationship"""
  domain_keywords(
    """distinct select on columns"""
    distinct_on: [domain_keyword_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [domain_keyword_order_by!]

    """filter the rows returned"""
    where: domain_keyword_bool_exp
  ): [domain_keyword!]!

  """An aggregated array relationship"""
  domain_keywords_aggregate(
    """distinct select on columns"""
    distinct_on: [domain_keyword_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [domain_keyword_order_by!]

    """filter the rows returned"""
    where: domain_keyword_bool_exp
  ): domain_keyword_aggregate!

  """An array relationship"""
  domain_publications(
    """distinct select on columns"""
    distinct_on: [domain_publication_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [domain_publication_order_by!]

    """filter the rows returned"""
    where: domain_publication_bool_exp
  ): [domain_publication!]!

  """An aggregated array relationship"""
  domain_publications_aggregate(
    """distinct select on columns"""
    distinct_on: [domain_publication_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [domain_publication_order_by!]

    """filter the rows returned"""
    where: domain_publication_bool_exp
  ): domain_publication_aggregate!
  name: String
}

"""
aggregated selection of "domain"
"""
type domain_aggregate {
  aggregate: domain_aggregate_fields
  nodes: [domain!]!
}

"""
aggregate fields of "domain"
"""
type domain_aggregate_fields {
  avg: domain_avg_fields
  count(columns: [domain_select_column!], distinct: Boolean): Int
  max: domain_max_fields
  min: domain_min_fields
  stddev: domain_stddev_fields
  stddev_pop: domain_stddev_pop_fields
  stddev_samp: domain_stddev_samp_fields
  sum: domain_sum_fields
  var_pop: domain_var_pop_fields
  var_samp: domain_var_samp_fields
  variance: domain_variance_fields
}

"""
order by aggregate values of table "domain"
"""
input domain_aggregate_order_by {
  avg: domain_avg_order_by
  count: order_by
  max: domain_max_order_by
  min: domain_min_order_by
  stddev: domain_stddev_order_by
  stddev_pop: domain_stddev_pop_order_by
  stddev_samp: domain_stddev_samp_order_by
  sum: domain_sum_order_by
  var_pop: domain_var_pop_order_by
  var_samp: domain_var_samp_order_by
  variance: domain_variance_order_by
}

"""
input type for inserting array relation for remote table "domain"
"""
input domain_arr_rel_insert_input {
  data: [domain_insert_input!]!
  on_conflict: domain_on_conflict
}

"""
columns and relationships of "domain_author"
"""
type domain_author {
  aid: Int

  """An object relationship"""
  author: author
  did: Int

  """An object relationship"""
  domain: domain
}

"""
aggregated selection of "domain_author"
"""
type domain_author_aggregate {
  aggregate: domain_author_aggregate_fields
  nodes: [domain_author!]!
}

"""
aggregate fields of "domain_author"
"""
type domain_author_aggregate_fields {
  avg: domain_author_avg_fields
  count(columns: [domain_author_select_column!], distinct: Boolean): Int
  max: domain_author_max_fields
  min: domain_author_min_fields
  stddev: domain_author_stddev_fields
  stddev_pop: domain_author_stddev_pop_fields
  stddev_samp: domain_author_stddev_samp_fields
  sum: domain_author_sum_fields
  var_pop: domain_author_var_pop_fields
  var_samp: domain_author_var_samp_fields
  variance: domain_author_variance_fields
}

"""
order by aggregate values of table "domain_author"
"""
input domain_author_aggregate_order_by {
  avg: domain_author_avg_order_by
  count: order_by
  max: domain_author_max_order_by
  min: domain_author_min_order_by
  stddev: domain_author_stddev_order_by
  stddev_pop: domain_author_stddev_pop_order_by
  stddev_samp: domain_author_stddev_samp_order_by
  sum: domain_author_sum_order_by
  var_pop: domain_author_var_pop_order_by
  var_samp: domain_author_var_samp_order_by
  variance: domain_author_variance_order_by
}

"""
input type for inserting array relation for remote table "domain_author"
"""
input domain_author_arr_rel_insert_input {
  data: [domain_author_insert_input!]!
  on_conflict: domain_author_on_conflict
}

"""aggregate avg on columns"""
type domain_author_avg_fields {
  aid: Float
  did: Float
}

"""
order by avg() on columns of table "domain_author"
"""
input domain_author_avg_order_by {
  aid: order_by
  did: order_by
}

"""
Boolean expression to filter rows from the table "domain_author". All fields are combined with a logical 'AND'.
"""
input domain_author_bool_exp {
  _and: [domain_author_bool_exp]
  _not: domain_author_bool_exp
  _or: [domain_author_bool_exp]
  aid: Int_comparison_exp
  author: author_bool_exp
  did: Int_comparison_exp
  domain: domain_bool_exp
}

"""
unique or primary key constraints on table "domain_author"
"""
enum domain_author_constraint {
  """unique or primary key constraint"""
  idx_21474_sqlite_autoindex_domain_author_1
}

"""
input type for incrementing integer column in table "domain_author"
"""
input domain_author_inc_input {
  aid: Int
  did: Int
}

"""
input type for inserting data into table "domain_author"
"""
input domain_author_insert_input {
  aid: Int
  author: author_obj_rel_insert_input
  did: Int
  domain: domain_obj_rel_insert_input
}

"""aggregate max on columns"""
type domain_author_max_fields {
  aid: Int
  did: Int
}

"""
order by max() on columns of table "domain_author"
"""
input domain_author_max_order_by {
  aid: order_by
  did: order_by
}

"""aggregate min on columns"""
type domain_author_min_fields {
  aid: Int
  did: Int
}

"""
order by min() on columns of table "domain_author"
"""
input domain_author_min_order_by {
  aid: order_by
  did: order_by
}

"""
response of any mutation on the table "domain_author"
"""
type domain_author_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [domain_author!]!
}

"""
input type for inserting object relation for remote table "domain_author"
"""
input domain_author_obj_rel_insert_input {
  data: domain_author_insert_input!
  on_conflict: domain_author_on_conflict
}

"""
on conflict condition type for table "domain_author"
"""
input domain_author_on_conflict {
  constraint: domain_author_constraint!
  update_columns: [domain_author_update_column!]!
  where: domain_author_bool_exp
}

"""
ordering options when selecting data from "domain_author"
"""
input domain_author_order_by {
  aid: order_by
  author: author_order_by
  did: order_by
  domain: domain_order_by
}

"""
select columns of table "domain_author"
"""
enum domain_author_select_column {
  """column name"""
  aid

  """column name"""
  did
}

"""
input type for updating data in table "domain_author"
"""
input domain_author_set_input {
  aid: Int
  did: Int
}

"""aggregate stddev on columns"""
type domain_author_stddev_fields {
  aid: Float
  did: Float
}

"""
order by stddev() on columns of table "domain_author"
"""
input domain_author_stddev_order_by {
  aid: order_by
  did: order_by
}

"""aggregate stddev_pop on columns"""
type domain_author_stddev_pop_fields {
  aid: Float
  did: Float
}

"""
order by stddev_pop() on columns of table "domain_author"
"""
input domain_author_stddev_pop_order_by {
  aid: order_by
  did: order_by
}

"""aggregate stddev_samp on columns"""
type domain_author_stddev_samp_fields {
  aid: Float
  did: Float
}

"""
order by stddev_samp() on columns of table "domain_author"
"""
input domain_author_stddev_samp_order_by {
  aid: order_by
  did: order_by
}

"""aggregate sum on columns"""
type domain_author_sum_fields {
  aid: Int
  did: Int
}

"""
order by sum() on columns of table "domain_author"
"""
input domain_author_sum_order_by {
  aid: order_by
  did: order_by
}

"""
update columns of table "domain_author"
"""
enum domain_author_update_column {
  """column name"""
  aid

  """column name"""
  did
}

"""aggregate var_pop on columns"""
type domain_author_var_pop_fields {
  aid: Float
  did: Float
}

"""
order by var_pop() on columns of table "domain_author"
"""
input domain_author_var_pop_order_by {
  aid: order_by
  did: order_by
}

"""aggregate var_samp on columns"""
type domain_author_var_samp_fields {
  aid: Float
  did: Float
}

"""
order by var_samp() on columns of table "domain_author"
"""
input domain_author_var_samp_order_by {
  aid: order_by
  did: order_by
}

"""aggregate variance on columns"""
type domain_author_variance_fields {
  aid: Float
  did: Float
}

"""
order by variance() on columns of table "domain_author"
"""
input domain_author_variance_order_by {
  aid: order_by
  did: order_by
}

"""aggregate avg on columns"""
type domain_avg_fields {
  did: Float
}

"""
order by avg() on columns of table "domain"
"""
input domain_avg_order_by {
  did: order_by
}

"""
Boolean expression to filter rows from the table "domain". All fields are combined with a logical 'AND'.
"""
input domain_bool_exp {
  _and: [domain_bool_exp]
  _not: domain_bool_exp
  _or: [domain_bool_exp]
  did: Int_comparison_exp
  domain_authors: domain_author_bool_exp
  domain_conferences: domain_conference_bool_exp
  domain_journals: domain_journal_bool_exp
  domain_keywords: domain_keyword_bool_exp
  domain_publications: domain_publication_bool_exp
  name: String_comparison_exp
}

"""
columns and relationships of "domain_conference"
"""
type domain_conference {
  cid: Int

  """An object relationship"""
  conference: conference
  did: Int

  """An object relationship"""
  domain: domain
}

"""
aggregated selection of "domain_conference"
"""
type domain_conference_aggregate {
  aggregate: domain_conference_aggregate_fields
  nodes: [domain_conference!]!
}

"""
aggregate fields of "domain_conference"
"""
type domain_conference_aggregate_fields {
  avg: domain_conference_avg_fields
  count(columns: [domain_conference_select_column!], distinct: Boolean): Int
  max: domain_conference_max_fields
  min: domain_conference_min_fields
  stddev: domain_conference_stddev_fields
  stddev_pop: domain_conference_stddev_pop_fields
  stddev_samp: domain_conference_stddev_samp_fields
  sum: domain_conference_sum_fields
  var_pop: domain_conference_var_pop_fields
  var_samp: domain_conference_var_samp_fields
  variance: domain_conference_variance_fields
}

"""
order by aggregate values of table "domain_conference"
"""
input domain_conference_aggregate_order_by {
  avg: domain_conference_avg_order_by
  count: order_by
  max: domain_conference_max_order_by
  min: domain_conference_min_order_by
  stddev: domain_conference_stddev_order_by
  stddev_pop: domain_conference_stddev_pop_order_by
  stddev_samp: domain_conference_stddev_samp_order_by
  sum: domain_conference_sum_order_by
  var_pop: domain_conference_var_pop_order_by
  var_samp: domain_conference_var_samp_order_by
  variance: domain_conference_variance_order_by
}

"""
input type for inserting array relation for remote table "domain_conference"
"""
input domain_conference_arr_rel_insert_input {
  data: [domain_conference_insert_input!]!
  on_conflict: domain_conference_on_conflict
}

"""aggregate avg on columns"""
type domain_conference_avg_fields {
  cid: Float
  did: Float
}

"""
order by avg() on columns of table "domain_conference"
"""
input domain_conference_avg_order_by {
  cid: order_by
  did: order_by
}

"""
Boolean expression to filter rows from the table "domain_conference". All fields are combined with a logical 'AND'.
"""
input domain_conference_bool_exp {
  _and: [domain_conference_bool_exp]
  _not: domain_conference_bool_exp
  _or: [domain_conference_bool_exp]
  cid: Int_comparison_exp
  conference: conference_bool_exp
  did: Int_comparison_exp
  domain: domain_bool_exp
}

"""
unique or primary key constraints on table "domain_conference"
"""
enum domain_conference_constraint {
  """unique or primary key constraint"""
  idx_21477_sqlite_autoindex_domain_conference_1
}

"""
input type for incrementing integer column in table "domain_conference"
"""
input domain_conference_inc_input {
  cid: Int
  did: Int
}

"""
input type for inserting data into table "domain_conference"
"""
input domain_conference_insert_input {
  cid: Int
  conference: conference_obj_rel_insert_input
  did: Int
  domain: domain_obj_rel_insert_input
}

"""aggregate max on columns"""
type domain_conference_max_fields {
  cid: Int
  did: Int
}

"""
order by max() on columns of table "domain_conference"
"""
input domain_conference_max_order_by {
  cid: order_by
  did: order_by
}

"""aggregate min on columns"""
type domain_conference_min_fields {
  cid: Int
  did: Int
}

"""
order by min() on columns of table "domain_conference"
"""
input domain_conference_min_order_by {
  cid: order_by
  did: order_by
}

"""
response of any mutation on the table "domain_conference"
"""
type domain_conference_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [domain_conference!]!
}

"""
input type for inserting object relation for remote table "domain_conference"
"""
input domain_conference_obj_rel_insert_input {
  data: domain_conference_insert_input!
  on_conflict: domain_conference_on_conflict
}

"""
on conflict condition type for table "domain_conference"
"""
input domain_conference_on_conflict {
  constraint: domain_conference_constraint!
  update_columns: [domain_conference_update_column!]!
  where: domain_conference_bool_exp
}

"""
ordering options when selecting data from "domain_conference"
"""
input domain_conference_order_by {
  cid: order_by
  conference: conference_order_by
  did: order_by
  domain: domain_order_by
}

"""
select columns of table "domain_conference"
"""
enum domain_conference_select_column {
  """column name"""
  cid

  """column name"""
  did
}

"""
input type for updating data in table "domain_conference"
"""
input domain_conference_set_input {
  cid: Int
  did: Int
}

"""aggregate stddev on columns"""
type domain_conference_stddev_fields {
  cid: Float
  did: Float
}

"""
order by stddev() on columns of table "domain_conference"
"""
input domain_conference_stddev_order_by {
  cid: order_by
  did: order_by
}

"""aggregate stddev_pop on columns"""
type domain_conference_stddev_pop_fields {
  cid: Float
  did: Float
}

"""
order by stddev_pop() on columns of table "domain_conference"
"""
input domain_conference_stddev_pop_order_by {
  cid: order_by
  did: order_by
}

"""aggregate stddev_samp on columns"""
type domain_conference_stddev_samp_fields {
  cid: Float
  did: Float
}

"""
order by stddev_samp() on columns of table "domain_conference"
"""
input domain_conference_stddev_samp_order_by {
  cid: order_by
  did: order_by
}

"""aggregate sum on columns"""
type domain_conference_sum_fields {
  cid: Int
  did: Int
}

"""
order by sum() on columns of table "domain_conference"
"""
input domain_conference_sum_order_by {
  cid: order_by
  did: order_by
}

"""
update columns of table "domain_conference"
"""
enum domain_conference_update_column {
  """column name"""
  cid

  """column name"""
  did
}

"""aggregate var_pop on columns"""
type domain_conference_var_pop_fields {
  cid: Float
  did: Float
}

"""
order by var_pop() on columns of table "domain_conference"
"""
input domain_conference_var_pop_order_by {
  cid: order_by
  did: order_by
}

"""aggregate var_samp on columns"""
type domain_conference_var_samp_fields {
  cid: Float
  did: Float
}

"""
order by var_samp() on columns of table "domain_conference"
"""
input domain_conference_var_samp_order_by {
  cid: order_by
  did: order_by
}

"""aggregate variance on columns"""
type domain_conference_variance_fields {
  cid: Float
  did: Float
}

"""
order by variance() on columns of table "domain_conference"
"""
input domain_conference_variance_order_by {
  cid: order_by
  did: order_by
}

"""
unique or primary key constraints on table "domain"
"""
enum domain_constraint {
  """unique or primary key constraint"""
  idx_21468_sqlite_autoindex_domain_1
}

"""
input type for incrementing integer column in table "domain"
"""
input domain_inc_input {
  did: Int
}

"""
input type for inserting data into table "domain"
"""
input domain_insert_input {
  did: Int
  domain_authors: domain_author_arr_rel_insert_input
  domain_conferences: domain_conference_arr_rel_insert_input
  domain_journals: domain_journal_arr_rel_insert_input
  domain_keywords: domain_keyword_arr_rel_insert_input
  domain_publications: domain_publication_arr_rel_insert_input
  name: String
}

"""
columns and relationships of "domain_journal"
"""
type domain_journal {
  did: Int!

  """An object relationship"""
  domain: domain!
  jid: Int!

  """An object relationship"""
  journal: journal!
}

"""
aggregated selection of "domain_journal"
"""
type domain_journal_aggregate {
  aggregate: domain_journal_aggregate_fields
  nodes: [domain_journal!]!
}

"""
aggregate fields of "domain_journal"
"""
type domain_journal_aggregate_fields {
  avg: domain_journal_avg_fields
  count(columns: [domain_journal_select_column!], distinct: Boolean): Int
  max: domain_journal_max_fields
  min: domain_journal_min_fields
  stddev: domain_journal_stddev_fields
  stddev_pop: domain_journal_stddev_pop_fields
  stddev_samp: domain_journal_stddev_samp_fields
  sum: domain_journal_sum_fields
  var_pop: domain_journal_var_pop_fields
  var_samp: domain_journal_var_samp_fields
  variance: domain_journal_variance_fields
}

"""
order by aggregate values of table "domain_journal"
"""
input domain_journal_aggregate_order_by {
  avg: domain_journal_avg_order_by
  count: order_by
  max: domain_journal_max_order_by
  min: domain_journal_min_order_by
  stddev: domain_journal_stddev_order_by
  stddev_pop: domain_journal_stddev_pop_order_by
  stddev_samp: domain_journal_stddev_samp_order_by
  sum: domain_journal_sum_order_by
  var_pop: domain_journal_var_pop_order_by
  var_samp: domain_journal_var_samp_order_by
  variance: domain_journal_variance_order_by
}

"""
input type for inserting array relation for remote table "domain_journal"
"""
input domain_journal_arr_rel_insert_input {
  data: [domain_journal_insert_input!]!
  on_conflict: domain_journal_on_conflict
}

"""aggregate avg on columns"""
type domain_journal_avg_fields {
  did: Float
  jid: Float
}

"""
order by avg() on columns of table "domain_journal"
"""
input domain_journal_avg_order_by {
  did: order_by
  jid: order_by
}

"""
Boolean expression to filter rows from the table "domain_journal". All fields are combined with a logical 'AND'.
"""
input domain_journal_bool_exp {
  _and: [domain_journal_bool_exp]
  _not: domain_journal_bool_exp
  _or: [domain_journal_bool_exp]
  did: Int_comparison_exp
  domain: domain_bool_exp
  jid: Int_comparison_exp
  journal: journal_bool_exp
}

"""
unique or primary key constraints on table "domain_journal"
"""
enum domain_journal_constraint {
  """unique or primary key constraint"""
  idx_21486_sqlite_autoindex_domain_journal_1
}

"""
input type for incrementing integer column in table "domain_journal"
"""
input domain_journal_inc_input {
  did: Int
  jid: Int
}

"""
input type for inserting data into table "domain_journal"
"""
input domain_journal_insert_input {
  did: Int
  domain: domain_obj_rel_insert_input
  jid: Int
  journal: journal_obj_rel_insert_input
}

"""aggregate max on columns"""
type domain_journal_max_fields {
  did: Int
  jid: Int
}

"""
order by max() on columns of table "domain_journal"
"""
input domain_journal_max_order_by {
  did: order_by
  jid: order_by
}

"""aggregate min on columns"""
type domain_journal_min_fields {
  did: Int
  jid: Int
}

"""
order by min() on columns of table "domain_journal"
"""
input domain_journal_min_order_by {
  did: order_by
  jid: order_by
}

"""
response of any mutation on the table "domain_journal"
"""
type domain_journal_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [domain_journal!]!
}

"""
input type for inserting object relation for remote table "domain_journal"
"""
input domain_journal_obj_rel_insert_input {
  data: domain_journal_insert_input!
  on_conflict: domain_journal_on_conflict
}

"""
on conflict condition type for table "domain_journal"
"""
input domain_journal_on_conflict {
  constraint: domain_journal_constraint!
  update_columns: [domain_journal_update_column!]!
  where: domain_journal_bool_exp
}

"""
ordering options when selecting data from "domain_journal"
"""
input domain_journal_order_by {
  did: order_by
  domain: domain_order_by
  jid: order_by
  journal: journal_order_by
}

"""
primary key columns input for table: "domain_journal"
"""
input domain_journal_pk_columns_input {
  did: Int!
  jid: Int!
}

"""
select columns of table "domain_journal"
"""
enum domain_journal_select_column {
  """column name"""
  did

  """column name"""
  jid
}

"""
input type for updating data in table "domain_journal"
"""
input domain_journal_set_input {
  did: Int
  jid: Int
}

"""aggregate stddev on columns"""
type domain_journal_stddev_fields {
  did: Float
  jid: Float
}

"""
order by stddev() on columns of table "domain_journal"
"""
input domain_journal_stddev_order_by {
  did: order_by
  jid: order_by
}

"""aggregate stddev_pop on columns"""
type domain_journal_stddev_pop_fields {
  did: Float
  jid: Float
}

"""
order by stddev_pop() on columns of table "domain_journal"
"""
input domain_journal_stddev_pop_order_by {
  did: order_by
  jid: order_by
}

"""aggregate stddev_samp on columns"""
type domain_journal_stddev_samp_fields {
  did: Float
  jid: Float
}

"""
order by stddev_samp() on columns of table "domain_journal"
"""
input domain_journal_stddev_samp_order_by {
  did: order_by
  jid: order_by
}

"""aggregate sum on columns"""
type domain_journal_sum_fields {
  did: Int
  jid: Int
}

"""
order by sum() on columns of table "domain_journal"
"""
input domain_journal_sum_order_by {
  did: order_by
  jid: order_by
}

"""
update columns of table "domain_journal"
"""
enum domain_journal_update_column {
  """column name"""
  did

  """column name"""
  jid
}

"""aggregate var_pop on columns"""
type domain_journal_var_pop_fields {
  did: Float
  jid: Float
}

"""
order by var_pop() on columns of table "domain_journal"
"""
input domain_journal_var_pop_order_by {
  did: order_by
  jid: order_by
}

"""aggregate var_samp on columns"""
type domain_journal_var_samp_fields {
  did: Float
  jid: Float
}

"""
order by var_samp() on columns of table "domain_journal"
"""
input domain_journal_var_samp_order_by {
  did: order_by
  jid: order_by
}

"""aggregate variance on columns"""
type domain_journal_variance_fields {
  did: Float
  jid: Float
}

"""
order by variance() on columns of table "domain_journal"
"""
input domain_journal_variance_order_by {
  did: order_by
  jid: order_by
}

"""
columns and relationships of "domain_keyword"
"""
type domain_keyword {
  did: Int!

  """An object relationship"""
  domain: domain!

  """An object relationship"""
  keyword: keyword!
  kid: Int!
}

"""
aggregated selection of "domain_keyword"
"""
type domain_keyword_aggregate {
  aggregate: domain_keyword_aggregate_fields
  nodes: [domain_keyword!]!
}

"""
aggregate fields of "domain_keyword"
"""
type domain_keyword_aggregate_fields {
  avg: domain_keyword_avg_fields
  count(columns: [domain_keyword_select_column!], distinct: Boolean): Int
  max: domain_keyword_max_fields
  min: domain_keyword_min_fields
  stddev: domain_keyword_stddev_fields
  stddev_pop: domain_keyword_stddev_pop_fields
  stddev_samp: domain_keyword_stddev_samp_fields
  sum: domain_keyword_sum_fields
  var_pop: domain_keyword_var_pop_fields
  var_samp: domain_keyword_var_samp_fields
  variance: domain_keyword_variance_fields
}

"""
order by aggregate values of table "domain_keyword"
"""
input domain_keyword_aggregate_order_by {
  avg: domain_keyword_avg_order_by
  count: order_by
  max: domain_keyword_max_order_by
  min: domain_keyword_min_order_by
  stddev: domain_keyword_stddev_order_by
  stddev_pop: domain_keyword_stddev_pop_order_by
  stddev_samp: domain_keyword_stddev_samp_order_by
  sum: domain_keyword_sum_order_by
  var_pop: domain_keyword_var_pop_order_by
  var_samp: domain_keyword_var_samp_order_by
  variance: domain_keyword_variance_order_by
}

"""
input type for inserting array relation for remote table "domain_keyword"
"""
input domain_keyword_arr_rel_insert_input {
  data: [domain_keyword_insert_input!]!
  on_conflict: domain_keyword_on_conflict
}

"""aggregate avg on columns"""
type domain_keyword_avg_fields {
  did: Float
  kid: Float
}

"""
order by avg() on columns of table "domain_keyword"
"""
input domain_keyword_avg_order_by {
  did: order_by
  kid: order_by
}

"""
Boolean expression to filter rows from the table "domain_keyword". All fields are combined with a logical 'AND'.
"""
input domain_keyword_bool_exp {
  _and: [domain_keyword_bool_exp]
  _not: domain_keyword_bool_exp
  _or: [domain_keyword_bool_exp]
  did: Int_comparison_exp
  domain: domain_bool_exp
  keyword: keyword_bool_exp
  kid: Int_comparison_exp
}

"""
unique or primary key constraints on table "domain_keyword"
"""
enum domain_keyword_constraint {
  """unique or primary key constraint"""
  idx_21495_sqlite_autoindex_domain_keyword_1
}

"""
input type for incrementing integer column in table "domain_keyword"
"""
input domain_keyword_inc_input {
  did: Int
  kid: Int
}

"""
input type for inserting data into table "domain_keyword"
"""
input domain_keyword_insert_input {
  did: Int
  domain: domain_obj_rel_insert_input
  keyword: keyword_obj_rel_insert_input
  kid: Int
}

"""aggregate max on columns"""
type domain_keyword_max_fields {
  did: Int
  kid: Int
}

"""
order by max() on columns of table "domain_keyword"
"""
input domain_keyword_max_order_by {
  did: order_by
  kid: order_by
}

"""aggregate min on columns"""
type domain_keyword_min_fields {
  did: Int
  kid: Int
}

"""
order by min() on columns of table "domain_keyword"
"""
input domain_keyword_min_order_by {
  did: order_by
  kid: order_by
}

"""
response of any mutation on the table "domain_keyword"
"""
type domain_keyword_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [domain_keyword!]!
}

"""
input type for inserting object relation for remote table "domain_keyword"
"""
input domain_keyword_obj_rel_insert_input {
  data: domain_keyword_insert_input!
  on_conflict: domain_keyword_on_conflict
}

"""
on conflict condition type for table "domain_keyword"
"""
input domain_keyword_on_conflict {
  constraint: domain_keyword_constraint!
  update_columns: [domain_keyword_update_column!]!
  where: domain_keyword_bool_exp
}

"""
ordering options when selecting data from "domain_keyword"
"""
input domain_keyword_order_by {
  did: order_by
  domain: domain_order_by
  keyword: keyword_order_by
  kid: order_by
}

"""
primary key columns input for table: "domain_keyword"
"""
input domain_keyword_pk_columns_input {
  did: Int!
  kid: Int!
}

"""
select columns of table "domain_keyword"
"""
enum domain_keyword_select_column {
  """column name"""
  did

  """column name"""
  kid
}

"""
input type for updating data in table "domain_keyword"
"""
input domain_keyword_set_input {
  did: Int
  kid: Int
}

"""aggregate stddev on columns"""
type domain_keyword_stddev_fields {
  did: Float
  kid: Float
}

"""
order by stddev() on columns of table "domain_keyword"
"""
input domain_keyword_stddev_order_by {
  did: order_by
  kid: order_by
}

"""aggregate stddev_pop on columns"""
type domain_keyword_stddev_pop_fields {
  did: Float
  kid: Float
}

"""
order by stddev_pop() on columns of table "domain_keyword"
"""
input domain_keyword_stddev_pop_order_by {
  did: order_by
  kid: order_by
}

"""aggregate stddev_samp on columns"""
type domain_keyword_stddev_samp_fields {
  did: Float
  kid: Float
}

"""
order by stddev_samp() on columns of table "domain_keyword"
"""
input domain_keyword_stddev_samp_order_by {
  did: order_by
  kid: order_by
}

"""aggregate sum on columns"""
type domain_keyword_sum_fields {
  did: Int
  kid: Int
}

"""
order by sum() on columns of table "domain_keyword"
"""
input domain_keyword_sum_order_by {
  did: order_by
  kid: order_by
}

"""
update columns of table "domain_keyword"
"""
enum domain_keyword_update_column {
  """column name"""
  did

  """column name"""
  kid
}

"""aggregate var_pop on columns"""
type domain_keyword_var_pop_fields {
  did: Float
  kid: Float
}

"""
order by var_pop() on columns of table "domain_keyword"
"""
input domain_keyword_var_pop_order_by {
  did: order_by
  kid: order_by
}

"""aggregate var_samp on columns"""
type domain_keyword_var_samp_fields {
  did: Float
  kid: Float
}

"""
order by var_samp() on columns of table "domain_keyword"
"""
input domain_keyword_var_samp_order_by {
  did: order_by
  kid: order_by
}

"""aggregate variance on columns"""
type domain_keyword_variance_fields {
  did: Float
  kid: Float
}

"""
order by variance() on columns of table "domain_keyword"
"""
input domain_keyword_variance_order_by {
  did: order_by
  kid: order_by
}

"""aggregate max on columns"""
type domain_max_fields {
  did: Int
  name: String
}

"""
order by max() on columns of table "domain"
"""
input domain_max_order_by {
  did: order_by
  name: order_by
}

"""aggregate min on columns"""
type domain_min_fields {
  did: Int
  name: String
}

"""
order by min() on columns of table "domain"
"""
input domain_min_order_by {
  did: order_by
  name: order_by
}

"""
response of any mutation on the table "domain"
"""
type domain_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [domain!]!
}

"""
input type for inserting object relation for remote table "domain"
"""
input domain_obj_rel_insert_input {
  data: domain_insert_input!
  on_conflict: domain_on_conflict
}

"""
on conflict condition type for table "domain"
"""
input domain_on_conflict {
  constraint: domain_constraint!
  update_columns: [domain_update_column!]!
  where: domain_bool_exp
}

"""
ordering options when selecting data from "domain"
"""
input domain_order_by {
  did: order_by
  domain_authors_aggregate: domain_author_aggregate_order_by
  domain_conferences_aggregate: domain_conference_aggregate_order_by
  domain_journals_aggregate: domain_journal_aggregate_order_by
  domain_keywords_aggregate: domain_keyword_aggregate_order_by
  domain_publications_aggregate: domain_publication_aggregate_order_by
  name: order_by
}

"""
primary key columns input for table: "domain"
"""
input domain_pk_columns_input {
  did: Int!
}

"""
columns and relationships of "domain_publication"
"""
type domain_publication {
  did: Int!

  """An object relationship"""
  domain: domain!
  pid: Int!

  """An object relationship"""
  publication: publication!
}

"""
aggregated selection of "domain_publication"
"""
type domain_publication_aggregate {
  aggregate: domain_publication_aggregate_fields
  nodes: [domain_publication!]!
}

"""
aggregate fields of "domain_publication"
"""
type domain_publication_aggregate_fields {
  avg: domain_publication_avg_fields
  count(columns: [domain_publication_select_column!], distinct: Boolean): Int
  max: domain_publication_max_fields
  min: domain_publication_min_fields
  stddev: domain_publication_stddev_fields
  stddev_pop: domain_publication_stddev_pop_fields
  stddev_samp: domain_publication_stddev_samp_fields
  sum: domain_publication_sum_fields
  var_pop: domain_publication_var_pop_fields
  var_samp: domain_publication_var_samp_fields
  variance: domain_publication_variance_fields
}

"""
order by aggregate values of table "domain_publication"
"""
input domain_publication_aggregate_order_by {
  avg: domain_publication_avg_order_by
  count: order_by
  max: domain_publication_max_order_by
  min: domain_publication_min_order_by
  stddev: domain_publication_stddev_order_by
  stddev_pop: domain_publication_stddev_pop_order_by
  stddev_samp: domain_publication_stddev_samp_order_by
  sum: domain_publication_sum_order_by
  var_pop: domain_publication_var_pop_order_by
  var_samp: domain_publication_var_samp_order_by
  variance: domain_publication_variance_order_by
}

"""
input type for inserting array relation for remote table "domain_publication"
"""
input domain_publication_arr_rel_insert_input {
  data: [domain_publication_insert_input!]!
  on_conflict: domain_publication_on_conflict
}

"""aggregate avg on columns"""
type domain_publication_avg_fields {
  did: Float
  pid: Float
}

"""
order by avg() on columns of table "domain_publication"
"""
input domain_publication_avg_order_by {
  did: order_by
  pid: order_by
}

"""
Boolean expression to filter rows from the table "domain_publication". All fields are combined with a logical 'AND'.
"""
input domain_publication_bool_exp {
  _and: [domain_publication_bool_exp]
  _not: domain_publication_bool_exp
  _or: [domain_publication_bool_exp]
  did: Int_comparison_exp
  domain: domain_bool_exp
  pid: Int_comparison_exp
  publication: publication_bool_exp
}

"""
unique or primary key constraints on table "domain_publication"
"""
enum domain_publication_constraint {
  """unique or primary key constraint"""
  idx_21504_sqlite_autoindex_domain_publication_1
}

"""
input type for incrementing integer column in table "domain_publication"
"""
input domain_publication_inc_input {
  did: Int
  pid: Int
}

"""
input type for inserting data into table "domain_publication"
"""
input domain_publication_insert_input {
  did: Int
  domain: domain_obj_rel_insert_input
  pid: Int
  publication: publication_obj_rel_insert_input
}

"""aggregate max on columns"""
type domain_publication_max_fields {
  did: Int
  pid: Int
}

"""
order by max() on columns of table "domain_publication"
"""
input domain_publication_max_order_by {
  did: order_by
  pid: order_by
}

"""aggregate min on columns"""
type domain_publication_min_fields {
  did: Int
  pid: Int
}

"""
order by min() on columns of table "domain_publication"
"""
input domain_publication_min_order_by {
  did: order_by
  pid: order_by
}

"""
response of any mutation on the table "domain_publication"
"""
type domain_publication_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [domain_publication!]!
}

"""
input type for inserting object relation for remote table "domain_publication"
"""
input domain_publication_obj_rel_insert_input {
  data: domain_publication_insert_input!
  on_conflict: domain_publication_on_conflict
}

"""
on conflict condition type for table "domain_publication"
"""
input domain_publication_on_conflict {
  constraint: domain_publication_constraint!
  update_columns: [domain_publication_update_column!]!
  where: domain_publication_bool_exp
}

"""
ordering options when selecting data from "domain_publication"
"""
input domain_publication_order_by {
  did: order_by
  domain: domain_order_by
  pid: order_by
  publication: publication_order_by
}

"""
primary key columns input for table: "domain_publication"
"""
input domain_publication_pk_columns_input {
  did: Int!
  pid: Int!
}

"""
select columns of table "domain_publication"
"""
enum domain_publication_select_column {
  """column name"""
  did

  """column name"""
  pid
}

"""
input type for updating data in table "domain_publication"
"""
input domain_publication_set_input {
  did: Int
  pid: Int
}

"""aggregate stddev on columns"""
type domain_publication_stddev_fields {
  did: Float
  pid: Float
}

"""
order by stddev() on columns of table "domain_publication"
"""
input domain_publication_stddev_order_by {
  did: order_by
  pid: order_by
}

"""aggregate stddev_pop on columns"""
type domain_publication_stddev_pop_fields {
  did: Float
  pid: Float
}

"""
order by stddev_pop() on columns of table "domain_publication"
"""
input domain_publication_stddev_pop_order_by {
  did: order_by
  pid: order_by
}

"""aggregate stddev_samp on columns"""
type domain_publication_stddev_samp_fields {
  did: Float
  pid: Float
}

"""
order by stddev_samp() on columns of table "domain_publication"
"""
input domain_publication_stddev_samp_order_by {
  did: order_by
  pid: order_by
}

"""aggregate sum on columns"""
type domain_publication_sum_fields {
  did: Int
  pid: Int
}

"""
order by sum() on columns of table "domain_publication"
"""
input domain_publication_sum_order_by {
  did: order_by
  pid: order_by
}

"""
update columns of table "domain_publication"
"""
enum domain_publication_update_column {
  """column name"""
  did

  """column name"""
  pid
}

"""aggregate var_pop on columns"""
type domain_publication_var_pop_fields {
  did: Float
  pid: Float
}

"""
order by var_pop() on columns of table "domain_publication"
"""
input domain_publication_var_pop_order_by {
  did: order_by
  pid: order_by
}

"""aggregate var_samp on columns"""
type domain_publication_var_samp_fields {
  did: Float
  pid: Float
}

"""
order by var_samp() on columns of table "domain_publication"
"""
input domain_publication_var_samp_order_by {
  did: order_by
  pid: order_by
}

"""aggregate variance on columns"""
type domain_publication_variance_fields {
  did: Float
  pid: Float
}

"""
order by variance() on columns of table "domain_publication"
"""
input domain_publication_variance_order_by {
  did: order_by
  pid: order_by
}

"""
select columns of table "domain"
"""
enum domain_select_column {
  """column name"""
  did

  """column name"""
  name
}

"""
input type for updating data in table "domain"
"""
input domain_set_input {
  did: Int
  name: String
}

"""aggregate stddev on columns"""
type domain_stddev_fields {
  did: Float
}

"""
order by stddev() on columns of table "domain"
"""
input domain_stddev_order_by {
  did: order_by
}

"""aggregate stddev_pop on columns"""
type domain_stddev_pop_fields {
  did: Float
}

"""
order by stddev_pop() on columns of table "domain"
"""
input domain_stddev_pop_order_by {
  did: order_by
}

"""aggregate stddev_samp on columns"""
type domain_stddev_samp_fields {
  did: Float
}

"""
order by stddev_samp() on columns of table "domain"
"""
input domain_stddev_samp_order_by {
  did: order_by
}

"""aggregate sum on columns"""
type domain_sum_fields {
  did: Int
}

"""
order by sum() on columns of table "domain"
"""
input domain_sum_order_by {
  did: order_by
}

"""
update columns of table "domain"
"""
enum domain_update_column {
  """column name"""
  did

  """column name"""
  name
}

"""aggregate var_pop on columns"""
type domain_var_pop_fields {
  did: Float
}

"""
order by var_pop() on columns of table "domain"
"""
input domain_var_pop_order_by {
  did: order_by
}

"""aggregate var_samp on columns"""
type domain_var_samp_fields {
  did: Float
}

"""
order by var_samp() on columns of table "domain"
"""
input domain_var_samp_order_by {
  did: order_by
}

"""aggregate variance on columns"""
type domain_variance_fields {
  did: Float
}

"""
order by variance() on columns of table "domain"
"""
input domain_variance_order_by {
  did: order_by
}

"""
expression to compare columns of type Int. All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""
columns and relationships of "journal"
"""
type journal {
  """An array relationship"""
  domain_journals(
    """distinct select on columns"""
    distinct_on: [domain_journal_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [domain_journal_order_by!]

    """filter the rows returned"""
    where: domain_journal_bool_exp
  ): [domain_journal!]!

  """An aggregated array relationship"""
  domain_journals_aggregate(
    """distinct select on columns"""
    distinct_on: [domain_journal_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [domain_journal_order_by!]

    """filter the rows returned"""
    where: domain_journal_bool_exp
  ): domain_journal_aggregate!
  homepage: String
  jid: Int!
  name: String

  """An array relationship"""
  publications(
    """distinct select on columns"""
    distinct_on: [publication_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [publication_order_by!]

    """filter the rows returned"""
    where: publication_bool_exp
  ): [publication!]!

  """An aggregated array relationship"""
  publications_aggregate(
    """distinct select on columns"""
    distinct_on: [publication_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [publication_order_by!]

    """filter the rows returned"""
    where: publication_bool_exp
  ): publication_aggregate!
}

"""
aggregated selection of "journal"
"""
type journal_aggregate {
  aggregate: journal_aggregate_fields
  nodes: [journal!]!
}

"""
aggregate fields of "journal"
"""
type journal_aggregate_fields {
  avg: journal_avg_fields
  count(columns: [journal_select_column!], distinct: Boolean): Int
  max: journal_max_fields
  min: journal_min_fields
  stddev: journal_stddev_fields
  stddev_pop: journal_stddev_pop_fields
  stddev_samp: journal_stddev_samp_fields
  sum: journal_sum_fields
  var_pop: journal_var_pop_fields
  var_samp: journal_var_samp_fields
  variance: journal_variance_fields
}

"""
order by aggregate values of table "journal"
"""
input journal_aggregate_order_by {
  avg: journal_avg_order_by
  count: order_by
  max: journal_max_order_by
  min: journal_min_order_by
  stddev: journal_stddev_order_by
  stddev_pop: journal_stddev_pop_order_by
  stddev_samp: journal_stddev_samp_order_by
  sum: journal_sum_order_by
  var_pop: journal_var_pop_order_by
  var_samp: journal_var_samp_order_by
  variance: journal_variance_order_by
}

"""
input type for inserting array relation for remote table "journal"
"""
input journal_arr_rel_insert_input {
  data: [journal_insert_input!]!
  on_conflict: journal_on_conflict
}

"""aggregate avg on columns"""
type journal_avg_fields {
  jid: Float
}

"""
order by avg() on columns of table "journal"
"""
input journal_avg_order_by {
  jid: order_by
}

"""
Boolean expression to filter rows from the table "journal". All fields are combined with a logical 'AND'.
"""
input journal_bool_exp {
  _and: [journal_bool_exp]
  _not: journal_bool_exp
  _or: [journal_bool_exp]
  domain_journals: domain_journal_bool_exp
  homepage: String_comparison_exp
  jid: Int_comparison_exp
  name: String_comparison_exp
  publications: publication_bool_exp
}

"""
unique or primary key constraints on table "journal"
"""
enum journal_constraint {
  """unique or primary key constraint"""
  idx_21480_sqlite_autoindex_journal_1
}

"""
input type for incrementing integer column in table "journal"
"""
input journal_inc_input {
  jid: Int
}

"""
input type for inserting data into table "journal"
"""
input journal_insert_input {
  domain_journals: domain_journal_arr_rel_insert_input
  homepage: String
  jid: Int
  name: String
  publications: publication_arr_rel_insert_input
}

"""aggregate max on columns"""
type journal_max_fields {
  homepage: String
  jid: Int
  name: String
}

"""
order by max() on columns of table "journal"
"""
input journal_max_order_by {
  homepage: order_by
  jid: order_by
  name: order_by
}

"""aggregate min on columns"""
type journal_min_fields {
  homepage: String
  jid: Int
  name: String
}

"""
order by min() on columns of table "journal"
"""
input journal_min_order_by {
  homepage: order_by
  jid: order_by
  name: order_by
}

"""
response of any mutation on the table "journal"
"""
type journal_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [journal!]!
}

"""
input type for inserting object relation for remote table "journal"
"""
input journal_obj_rel_insert_input {
  data: journal_insert_input!
  on_conflict: journal_on_conflict
}

"""
on conflict condition type for table "journal"
"""
input journal_on_conflict {
  constraint: journal_constraint!
  update_columns: [journal_update_column!]!
  where: journal_bool_exp
}

"""
ordering options when selecting data from "journal"
"""
input journal_order_by {
  domain_journals_aggregate: domain_journal_aggregate_order_by
  homepage: order_by
  jid: order_by
  name: order_by
  publications_aggregate: publication_aggregate_order_by
}

"""
primary key columns input for table: "journal"
"""
input journal_pk_columns_input {
  jid: Int!
}

"""
select columns of table "journal"
"""
enum journal_select_column {
  """column name"""
  homepage

  """column name"""
  jid

  """column name"""
  name
}

"""
input type for updating data in table "journal"
"""
input journal_set_input {
  homepage: String
  jid: Int
  name: String
}

"""aggregate stddev on columns"""
type journal_stddev_fields {
  jid: Float
}

"""
order by stddev() on columns of table "journal"
"""
input journal_stddev_order_by {
  jid: order_by
}

"""aggregate stddev_pop on columns"""
type journal_stddev_pop_fields {
  jid: Float
}

"""
order by stddev_pop() on columns of table "journal"
"""
input journal_stddev_pop_order_by {
  jid: order_by
}

"""aggregate stddev_samp on columns"""
type journal_stddev_samp_fields {
  jid: Float
}

"""
order by stddev_samp() on columns of table "journal"
"""
input journal_stddev_samp_order_by {
  jid: order_by
}

"""aggregate sum on columns"""
type journal_sum_fields {
  jid: Int
}

"""
order by sum() on columns of table "journal"
"""
input journal_sum_order_by {
  jid: order_by
}

"""
update columns of table "journal"
"""
enum journal_update_column {
  """column name"""
  homepage

  """column name"""
  jid

  """column name"""
  name
}

"""aggregate var_pop on columns"""
type journal_var_pop_fields {
  jid: Float
}

"""
order by var_pop() on columns of table "journal"
"""
input journal_var_pop_order_by {
  jid: order_by
}

"""aggregate var_samp on columns"""
type journal_var_samp_fields {
  jid: Float
}

"""
order by var_samp() on columns of table "journal"
"""
input journal_var_samp_order_by {
  jid: order_by
}

"""aggregate variance on columns"""
type journal_variance_fields {
  jid: Float
}

"""
order by variance() on columns of table "journal"
"""
input journal_variance_order_by {
  jid: order_by
}

"""
columns and relationships of "keyword"
"""
type keyword {
  """An array relationship"""
  domain_keywords(
    """distinct select on columns"""
    distinct_on: [domain_keyword_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [domain_keyword_order_by!]

    """filter the rows returned"""
    where: domain_keyword_bool_exp
  ): [domain_keyword!]!

  """An aggregated array relationship"""
  domain_keywords_aggregate(
    """distinct select on columns"""
    distinct_on: [domain_keyword_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [domain_keyword_order_by!]

    """filter the rows returned"""
    where: domain_keyword_bool_exp
  ): domain_keyword_aggregate!
  keyword: String
  kid: Int!

  """An array relationship"""
  publication_keywords(
    """distinct select on columns"""
    distinct_on: [publication_keyword_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [publication_keyword_order_by!]

    """filter the rows returned"""
    where: publication_keyword_bool_exp
  ): [publication_keyword!]!

  """An aggregated array relationship"""
  publication_keywords_aggregate(
    """distinct select on columns"""
    distinct_on: [publication_keyword_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [publication_keyword_order_by!]

    """filter the rows returned"""
    where: publication_keyword_bool_exp
  ): publication_keyword_aggregate!
}

"""
aggregated selection of "keyword"
"""
type keyword_aggregate {
  aggregate: keyword_aggregate_fields
  nodes: [keyword!]!
}

"""
aggregate fields of "keyword"
"""
type keyword_aggregate_fields {
  avg: keyword_avg_fields
  count(columns: [keyword_select_column!], distinct: Boolean): Int
  max: keyword_max_fields
  min: keyword_min_fields
  stddev: keyword_stddev_fields
  stddev_pop: keyword_stddev_pop_fields
  stddev_samp: keyword_stddev_samp_fields
  sum: keyword_sum_fields
  var_pop: keyword_var_pop_fields
  var_samp: keyword_var_samp_fields
  variance: keyword_variance_fields
}

"""
order by aggregate values of table "keyword"
"""
input keyword_aggregate_order_by {
  avg: keyword_avg_order_by
  count: order_by
  max: keyword_max_order_by
  min: keyword_min_order_by
  stddev: keyword_stddev_order_by
  stddev_pop: keyword_stddev_pop_order_by
  stddev_samp: keyword_stddev_samp_order_by
  sum: keyword_sum_order_by
  var_pop: keyword_var_pop_order_by
  var_samp: keyword_var_samp_order_by
  variance: keyword_variance_order_by
}

"""
input type for inserting array relation for remote table "keyword"
"""
input keyword_arr_rel_insert_input {
  data: [keyword_insert_input!]!
  on_conflict: keyword_on_conflict
}

"""aggregate avg on columns"""
type keyword_avg_fields {
  kid: Float
}

"""
order by avg() on columns of table "keyword"
"""
input keyword_avg_order_by {
  kid: order_by
}

"""
Boolean expression to filter rows from the table "keyword". All fields are combined with a logical 'AND'.
"""
input keyword_bool_exp {
  _and: [keyword_bool_exp]
  _not: keyword_bool_exp
  _or: [keyword_bool_exp]
  domain_keywords: domain_keyword_bool_exp
  keyword: String_comparison_exp
  kid: Int_comparison_exp
  publication_keywords: publication_keyword_bool_exp
}

"""
unique or primary key constraints on table "keyword"
"""
enum keyword_constraint {
  """unique or primary key constraint"""
  idx_21489_sqlite_autoindex_keyword_1
}

"""
input type for incrementing integer column in table "keyword"
"""
input keyword_inc_input {
  kid: Int
}

"""
input type for inserting data into table "keyword"
"""
input keyword_insert_input {
  domain_keywords: domain_keyword_arr_rel_insert_input
  keyword: String
  kid: Int
  publication_keywords: publication_keyword_arr_rel_insert_input
}

"""aggregate max on columns"""
type keyword_max_fields {
  keyword: String
  kid: Int
}

"""
order by max() on columns of table "keyword"
"""
input keyword_max_order_by {
  keyword: order_by
  kid: order_by
}

"""aggregate min on columns"""
type keyword_min_fields {
  keyword: String
  kid: Int
}

"""
order by min() on columns of table "keyword"
"""
input keyword_min_order_by {
  keyword: order_by
  kid: order_by
}

"""
response of any mutation on the table "keyword"
"""
type keyword_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [keyword!]!
}

"""
input type for inserting object relation for remote table "keyword"
"""
input keyword_obj_rel_insert_input {
  data: keyword_insert_input!
  on_conflict: keyword_on_conflict
}

"""
on conflict condition type for table "keyword"
"""
input keyword_on_conflict {
  constraint: keyword_constraint!
  update_columns: [keyword_update_column!]!
  where: keyword_bool_exp
}

"""
ordering options when selecting data from "keyword"
"""
input keyword_order_by {
  domain_keywords_aggregate: domain_keyword_aggregate_order_by
  keyword: order_by
  kid: order_by
  publication_keywords_aggregate: publication_keyword_aggregate_order_by
}

"""
primary key columns input for table: "keyword"
"""
input keyword_pk_columns_input {
  kid: Int!
}

"""
select columns of table "keyword"
"""
enum keyword_select_column {
  """column name"""
  keyword

  """column name"""
  kid
}

"""
input type for updating data in table "keyword"
"""
input keyword_set_input {
  keyword: String
  kid: Int
}

"""aggregate stddev on columns"""
type keyword_stddev_fields {
  kid: Float
}

"""
order by stddev() on columns of table "keyword"
"""
input keyword_stddev_order_by {
  kid: order_by
}

"""aggregate stddev_pop on columns"""
type keyword_stddev_pop_fields {
  kid: Float
}

"""
order by stddev_pop() on columns of table "keyword"
"""
input keyword_stddev_pop_order_by {
  kid: order_by
}

"""aggregate stddev_samp on columns"""
type keyword_stddev_samp_fields {
  kid: Float
}

"""
order by stddev_samp() on columns of table "keyword"
"""
input keyword_stddev_samp_order_by {
  kid: order_by
}

"""aggregate sum on columns"""
type keyword_sum_fields {
  kid: Int
}

"""
order by sum() on columns of table "keyword"
"""
input keyword_sum_order_by {
  kid: order_by
}

"""
update columns of table "keyword"
"""
enum keyword_update_column {
  """column name"""
  keyword

  """column name"""
  kid
}

"""aggregate var_pop on columns"""
type keyword_var_pop_fields {
  kid: Float
}

"""
order by var_pop() on columns of table "keyword"
"""
input keyword_var_pop_order_by {
  kid: order_by
}

"""aggregate var_samp on columns"""
type keyword_var_samp_fields {
  kid: Float
}

"""
order by var_samp() on columns of table "keyword"
"""
input keyword_var_samp_order_by {
  kid: order_by
}

"""aggregate variance on columns"""
type keyword_variance_fields {
  kid: Float
}

"""
order by variance() on columns of table "keyword"
"""
input keyword_variance_order_by {
  kid: order_by
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "author"
  """
  delete_author(
    """filter the rows which have to be deleted"""
    where: author_bool_exp!
  ): author_mutation_response

  """
  delete single row from the table: "author"
  """
  delete_author_by_pk(aid: Int!): author

  """
  delete data from the table: "cite"
  """
  delete_cite(
    """filter the rows which have to be deleted"""
    where: cite_bool_exp!
  ): cite_mutation_response

  """
  delete data from the table: "conference"
  """
  delete_conference(
    """filter the rows which have to be deleted"""
    where: conference_bool_exp!
  ): conference_mutation_response

  """
  delete single row from the table: "conference"
  """
  delete_conference_by_pk(cid: Int!): conference

  """
  delete data from the table: "domain"
  """
  delete_domain(
    """filter the rows which have to be deleted"""
    where: domain_bool_exp!
  ): domain_mutation_response

  """
  delete data from the table: "domain_author"
  """
  delete_domain_author(
    """filter the rows which have to be deleted"""
    where: domain_author_bool_exp!
  ): domain_author_mutation_response

  """
  delete single row from the table: "domain"
  """
  delete_domain_by_pk(did: Int!): domain

  """
  delete data from the table: "domain_conference"
  """
  delete_domain_conference(
    """filter the rows which have to be deleted"""
    where: domain_conference_bool_exp!
  ): domain_conference_mutation_response

  """
  delete data from the table: "domain_journal"
  """
  delete_domain_journal(
    """filter the rows which have to be deleted"""
    where: domain_journal_bool_exp!
  ): domain_journal_mutation_response

  """
  delete single row from the table: "domain_journal"
  """
  delete_domain_journal_by_pk(did: Int!, jid: Int!): domain_journal

  """
  delete data from the table: "domain_keyword"
  """
  delete_domain_keyword(
    """filter the rows which have to be deleted"""
    where: domain_keyword_bool_exp!
  ): domain_keyword_mutation_response

  """
  delete single row from the table: "domain_keyword"
  """
  delete_domain_keyword_by_pk(did: Int!, kid: Int!): domain_keyword

  """
  delete data from the table: "domain_publication"
  """
  delete_domain_publication(
    """filter the rows which have to be deleted"""
    where: domain_publication_bool_exp!
  ): domain_publication_mutation_response

  """
  delete single row from the table: "domain_publication"
  """
  delete_domain_publication_by_pk(did: Int!, pid: Int!): domain_publication

  """
  delete data from the table: "journal"
  """
  delete_journal(
    """filter the rows which have to be deleted"""
    where: journal_bool_exp!
  ): journal_mutation_response

  """
  delete single row from the table: "journal"
  """
  delete_journal_by_pk(jid: Int!): journal

  """
  delete data from the table: "keyword"
  """
  delete_keyword(
    """filter the rows which have to be deleted"""
    where: keyword_bool_exp!
  ): keyword_mutation_response

  """
  delete single row from the table: "keyword"
  """
  delete_keyword_by_pk(kid: Int!): keyword

  """
  delete data from the table: "organization"
  """
  delete_organization(
    """filter the rows which have to be deleted"""
    where: organization_bool_exp!
  ): organization_mutation_response

  """
  delete single row from the table: "organization"
  """
  delete_organization_by_pk(oid: Int!): organization

  """
  delete data from the table: "publication"
  """
  delete_publication(
    """filter the rows which have to be deleted"""
    where: publication_bool_exp!
  ): publication_mutation_response

  """
  delete single row from the table: "publication"
  """
  delete_publication_by_pk(pid: Int!): publication

  """
  delete data from the table: "publication_keyword"
  """
  delete_publication_keyword(
    """filter the rows which have to be deleted"""
    where: publication_keyword_bool_exp!
  ): publication_keyword_mutation_response

  """
  delete data from the table: "writes"
  """
  delete_writes(
    """filter the rows which have to be deleted"""
    where: writes_bool_exp!
  ): writes_mutation_response

  """
  delete single row from the table: "writes"
  """
  delete_writes_by_pk(aid: Int!, pid: Int!): writes

  """
  insert data into the table: "author"
  """
  insert_author(
    """the rows to be inserted"""
    objects: [author_insert_input!]!

    """on conflict condition"""
    on_conflict: author_on_conflict
  ): author_mutation_response

  """
  insert a single row into the table: "author"
  """
  insert_author_one(
    """the row to be inserted"""
    object: author_insert_input!

    """on conflict condition"""
    on_conflict: author_on_conflict
  ): author

  """
  insert data into the table: "cite"
  """
  insert_cite(
    """the rows to be inserted"""
    objects: [cite_insert_input!]!
  ): cite_mutation_response

  """
  insert a single row into the table: "cite"
  """
  insert_cite_one(
    """the row to be inserted"""
    object: cite_insert_input!
  ): cite

  """
  insert data into the table: "conference"
  """
  insert_conference(
    """the rows to be inserted"""
    objects: [conference_insert_input!]!

    """on conflict condition"""
    on_conflict: conference_on_conflict
  ): conference_mutation_response

  """
  insert a single row into the table: "conference"
  """
  insert_conference_one(
    """the row to be inserted"""
    object: conference_insert_input!

    """on conflict condition"""
    on_conflict: conference_on_conflict
  ): conference

  """
  insert data into the table: "domain"
  """
  insert_domain(
    """the rows to be inserted"""
    objects: [domain_insert_input!]!

    """on conflict condition"""
    on_conflict: domain_on_conflict
  ): domain_mutation_response

  """
  insert data into the table: "domain_author"
  """
  insert_domain_author(
    """the rows to be inserted"""
    objects: [domain_author_insert_input!]!

    """on conflict condition"""
    on_conflict: domain_author_on_conflict
  ): domain_author_mutation_response

  """
  insert a single row into the table: "domain_author"
  """
  insert_domain_author_one(
    """the row to be inserted"""
    object: domain_author_insert_input!

    """on conflict condition"""
    on_conflict: domain_author_on_conflict
  ): domain_author

  """
  insert data into the table: "domain_conference"
  """
  insert_domain_conference(
    """the rows to be inserted"""
    objects: [domain_conference_insert_input!]!

    """on conflict condition"""
    on_conflict: domain_conference_on_conflict
  ): domain_conference_mutation_response

  """
  insert a single row into the table: "domain_conference"
  """
  insert_domain_conference_one(
    """the row to be inserted"""
    object: domain_conference_insert_input!

    """on conflict condition"""
    on_conflict: domain_conference_on_conflict
  ): domain_conference

  """
  insert data into the table: "domain_journal"
  """
  insert_domain_journal(
    """the rows to be inserted"""
    objects: [domain_journal_insert_input!]!

    """on conflict condition"""
    on_conflict: domain_journal_on_conflict
  ): domain_journal_mutation_response

  """
  insert a single row into the table: "domain_journal"
  """
  insert_domain_journal_one(
    """the row to be inserted"""
    object: domain_journal_insert_input!

    """on conflict condition"""
    on_conflict: domain_journal_on_conflict
  ): domain_journal

  """
  insert data into the table: "domain_keyword"
  """
  insert_domain_keyword(
    """the rows to be inserted"""
    objects: [domain_keyword_insert_input!]!

    """on conflict condition"""
    on_conflict: domain_keyword_on_conflict
  ): domain_keyword_mutation_response

  """
  insert a single row into the table: "domain_keyword"
  """
  insert_domain_keyword_one(
    """the row to be inserted"""
    object: domain_keyword_insert_input!

    """on conflict condition"""
    on_conflict: domain_keyword_on_conflict
  ): domain_keyword

  """
  insert a single row into the table: "domain"
  """
  insert_domain_one(
    """the row to be inserted"""
    object: domain_insert_input!

    """on conflict condition"""
    on_conflict: domain_on_conflict
  ): domain

  """
  insert data into the table: "domain_publication"
  """
  insert_domain_publication(
    """the rows to be inserted"""
    objects: [domain_publication_insert_input!]!

    """on conflict condition"""
    on_conflict: domain_publication_on_conflict
  ): domain_publication_mutation_response

  """
  insert a single row into the table: "domain_publication"
  """
  insert_domain_publication_one(
    """the row to be inserted"""
    object: domain_publication_insert_input!

    """on conflict condition"""
    on_conflict: domain_publication_on_conflict
  ): domain_publication

  """
  insert data into the table: "journal"
  """
  insert_journal(
    """the rows to be inserted"""
    objects: [journal_insert_input!]!

    """on conflict condition"""
    on_conflict: journal_on_conflict
  ): journal_mutation_response

  """
  insert a single row into the table: "journal"
  """
  insert_journal_one(
    """the row to be inserted"""
    object: journal_insert_input!

    """on conflict condition"""
    on_conflict: journal_on_conflict
  ): journal

  """
  insert data into the table: "keyword"
  """
  insert_keyword(
    """the rows to be inserted"""
    objects: [keyword_insert_input!]!

    """on conflict condition"""
    on_conflict: keyword_on_conflict
  ): keyword_mutation_response

  """
  insert a single row into the table: "keyword"
  """
  insert_keyword_one(
    """the row to be inserted"""
    object: keyword_insert_input!

    """on conflict condition"""
    on_conflict: keyword_on_conflict
  ): keyword

  """
  insert data into the table: "organization"
  """
  insert_organization(
    """the rows to be inserted"""
    objects: [organization_insert_input!]!

    """on conflict condition"""
    on_conflict: organization_on_conflict
  ): organization_mutation_response

  """
  insert a single row into the table: "organization"
  """
  insert_organization_one(
    """the row to be inserted"""
    object: organization_insert_input!

    """on conflict condition"""
    on_conflict: organization_on_conflict
  ): organization

  """
  insert data into the table: "publication"
  """
  insert_publication(
    """the rows to be inserted"""
    objects: [publication_insert_input!]!

    """on conflict condition"""
    on_conflict: publication_on_conflict
  ): publication_mutation_response

  """
  insert data into the table: "publication_keyword"
  """
  insert_publication_keyword(
    """the rows to be inserted"""
    objects: [publication_keyword_insert_input!]!

    """on conflict condition"""
    on_conflict: publication_keyword_on_conflict
  ): publication_keyword_mutation_response

  """
  insert a single row into the table: "publication_keyword"
  """
  insert_publication_keyword_one(
    """the row to be inserted"""
    object: publication_keyword_insert_input!

    """on conflict condition"""
    on_conflict: publication_keyword_on_conflict
  ): publication_keyword

  """
  insert a single row into the table: "publication"
  """
  insert_publication_one(
    """the row to be inserted"""
    object: publication_insert_input!

    """on conflict condition"""
    on_conflict: publication_on_conflict
  ): publication

  """
  insert data into the table: "writes"
  """
  insert_writes(
    """the rows to be inserted"""
    objects: [writes_insert_input!]!

    """on conflict condition"""
    on_conflict: writes_on_conflict
  ): writes_mutation_response

  """
  insert a single row into the table: "writes"
  """
  insert_writes_one(
    """the row to be inserted"""
    object: writes_insert_input!

    """on conflict condition"""
    on_conflict: writes_on_conflict
  ): writes

  """
  update data of the table: "author"
  """
  update_author(
    """increments the integer columns with given value of the filtered values"""
    _inc: author_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: author_set_input

    """filter the rows which have to be updated"""
    where: author_bool_exp!
  ): author_mutation_response

  """
  update single row of the table: "author"
  """
  update_author_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: author_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: author_set_input
    pk_columns: author_pk_columns_input!
  ): author

  """
  update data of the table: "cite"
  """
  update_cite(
    """increments the integer columns with given value of the filtered values"""
    _inc: cite_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: cite_set_input

    """filter the rows which have to be updated"""
    where: cite_bool_exp!
  ): cite_mutation_response

  """
  update data of the table: "conference"
  """
  update_conference(
    """increments the integer columns with given value of the filtered values"""
    _inc: conference_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: conference_set_input

    """filter the rows which have to be updated"""
    where: conference_bool_exp!
  ): conference_mutation_response

  """
  update single row of the table: "conference"
  """
  update_conference_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: conference_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: conference_set_input
    pk_columns: conference_pk_columns_input!
  ): conference

  """
  update data of the table: "domain"
  """
  update_domain(
    """increments the integer columns with given value of the filtered values"""
    _inc: domain_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: domain_set_input

    """filter the rows which have to be updated"""
    where: domain_bool_exp!
  ): domain_mutation_response

  """
  update data of the table: "domain_author"
  """
  update_domain_author(
    """increments the integer columns with given value of the filtered values"""
    _inc: domain_author_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: domain_author_set_input

    """filter the rows which have to be updated"""
    where: domain_author_bool_exp!
  ): domain_author_mutation_response

  """
  update single row of the table: "domain"
  """
  update_domain_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: domain_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: domain_set_input
    pk_columns: domain_pk_columns_input!
  ): domain

  """
  update data of the table: "domain_conference"
  """
  update_domain_conference(
    """increments the integer columns with given value of the filtered values"""
    _inc: domain_conference_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: domain_conference_set_input

    """filter the rows which have to be updated"""
    where: domain_conference_bool_exp!
  ): domain_conference_mutation_response

  """
  update data of the table: "domain_journal"
  """
  update_domain_journal(
    """increments the integer columns with given value of the filtered values"""
    _inc: domain_journal_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: domain_journal_set_input

    """filter the rows which have to be updated"""
    where: domain_journal_bool_exp!
  ): domain_journal_mutation_response

  """
  update single row of the table: "domain_journal"
  """
  update_domain_journal_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: domain_journal_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: domain_journal_set_input
    pk_columns: domain_journal_pk_columns_input!
  ): domain_journal

  """
  update data of the table: "domain_keyword"
  """
  update_domain_keyword(
    """increments the integer columns with given value of the filtered values"""
    _inc: domain_keyword_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: domain_keyword_set_input

    """filter the rows which have to be updated"""
    where: domain_keyword_bool_exp!
  ): domain_keyword_mutation_response

  """
  update single row of the table: "domain_keyword"
  """
  update_domain_keyword_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: domain_keyword_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: domain_keyword_set_input
    pk_columns: domain_keyword_pk_columns_input!
  ): domain_keyword

  """
  update data of the table: "domain_publication"
  """
  update_domain_publication(
    """increments the integer columns with given value of the filtered values"""
    _inc: domain_publication_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: domain_publication_set_input

    """filter the rows which have to be updated"""
    where: domain_publication_bool_exp!
  ): domain_publication_mutation_response

  """
  update single row of the table: "domain_publication"
  """
  update_domain_publication_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: domain_publication_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: domain_publication_set_input
    pk_columns: domain_publication_pk_columns_input!
  ): domain_publication

  """
  update data of the table: "journal"
  """
  update_journal(
    """increments the integer columns with given value of the filtered values"""
    _inc: journal_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: journal_set_input

    """filter the rows which have to be updated"""
    where: journal_bool_exp!
  ): journal_mutation_response

  """
  update single row of the table: "journal"
  """
  update_journal_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: journal_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: journal_set_input
    pk_columns: journal_pk_columns_input!
  ): journal

  """
  update data of the table: "keyword"
  """
  update_keyword(
    """increments the integer columns with given value of the filtered values"""
    _inc: keyword_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: keyword_set_input

    """filter the rows which have to be updated"""
    where: keyword_bool_exp!
  ): keyword_mutation_response

  """
  update single row of the table: "keyword"
  """
  update_keyword_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: keyword_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: keyword_set_input
    pk_columns: keyword_pk_columns_input!
  ): keyword

  """
  update data of the table: "organization"
  """
  update_organization(
    """increments the integer columns with given value of the filtered values"""
    _inc: organization_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: organization_set_input

    """filter the rows which have to be updated"""
    where: organization_bool_exp!
  ): organization_mutation_response

  """
  update single row of the table: "organization"
  """
  update_organization_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: organization_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: organization_set_input
    pk_columns: organization_pk_columns_input!
  ): organization

  """
  update data of the table: "publication"
  """
  update_publication(
    """increments the integer columns with given value of the filtered values"""
    _inc: publication_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: publication_set_input

    """filter the rows which have to be updated"""
    where: publication_bool_exp!
  ): publication_mutation_response

  """
  update single row of the table: "publication"
  """
  update_publication_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: publication_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: publication_set_input
    pk_columns: publication_pk_columns_input!
  ): publication

  """
  update data of the table: "publication_keyword"
  """
  update_publication_keyword(
    """increments the integer columns with given value of the filtered values"""
    _inc: publication_keyword_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: publication_keyword_set_input

    """filter the rows which have to be updated"""
    where: publication_keyword_bool_exp!
  ): publication_keyword_mutation_response

  """
  update data of the table: "writes"
  """
  update_writes(
    """increments the integer columns with given value of the filtered values"""
    _inc: writes_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: writes_set_input

    """filter the rows which have to be updated"""
    where: writes_bool_exp!
  ): writes_mutation_response

  """
  update single row of the table: "writes"
  """
  update_writes_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: writes_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: writes_set_input
    pk_columns: writes_pk_columns_input!
  ): writes
}

"""column ordering options"""
enum order_by {
  """in the ascending order, nulls last"""
  asc

  """in the ascending order, nulls first"""
  asc_nulls_first

  """in the ascending order, nulls last"""
  asc_nulls_last

  """in the descending order, nulls first"""
  desc

  """in the descending order, nulls first"""
  desc_nulls_first

  """in the descending order, nulls last"""
  desc_nulls_last
}

"""
columns and relationships of "organization"
"""
type organization {
  continent: String
  homepage: String
  name: String
  oid: Int!
}

"""
aggregated selection of "organization"
"""
type organization_aggregate {
  aggregate: organization_aggregate_fields
  nodes: [organization!]!
}

"""
aggregate fields of "organization"
"""
type organization_aggregate_fields {
  avg: organization_avg_fields
  count(columns: [organization_select_column!], distinct: Boolean): Int
  max: organization_max_fields
  min: organization_min_fields
  stddev: organization_stddev_fields
  stddev_pop: organization_stddev_pop_fields
  stddev_samp: organization_stddev_samp_fields
  sum: organization_sum_fields
  var_pop: organization_var_pop_fields
  var_samp: organization_var_samp_fields
  variance: organization_variance_fields
}

"""
order by aggregate values of table "organization"
"""
input organization_aggregate_order_by {
  avg: organization_avg_order_by
  count: order_by
  max: organization_max_order_by
  min: organization_min_order_by
  stddev: organization_stddev_order_by
  stddev_pop: organization_stddev_pop_order_by
  stddev_samp: organization_stddev_samp_order_by
  sum: organization_sum_order_by
  var_pop: organization_var_pop_order_by
  var_samp: organization_var_samp_order_by
  variance: organization_variance_order_by
}

"""
input type for inserting array relation for remote table "organization"
"""
input organization_arr_rel_insert_input {
  data: [organization_insert_input!]!
  on_conflict: organization_on_conflict
}

"""aggregate avg on columns"""
type organization_avg_fields {
  oid: Float
}

"""
order by avg() on columns of table "organization"
"""
input organization_avg_order_by {
  oid: order_by
}

"""
Boolean expression to filter rows from the table "organization". All fields are combined with a logical 'AND'.
"""
input organization_bool_exp {
  _and: [organization_bool_exp]
  _not: organization_bool_exp
  _or: [organization_bool_exp]
  continent: String_comparison_exp
  homepage: String_comparison_exp
  name: String_comparison_exp
  oid: Int_comparison_exp
}

"""
unique or primary key constraints on table "organization"
"""
enum organization_constraint {
  """unique or primary key constraint"""
  idx_21507_sqlite_autoindex_organization_1
}

"""
input type for incrementing integer column in table "organization"
"""
input organization_inc_input {
  oid: Int
}

"""
input type for inserting data into table "organization"
"""
input organization_insert_input {
  continent: String
  homepage: String
  name: String
  oid: Int
}

"""aggregate max on columns"""
type organization_max_fields {
  continent: String
  homepage: String
  name: String
  oid: Int
}

"""
order by max() on columns of table "organization"
"""
input organization_max_order_by {
  continent: order_by
  homepage: order_by
  name: order_by
  oid: order_by
}

"""aggregate min on columns"""
type organization_min_fields {
  continent: String
  homepage: String
  name: String
  oid: Int
}

"""
order by min() on columns of table "organization"
"""
input organization_min_order_by {
  continent: order_by
  homepage: order_by
  name: order_by
  oid: order_by
}

"""
response of any mutation on the table "organization"
"""
type organization_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [organization!]!
}

"""
input type for inserting object relation for remote table "organization"
"""
input organization_obj_rel_insert_input {
  data: organization_insert_input!
  on_conflict: organization_on_conflict
}

"""
on conflict condition type for table "organization"
"""
input organization_on_conflict {
  constraint: organization_constraint!
  update_columns: [organization_update_column!]!
  where: organization_bool_exp
}

"""
ordering options when selecting data from "organization"
"""
input organization_order_by {
  continent: order_by
  homepage: order_by
  name: order_by
  oid: order_by
}

"""
primary key columns input for table: "organization"
"""
input organization_pk_columns_input {
  oid: Int!
}

"""
select columns of table "organization"
"""
enum organization_select_column {
  """column name"""
  continent

  """column name"""
  homepage

  """column name"""
  name

  """column name"""
  oid
}

"""
input type for updating data in table "organization"
"""
input organization_set_input {
  continent: String
  homepage: String
  name: String
  oid: Int
}

"""aggregate stddev on columns"""
type organization_stddev_fields {
  oid: Float
}

"""
order by stddev() on columns of table "organization"
"""
input organization_stddev_order_by {
  oid: order_by
}

"""aggregate stddev_pop on columns"""
type organization_stddev_pop_fields {
  oid: Float
}

"""
order by stddev_pop() on columns of table "organization"
"""
input organization_stddev_pop_order_by {
  oid: order_by
}

"""aggregate stddev_samp on columns"""
type organization_stddev_samp_fields {
  oid: Float
}

"""
order by stddev_samp() on columns of table "organization"
"""
input organization_stddev_samp_order_by {
  oid: order_by
}

"""aggregate sum on columns"""
type organization_sum_fields {
  oid: Int
}

"""
order by sum() on columns of table "organization"
"""
input organization_sum_order_by {
  oid: order_by
}

"""
update columns of table "organization"
"""
enum organization_update_column {
  """column name"""
  continent

  """column name"""
  homepage

  """column name"""
  name

  """column name"""
  oid
}

"""aggregate var_pop on columns"""
type organization_var_pop_fields {
  oid: Float
}

"""
order by var_pop() on columns of table "organization"
"""
input organization_var_pop_order_by {
  oid: order_by
}

"""aggregate var_samp on columns"""
type organization_var_samp_fields {
  oid: Float
}

"""
order by var_samp() on columns of table "organization"
"""
input organization_var_samp_order_by {
  oid: order_by
}

"""aggregate variance on columns"""
type organization_variance_fields {
  oid: Float
}

"""
order by variance() on columns of table "organization"
"""
input organization_variance_order_by {
  oid: order_by
}

"""
columns and relationships of "publication"
"""
type publication {
  abstract: String
  cid: String
  citation_num: Int

  """An array relationship"""
  cites(
    """distinct select on columns"""
    distinct_on: [cite_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [cite_order_by!]

    """filter the rows returned"""
    where: cite_bool_exp
  ): [cite!]!

  """An array relationship"""
  citesByCited(
    """distinct select on columns"""
    distinct_on: [cite_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [cite_order_by!]

    """filter the rows returned"""
    where: cite_bool_exp
  ): [cite!]!

  """An aggregated array relationship"""
  citesByCited_aggregate(
    """distinct select on columns"""
    distinct_on: [cite_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [cite_order_by!]

    """filter the rows returned"""
    where: cite_bool_exp
  ): cite_aggregate!

  """An aggregated array relationship"""
  cites_aggregate(
    """distinct select on columns"""
    distinct_on: [cite_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [cite_order_by!]

    """filter the rows returned"""
    where: cite_bool_exp
  ): cite_aggregate!

  """An array relationship"""
  domain_publications(
    """distinct select on columns"""
    distinct_on: [domain_publication_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [domain_publication_order_by!]

    """filter the rows returned"""
    where: domain_publication_bool_exp
  ): [domain_publication!]!

  """An aggregated array relationship"""
  domain_publications_aggregate(
    """distinct select on columns"""
    distinct_on: [domain_publication_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [domain_publication_order_by!]

    """filter the rows returned"""
    where: domain_publication_bool_exp
  ): domain_publication_aggregate!
  jid: Int

  """An object relationship"""
  journal: journal
  pid: Int!

  """An array relationship"""
  publication_keywords(
    """distinct select on columns"""
    distinct_on: [publication_keyword_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [publication_keyword_order_by!]

    """filter the rows returned"""
    where: publication_keyword_bool_exp
  ): [publication_keyword!]!

  """An aggregated array relationship"""
  publication_keywords_aggregate(
    """distinct select on columns"""
    distinct_on: [publication_keyword_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [publication_keyword_order_by!]

    """filter the rows returned"""
    where: publication_keyword_bool_exp
  ): publication_keyword_aggregate!
  reference_num: Int
  title: String

  """An array relationship"""
  writes(
    """distinct select on columns"""
    distinct_on: [writes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [writes_order_by!]

    """filter the rows returned"""
    where: writes_bool_exp
  ): [writes!]!

  """An aggregated array relationship"""
  writes_aggregate(
    """distinct select on columns"""
    distinct_on: [writes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [writes_order_by!]

    """filter the rows returned"""
    where: writes_bool_exp
  ): writes_aggregate!
  year: Int
}

"""
aggregated selection of "publication"
"""
type publication_aggregate {
  aggregate: publication_aggregate_fields
  nodes: [publication!]!
}

"""
aggregate fields of "publication"
"""
type publication_aggregate_fields {
  avg: publication_avg_fields
  count(columns: [publication_select_column!], distinct: Boolean): Int
  max: publication_max_fields
  min: publication_min_fields
  stddev: publication_stddev_fields
  stddev_pop: publication_stddev_pop_fields
  stddev_samp: publication_stddev_samp_fields
  sum: publication_sum_fields
  var_pop: publication_var_pop_fields
  var_samp: publication_var_samp_fields
  variance: publication_variance_fields
}

"""
order by aggregate values of table "publication"
"""
input publication_aggregate_order_by {
  avg: publication_avg_order_by
  count: order_by
  max: publication_max_order_by
  min: publication_min_order_by
  stddev: publication_stddev_order_by
  stddev_pop: publication_stddev_pop_order_by
  stddev_samp: publication_stddev_samp_order_by
  sum: publication_sum_order_by
  var_pop: publication_var_pop_order_by
  var_samp: publication_var_samp_order_by
  variance: publication_variance_order_by
}

"""
input type for inserting array relation for remote table "publication"
"""
input publication_arr_rel_insert_input {
  data: [publication_insert_input!]!
  on_conflict: publication_on_conflict
}

"""aggregate avg on columns"""
type publication_avg_fields {
  citation_num: Float
  jid: Float
  pid: Float
  reference_num: Float
  year: Float
}

"""
order by avg() on columns of table "publication"
"""
input publication_avg_order_by {
  citation_num: order_by
  jid: order_by
  pid: order_by
  reference_num: order_by
  year: order_by
}

"""
Boolean expression to filter rows from the table "publication". All fields are combined with a logical 'AND'.
"""
input publication_bool_exp {
  _and: [publication_bool_exp]
  _not: publication_bool_exp
  _or: [publication_bool_exp]
  abstract: String_comparison_exp
  cid: String_comparison_exp
  citation_num: Int_comparison_exp
  cites: cite_bool_exp
  citesByCited: cite_bool_exp
  domain_publications: domain_publication_bool_exp
  jid: Int_comparison_exp
  journal: journal_bool_exp
  pid: Int_comparison_exp
  publication_keywords: publication_keyword_bool_exp
  reference_num: Int_comparison_exp
  title: String_comparison_exp
  writes: writes_bool_exp
  year: Int_comparison_exp
}

"""
unique or primary key constraints on table "publication"
"""
enum publication_constraint {
  """unique or primary key constraint"""
  idx_21498_sqlite_autoindex_publication_1
}

"""
input type for incrementing integer column in table "publication"
"""
input publication_inc_input {
  citation_num: Int
  jid: Int
  pid: Int
  reference_num: Int
  year: Int
}

"""
input type for inserting data into table "publication"
"""
input publication_insert_input {
  abstract: String
  cid: String
  citation_num: Int
  cites: cite_arr_rel_insert_input
  citesByCited: cite_arr_rel_insert_input
  domain_publications: domain_publication_arr_rel_insert_input
  jid: Int
  journal: journal_obj_rel_insert_input
  pid: Int
  publication_keywords: publication_keyword_arr_rel_insert_input
  reference_num: Int
  title: String
  writes: writes_arr_rel_insert_input
  year: Int
}

"""
columns and relationships of "publication_keyword"
"""
type publication_keyword {
  """An object relationship"""
  keyword: keyword
  kid: Int
  pid: Int

  """An object relationship"""
  publication: publication
}

"""
aggregated selection of "publication_keyword"
"""
type publication_keyword_aggregate {
  aggregate: publication_keyword_aggregate_fields
  nodes: [publication_keyword!]!
}

"""
aggregate fields of "publication_keyword"
"""
type publication_keyword_aggregate_fields {
  avg: publication_keyword_avg_fields
  count(columns: [publication_keyword_select_column!], distinct: Boolean): Int
  max: publication_keyword_max_fields
  min: publication_keyword_min_fields
  stddev: publication_keyword_stddev_fields
  stddev_pop: publication_keyword_stddev_pop_fields
  stddev_samp: publication_keyword_stddev_samp_fields
  sum: publication_keyword_sum_fields
  var_pop: publication_keyword_var_pop_fields
  var_samp: publication_keyword_var_samp_fields
  variance: publication_keyword_variance_fields
}

"""
order by aggregate values of table "publication_keyword"
"""
input publication_keyword_aggregate_order_by {
  avg: publication_keyword_avg_order_by
  count: order_by
  max: publication_keyword_max_order_by
  min: publication_keyword_min_order_by
  stddev: publication_keyword_stddev_order_by
  stddev_pop: publication_keyword_stddev_pop_order_by
  stddev_samp: publication_keyword_stddev_samp_order_by
  sum: publication_keyword_sum_order_by
  var_pop: publication_keyword_var_pop_order_by
  var_samp: publication_keyword_var_samp_order_by
  variance: publication_keyword_variance_order_by
}

"""
input type for inserting array relation for remote table "publication_keyword"
"""
input publication_keyword_arr_rel_insert_input {
  data: [publication_keyword_insert_input!]!
  on_conflict: publication_keyword_on_conflict
}

"""aggregate avg on columns"""
type publication_keyword_avg_fields {
  kid: Float
  pid: Float
}

"""
order by avg() on columns of table "publication_keyword"
"""
input publication_keyword_avg_order_by {
  kid: order_by
  pid: order_by
}

"""
Boolean expression to filter rows from the table "publication_keyword". All fields are combined with a logical 'AND'.
"""
input publication_keyword_bool_exp {
  _and: [publication_keyword_bool_exp]
  _not: publication_keyword_bool_exp
  _or: [publication_keyword_bool_exp]
  keyword: keyword_bool_exp
  kid: Int_comparison_exp
  pid: Int_comparison_exp
  publication: publication_bool_exp
}

"""
unique or primary key constraints on table "publication_keyword"
"""
enum publication_keyword_constraint {
  """unique or primary key constraint"""
  idx_21513_sqlite_autoindex_publication_keyword_1
}

"""
input type for incrementing integer column in table "publication_keyword"
"""
input publication_keyword_inc_input {
  kid: Int
  pid: Int
}

"""
input type for inserting data into table "publication_keyword"
"""
input publication_keyword_insert_input {
  keyword: keyword_obj_rel_insert_input
  kid: Int
  pid: Int
  publication: publication_obj_rel_insert_input
}

"""aggregate max on columns"""
type publication_keyword_max_fields {
  kid: Int
  pid: Int
}

"""
order by max() on columns of table "publication_keyword"
"""
input publication_keyword_max_order_by {
  kid: order_by
  pid: order_by
}

"""aggregate min on columns"""
type publication_keyword_min_fields {
  kid: Int
  pid: Int
}

"""
order by min() on columns of table "publication_keyword"
"""
input publication_keyword_min_order_by {
  kid: order_by
  pid: order_by
}

"""
response of any mutation on the table "publication_keyword"
"""
type publication_keyword_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [publication_keyword!]!
}

"""
input type for inserting object relation for remote table "publication_keyword"
"""
input publication_keyword_obj_rel_insert_input {
  data: publication_keyword_insert_input!
  on_conflict: publication_keyword_on_conflict
}

"""
on conflict condition type for table "publication_keyword"
"""
input publication_keyword_on_conflict {
  constraint: publication_keyword_constraint!
  update_columns: [publication_keyword_update_column!]!
  where: publication_keyword_bool_exp
}

"""
ordering options when selecting data from "publication_keyword"
"""
input publication_keyword_order_by {
  keyword: keyword_order_by
  kid: order_by
  pid: order_by
  publication: publication_order_by
}

"""
select columns of table "publication_keyword"
"""
enum publication_keyword_select_column {
  """column name"""
  kid

  """column name"""
  pid
}

"""
input type for updating data in table "publication_keyword"
"""
input publication_keyword_set_input {
  kid: Int
  pid: Int
}

"""aggregate stddev on columns"""
type publication_keyword_stddev_fields {
  kid: Float
  pid: Float
}

"""
order by stddev() on columns of table "publication_keyword"
"""
input publication_keyword_stddev_order_by {
  kid: order_by
  pid: order_by
}

"""aggregate stddev_pop on columns"""
type publication_keyword_stddev_pop_fields {
  kid: Float
  pid: Float
}

"""
order by stddev_pop() on columns of table "publication_keyword"
"""
input publication_keyword_stddev_pop_order_by {
  kid: order_by
  pid: order_by
}

"""aggregate stddev_samp on columns"""
type publication_keyword_stddev_samp_fields {
  kid: Float
  pid: Float
}

"""
order by stddev_samp() on columns of table "publication_keyword"
"""
input publication_keyword_stddev_samp_order_by {
  kid: order_by
  pid: order_by
}

"""aggregate sum on columns"""
type publication_keyword_sum_fields {
  kid: Int
  pid: Int
}

"""
order by sum() on columns of table "publication_keyword"
"""
input publication_keyword_sum_order_by {
  kid: order_by
  pid: order_by
}

"""
update columns of table "publication_keyword"
"""
enum publication_keyword_update_column {
  """column name"""
  kid

  """column name"""
  pid
}

"""aggregate var_pop on columns"""
type publication_keyword_var_pop_fields {
  kid: Float
  pid: Float
}

"""
order by var_pop() on columns of table "publication_keyword"
"""
input publication_keyword_var_pop_order_by {
  kid: order_by
  pid: order_by
}

"""aggregate var_samp on columns"""
type publication_keyword_var_samp_fields {
  kid: Float
  pid: Float
}

"""
order by var_samp() on columns of table "publication_keyword"
"""
input publication_keyword_var_samp_order_by {
  kid: order_by
  pid: order_by
}

"""aggregate variance on columns"""
type publication_keyword_variance_fields {
  kid: Float
  pid: Float
}

"""
order by variance() on columns of table "publication_keyword"
"""
input publication_keyword_variance_order_by {
  kid: order_by
  pid: order_by
}

"""aggregate max on columns"""
type publication_max_fields {
  abstract: String
  cid: String
  citation_num: Int
  jid: Int
  pid: Int
  reference_num: Int
  title: String
  year: Int
}

"""
order by max() on columns of table "publication"
"""
input publication_max_order_by {
  abstract: order_by
  cid: order_by
  citation_num: order_by
  jid: order_by
  pid: order_by
  reference_num: order_by
  title: order_by
  year: order_by
}

"""aggregate min on columns"""
type publication_min_fields {
  abstract: String
  cid: String
  citation_num: Int
  jid: Int
  pid: Int
  reference_num: Int
  title: String
  year: Int
}

"""
order by min() on columns of table "publication"
"""
input publication_min_order_by {
  abstract: order_by
  cid: order_by
  citation_num: order_by
  jid: order_by
  pid: order_by
  reference_num: order_by
  title: order_by
  year: order_by
}

"""
response of any mutation on the table "publication"
"""
type publication_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [publication!]!
}

"""
input type for inserting object relation for remote table "publication"
"""
input publication_obj_rel_insert_input {
  data: publication_insert_input!
  on_conflict: publication_on_conflict
}

"""
on conflict condition type for table "publication"
"""
input publication_on_conflict {
  constraint: publication_constraint!
  update_columns: [publication_update_column!]!
  where: publication_bool_exp
}

"""
ordering options when selecting data from "publication"
"""
input publication_order_by {
  abstract: order_by
  cid: order_by
  citation_num: order_by
  citesByCited_aggregate: cite_aggregate_order_by
  cites_aggregate: cite_aggregate_order_by
  domain_publications_aggregate: domain_publication_aggregate_order_by
  jid: order_by
  journal: journal_order_by
  pid: order_by
  publication_keywords_aggregate: publication_keyword_aggregate_order_by
  reference_num: order_by
  title: order_by
  writes_aggregate: writes_aggregate_order_by
  year: order_by
}

"""
primary key columns input for table: "publication"
"""
input publication_pk_columns_input {
  pid: Int!
}

"""
select columns of table "publication"
"""
enum publication_select_column {
  """column name"""
  abstract

  """column name"""
  cid

  """column name"""
  citation_num

  """column name"""
  jid

  """column name"""
  pid

  """column name"""
  reference_num

  """column name"""
  title

  """column name"""
  year
}

"""
input type for updating data in table "publication"
"""
input publication_set_input {
  abstract: String
  cid: String
  citation_num: Int
  jid: Int
  pid: Int
  reference_num: Int
  title: String
  year: Int
}

"""aggregate stddev on columns"""
type publication_stddev_fields {
  citation_num: Float
  jid: Float
  pid: Float
  reference_num: Float
  year: Float
}

"""
order by stddev() on columns of table "publication"
"""
input publication_stddev_order_by {
  citation_num: order_by
  jid: order_by
  pid: order_by
  reference_num: order_by
  year: order_by
}

"""aggregate stddev_pop on columns"""
type publication_stddev_pop_fields {
  citation_num: Float
  jid: Float
  pid: Float
  reference_num: Float
  year: Float
}

"""
order by stddev_pop() on columns of table "publication"
"""
input publication_stddev_pop_order_by {
  citation_num: order_by
  jid: order_by
  pid: order_by
  reference_num: order_by
  year: order_by
}

"""aggregate stddev_samp on columns"""
type publication_stddev_samp_fields {
  citation_num: Float
  jid: Float
  pid: Float
  reference_num: Float
  year: Float
}

"""
order by stddev_samp() on columns of table "publication"
"""
input publication_stddev_samp_order_by {
  citation_num: order_by
  jid: order_by
  pid: order_by
  reference_num: order_by
  year: order_by
}

"""aggregate sum on columns"""
type publication_sum_fields {
  citation_num: Int
  jid: Int
  pid: Int
  reference_num: Int
  year: Int
}

"""
order by sum() on columns of table "publication"
"""
input publication_sum_order_by {
  citation_num: order_by
  jid: order_by
  pid: order_by
  reference_num: order_by
  year: order_by
}

"""
update columns of table "publication"
"""
enum publication_update_column {
  """column name"""
  abstract

  """column name"""
  cid

  """column name"""
  citation_num

  """column name"""
  jid

  """column name"""
  pid

  """column name"""
  reference_num

  """column name"""
  title

  """column name"""
  year
}

"""aggregate var_pop on columns"""
type publication_var_pop_fields {
  citation_num: Float
  jid: Float
  pid: Float
  reference_num: Float
  year: Float
}

"""
order by var_pop() on columns of table "publication"
"""
input publication_var_pop_order_by {
  citation_num: order_by
  jid: order_by
  pid: order_by
  reference_num: order_by
  year: order_by
}

"""aggregate var_samp on columns"""
type publication_var_samp_fields {
  citation_num: Float
  jid: Float
  pid: Float
  reference_num: Float
  year: Float
}

"""
order by var_samp() on columns of table "publication"
"""
input publication_var_samp_order_by {
  citation_num: order_by
  jid: order_by
  pid: order_by
  reference_num: order_by
  year: order_by
}

"""aggregate variance on columns"""
type publication_variance_fields {
  citation_num: Float
  jid: Float
  pid: Float
  reference_num: Float
  year: Float
}

"""
order by variance() on columns of table "publication"
"""
input publication_variance_order_by {
  citation_num: order_by
  jid: order_by
  pid: order_by
  reference_num: order_by
  year: order_by
}

"""query root"""
type query_root {
  """
  fetch data from the table: "author"
  """
  author(
    """distinct select on columns"""
    distinct_on: [author_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [author_order_by!]

    """filter the rows returned"""
    where: author_bool_exp
  ): [author!]!

  """
  fetch aggregated fields from the table: "author"
  """
  author_aggregate(
    """distinct select on columns"""
    distinct_on: [author_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [author_order_by!]

    """filter the rows returned"""
    where: author_bool_exp
  ): author_aggregate!

  """fetch data from the table: "author" using primary key columns"""
  author_by_pk(aid: Int!): author

  """
  fetch data from the table: "cite"
  """
  cite(
    """distinct select on columns"""
    distinct_on: [cite_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [cite_order_by!]

    """filter the rows returned"""
    where: cite_bool_exp
  ): [cite!]!

  """
  fetch aggregated fields from the table: "cite"
  """
  cite_aggregate(
    """distinct select on columns"""
    distinct_on: [cite_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [cite_order_by!]

    """filter the rows returned"""
    where: cite_bool_exp
  ): cite_aggregate!

  """
  fetch data from the table: "conference"
  """
  conference(
    """distinct select on columns"""
    distinct_on: [conference_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [conference_order_by!]

    """filter the rows returned"""
    where: conference_bool_exp
  ): [conference!]!

  """
  fetch aggregated fields from the table: "conference"
  """
  conference_aggregate(
    """distinct select on columns"""
    distinct_on: [conference_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [conference_order_by!]

    """filter the rows returned"""
    where: conference_bool_exp
  ): conference_aggregate!

  """fetch data from the table: "conference" using primary key columns"""
  conference_by_pk(cid: Int!): conference

  """
  fetch data from the table: "domain"
  """
  domain(
    """distinct select on columns"""
    distinct_on: [domain_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [domain_order_by!]

    """filter the rows returned"""
    where: domain_bool_exp
  ): [domain!]!

  """
  fetch aggregated fields from the table: "domain"
  """
  domain_aggregate(
    """distinct select on columns"""
    distinct_on: [domain_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [domain_order_by!]

    """filter the rows returned"""
    where: domain_bool_exp
  ): domain_aggregate!

  """
  fetch data from the table: "domain_author"
  """
  domain_author(
    """distinct select on columns"""
    distinct_on: [domain_author_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [domain_author_order_by!]

    """filter the rows returned"""
    where: domain_author_bool_exp
  ): [domain_author!]!

  """
  fetch aggregated fields from the table: "domain_author"
  """
  domain_author_aggregate(
    """distinct select on columns"""
    distinct_on: [domain_author_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [domain_author_order_by!]

    """filter the rows returned"""
    where: domain_author_bool_exp
  ): domain_author_aggregate!

  """fetch data from the table: "domain" using primary key columns"""
  domain_by_pk(did: Int!): domain

  """
  fetch data from the table: "domain_conference"
  """
  domain_conference(
    """distinct select on columns"""
    distinct_on: [domain_conference_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [domain_conference_order_by!]

    """filter the rows returned"""
    where: domain_conference_bool_exp
  ): [domain_conference!]!

  """
  fetch aggregated fields from the table: "domain_conference"
  """
  domain_conference_aggregate(
    """distinct select on columns"""
    distinct_on: [domain_conference_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [domain_conference_order_by!]

    """filter the rows returned"""
    where: domain_conference_bool_exp
  ): domain_conference_aggregate!

  """
  fetch data from the table: "domain_journal"
  """
  domain_journal(
    """distinct select on columns"""
    distinct_on: [domain_journal_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [domain_journal_order_by!]

    """filter the rows returned"""
    where: domain_journal_bool_exp
  ): [domain_journal!]!

  """
  fetch aggregated fields from the table: "domain_journal"
  """
  domain_journal_aggregate(
    """distinct select on columns"""
    distinct_on: [domain_journal_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [domain_journal_order_by!]

    """filter the rows returned"""
    where: domain_journal_bool_exp
  ): domain_journal_aggregate!

  """fetch data from the table: "domain_journal" using primary key columns"""
  domain_journal_by_pk(did: Int!, jid: Int!): domain_journal

  """
  fetch data from the table: "domain_keyword"
  """
  domain_keyword(
    """distinct select on columns"""
    distinct_on: [domain_keyword_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [domain_keyword_order_by!]

    """filter the rows returned"""
    where: domain_keyword_bool_exp
  ): [domain_keyword!]!

  """
  fetch aggregated fields from the table: "domain_keyword"
  """
  domain_keyword_aggregate(
    """distinct select on columns"""
    distinct_on: [domain_keyword_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [domain_keyword_order_by!]

    """filter the rows returned"""
    where: domain_keyword_bool_exp
  ): domain_keyword_aggregate!

  """fetch data from the table: "domain_keyword" using primary key columns"""
  domain_keyword_by_pk(did: Int!, kid: Int!): domain_keyword

  """
  fetch data from the table: "domain_publication"
  """
  domain_publication(
    """distinct select on columns"""
    distinct_on: [domain_publication_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [domain_publication_order_by!]

    """filter the rows returned"""
    where: domain_publication_bool_exp
  ): [domain_publication!]!

  """
  fetch aggregated fields from the table: "domain_publication"
  """
  domain_publication_aggregate(
    """distinct select on columns"""
    distinct_on: [domain_publication_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [domain_publication_order_by!]

    """filter the rows returned"""
    where: domain_publication_bool_exp
  ): domain_publication_aggregate!

  """
  fetch data from the table: "domain_publication" using primary key columns
  """
  domain_publication_by_pk(did: Int!, pid: Int!): domain_publication

  """
  fetch data from the table: "journal"
  """
  journal(
    """distinct select on columns"""
    distinct_on: [journal_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [journal_order_by!]

    """filter the rows returned"""
    where: journal_bool_exp
  ): [journal!]!

  """
  fetch aggregated fields from the table: "journal"
  """
  journal_aggregate(
    """distinct select on columns"""
    distinct_on: [journal_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [journal_order_by!]

    """filter the rows returned"""
    where: journal_bool_exp
  ): journal_aggregate!

  """fetch data from the table: "journal" using primary key columns"""
  journal_by_pk(jid: Int!): journal

  """
  fetch data from the table: "keyword"
  """
  keyword(
    """distinct select on columns"""
    distinct_on: [keyword_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [keyword_order_by!]

    """filter the rows returned"""
    where: keyword_bool_exp
  ): [keyword!]!

  """
  fetch aggregated fields from the table: "keyword"
  """
  keyword_aggregate(
    """distinct select on columns"""
    distinct_on: [keyword_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [keyword_order_by!]

    """filter the rows returned"""
    where: keyword_bool_exp
  ): keyword_aggregate!

  """fetch data from the table: "keyword" using primary key columns"""
  keyword_by_pk(kid: Int!): keyword

  """
  fetch data from the table: "organization"
  """
  organization(
    """distinct select on columns"""
    distinct_on: [organization_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [organization_order_by!]

    """filter the rows returned"""
    where: organization_bool_exp
  ): [organization!]!

  """
  fetch aggregated fields from the table: "organization"
  """
  organization_aggregate(
    """distinct select on columns"""
    distinct_on: [organization_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [organization_order_by!]

    """filter the rows returned"""
    where: organization_bool_exp
  ): organization_aggregate!

  """fetch data from the table: "organization" using primary key columns"""
  organization_by_pk(oid: Int!): organization

  """
  fetch data from the table: "publication"
  """
  publication(
    """distinct select on columns"""
    distinct_on: [publication_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [publication_order_by!]

    """filter the rows returned"""
    where: publication_bool_exp
  ): [publication!]!

  """
  fetch aggregated fields from the table: "publication"
  """
  publication_aggregate(
    """distinct select on columns"""
    distinct_on: [publication_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [publication_order_by!]

    """filter the rows returned"""
    where: publication_bool_exp
  ): publication_aggregate!

  """fetch data from the table: "publication" using primary key columns"""
  publication_by_pk(pid: Int!): publication

  """
  fetch data from the table: "publication_keyword"
  """
  publication_keyword(
    """distinct select on columns"""
    distinct_on: [publication_keyword_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [publication_keyword_order_by!]

    """filter the rows returned"""
    where: publication_keyword_bool_exp
  ): [publication_keyword!]!

  """
  fetch aggregated fields from the table: "publication_keyword"
  """
  publication_keyword_aggregate(
    """distinct select on columns"""
    distinct_on: [publication_keyword_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [publication_keyword_order_by!]

    """filter the rows returned"""
    where: publication_keyword_bool_exp
  ): publication_keyword_aggregate!

  """
  fetch data from the table: "writes"
  """
  writes(
    """distinct select on columns"""
    distinct_on: [writes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [writes_order_by!]

    """filter the rows returned"""
    where: writes_bool_exp
  ): [writes!]!

  """
  fetch aggregated fields from the table: "writes"
  """
  writes_aggregate(
    """distinct select on columns"""
    distinct_on: [writes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [writes_order_by!]

    """filter the rows returned"""
    where: writes_bool_exp
  ): writes_aggregate!

  """fetch data from the table: "writes" using primary key columns"""
  writes_by_pk(aid: Int!, pid: Int!): writes
}

"""
expression to compare columns of type String. All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String
  _ilike: String
  _in: [String!]
  _is_null: Boolean
  _like: String
  _lt: String
  _lte: String
  _neq: String
  _nilike: String
  _nin: [String!]
  _nlike: String
  _nsimilar: String
  _similar: String
}

"""subscription root"""
type subscription_root {
  """
  fetch data from the table: "author"
  """
  author(
    """distinct select on columns"""
    distinct_on: [author_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [author_order_by!]

    """filter the rows returned"""
    where: author_bool_exp
  ): [author!]!

  """
  fetch aggregated fields from the table: "author"
  """
  author_aggregate(
    """distinct select on columns"""
    distinct_on: [author_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [author_order_by!]

    """filter the rows returned"""
    where: author_bool_exp
  ): author_aggregate!

  """fetch data from the table: "author" using primary key columns"""
  author_by_pk(aid: Int!): author

  """
  fetch data from the table: "cite"
  """
  cite(
    """distinct select on columns"""
    distinct_on: [cite_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [cite_order_by!]

    """filter the rows returned"""
    where: cite_bool_exp
  ): [cite!]!

  """
  fetch aggregated fields from the table: "cite"
  """
  cite_aggregate(
    """distinct select on columns"""
    distinct_on: [cite_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [cite_order_by!]

    """filter the rows returned"""
    where: cite_bool_exp
  ): cite_aggregate!

  """
  fetch data from the table: "conference"
  """
  conference(
    """distinct select on columns"""
    distinct_on: [conference_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [conference_order_by!]

    """filter the rows returned"""
    where: conference_bool_exp
  ): [conference!]!

  """
  fetch aggregated fields from the table: "conference"
  """
  conference_aggregate(
    """distinct select on columns"""
    distinct_on: [conference_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [conference_order_by!]

    """filter the rows returned"""
    where: conference_bool_exp
  ): conference_aggregate!

  """fetch data from the table: "conference" using primary key columns"""
  conference_by_pk(cid: Int!): conference

  """
  fetch data from the table: "domain"
  """
  domain(
    """distinct select on columns"""
    distinct_on: [domain_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [domain_order_by!]

    """filter the rows returned"""
    where: domain_bool_exp
  ): [domain!]!

  """
  fetch aggregated fields from the table: "domain"
  """
  domain_aggregate(
    """distinct select on columns"""
    distinct_on: [domain_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [domain_order_by!]

    """filter the rows returned"""
    where: domain_bool_exp
  ): domain_aggregate!

  """
  fetch data from the table: "domain_author"
  """
  domain_author(
    """distinct select on columns"""
    distinct_on: [domain_author_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [domain_author_order_by!]

    """filter the rows returned"""
    where: domain_author_bool_exp
  ): [domain_author!]!

  """
  fetch aggregated fields from the table: "domain_author"
  """
  domain_author_aggregate(
    """distinct select on columns"""
    distinct_on: [domain_author_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [domain_author_order_by!]

    """filter the rows returned"""
    where: domain_author_bool_exp
  ): domain_author_aggregate!

  """fetch data from the table: "domain" using primary key columns"""
  domain_by_pk(did: Int!): domain

  """
  fetch data from the table: "domain_conference"
  """
  domain_conference(
    """distinct select on columns"""
    distinct_on: [domain_conference_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [domain_conference_order_by!]

    """filter the rows returned"""
    where: domain_conference_bool_exp
  ): [domain_conference!]!

  """
  fetch aggregated fields from the table: "domain_conference"
  """
  domain_conference_aggregate(
    """distinct select on columns"""
    distinct_on: [domain_conference_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [domain_conference_order_by!]

    """filter the rows returned"""
    where: domain_conference_bool_exp
  ): domain_conference_aggregate!

  """
  fetch data from the table: "domain_journal"
  """
  domain_journal(
    """distinct select on columns"""
    distinct_on: [domain_journal_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [domain_journal_order_by!]

    """filter the rows returned"""
    where: domain_journal_bool_exp
  ): [domain_journal!]!

  """
  fetch aggregated fields from the table: "domain_journal"
  """
  domain_journal_aggregate(
    """distinct select on columns"""
    distinct_on: [domain_journal_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [domain_journal_order_by!]

    """filter the rows returned"""
    where: domain_journal_bool_exp
  ): domain_journal_aggregate!

  """fetch data from the table: "domain_journal" using primary key columns"""
  domain_journal_by_pk(did: Int!, jid: Int!): domain_journal

  """
  fetch data from the table: "domain_keyword"
  """
  domain_keyword(
    """distinct select on columns"""
    distinct_on: [domain_keyword_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [domain_keyword_order_by!]

    """filter the rows returned"""
    where: domain_keyword_bool_exp
  ): [domain_keyword!]!

  """
  fetch aggregated fields from the table: "domain_keyword"
  """
  domain_keyword_aggregate(
    """distinct select on columns"""
    distinct_on: [domain_keyword_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [domain_keyword_order_by!]

    """filter the rows returned"""
    where: domain_keyword_bool_exp
  ): domain_keyword_aggregate!

  """fetch data from the table: "domain_keyword" using primary key columns"""
  domain_keyword_by_pk(did: Int!, kid: Int!): domain_keyword

  """
  fetch data from the table: "domain_publication"
  """
  domain_publication(
    """distinct select on columns"""
    distinct_on: [domain_publication_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [domain_publication_order_by!]

    """filter the rows returned"""
    where: domain_publication_bool_exp
  ): [domain_publication!]!

  """
  fetch aggregated fields from the table: "domain_publication"
  """
  domain_publication_aggregate(
    """distinct select on columns"""
    distinct_on: [domain_publication_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [domain_publication_order_by!]

    """filter the rows returned"""
    where: domain_publication_bool_exp
  ): domain_publication_aggregate!

  """
  fetch data from the table: "domain_publication" using primary key columns
  """
  domain_publication_by_pk(did: Int!, pid: Int!): domain_publication

  """
  fetch data from the table: "journal"
  """
  journal(
    """distinct select on columns"""
    distinct_on: [journal_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [journal_order_by!]

    """filter the rows returned"""
    where: journal_bool_exp
  ): [journal!]!

  """
  fetch aggregated fields from the table: "journal"
  """
  journal_aggregate(
    """distinct select on columns"""
    distinct_on: [journal_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [journal_order_by!]

    """filter the rows returned"""
    where: journal_bool_exp
  ): journal_aggregate!

  """fetch data from the table: "journal" using primary key columns"""
  journal_by_pk(jid: Int!): journal

  """
  fetch data from the table: "keyword"
  """
  keyword(
    """distinct select on columns"""
    distinct_on: [keyword_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [keyword_order_by!]

    """filter the rows returned"""
    where: keyword_bool_exp
  ): [keyword!]!

  """
  fetch aggregated fields from the table: "keyword"
  """
  keyword_aggregate(
    """distinct select on columns"""
    distinct_on: [keyword_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [keyword_order_by!]

    """filter the rows returned"""
    where: keyword_bool_exp
  ): keyword_aggregate!

  """fetch data from the table: "keyword" using primary key columns"""
  keyword_by_pk(kid: Int!): keyword

  """
  fetch data from the table: "organization"
  """
  organization(
    """distinct select on columns"""
    distinct_on: [organization_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [organization_order_by!]

    """filter the rows returned"""
    where: organization_bool_exp
  ): [organization!]!

  """
  fetch aggregated fields from the table: "organization"
  """
  organization_aggregate(
    """distinct select on columns"""
    distinct_on: [organization_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [organization_order_by!]

    """filter the rows returned"""
    where: organization_bool_exp
  ): organization_aggregate!

  """fetch data from the table: "organization" using primary key columns"""
  organization_by_pk(oid: Int!): organization

  """
  fetch data from the table: "publication"
  """
  publication(
    """distinct select on columns"""
    distinct_on: [publication_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [publication_order_by!]

    """filter the rows returned"""
    where: publication_bool_exp
  ): [publication!]!

  """
  fetch aggregated fields from the table: "publication"
  """
  publication_aggregate(
    """distinct select on columns"""
    distinct_on: [publication_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [publication_order_by!]

    """filter the rows returned"""
    where: publication_bool_exp
  ): publication_aggregate!

  """fetch data from the table: "publication" using primary key columns"""
  publication_by_pk(pid: Int!): publication

  """
  fetch data from the table: "publication_keyword"
  """
  publication_keyword(
    """distinct select on columns"""
    distinct_on: [publication_keyword_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [publication_keyword_order_by!]

    """filter the rows returned"""
    where: publication_keyword_bool_exp
  ): [publication_keyword!]!

  """
  fetch aggregated fields from the table: "publication_keyword"
  """
  publication_keyword_aggregate(
    """distinct select on columns"""
    distinct_on: [publication_keyword_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [publication_keyword_order_by!]

    """filter the rows returned"""
    where: publication_keyword_bool_exp
  ): publication_keyword_aggregate!

  """
  fetch data from the table: "writes"
  """
  writes(
    """distinct select on columns"""
    distinct_on: [writes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [writes_order_by!]

    """filter the rows returned"""
    where: writes_bool_exp
  ): [writes!]!

  """
  fetch aggregated fields from the table: "writes"
  """
  writes_aggregate(
    """distinct select on columns"""
    distinct_on: [writes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [writes_order_by!]

    """filter the rows returned"""
    where: writes_bool_exp
  ): writes_aggregate!

  """fetch data from the table: "writes" using primary key columns"""
  writes_by_pk(aid: Int!, pid: Int!): writes
}

"""
columns and relationships of "writes"
"""
type writes {
  aid: Int!

  """An object relationship"""
  author: author!
  pid: Int!

  """An object relationship"""
  publication: publication!
}

"""
aggregated selection of "writes"
"""
type writes_aggregate {
  aggregate: writes_aggregate_fields
  nodes: [writes!]!
}

"""
aggregate fields of "writes"
"""
type writes_aggregate_fields {
  avg: writes_avg_fields
  count(columns: [writes_select_column!], distinct: Boolean): Int
  max: writes_max_fields
  min: writes_min_fields
  stddev: writes_stddev_fields
  stddev_pop: writes_stddev_pop_fields
  stddev_samp: writes_stddev_samp_fields
  sum: writes_sum_fields
  var_pop: writes_var_pop_fields
  var_samp: writes_var_samp_fields
  variance: writes_variance_fields
}

"""
order by aggregate values of table "writes"
"""
input writes_aggregate_order_by {
  avg: writes_avg_order_by
  count: order_by
  max: writes_max_order_by
  min: writes_min_order_by
  stddev: writes_stddev_order_by
  stddev_pop: writes_stddev_pop_order_by
  stddev_samp: writes_stddev_samp_order_by
  sum: writes_sum_order_by
  var_pop: writes_var_pop_order_by
  var_samp: writes_var_samp_order_by
  variance: writes_variance_order_by
}

"""
input type for inserting array relation for remote table "writes"
"""
input writes_arr_rel_insert_input {
  data: [writes_insert_input!]!
  on_conflict: writes_on_conflict
}

"""aggregate avg on columns"""
type writes_avg_fields {
  aid: Float
  pid: Float
}

"""
order by avg() on columns of table "writes"
"""
input writes_avg_order_by {
  aid: order_by
  pid: order_by
}

"""
Boolean expression to filter rows from the table "writes". All fields are combined with a logical 'AND'.
"""
input writes_bool_exp {
  _and: [writes_bool_exp]
  _not: writes_bool_exp
  _or: [writes_bool_exp]
  aid: Int_comparison_exp
  author: author_bool_exp
  pid: Int_comparison_exp
  publication: publication_bool_exp
}

"""
unique or primary key constraints on table "writes"
"""
enum writes_constraint {
  """unique or primary key constraint"""
  idx_21516_sqlite_autoindex_writes_1
}

"""
input type for incrementing integer column in table "writes"
"""
input writes_inc_input {
  aid: Int
  pid: Int
}

"""
input type for inserting data into table "writes"
"""
input writes_insert_input {
  aid: Int
  author: author_obj_rel_insert_input
  pid: Int
  publication: publication_obj_rel_insert_input
}

"""aggregate max on columns"""
type writes_max_fields {
  aid: Int
  pid: Int
}

"""
order by max() on columns of table "writes"
"""
input writes_max_order_by {
  aid: order_by
  pid: order_by
}

"""aggregate min on columns"""
type writes_min_fields {
  aid: Int
  pid: Int
}

"""
order by min() on columns of table "writes"
"""
input writes_min_order_by {
  aid: order_by
  pid: order_by
}

"""
response of any mutation on the table "writes"
"""
type writes_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [writes!]!
}

"""
input type for inserting object relation for remote table "writes"
"""
input writes_obj_rel_insert_input {
  data: writes_insert_input!
  on_conflict: writes_on_conflict
}

"""
on conflict condition type for table "writes"
"""
input writes_on_conflict {
  constraint: writes_constraint!
  update_columns: [writes_update_column!]!
  where: writes_bool_exp
}

"""
ordering options when selecting data from "writes"
"""
input writes_order_by {
  aid: order_by
  author: author_order_by
  pid: order_by
  publication: publication_order_by
}

"""
primary key columns input for table: "writes"
"""
input writes_pk_columns_input {
  aid: Int!
  pid: Int!
}

"""
select columns of table "writes"
"""
enum writes_select_column {
  """column name"""
  aid

  """column name"""
  pid
}

"""
input type for updating data in table "writes"
"""
input writes_set_input {
  aid: Int
  pid: Int
}

"""aggregate stddev on columns"""
type writes_stddev_fields {
  aid: Float
  pid: Float
}

"""
order by stddev() on columns of table "writes"
"""
input writes_stddev_order_by {
  aid: order_by
  pid: order_by
}

"""aggregate stddev_pop on columns"""
type writes_stddev_pop_fields {
  aid: Float
  pid: Float
}

"""
order by stddev_pop() on columns of table "writes"
"""
input writes_stddev_pop_order_by {
  aid: order_by
  pid: order_by
}

"""aggregate stddev_samp on columns"""
type writes_stddev_samp_fields {
  aid: Float
  pid: Float
}

"""
order by stddev_samp() on columns of table "writes"
"""
input writes_stddev_samp_order_by {
  aid: order_by
  pid: order_by
}

"""aggregate sum on columns"""
type writes_sum_fields {
  aid: Int
  pid: Int
}

"""
order by sum() on columns of table "writes"
"""
input writes_sum_order_by {
  aid: order_by
  pid: order_by
}

"""
update columns of table "writes"
"""
enum writes_update_column {
  """column name"""
  aid

  """column name"""
  pid
}

"""aggregate var_pop on columns"""
type writes_var_pop_fields {
  aid: Float
  pid: Float
}

"""
order by var_pop() on columns of table "writes"
"""
input writes_var_pop_order_by {
  aid: order_by
  pid: order_by
}

"""aggregate var_samp on columns"""
type writes_var_samp_fields {
  aid: Float
  pid: Float
}

"""
order by var_samp() on columns of table "writes"
"""
input writes_var_samp_order_by {
  aid: order_by
  pid: order_by
}

"""aggregate variance on columns"""
type writes_variance_fields {
  aid: Float
  pid: Float
}

"""
order by variance() on columns of table "writes"
"""
input writes_variance_order_by {
  aid: order_by
  pid: order_by
}
