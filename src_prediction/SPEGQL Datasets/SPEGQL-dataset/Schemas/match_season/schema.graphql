schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""
Direct the client to resolve this field locally, either from the cache or local resolvers.
"""
directive @client(
  """
  When true, the client will never use the cache for this value. See
  https://www.apollographql.com/docs/react/essentials/local-state/#forcing-resolvers-with-clientalways-true
  """
  always: Boolean
) on FIELD | FRAGMENT_DEFINITION | INLINE_FRAGMENT

"""
Export this locally resolved field as a variable to be used in the remainder of this query. See
https://www.apollographql.com/docs/react/essentials/local-state/#using-client-fields-as-variables
"""
directive @export(
  """The variable name to export this field as."""
  as: String!
) on FIELD

"""
Specify a custom store key for this result. See
https://www.apollographql.com/docs/react/advanced/caching/#the-connection-directive
"""
directive @connection(
  """Specify the store key."""
  key: String!

  """
  An array of query argument names to include in the generated custom store key.
  """
  filter: [String!]
) on FIELD

"""
columns and relationships of "country"
"""
type country {
  capital: String
  country_id: Int
  country_name: String

  """An array relationship"""
  match_seasons(
    """distinct select on columns"""
    distinct_on: [match_season_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [match_season_order_by!]

    """filter the rows returned"""
    where: match_season_bool_exp
  ): [match_season!]!

  """An aggregated array relationship"""
  match_seasons_aggregate(
    """distinct select on columns"""
    distinct_on: [match_season_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [match_season_order_by!]

    """filter the rows returned"""
    where: match_season_bool_exp
  ): match_season_aggregate!
  official_native_language: String
}

"""
aggregated selection of "country"
"""
type country_aggregate {
  aggregate: country_aggregate_fields
  nodes: [country!]!
}

"""
aggregate fields of "country"
"""
type country_aggregate_fields {
  avg: country_avg_fields
  count(columns: [country_select_column!], distinct: Boolean): Int
  max: country_max_fields
  min: country_min_fields
  stddev: country_stddev_fields
  stddev_pop: country_stddev_pop_fields
  stddev_samp: country_stddev_samp_fields
  sum: country_sum_fields
  var_pop: country_var_pop_fields
  var_samp: country_var_samp_fields
  variance: country_variance_fields
}

"""
order by aggregate values of table "country"
"""
input country_aggregate_order_by {
  avg: country_avg_order_by
  count: order_by
  max: country_max_order_by
  min: country_min_order_by
  stddev: country_stddev_order_by
  stddev_pop: country_stddev_pop_order_by
  stddev_samp: country_stddev_samp_order_by
  sum: country_sum_order_by
  var_pop: country_var_pop_order_by
  var_samp: country_var_samp_order_by
  variance: country_variance_order_by
}

"""
input type for inserting array relation for remote table "country"
"""
input country_arr_rel_insert_input {
  data: [country_insert_input!]!
  on_conflict: country_on_conflict
}

"""aggregate avg on columns"""
type country_avg_fields {
  country_id: Float
}

"""
order by avg() on columns of table "country"
"""
input country_avg_order_by {
  country_id: order_by
}

"""
Boolean expression to filter rows from the table "country". All fields are combined with a logical 'AND'.
"""
input country_bool_exp {
  _and: [country_bool_exp]
  _not: country_bool_exp
  _or: [country_bool_exp]
  capital: String_comparison_exp
  country_id: Int_comparison_exp
  country_name: String_comparison_exp
  match_seasons: match_season_bool_exp
  official_native_language: String_comparison_exp
}

"""
unique or primary key constraints on table "country"
"""
enum country_constraint {
  """unique or primary key constraint"""
  idx_19186_sqlite_autoindex_country_1
}

"""
input type for incrementing integer column in table "country"
"""
input country_inc_input {
  country_id: Int
}

"""
input type for inserting data into table "country"
"""
input country_insert_input {
  capital: String
  country_id: Int
  country_name: String
  match_seasons: match_season_arr_rel_insert_input
  official_native_language: String
}

"""aggregate max on columns"""
type country_max_fields {
  capital: String
  country_id: Int
  country_name: String
  official_native_language: String
}

"""
order by max() on columns of table "country"
"""
input country_max_order_by {
  capital: order_by
  country_id: order_by
  country_name: order_by
  official_native_language: order_by
}

"""aggregate min on columns"""
type country_min_fields {
  capital: String
  country_id: Int
  country_name: String
  official_native_language: String
}

"""
order by min() on columns of table "country"
"""
input country_min_order_by {
  capital: order_by
  country_id: order_by
  country_name: order_by
  official_native_language: order_by
}

"""
response of any mutation on the table "country"
"""
type country_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [country!]!
}

"""
input type for inserting object relation for remote table "country"
"""
input country_obj_rel_insert_input {
  data: country_insert_input!
  on_conflict: country_on_conflict
}

"""
on conflict condition type for table "country"
"""
input country_on_conflict {
  constraint: country_constraint!
  update_columns: [country_update_column!]!
  where: country_bool_exp
}

"""
ordering options when selecting data from "country"
"""
input country_order_by {
  capital: order_by
  country_id: order_by
  country_name: order_by
  match_seasons_aggregate: match_season_aggregate_order_by
  official_native_language: order_by
}

"""
select columns of table "country"
"""
enum country_select_column {
  """column name"""
  capital

  """column name"""
  country_id

  """column name"""
  country_name

  """column name"""
  official_native_language
}

"""
input type for updating data in table "country"
"""
input country_set_input {
  capital: String
  country_id: Int
  country_name: String
  official_native_language: String
}

"""aggregate stddev on columns"""
type country_stddev_fields {
  country_id: Float
}

"""
order by stddev() on columns of table "country"
"""
input country_stddev_order_by {
  country_id: order_by
}

"""aggregate stddev_pop on columns"""
type country_stddev_pop_fields {
  country_id: Float
}

"""
order by stddev_pop() on columns of table "country"
"""
input country_stddev_pop_order_by {
  country_id: order_by
}

"""aggregate stddev_samp on columns"""
type country_stddev_samp_fields {
  country_id: Float
}

"""
order by stddev_samp() on columns of table "country"
"""
input country_stddev_samp_order_by {
  country_id: order_by
}

"""aggregate sum on columns"""
type country_sum_fields {
  country_id: Int
}

"""
order by sum() on columns of table "country"
"""
input country_sum_order_by {
  country_id: order_by
}

"""
update columns of table "country"
"""
enum country_update_column {
  """column name"""
  capital

  """column name"""
  country_id

  """column name"""
  country_name

  """column name"""
  official_native_language
}

"""aggregate var_pop on columns"""
type country_var_pop_fields {
  country_id: Float
}

"""
order by var_pop() on columns of table "country"
"""
input country_var_pop_order_by {
  country_id: order_by
}

"""aggregate var_samp on columns"""
type country_var_samp_fields {
  country_id: Float
}

"""
order by var_samp() on columns of table "country"
"""
input country_var_samp_order_by {
  country_id: order_by
}

"""aggregate variance on columns"""
type country_variance_fields {
  country_id: Float
}

"""
order by variance() on columns of table "country"
"""
input country_variance_order_by {
  country_id: order_by
}

"""
expression to compare columns of type Float. All fields are combined with logical 'AND'.
"""
input Float_comparison_exp {
  _eq: Float
  _gt: Float
  _gte: Float
  _in: [Float!]
  _is_null: Boolean
  _lt: Float
  _lte: Float
  _neq: Float
  _nin: [Float!]
}

"""
expression to compare columns of type Int. All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""
columns and relationships of "match_season"
"""
type match_season {
  college: String
  country: Int

  """An object relationship"""
  countryByCountry: country
  draft_class: String
  draft_pick_number: Int
  player: String
  position: String
  season: Float
  team: Int

  """An object relationship"""
  teamByTeam: team
}

"""
aggregated selection of "match_season"
"""
type match_season_aggregate {
  aggregate: match_season_aggregate_fields
  nodes: [match_season!]!
}

"""
aggregate fields of "match_season"
"""
type match_season_aggregate_fields {
  avg: match_season_avg_fields
  count(columns: [match_season_select_column!], distinct: Boolean): Int
  max: match_season_max_fields
  min: match_season_min_fields
  stddev: match_season_stddev_fields
  stddev_pop: match_season_stddev_pop_fields
  stddev_samp: match_season_stddev_samp_fields
  sum: match_season_sum_fields
  var_pop: match_season_var_pop_fields
  var_samp: match_season_var_samp_fields
  variance: match_season_variance_fields
}

"""
order by aggregate values of table "match_season"
"""
input match_season_aggregate_order_by {
  avg: match_season_avg_order_by
  count: order_by
  max: match_season_max_order_by
  min: match_season_min_order_by
  stddev: match_season_stddev_order_by
  stddev_pop: match_season_stddev_pop_order_by
  stddev_samp: match_season_stddev_samp_order_by
  sum: match_season_sum_order_by
  var_pop: match_season_var_pop_order_by
  var_samp: match_season_var_samp_order_by
  variance: match_season_variance_order_by
}

"""
input type for inserting array relation for remote table "match_season"
"""
input match_season_arr_rel_insert_input {
  data: [match_season_insert_input!]!
  on_conflict: match_season_on_conflict
}

"""aggregate avg on columns"""
type match_season_avg_fields {
  country: Float
  draft_pick_number: Float
  season: Float
  team: Float
}

"""
order by avg() on columns of table "match_season"
"""
input match_season_avg_order_by {
  country: order_by
  draft_pick_number: order_by
  season: order_by
  team: order_by
}

"""
Boolean expression to filter rows from the table "match_season". All fields are combined with a logical 'AND'.
"""
input match_season_bool_exp {
  _and: [match_season_bool_exp]
  _not: match_season_bool_exp
  _or: [match_season_bool_exp]
  college: String_comparison_exp
  country: Int_comparison_exp
  countryByCountry: country_bool_exp
  draft_class: String_comparison_exp
  draft_pick_number: Int_comparison_exp
  player: String_comparison_exp
  position: String_comparison_exp
  season: Float_comparison_exp
  team: Int_comparison_exp
  teamByTeam: team_bool_exp
}

"""
unique or primary key constraints on table "match_season"
"""
enum match_season_constraint {
  """unique or primary key constraint"""
  idx_19198_sqlite_autoindex_match_season_1
}

"""
input type for incrementing integer column in table "match_season"
"""
input match_season_inc_input {
  country: Int
  draft_pick_number: Int
  season: Float
  team: Int
}

"""
input type for inserting data into table "match_season"
"""
input match_season_insert_input {
  college: String
  country: Int
  countryByCountry: country_obj_rel_insert_input
  draft_class: String
  draft_pick_number: Int
  player: String
  position: String
  season: Float
  team: Int
  teamByTeam: team_obj_rel_insert_input
}

"""aggregate max on columns"""
type match_season_max_fields {
  college: String
  country: Int
  draft_class: String
  draft_pick_number: Int
  player: String
  position: String
  season: Float
  team: Int
}

"""
order by max() on columns of table "match_season"
"""
input match_season_max_order_by {
  college: order_by
  country: order_by
  draft_class: order_by
  draft_pick_number: order_by
  player: order_by
  position: order_by
  season: order_by
  team: order_by
}

"""aggregate min on columns"""
type match_season_min_fields {
  college: String
  country: Int
  draft_class: String
  draft_pick_number: Int
  player: String
  position: String
  season: Float
  team: Int
}

"""
order by min() on columns of table "match_season"
"""
input match_season_min_order_by {
  college: order_by
  country: order_by
  draft_class: order_by
  draft_pick_number: order_by
  player: order_by
  position: order_by
  season: order_by
  team: order_by
}

"""
response of any mutation on the table "match_season"
"""
type match_season_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [match_season!]!
}

"""
input type for inserting object relation for remote table "match_season"
"""
input match_season_obj_rel_insert_input {
  data: match_season_insert_input!
  on_conflict: match_season_on_conflict
}

"""
on conflict condition type for table "match_season"
"""
input match_season_on_conflict {
  constraint: match_season_constraint!
  update_columns: [match_season_update_column!]!
  where: match_season_bool_exp
}

"""
ordering options when selecting data from "match_season"
"""
input match_season_order_by {
  college: order_by
  country: order_by
  countryByCountry: country_order_by
  draft_class: order_by
  draft_pick_number: order_by
  player: order_by
  position: order_by
  season: order_by
  team: order_by
  teamByTeam: team_order_by
}

"""
select columns of table "match_season"
"""
enum match_season_select_column {
  """column name"""
  college

  """column name"""
  country

  """column name"""
  draft_class

  """column name"""
  draft_pick_number

  """column name"""
  player

  """column name"""
  position

  """column name"""
  season

  """column name"""
  team
}

"""
input type for updating data in table "match_season"
"""
input match_season_set_input {
  college: String
  country: Int
  draft_class: String
  draft_pick_number: Int
  player: String
  position: String
  season: Float
  team: Int
}

"""aggregate stddev on columns"""
type match_season_stddev_fields {
  country: Float
  draft_pick_number: Float
  season: Float
  team: Float
}

"""
order by stddev() on columns of table "match_season"
"""
input match_season_stddev_order_by {
  country: order_by
  draft_pick_number: order_by
  season: order_by
  team: order_by
}

"""aggregate stddev_pop on columns"""
type match_season_stddev_pop_fields {
  country: Float
  draft_pick_number: Float
  season: Float
  team: Float
}

"""
order by stddev_pop() on columns of table "match_season"
"""
input match_season_stddev_pop_order_by {
  country: order_by
  draft_pick_number: order_by
  season: order_by
  team: order_by
}

"""aggregate stddev_samp on columns"""
type match_season_stddev_samp_fields {
  country: Float
  draft_pick_number: Float
  season: Float
  team: Float
}

"""
order by stddev_samp() on columns of table "match_season"
"""
input match_season_stddev_samp_order_by {
  country: order_by
  draft_pick_number: order_by
  season: order_by
  team: order_by
}

"""aggregate sum on columns"""
type match_season_sum_fields {
  country: Int
  draft_pick_number: Int
  season: Float
  team: Int
}

"""
order by sum() on columns of table "match_season"
"""
input match_season_sum_order_by {
  country: order_by
  draft_pick_number: order_by
  season: order_by
  team: order_by
}

"""
update columns of table "match_season"
"""
enum match_season_update_column {
  """column name"""
  college

  """column name"""
  country

  """column name"""
  draft_class

  """column name"""
  draft_pick_number

  """column name"""
  player

  """column name"""
  position

  """column name"""
  season

  """column name"""
  team
}

"""aggregate var_pop on columns"""
type match_season_var_pop_fields {
  country: Float
  draft_pick_number: Float
  season: Float
  team: Float
}

"""
order by var_pop() on columns of table "match_season"
"""
input match_season_var_pop_order_by {
  country: order_by
  draft_pick_number: order_by
  season: order_by
  team: order_by
}

"""aggregate var_samp on columns"""
type match_season_var_samp_fields {
  country: Float
  draft_pick_number: Float
  season: Float
  team: Float
}

"""
order by var_samp() on columns of table "match_season"
"""
input match_season_var_samp_order_by {
  country: order_by
  draft_pick_number: order_by
  season: order_by
  team: order_by
}

"""aggregate variance on columns"""
type match_season_variance_fields {
  country: Float
  draft_pick_number: Float
  season: Float
  team: Float
}

"""
order by variance() on columns of table "match_season"
"""
input match_season_variance_order_by {
  country: order_by
  draft_pick_number: order_by
  season: order_by
  team: order_by
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "country"
  """
  delete_country(
    """filter the rows which have to be deleted"""
    where: country_bool_exp!
  ): country_mutation_response

  """
  delete data from the table: "match_season"
  """
  delete_match_season(
    """filter the rows which have to be deleted"""
    where: match_season_bool_exp!
  ): match_season_mutation_response

  """
  delete data from the table: "player"
  """
  delete_player(
    """filter the rows which have to be deleted"""
    where: player_bool_exp!
  ): player_mutation_response

  """
  delete data from the table: "team"
  """
  delete_team(
    """filter the rows which have to be deleted"""
    where: team_bool_exp!
  ): team_mutation_response

  """
  insert data into the table: "country"
  """
  insert_country(
    """the rows to be inserted"""
    objects: [country_insert_input!]!

    """on conflict condition"""
    on_conflict: country_on_conflict
  ): country_mutation_response

  """
  insert a single row into the table: "country"
  """
  insert_country_one(
    """the row to be inserted"""
    object: country_insert_input!

    """on conflict condition"""
    on_conflict: country_on_conflict
  ): country

  """
  insert data into the table: "match_season"
  """
  insert_match_season(
    """the rows to be inserted"""
    objects: [match_season_insert_input!]!

    """on conflict condition"""
    on_conflict: match_season_on_conflict
  ): match_season_mutation_response

  """
  insert a single row into the table: "match_season"
  """
  insert_match_season_one(
    """the row to be inserted"""
    object: match_season_insert_input!

    """on conflict condition"""
    on_conflict: match_season_on_conflict
  ): match_season

  """
  insert data into the table: "player"
  """
  insert_player(
    """the rows to be inserted"""
    objects: [player_insert_input!]!

    """on conflict condition"""
    on_conflict: player_on_conflict
  ): player_mutation_response

  """
  insert a single row into the table: "player"
  """
  insert_player_one(
    """the row to be inserted"""
    object: player_insert_input!

    """on conflict condition"""
    on_conflict: player_on_conflict
  ): player

  """
  insert data into the table: "team"
  """
  insert_team(
    """the rows to be inserted"""
    objects: [team_insert_input!]!

    """on conflict condition"""
    on_conflict: team_on_conflict
  ): team_mutation_response

  """
  insert a single row into the table: "team"
  """
  insert_team_one(
    """the row to be inserted"""
    object: team_insert_input!

    """on conflict condition"""
    on_conflict: team_on_conflict
  ): team

  """
  update data of the table: "country"
  """
  update_country(
    """increments the integer columns with given value of the filtered values"""
    _inc: country_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: country_set_input

    """filter the rows which have to be updated"""
    where: country_bool_exp!
  ): country_mutation_response

  """
  update data of the table: "match_season"
  """
  update_match_season(
    """increments the integer columns with given value of the filtered values"""
    _inc: match_season_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: match_season_set_input

    """filter the rows which have to be updated"""
    where: match_season_bool_exp!
  ): match_season_mutation_response

  """
  update data of the table: "player"
  """
  update_player(
    """increments the integer columns with given value of the filtered values"""
    _inc: player_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: player_set_input

    """filter the rows which have to be updated"""
    where: player_bool_exp!
  ): player_mutation_response

  """
  update data of the table: "team"
  """
  update_team(
    """increments the integer columns with given value of the filtered values"""
    _inc: team_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: team_set_input

    """filter the rows which have to be updated"""
    where: team_bool_exp!
  ): team_mutation_response
}

"""column ordering options"""
enum order_by {
  """in the ascending order, nulls last"""
  asc

  """in the ascending order, nulls first"""
  asc_nulls_first

  """in the ascending order, nulls last"""
  asc_nulls_last

  """in the descending order, nulls first"""
  desc

  """in the descending order, nulls first"""
  desc_nulls_first

  """in the descending order, nulls last"""
  desc_nulls_last
}

"""
columns and relationships of "player"
"""
type player {
  doubles_wl: String
  player: String
  player_id: Int
  singles_wl: String
  team: Int

  """An object relationship"""
  teamByTeam: team
  total_wl: String
  years_played: String
}

"""
aggregated selection of "player"
"""
type player_aggregate {
  aggregate: player_aggregate_fields
  nodes: [player!]!
}

"""
aggregate fields of "player"
"""
type player_aggregate_fields {
  avg: player_avg_fields
  count(columns: [player_select_column!], distinct: Boolean): Int
  max: player_max_fields
  min: player_min_fields
  stddev: player_stddev_fields
  stddev_pop: player_stddev_pop_fields
  stddev_samp: player_stddev_samp_fields
  sum: player_sum_fields
  var_pop: player_var_pop_fields
  var_samp: player_var_samp_fields
  variance: player_variance_fields
}

"""
order by aggregate values of table "player"
"""
input player_aggregate_order_by {
  avg: player_avg_order_by
  count: order_by
  max: player_max_order_by
  min: player_min_order_by
  stddev: player_stddev_order_by
  stddev_pop: player_stddev_pop_order_by
  stddev_samp: player_stddev_samp_order_by
  sum: player_sum_order_by
  var_pop: player_var_pop_order_by
  var_samp: player_var_samp_order_by
  variance: player_variance_order_by
}

"""
input type for inserting array relation for remote table "player"
"""
input player_arr_rel_insert_input {
  data: [player_insert_input!]!
  on_conflict: player_on_conflict
}

"""aggregate avg on columns"""
type player_avg_fields {
  player_id: Float
  team: Float
}

"""
order by avg() on columns of table "player"
"""
input player_avg_order_by {
  player_id: order_by
  team: order_by
}

"""
Boolean expression to filter rows from the table "player". All fields are combined with a logical 'AND'.
"""
input player_bool_exp {
  _and: [player_bool_exp]
  _not: player_bool_exp
  _or: [player_bool_exp]
  doubles_wl: String_comparison_exp
  player: String_comparison_exp
  player_id: Int_comparison_exp
  singles_wl: String_comparison_exp
  team: Int_comparison_exp
  teamByTeam: team_bool_exp
  total_wl: String_comparison_exp
  years_played: String_comparison_exp
}

"""
unique or primary key constraints on table "player"
"""
enum player_constraint {
  """unique or primary key constraint"""
  idx_19204_sqlite_autoindex_player_1
}

"""
input type for incrementing integer column in table "player"
"""
input player_inc_input {
  player_id: Int
  team: Int
}

"""
input type for inserting data into table "player"
"""
input player_insert_input {
  doubles_wl: String
  player: String
  player_id: Int
  singles_wl: String
  team: Int
  teamByTeam: team_obj_rel_insert_input
  total_wl: String
  years_played: String
}

"""aggregate max on columns"""
type player_max_fields {
  doubles_wl: String
  player: String
  player_id: Int
  singles_wl: String
  team: Int
  total_wl: String
  years_played: String
}

"""
order by max() on columns of table "player"
"""
input player_max_order_by {
  doubles_wl: order_by
  player: order_by
  player_id: order_by
  singles_wl: order_by
  team: order_by
  total_wl: order_by
  years_played: order_by
}

"""aggregate min on columns"""
type player_min_fields {
  doubles_wl: String
  player: String
  player_id: Int
  singles_wl: String
  team: Int
  total_wl: String
  years_played: String
}

"""
order by min() on columns of table "player"
"""
input player_min_order_by {
  doubles_wl: order_by
  player: order_by
  player_id: order_by
  singles_wl: order_by
  team: order_by
  total_wl: order_by
  years_played: order_by
}

"""
response of any mutation on the table "player"
"""
type player_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [player!]!
}

"""
input type for inserting object relation for remote table "player"
"""
input player_obj_rel_insert_input {
  data: player_insert_input!
  on_conflict: player_on_conflict
}

"""
on conflict condition type for table "player"
"""
input player_on_conflict {
  constraint: player_constraint!
  update_columns: [player_update_column!]!
  where: player_bool_exp
}

"""
ordering options when selecting data from "player"
"""
input player_order_by {
  doubles_wl: order_by
  player: order_by
  player_id: order_by
  singles_wl: order_by
  team: order_by
  teamByTeam: team_order_by
  total_wl: order_by
  years_played: order_by
}

"""
select columns of table "player"
"""
enum player_select_column {
  """column name"""
  doubles_wl

  """column name"""
  player

  """column name"""
  player_id

  """column name"""
  singles_wl

  """column name"""
  team

  """column name"""
  total_wl

  """column name"""
  years_played
}

"""
input type for updating data in table "player"
"""
input player_set_input {
  doubles_wl: String
  player: String
  player_id: Int
  singles_wl: String
  team: Int
  total_wl: String
  years_played: String
}

"""aggregate stddev on columns"""
type player_stddev_fields {
  player_id: Float
  team: Float
}

"""
order by stddev() on columns of table "player"
"""
input player_stddev_order_by {
  player_id: order_by
  team: order_by
}

"""aggregate stddev_pop on columns"""
type player_stddev_pop_fields {
  player_id: Float
  team: Float
}

"""
order by stddev_pop() on columns of table "player"
"""
input player_stddev_pop_order_by {
  player_id: order_by
  team: order_by
}

"""aggregate stddev_samp on columns"""
type player_stddev_samp_fields {
  player_id: Float
  team: Float
}

"""
order by stddev_samp() on columns of table "player"
"""
input player_stddev_samp_order_by {
  player_id: order_by
  team: order_by
}

"""aggregate sum on columns"""
type player_sum_fields {
  player_id: Int
  team: Int
}

"""
order by sum() on columns of table "player"
"""
input player_sum_order_by {
  player_id: order_by
  team: order_by
}

"""
update columns of table "player"
"""
enum player_update_column {
  """column name"""
  doubles_wl

  """column name"""
  player

  """column name"""
  player_id

  """column name"""
  singles_wl

  """column name"""
  team

  """column name"""
  total_wl

  """column name"""
  years_played
}

"""aggregate var_pop on columns"""
type player_var_pop_fields {
  player_id: Float
  team: Float
}

"""
order by var_pop() on columns of table "player"
"""
input player_var_pop_order_by {
  player_id: order_by
  team: order_by
}

"""aggregate var_samp on columns"""
type player_var_samp_fields {
  player_id: Float
  team: Float
}

"""
order by var_samp() on columns of table "player"
"""
input player_var_samp_order_by {
  player_id: order_by
  team: order_by
}

"""aggregate variance on columns"""
type player_variance_fields {
  player_id: Float
  team: Float
}

"""
order by variance() on columns of table "player"
"""
input player_variance_order_by {
  player_id: order_by
  team: order_by
}

"""query root"""
type query_root {
  """
  fetch data from the table: "country"
  """
  country(
    """distinct select on columns"""
    distinct_on: [country_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [country_order_by!]

    """filter the rows returned"""
    where: country_bool_exp
  ): [country!]!

  """
  fetch aggregated fields from the table: "country"
  """
  country_aggregate(
    """distinct select on columns"""
    distinct_on: [country_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [country_order_by!]

    """filter the rows returned"""
    where: country_bool_exp
  ): country_aggregate!

  """
  fetch data from the table: "match_season"
  """
  match_season(
    """distinct select on columns"""
    distinct_on: [match_season_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [match_season_order_by!]

    """filter the rows returned"""
    where: match_season_bool_exp
  ): [match_season!]!

  """
  fetch aggregated fields from the table: "match_season"
  """
  match_season_aggregate(
    """distinct select on columns"""
    distinct_on: [match_season_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [match_season_order_by!]

    """filter the rows returned"""
    where: match_season_bool_exp
  ): match_season_aggregate!

  """
  fetch data from the table: "player"
  """
  player(
    """distinct select on columns"""
    distinct_on: [player_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [player_order_by!]

    """filter the rows returned"""
    where: player_bool_exp
  ): [player!]!

  """
  fetch aggregated fields from the table: "player"
  """
  player_aggregate(
    """distinct select on columns"""
    distinct_on: [player_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [player_order_by!]

    """filter the rows returned"""
    where: player_bool_exp
  ): player_aggregate!

  """
  fetch data from the table: "team"
  """
  team(
    """distinct select on columns"""
    distinct_on: [team_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [team_order_by!]

    """filter the rows returned"""
    where: team_bool_exp
  ): [team!]!

  """
  fetch aggregated fields from the table: "team"
  """
  team_aggregate(
    """distinct select on columns"""
    distinct_on: [team_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [team_order_by!]

    """filter the rows returned"""
    where: team_bool_exp
  ): team_aggregate!
}

"""
expression to compare columns of type String. All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String
  _ilike: String
  _in: [String!]
  _is_null: Boolean
  _like: String
  _lt: String
  _lte: String
  _neq: String
  _nilike: String
  _nin: [String!]
  _nlike: String
  _nsimilar: String
  _similar: String
}

"""subscription root"""
type subscription_root {
  """
  fetch data from the table: "country"
  """
  country(
    """distinct select on columns"""
    distinct_on: [country_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [country_order_by!]

    """filter the rows returned"""
    where: country_bool_exp
  ): [country!]!

  """
  fetch aggregated fields from the table: "country"
  """
  country_aggregate(
    """distinct select on columns"""
    distinct_on: [country_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [country_order_by!]

    """filter the rows returned"""
    where: country_bool_exp
  ): country_aggregate!

  """
  fetch data from the table: "match_season"
  """
  match_season(
    """distinct select on columns"""
    distinct_on: [match_season_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [match_season_order_by!]

    """filter the rows returned"""
    where: match_season_bool_exp
  ): [match_season!]!

  """
  fetch aggregated fields from the table: "match_season"
  """
  match_season_aggregate(
    """distinct select on columns"""
    distinct_on: [match_season_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [match_season_order_by!]

    """filter the rows returned"""
    where: match_season_bool_exp
  ): match_season_aggregate!

  """
  fetch data from the table: "player"
  """
  player(
    """distinct select on columns"""
    distinct_on: [player_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [player_order_by!]

    """filter the rows returned"""
    where: player_bool_exp
  ): [player!]!

  """
  fetch aggregated fields from the table: "player"
  """
  player_aggregate(
    """distinct select on columns"""
    distinct_on: [player_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [player_order_by!]

    """filter the rows returned"""
    where: player_bool_exp
  ): player_aggregate!

  """
  fetch data from the table: "team"
  """
  team(
    """distinct select on columns"""
    distinct_on: [team_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [team_order_by!]

    """filter the rows returned"""
    where: team_bool_exp
  ): [team!]!

  """
  fetch aggregated fields from the table: "team"
  """
  team_aggregate(
    """distinct select on columns"""
    distinct_on: [team_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [team_order_by!]

    """filter the rows returned"""
    where: team_bool_exp
  ): team_aggregate!
}

"""
columns and relationships of "team"
"""
type team {
  """An array relationship"""
  match_seasons(
    """distinct select on columns"""
    distinct_on: [match_season_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [match_season_order_by!]

    """filter the rows returned"""
    where: match_season_bool_exp
  ): [match_season!]!

  """An aggregated array relationship"""
  match_seasons_aggregate(
    """distinct select on columns"""
    distinct_on: [match_season_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [match_season_order_by!]

    """filter the rows returned"""
    where: match_season_bool_exp
  ): match_season_aggregate!
  name: String

  """An array relationship"""
  players(
    """distinct select on columns"""
    distinct_on: [player_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [player_order_by!]

    """filter the rows returned"""
    where: player_bool_exp
  ): [player!]!

  """An aggregated array relationship"""
  players_aggregate(
    """distinct select on columns"""
    distinct_on: [player_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [player_order_by!]

    """filter the rows returned"""
    where: player_bool_exp
  ): player_aggregate!
  team_id: Int
}

"""
aggregated selection of "team"
"""
type team_aggregate {
  aggregate: team_aggregate_fields
  nodes: [team!]!
}

"""
aggregate fields of "team"
"""
type team_aggregate_fields {
  avg: team_avg_fields
  count(columns: [team_select_column!], distinct: Boolean): Int
  max: team_max_fields
  min: team_min_fields
  stddev: team_stddev_fields
  stddev_pop: team_stddev_pop_fields
  stddev_samp: team_stddev_samp_fields
  sum: team_sum_fields
  var_pop: team_var_pop_fields
  var_samp: team_var_samp_fields
  variance: team_variance_fields
}

"""
order by aggregate values of table "team"
"""
input team_aggregate_order_by {
  avg: team_avg_order_by
  count: order_by
  max: team_max_order_by
  min: team_min_order_by
  stddev: team_stddev_order_by
  stddev_pop: team_stddev_pop_order_by
  stddev_samp: team_stddev_samp_order_by
  sum: team_sum_order_by
  var_pop: team_var_pop_order_by
  var_samp: team_var_samp_order_by
  variance: team_variance_order_by
}

"""
input type for inserting array relation for remote table "team"
"""
input team_arr_rel_insert_input {
  data: [team_insert_input!]!
  on_conflict: team_on_conflict
}

"""aggregate avg on columns"""
type team_avg_fields {
  team_id: Float
}

"""
order by avg() on columns of table "team"
"""
input team_avg_order_by {
  team_id: order_by
}

"""
Boolean expression to filter rows from the table "team". All fields are combined with a logical 'AND'.
"""
input team_bool_exp {
  _and: [team_bool_exp]
  _not: team_bool_exp
  _or: [team_bool_exp]
  match_seasons: match_season_bool_exp
  name: String_comparison_exp
  players: player_bool_exp
  team_id: Int_comparison_exp
}

"""
unique or primary key constraints on table "team"
"""
enum team_constraint {
  """unique or primary key constraint"""
  idx_19192_sqlite_autoindex_team_1
}

"""
input type for incrementing integer column in table "team"
"""
input team_inc_input {
  team_id: Int
}

"""
input type for inserting data into table "team"
"""
input team_insert_input {
  match_seasons: match_season_arr_rel_insert_input
  name: String
  players: player_arr_rel_insert_input
  team_id: Int
}

"""aggregate max on columns"""
type team_max_fields {
  name: String
  team_id: Int
}

"""
order by max() on columns of table "team"
"""
input team_max_order_by {
  name: order_by
  team_id: order_by
}

"""aggregate min on columns"""
type team_min_fields {
  name: String
  team_id: Int
}

"""
order by min() on columns of table "team"
"""
input team_min_order_by {
  name: order_by
  team_id: order_by
}

"""
response of any mutation on the table "team"
"""
type team_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [team!]!
}

"""
input type for inserting object relation for remote table "team"
"""
input team_obj_rel_insert_input {
  data: team_insert_input!
  on_conflict: team_on_conflict
}

"""
on conflict condition type for table "team"
"""
input team_on_conflict {
  constraint: team_constraint!
  update_columns: [team_update_column!]!
  where: team_bool_exp
}

"""
ordering options when selecting data from "team"
"""
input team_order_by {
  match_seasons_aggregate: match_season_aggregate_order_by
  name: order_by
  players_aggregate: player_aggregate_order_by
  team_id: order_by
}

"""
select columns of table "team"
"""
enum team_select_column {
  """column name"""
  name

  """column name"""
  team_id
}

"""
input type for updating data in table "team"
"""
input team_set_input {
  name: String
  team_id: Int
}

"""aggregate stddev on columns"""
type team_stddev_fields {
  team_id: Float
}

"""
order by stddev() on columns of table "team"
"""
input team_stddev_order_by {
  team_id: order_by
}

"""aggregate stddev_pop on columns"""
type team_stddev_pop_fields {
  team_id: Float
}

"""
order by stddev_pop() on columns of table "team"
"""
input team_stddev_pop_order_by {
  team_id: order_by
}

"""aggregate stddev_samp on columns"""
type team_stddev_samp_fields {
  team_id: Float
}

"""
order by stddev_samp() on columns of table "team"
"""
input team_stddev_samp_order_by {
  team_id: order_by
}

"""aggregate sum on columns"""
type team_sum_fields {
  team_id: Int
}

"""
order by sum() on columns of table "team"
"""
input team_sum_order_by {
  team_id: order_by
}

"""
update columns of table "team"
"""
enum team_update_column {
  """column name"""
  name

  """column name"""
  team_id
}

"""aggregate var_pop on columns"""
type team_var_pop_fields {
  team_id: Float
}

"""
order by var_pop() on columns of table "team"
"""
input team_var_pop_order_by {
  team_id: order_by
}

"""aggregate var_samp on columns"""
type team_var_samp_fields {
  team_id: Float
}

"""
order by var_samp() on columns of table "team"
"""
input team_var_samp_order_by {
  team_id: order_by
}

"""aggregate variance on columns"""
type team_variance_fields {
  team_id: Float
}

"""
order by variance() on columns of table "team"
"""
input team_variance_order_by {
  team_id: order_by
}
