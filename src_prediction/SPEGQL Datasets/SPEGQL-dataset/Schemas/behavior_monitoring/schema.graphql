schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""
Direct the client to resolve this field locally, either from the cache or local resolvers.
"""
directive @client(
  """
  When true, the client will never use the cache for this value. See
  https://www.apollographql.com/docs/react/essentials/local-state/#forcing-resolvers-with-clientalways-true
  """
  always: Boolean
) on FIELD | FRAGMENT_DEFINITION | INLINE_FRAGMENT

"""
Export this locally resolved field as a variable to be used in the remainder of this query. See
https://www.apollographql.com/docs/react/essentials/local-state/#using-client-fields-as-variables
"""
directive @export(
  """The variable name to export this field as."""
  as: String!
) on FIELD

"""
Specify a custom store key for this result. See
https://www.apollographql.com/docs/react/advanced/caching/#the-connection-directive
"""
directive @connection(
  """Specify the store key."""
  key: String!

  """
  An array of query argument names to include in the generated custom store key.
  """
  filter: [String!]
) on FIELD

"""
columns and relationships of "addresses"
"""
type addresses {
  address_id: bigint!
  city: String
  country: String
  line_1: String
  line_2: String
  line_3: String
  other_address_details: String
  state_province_county: String

  """An array relationship"""
  student_addresses(
    """distinct select on columns"""
    distinct_on: [student_addresses_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [student_addresses_order_by!]

    """filter the rows returned"""
    where: student_addresses_bool_exp
  ): [student_addresses!]!

  """An aggregated array relationship"""
  student_addresses_aggregate(
    """distinct select on columns"""
    distinct_on: [student_addresses_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [student_addresses_order_by!]

    """filter the rows returned"""
    where: student_addresses_bool_exp
  ): student_addresses_aggregate!

  """An array relationship"""
  students(
    """distinct select on columns"""
    distinct_on: [students_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [students_order_by!]

    """filter the rows returned"""
    where: students_bool_exp
  ): [students!]!

  """An aggregated array relationship"""
  students_aggregate(
    """distinct select on columns"""
    distinct_on: [students_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [students_order_by!]

    """filter the rows returned"""
    where: students_bool_exp
  ): students_aggregate!

  """An array relationship"""
  teachers(
    """distinct select on columns"""
    distinct_on: [teachers_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [teachers_order_by!]

    """filter the rows returned"""
    where: teachers_bool_exp
  ): [teachers!]!

  """An aggregated array relationship"""
  teachers_aggregate(
    """distinct select on columns"""
    distinct_on: [teachers_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [teachers_order_by!]

    """filter the rows returned"""
    where: teachers_bool_exp
  ): teachers_aggregate!
  zip_postcode: String
}

"""
aggregated selection of "addresses"
"""
type addresses_aggregate {
  aggregate: addresses_aggregate_fields
  nodes: [addresses!]!
}

"""
aggregate fields of "addresses"
"""
type addresses_aggregate_fields {
  avg: addresses_avg_fields
  count(columns: [addresses_select_column!], distinct: Boolean): Int
  max: addresses_max_fields
  min: addresses_min_fields
  stddev: addresses_stddev_fields
  stddev_pop: addresses_stddev_pop_fields
  stddev_samp: addresses_stddev_samp_fields
  sum: addresses_sum_fields
  var_pop: addresses_var_pop_fields
  var_samp: addresses_var_samp_fields
  variance: addresses_variance_fields
}

"""
order by aggregate values of table "addresses"
"""
input addresses_aggregate_order_by {
  avg: addresses_avg_order_by
  count: order_by
  max: addresses_max_order_by
  min: addresses_min_order_by
  stddev: addresses_stddev_order_by
  stddev_pop: addresses_stddev_pop_order_by
  stddev_samp: addresses_stddev_samp_order_by
  sum: addresses_sum_order_by
  var_pop: addresses_var_pop_order_by
  var_samp: addresses_var_samp_order_by
  variance: addresses_variance_order_by
}

"""
input type for inserting array relation for remote table "addresses"
"""
input addresses_arr_rel_insert_input {
  data: [addresses_insert_input!]!
  on_conflict: addresses_on_conflict
}

"""aggregate avg on columns"""
type addresses_avg_fields {
  address_id: Float
}

"""
order by avg() on columns of table "addresses"
"""
input addresses_avg_order_by {
  address_id: order_by
}

"""
Boolean expression to filter rows from the table "addresses". All fields are combined with a logical 'AND'.
"""
input addresses_bool_exp {
  _and: [addresses_bool_exp]
  _not: addresses_bool_exp
  _or: [addresses_bool_exp]
  address_id: bigint_comparison_exp
  city: String_comparison_exp
  country: String_comparison_exp
  line_1: String_comparison_exp
  line_2: String_comparison_exp
  line_3: String_comparison_exp
  other_address_details: String_comparison_exp
  state_province_county: String_comparison_exp
  student_addresses: student_addresses_bool_exp
  students: students_bool_exp
  teachers: teachers_bool_exp
  zip_postcode: String_comparison_exp
}

"""
unique or primary key constraints on table "addresses"
"""
enum addresses_constraint {
  """unique or primary key constraint"""
  idx_25758_addresses_pkey
}

"""
input type for incrementing integer column in table "addresses"
"""
input addresses_inc_input {
  address_id: bigint
}

"""
input type for inserting data into table "addresses"
"""
input addresses_insert_input {
  address_id: bigint
  city: String
  country: String
  line_1: String
  line_2: String
  line_3: String
  other_address_details: String
  state_province_county: String
  student_addresses: student_addresses_arr_rel_insert_input
  students: students_arr_rel_insert_input
  teachers: teachers_arr_rel_insert_input
  zip_postcode: String
}

"""aggregate max on columns"""
type addresses_max_fields {
  address_id: bigint
  city: String
  country: String
  line_1: String
  line_2: String
  line_3: String
  other_address_details: String
  state_province_county: String
  zip_postcode: String
}

"""
order by max() on columns of table "addresses"
"""
input addresses_max_order_by {
  address_id: order_by
  city: order_by
  country: order_by
  line_1: order_by
  line_2: order_by
  line_3: order_by
  other_address_details: order_by
  state_province_county: order_by
  zip_postcode: order_by
}

"""aggregate min on columns"""
type addresses_min_fields {
  address_id: bigint
  city: String
  country: String
  line_1: String
  line_2: String
  line_3: String
  other_address_details: String
  state_province_county: String
  zip_postcode: String
}

"""
order by min() on columns of table "addresses"
"""
input addresses_min_order_by {
  address_id: order_by
  city: order_by
  country: order_by
  line_1: order_by
  line_2: order_by
  line_3: order_by
  other_address_details: order_by
  state_province_county: order_by
  zip_postcode: order_by
}

"""
response of any mutation on the table "addresses"
"""
type addresses_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [addresses!]!
}

"""
input type for inserting object relation for remote table "addresses"
"""
input addresses_obj_rel_insert_input {
  data: addresses_insert_input!
  on_conflict: addresses_on_conflict
}

"""
on conflict condition type for table "addresses"
"""
input addresses_on_conflict {
  constraint: addresses_constraint!
  update_columns: [addresses_update_column!]!
  where: addresses_bool_exp
}

"""
ordering options when selecting data from "addresses"
"""
input addresses_order_by {
  address_id: order_by
  city: order_by
  country: order_by
  line_1: order_by
  line_2: order_by
  line_3: order_by
  other_address_details: order_by
  state_province_county: order_by
  student_addresses_aggregate: student_addresses_aggregate_order_by
  students_aggregate: students_aggregate_order_by
  teachers_aggregate: teachers_aggregate_order_by
  zip_postcode: order_by
}

"""
primary key columns input for table: "addresses"
"""
input addresses_pk_columns_input {
  address_id: bigint!
}

"""
select columns of table "addresses"
"""
enum addresses_select_column {
  """column name"""
  address_id

  """column name"""
  city

  """column name"""
  country

  """column name"""
  line_1

  """column name"""
  line_2

  """column name"""
  line_3

  """column name"""
  other_address_details

  """column name"""
  state_province_county

  """column name"""
  zip_postcode
}

"""
input type for updating data in table "addresses"
"""
input addresses_set_input {
  address_id: bigint
  city: String
  country: String
  line_1: String
  line_2: String
  line_3: String
  other_address_details: String
  state_province_county: String
  zip_postcode: String
}

"""aggregate stddev on columns"""
type addresses_stddev_fields {
  address_id: Float
}

"""
order by stddev() on columns of table "addresses"
"""
input addresses_stddev_order_by {
  address_id: order_by
}

"""aggregate stddev_pop on columns"""
type addresses_stddev_pop_fields {
  address_id: Float
}

"""
order by stddev_pop() on columns of table "addresses"
"""
input addresses_stddev_pop_order_by {
  address_id: order_by
}

"""aggregate stddev_samp on columns"""
type addresses_stddev_samp_fields {
  address_id: Float
}

"""
order by stddev_samp() on columns of table "addresses"
"""
input addresses_stddev_samp_order_by {
  address_id: order_by
}

"""aggregate sum on columns"""
type addresses_sum_fields {
  address_id: bigint
}

"""
order by sum() on columns of table "addresses"
"""
input addresses_sum_order_by {
  address_id: order_by
}

"""
update columns of table "addresses"
"""
enum addresses_update_column {
  """column name"""
  address_id

  """column name"""
  city

  """column name"""
  country

  """column name"""
  line_1

  """column name"""
  line_2

  """column name"""
  line_3

  """column name"""
  other_address_details

  """column name"""
  state_province_county

  """column name"""
  zip_postcode
}

"""aggregate var_pop on columns"""
type addresses_var_pop_fields {
  address_id: Float
}

"""
order by var_pop() on columns of table "addresses"
"""
input addresses_var_pop_order_by {
  address_id: order_by
}

"""aggregate var_samp on columns"""
type addresses_var_samp_fields {
  address_id: Float
}

"""
order by var_samp() on columns of table "addresses"
"""
input addresses_var_samp_order_by {
  address_id: order_by
}

"""aggregate variance on columns"""
type addresses_variance_fields {
  address_id: Float
}

"""
order by variance() on columns of table "addresses"
"""
input addresses_variance_order_by {
  address_id: order_by
}

"""
columns and relationships of "assessment_notes"
"""
type assessment_notes {
  date_of_notes: timestamptz
  notes_id: bigint
  other_details: String

  """An object relationship"""
  student: students
  student_id: bigint

  """An object relationship"""
  teacher: teachers
  teacher_id: bigint
  text_of_notes: String
}

"""
aggregated selection of "assessment_notes"
"""
type assessment_notes_aggregate {
  aggregate: assessment_notes_aggregate_fields
  nodes: [assessment_notes!]!
}

"""
aggregate fields of "assessment_notes"
"""
type assessment_notes_aggregate_fields {
  avg: assessment_notes_avg_fields
  count(columns: [assessment_notes_select_column!], distinct: Boolean): Int
  max: assessment_notes_max_fields
  min: assessment_notes_min_fields
  stddev: assessment_notes_stddev_fields
  stddev_pop: assessment_notes_stddev_pop_fields
  stddev_samp: assessment_notes_stddev_samp_fields
  sum: assessment_notes_sum_fields
  var_pop: assessment_notes_var_pop_fields
  var_samp: assessment_notes_var_samp_fields
  variance: assessment_notes_variance_fields
}

"""
order by aggregate values of table "assessment_notes"
"""
input assessment_notes_aggregate_order_by {
  avg: assessment_notes_avg_order_by
  count: order_by
  max: assessment_notes_max_order_by
  min: assessment_notes_min_order_by
  stddev: assessment_notes_stddev_order_by
  stddev_pop: assessment_notes_stddev_pop_order_by
  stddev_samp: assessment_notes_stddev_samp_order_by
  sum: assessment_notes_sum_order_by
  var_pop: assessment_notes_var_pop_order_by
  var_samp: assessment_notes_var_samp_order_by
  variance: assessment_notes_variance_order_by
}

"""
input type for inserting array relation for remote table "assessment_notes"
"""
input assessment_notes_arr_rel_insert_input {
  data: [assessment_notes_insert_input!]!
}

"""aggregate avg on columns"""
type assessment_notes_avg_fields {
  notes_id: Float
  student_id: Float
  teacher_id: Float
}

"""
order by avg() on columns of table "assessment_notes"
"""
input assessment_notes_avg_order_by {
  notes_id: order_by
  student_id: order_by
  teacher_id: order_by
}

"""
Boolean expression to filter rows from the table "assessment_notes". All fields are combined with a logical 'AND'.
"""
input assessment_notes_bool_exp {
  _and: [assessment_notes_bool_exp]
  _not: assessment_notes_bool_exp
  _or: [assessment_notes_bool_exp]
  date_of_notes: timestamptz_comparison_exp
  notes_id: bigint_comparison_exp
  other_details: String_comparison_exp
  student: students_bool_exp
  student_id: bigint_comparison_exp
  teacher: teachers_bool_exp
  teacher_id: bigint_comparison_exp
  text_of_notes: String_comparison_exp
}

"""
input type for incrementing integer column in table "assessment_notes"
"""
input assessment_notes_inc_input {
  notes_id: bigint
  student_id: bigint
  teacher_id: bigint
}

"""
input type for inserting data into table "assessment_notes"
"""
input assessment_notes_insert_input {
  date_of_notes: timestamptz
  notes_id: bigint
  other_details: String
  student: students_obj_rel_insert_input
  student_id: bigint
  teacher: teachers_obj_rel_insert_input
  teacher_id: bigint
  text_of_notes: String
}

"""aggregate max on columns"""
type assessment_notes_max_fields {
  date_of_notes: timestamptz
  notes_id: bigint
  other_details: String
  student_id: bigint
  teacher_id: bigint
  text_of_notes: String
}

"""
order by max() on columns of table "assessment_notes"
"""
input assessment_notes_max_order_by {
  date_of_notes: order_by
  notes_id: order_by
  other_details: order_by
  student_id: order_by
  teacher_id: order_by
  text_of_notes: order_by
}

"""aggregate min on columns"""
type assessment_notes_min_fields {
  date_of_notes: timestamptz
  notes_id: bigint
  other_details: String
  student_id: bigint
  teacher_id: bigint
  text_of_notes: String
}

"""
order by min() on columns of table "assessment_notes"
"""
input assessment_notes_min_order_by {
  date_of_notes: order_by
  notes_id: order_by
  other_details: order_by
  student_id: order_by
  teacher_id: order_by
  text_of_notes: order_by
}

"""
response of any mutation on the table "assessment_notes"
"""
type assessment_notes_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [assessment_notes!]!
}

"""
input type for inserting object relation for remote table "assessment_notes"
"""
input assessment_notes_obj_rel_insert_input {
  data: assessment_notes_insert_input!
}

"""
ordering options when selecting data from "assessment_notes"
"""
input assessment_notes_order_by {
  date_of_notes: order_by
  notes_id: order_by
  other_details: order_by
  student: students_order_by
  student_id: order_by
  teacher: teachers_order_by
  teacher_id: order_by
  text_of_notes: order_by
}

"""
select columns of table "assessment_notes"
"""
enum assessment_notes_select_column {
  """column name"""
  date_of_notes

  """column name"""
  notes_id

  """column name"""
  other_details

  """column name"""
  student_id

  """column name"""
  teacher_id

  """column name"""
  text_of_notes
}

"""
input type for updating data in table "assessment_notes"
"""
input assessment_notes_set_input {
  date_of_notes: timestamptz
  notes_id: bigint
  other_details: String
  student_id: bigint
  teacher_id: bigint
  text_of_notes: String
}

"""aggregate stddev on columns"""
type assessment_notes_stddev_fields {
  notes_id: Float
  student_id: Float
  teacher_id: Float
}

"""
order by stddev() on columns of table "assessment_notes"
"""
input assessment_notes_stddev_order_by {
  notes_id: order_by
  student_id: order_by
  teacher_id: order_by
}

"""aggregate stddev_pop on columns"""
type assessment_notes_stddev_pop_fields {
  notes_id: Float
  student_id: Float
  teacher_id: Float
}

"""
order by stddev_pop() on columns of table "assessment_notes"
"""
input assessment_notes_stddev_pop_order_by {
  notes_id: order_by
  student_id: order_by
  teacher_id: order_by
}

"""aggregate stddev_samp on columns"""
type assessment_notes_stddev_samp_fields {
  notes_id: Float
  student_id: Float
  teacher_id: Float
}

"""
order by stddev_samp() on columns of table "assessment_notes"
"""
input assessment_notes_stddev_samp_order_by {
  notes_id: order_by
  student_id: order_by
  teacher_id: order_by
}

"""aggregate sum on columns"""
type assessment_notes_sum_fields {
  notes_id: bigint
  student_id: bigint
  teacher_id: bigint
}

"""
order by sum() on columns of table "assessment_notes"
"""
input assessment_notes_sum_order_by {
  notes_id: order_by
  student_id: order_by
  teacher_id: order_by
}

"""aggregate var_pop on columns"""
type assessment_notes_var_pop_fields {
  notes_id: Float
  student_id: Float
  teacher_id: Float
}

"""
order by var_pop() on columns of table "assessment_notes"
"""
input assessment_notes_var_pop_order_by {
  notes_id: order_by
  student_id: order_by
  teacher_id: order_by
}

"""aggregate var_samp on columns"""
type assessment_notes_var_samp_fields {
  notes_id: Float
  student_id: Float
  teacher_id: Float
}

"""
order by var_samp() on columns of table "assessment_notes"
"""
input assessment_notes_var_samp_order_by {
  notes_id: order_by
  student_id: order_by
  teacher_id: order_by
}

"""aggregate variance on columns"""
type assessment_notes_variance_fields {
  notes_id: Float
  student_id: Float
  teacher_id: Float
}

"""
order by variance() on columns of table "assessment_notes"
"""
input assessment_notes_variance_order_by {
  notes_id: order_by
  student_id: order_by
  teacher_id: order_by
}

"""
columns and relationships of "behavior_incident"
"""
type behavior_incident {
  date_incident_end: timestamptz
  date_incident_start: timestamptz
  incident_id: bigint!
  incident_summary: String
  incident_type_code: String
  other_details: String
  recommendations: String

  """An object relationship"""
  ref_incident_type: ref_incident_type

  """An object relationship"""
  student: students
  student_id: bigint

  """An array relationship"""
  students_in_detentions(
    """distinct select on columns"""
    distinct_on: [students_in_detention_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [students_in_detention_order_by!]

    """filter the rows returned"""
    where: students_in_detention_bool_exp
  ): [students_in_detention!]!

  """An aggregated array relationship"""
  students_in_detentions_aggregate(
    """distinct select on columns"""
    distinct_on: [students_in_detention_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [students_in_detention_order_by!]

    """filter the rows returned"""
    where: students_in_detention_bool_exp
  ): students_in_detention_aggregate!
}

"""
aggregated selection of "behavior_incident"
"""
type behavior_incident_aggregate {
  aggregate: behavior_incident_aggregate_fields
  nodes: [behavior_incident!]!
}

"""
aggregate fields of "behavior_incident"
"""
type behavior_incident_aggregate_fields {
  avg: behavior_incident_avg_fields
  count(columns: [behavior_incident_select_column!], distinct: Boolean): Int
  max: behavior_incident_max_fields
  min: behavior_incident_min_fields
  stddev: behavior_incident_stddev_fields
  stddev_pop: behavior_incident_stddev_pop_fields
  stddev_samp: behavior_incident_stddev_samp_fields
  sum: behavior_incident_sum_fields
  var_pop: behavior_incident_var_pop_fields
  var_samp: behavior_incident_var_samp_fields
  variance: behavior_incident_variance_fields
}

"""
order by aggregate values of table "behavior_incident"
"""
input behavior_incident_aggregate_order_by {
  avg: behavior_incident_avg_order_by
  count: order_by
  max: behavior_incident_max_order_by
  min: behavior_incident_min_order_by
  stddev: behavior_incident_stddev_order_by
  stddev_pop: behavior_incident_stddev_pop_order_by
  stddev_samp: behavior_incident_stddev_samp_order_by
  sum: behavior_incident_sum_order_by
  var_pop: behavior_incident_var_pop_order_by
  var_samp: behavior_incident_var_samp_order_by
  variance: behavior_incident_variance_order_by
}

"""
input type for inserting array relation for remote table "behavior_incident"
"""
input behavior_incident_arr_rel_insert_input {
  data: [behavior_incident_insert_input!]!
  on_conflict: behavior_incident_on_conflict
}

"""aggregate avg on columns"""
type behavior_incident_avg_fields {
  incident_id: Float
  student_id: Float
}

"""
order by avg() on columns of table "behavior_incident"
"""
input behavior_incident_avg_order_by {
  incident_id: order_by
  student_id: order_by
}

"""
Boolean expression to filter rows from the table "behavior_incident". All fields are combined with a logical 'AND'.
"""
input behavior_incident_bool_exp {
  _and: [behavior_incident_bool_exp]
  _not: behavior_incident_bool_exp
  _or: [behavior_incident_bool_exp]
  date_incident_end: timestamptz_comparison_exp
  date_incident_start: timestamptz_comparison_exp
  incident_id: bigint_comparison_exp
  incident_summary: String_comparison_exp
  incident_type_code: String_comparison_exp
  other_details: String_comparison_exp
  recommendations: String_comparison_exp
  ref_incident_type: ref_incident_type_bool_exp
  student: students_bool_exp
  student_id: bigint_comparison_exp
  students_in_detentions: students_in_detention_bool_exp
}

"""
unique or primary key constraints on table "behavior_incident"
"""
enum behavior_incident_constraint {
  """unique or primary key constraint"""
  idx_25782_behavior_incident_pkey
}

"""
input type for incrementing integer column in table "behavior_incident"
"""
input behavior_incident_inc_input {
  incident_id: bigint
  student_id: bigint
}

"""
input type for inserting data into table "behavior_incident"
"""
input behavior_incident_insert_input {
  date_incident_end: timestamptz
  date_incident_start: timestamptz
  incident_id: bigint
  incident_summary: String
  incident_type_code: String
  other_details: String
  recommendations: String
  ref_incident_type: ref_incident_type_obj_rel_insert_input
  student: students_obj_rel_insert_input
  student_id: bigint
  students_in_detentions: students_in_detention_arr_rel_insert_input
}

"""aggregate max on columns"""
type behavior_incident_max_fields {
  date_incident_end: timestamptz
  date_incident_start: timestamptz
  incident_id: bigint
  incident_summary: String
  incident_type_code: String
  other_details: String
  recommendations: String
  student_id: bigint
}

"""
order by max() on columns of table "behavior_incident"
"""
input behavior_incident_max_order_by {
  date_incident_end: order_by
  date_incident_start: order_by
  incident_id: order_by
  incident_summary: order_by
  incident_type_code: order_by
  other_details: order_by
  recommendations: order_by
  student_id: order_by
}

"""aggregate min on columns"""
type behavior_incident_min_fields {
  date_incident_end: timestamptz
  date_incident_start: timestamptz
  incident_id: bigint
  incident_summary: String
  incident_type_code: String
  other_details: String
  recommendations: String
  student_id: bigint
}

"""
order by min() on columns of table "behavior_incident"
"""
input behavior_incident_min_order_by {
  date_incident_end: order_by
  date_incident_start: order_by
  incident_id: order_by
  incident_summary: order_by
  incident_type_code: order_by
  other_details: order_by
  recommendations: order_by
  student_id: order_by
}

"""
response of any mutation on the table "behavior_incident"
"""
type behavior_incident_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [behavior_incident!]!
}

"""
input type for inserting object relation for remote table "behavior_incident"
"""
input behavior_incident_obj_rel_insert_input {
  data: behavior_incident_insert_input!
  on_conflict: behavior_incident_on_conflict
}

"""
on conflict condition type for table "behavior_incident"
"""
input behavior_incident_on_conflict {
  constraint: behavior_incident_constraint!
  update_columns: [behavior_incident_update_column!]!
  where: behavior_incident_bool_exp
}

"""
ordering options when selecting data from "behavior_incident"
"""
input behavior_incident_order_by {
  date_incident_end: order_by
  date_incident_start: order_by
  incident_id: order_by
  incident_summary: order_by
  incident_type_code: order_by
  other_details: order_by
  recommendations: order_by
  ref_incident_type: ref_incident_type_order_by
  student: students_order_by
  student_id: order_by
  students_in_detentions_aggregate: students_in_detention_aggregate_order_by
}

"""
primary key columns input for table: "behavior_incident"
"""
input behavior_incident_pk_columns_input {
  incident_id: bigint!
}

"""
select columns of table "behavior_incident"
"""
enum behavior_incident_select_column {
  """column name"""
  date_incident_end

  """column name"""
  date_incident_start

  """column name"""
  incident_id

  """column name"""
  incident_summary

  """column name"""
  incident_type_code

  """column name"""
  other_details

  """column name"""
  recommendations

  """column name"""
  student_id
}

"""
input type for updating data in table "behavior_incident"
"""
input behavior_incident_set_input {
  date_incident_end: timestamptz
  date_incident_start: timestamptz
  incident_id: bigint
  incident_summary: String
  incident_type_code: String
  other_details: String
  recommendations: String
  student_id: bigint
}

"""aggregate stddev on columns"""
type behavior_incident_stddev_fields {
  incident_id: Float
  student_id: Float
}

"""
order by stddev() on columns of table "behavior_incident"
"""
input behavior_incident_stddev_order_by {
  incident_id: order_by
  student_id: order_by
}

"""aggregate stddev_pop on columns"""
type behavior_incident_stddev_pop_fields {
  incident_id: Float
  student_id: Float
}

"""
order by stddev_pop() on columns of table "behavior_incident"
"""
input behavior_incident_stddev_pop_order_by {
  incident_id: order_by
  student_id: order_by
}

"""aggregate stddev_samp on columns"""
type behavior_incident_stddev_samp_fields {
  incident_id: Float
  student_id: Float
}

"""
order by stddev_samp() on columns of table "behavior_incident"
"""
input behavior_incident_stddev_samp_order_by {
  incident_id: order_by
  student_id: order_by
}

"""aggregate sum on columns"""
type behavior_incident_sum_fields {
  incident_id: bigint
  student_id: bigint
}

"""
order by sum() on columns of table "behavior_incident"
"""
input behavior_incident_sum_order_by {
  incident_id: order_by
  student_id: order_by
}

"""
update columns of table "behavior_incident"
"""
enum behavior_incident_update_column {
  """column name"""
  date_incident_end

  """column name"""
  date_incident_start

  """column name"""
  incident_id

  """column name"""
  incident_summary

  """column name"""
  incident_type_code

  """column name"""
  other_details

  """column name"""
  recommendations

  """column name"""
  student_id
}

"""aggregate var_pop on columns"""
type behavior_incident_var_pop_fields {
  incident_id: Float
  student_id: Float
}

"""
order by var_pop() on columns of table "behavior_incident"
"""
input behavior_incident_var_pop_order_by {
  incident_id: order_by
  student_id: order_by
}

"""aggregate var_samp on columns"""
type behavior_incident_var_samp_fields {
  incident_id: Float
  student_id: Float
}

"""
order by var_samp() on columns of table "behavior_incident"
"""
input behavior_incident_var_samp_order_by {
  incident_id: order_by
  student_id: order_by
}

"""aggregate variance on columns"""
type behavior_incident_variance_fields {
  incident_id: Float
  student_id: Float
}

"""
order by variance() on columns of table "behavior_incident"
"""
input behavior_incident_variance_order_by {
  incident_id: order_by
  student_id: order_by
}

scalar bigint

"""
expression to compare columns of type bigint. All fields are combined with logical 'AND'.
"""
input bigint_comparison_exp {
  _eq: bigint
  _gt: bigint
  _gte: bigint
  _in: [bigint!]
  _is_null: Boolean
  _lt: bigint
  _lte: bigint
  _neq: bigint
  _nin: [bigint!]
}

"""
columns and relationships of "detention"
"""
type detention {
  datetime_detention_end: timestamptz
  datetime_detention_start: timestamptz
  detention_id: bigint!
  detention_summary: String
  detention_type_code: String
  other_details: String

  """An object relationship"""
  ref_detention_type: ref_detention_type

  """An array relationship"""
  students_in_detentions(
    """distinct select on columns"""
    distinct_on: [students_in_detention_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [students_in_detention_order_by!]

    """filter the rows returned"""
    where: students_in_detention_bool_exp
  ): [students_in_detention!]!

  """An aggregated array relationship"""
  students_in_detentions_aggregate(
    """distinct select on columns"""
    distinct_on: [students_in_detention_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [students_in_detention_order_by!]

    """filter the rows returned"""
    where: students_in_detention_bool_exp
  ): students_in_detention_aggregate!

  """An object relationship"""
  teacher: teachers
  teacher_id: bigint
}

"""
aggregated selection of "detention"
"""
type detention_aggregate {
  aggregate: detention_aggregate_fields
  nodes: [detention!]!
}

"""
aggregate fields of "detention"
"""
type detention_aggregate_fields {
  avg: detention_avg_fields
  count(columns: [detention_select_column!], distinct: Boolean): Int
  max: detention_max_fields
  min: detention_min_fields
  stddev: detention_stddev_fields
  stddev_pop: detention_stddev_pop_fields
  stddev_samp: detention_stddev_samp_fields
  sum: detention_sum_fields
  var_pop: detention_var_pop_fields
  var_samp: detention_var_samp_fields
  variance: detention_variance_fields
}

"""
order by aggregate values of table "detention"
"""
input detention_aggregate_order_by {
  avg: detention_avg_order_by
  count: order_by
  max: detention_max_order_by
  min: detention_min_order_by
  stddev: detention_stddev_order_by
  stddev_pop: detention_stddev_pop_order_by
  stddev_samp: detention_stddev_samp_order_by
  sum: detention_sum_order_by
  var_pop: detention_var_pop_order_by
  var_samp: detention_var_samp_order_by
  variance: detention_variance_order_by
}

"""
input type for inserting array relation for remote table "detention"
"""
input detention_arr_rel_insert_input {
  data: [detention_insert_input!]!
  on_conflict: detention_on_conflict
}

"""aggregate avg on columns"""
type detention_avg_fields {
  detention_id: Float
  teacher_id: Float
}

"""
order by avg() on columns of table "detention"
"""
input detention_avg_order_by {
  detention_id: order_by
  teacher_id: order_by
}

"""
Boolean expression to filter rows from the table "detention". All fields are combined with a logical 'AND'.
"""
input detention_bool_exp {
  _and: [detention_bool_exp]
  _not: detention_bool_exp
  _or: [detention_bool_exp]
  datetime_detention_end: timestamptz_comparison_exp
  datetime_detention_start: timestamptz_comparison_exp
  detention_id: bigint_comparison_exp
  detention_summary: String_comparison_exp
  detention_type_code: String_comparison_exp
  other_details: String_comparison_exp
  ref_detention_type: ref_detention_type_bool_exp
  students_in_detentions: students_in_detention_bool_exp
  teacher: teachers_bool_exp
  teacher_id: bigint_comparison_exp
}

"""
unique or primary key constraints on table "detention"
"""
enum detention_constraint {
  """unique or primary key constraint"""
  idx_25788_detention_pkey
}

"""
input type for incrementing integer column in table "detention"
"""
input detention_inc_input {
  detention_id: bigint
  teacher_id: bigint
}

"""
input type for inserting data into table "detention"
"""
input detention_insert_input {
  datetime_detention_end: timestamptz
  datetime_detention_start: timestamptz
  detention_id: bigint
  detention_summary: String
  detention_type_code: String
  other_details: String
  ref_detention_type: ref_detention_type_obj_rel_insert_input
  students_in_detentions: students_in_detention_arr_rel_insert_input
  teacher: teachers_obj_rel_insert_input
  teacher_id: bigint
}

"""aggregate max on columns"""
type detention_max_fields {
  datetime_detention_end: timestamptz
  datetime_detention_start: timestamptz
  detention_id: bigint
  detention_summary: String
  detention_type_code: String
  other_details: String
  teacher_id: bigint
}

"""
order by max() on columns of table "detention"
"""
input detention_max_order_by {
  datetime_detention_end: order_by
  datetime_detention_start: order_by
  detention_id: order_by
  detention_summary: order_by
  detention_type_code: order_by
  other_details: order_by
  teacher_id: order_by
}

"""aggregate min on columns"""
type detention_min_fields {
  datetime_detention_end: timestamptz
  datetime_detention_start: timestamptz
  detention_id: bigint
  detention_summary: String
  detention_type_code: String
  other_details: String
  teacher_id: bigint
}

"""
order by min() on columns of table "detention"
"""
input detention_min_order_by {
  datetime_detention_end: order_by
  datetime_detention_start: order_by
  detention_id: order_by
  detention_summary: order_by
  detention_type_code: order_by
  other_details: order_by
  teacher_id: order_by
}

"""
response of any mutation on the table "detention"
"""
type detention_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [detention!]!
}

"""
input type for inserting object relation for remote table "detention"
"""
input detention_obj_rel_insert_input {
  data: detention_insert_input!
  on_conflict: detention_on_conflict
}

"""
on conflict condition type for table "detention"
"""
input detention_on_conflict {
  constraint: detention_constraint!
  update_columns: [detention_update_column!]!
  where: detention_bool_exp
}

"""
ordering options when selecting data from "detention"
"""
input detention_order_by {
  datetime_detention_end: order_by
  datetime_detention_start: order_by
  detention_id: order_by
  detention_summary: order_by
  detention_type_code: order_by
  other_details: order_by
  ref_detention_type: ref_detention_type_order_by
  students_in_detentions_aggregate: students_in_detention_aggregate_order_by
  teacher: teachers_order_by
  teacher_id: order_by
}

"""
primary key columns input for table: "detention"
"""
input detention_pk_columns_input {
  detention_id: bigint!
}

"""
select columns of table "detention"
"""
enum detention_select_column {
  """column name"""
  datetime_detention_end

  """column name"""
  datetime_detention_start

  """column name"""
  detention_id

  """column name"""
  detention_summary

  """column name"""
  detention_type_code

  """column name"""
  other_details

  """column name"""
  teacher_id
}

"""
input type for updating data in table "detention"
"""
input detention_set_input {
  datetime_detention_end: timestamptz
  datetime_detention_start: timestamptz
  detention_id: bigint
  detention_summary: String
  detention_type_code: String
  other_details: String
  teacher_id: bigint
}

"""aggregate stddev on columns"""
type detention_stddev_fields {
  detention_id: Float
  teacher_id: Float
}

"""
order by stddev() on columns of table "detention"
"""
input detention_stddev_order_by {
  detention_id: order_by
  teacher_id: order_by
}

"""aggregate stddev_pop on columns"""
type detention_stddev_pop_fields {
  detention_id: Float
  teacher_id: Float
}

"""
order by stddev_pop() on columns of table "detention"
"""
input detention_stddev_pop_order_by {
  detention_id: order_by
  teacher_id: order_by
}

"""aggregate stddev_samp on columns"""
type detention_stddev_samp_fields {
  detention_id: Float
  teacher_id: Float
}

"""
order by stddev_samp() on columns of table "detention"
"""
input detention_stddev_samp_order_by {
  detention_id: order_by
  teacher_id: order_by
}

"""aggregate sum on columns"""
type detention_sum_fields {
  detention_id: bigint
  teacher_id: bigint
}

"""
order by sum() on columns of table "detention"
"""
input detention_sum_order_by {
  detention_id: order_by
  teacher_id: order_by
}

"""
update columns of table "detention"
"""
enum detention_update_column {
  """column name"""
  datetime_detention_end

  """column name"""
  datetime_detention_start

  """column name"""
  detention_id

  """column name"""
  detention_summary

  """column name"""
  detention_type_code

  """column name"""
  other_details

  """column name"""
  teacher_id
}

"""aggregate var_pop on columns"""
type detention_var_pop_fields {
  detention_id: Float
  teacher_id: Float
}

"""
order by var_pop() on columns of table "detention"
"""
input detention_var_pop_order_by {
  detention_id: order_by
  teacher_id: order_by
}

"""aggregate var_samp on columns"""
type detention_var_samp_fields {
  detention_id: Float
  teacher_id: Float
}

"""
order by var_samp() on columns of table "detention"
"""
input detention_var_samp_order_by {
  detention_id: order_by
  teacher_id: order_by
}

"""aggregate variance on columns"""
type detention_variance_fields {
  detention_id: Float
  teacher_id: Float
}

"""
order by variance() on columns of table "detention"
"""
input detention_variance_order_by {
  detention_id: order_by
  teacher_id: order_by
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "addresses"
  """
  delete_addresses(
    """filter the rows which have to be deleted"""
    where: addresses_bool_exp!
  ): addresses_mutation_response

  """
  delete single row from the table: "addresses"
  """
  delete_addresses_by_pk(address_id: bigint!): addresses

  """
  delete data from the table: "assessment_notes"
  """
  delete_assessment_notes(
    """filter the rows which have to be deleted"""
    where: assessment_notes_bool_exp!
  ): assessment_notes_mutation_response

  """
  delete data from the table: "behavior_incident"
  """
  delete_behavior_incident(
    """filter the rows which have to be deleted"""
    where: behavior_incident_bool_exp!
  ): behavior_incident_mutation_response

  """
  delete single row from the table: "behavior_incident"
  """
  delete_behavior_incident_by_pk(incident_id: bigint!): behavior_incident

  """
  delete data from the table: "detention"
  """
  delete_detention(
    """filter the rows which have to be deleted"""
    where: detention_bool_exp!
  ): detention_mutation_response

  """
  delete single row from the table: "detention"
  """
  delete_detention_by_pk(detention_id: bigint!): detention

  """
  delete data from the table: "ref_address_types"
  """
  delete_ref_address_types(
    """filter the rows which have to be deleted"""
    where: ref_address_types_bool_exp!
  ): ref_address_types_mutation_response

  """
  delete single row from the table: "ref_address_types"
  """
  delete_ref_address_types_by_pk(address_type_code: String!): ref_address_types

  """
  delete data from the table: "ref_detention_type"
  """
  delete_ref_detention_type(
    """filter the rows which have to be deleted"""
    where: ref_detention_type_bool_exp!
  ): ref_detention_type_mutation_response

  """
  delete single row from the table: "ref_detention_type"
  """
  delete_ref_detention_type_by_pk(detention_type_code: String!): ref_detention_type

  """
  delete data from the table: "ref_incident_type"
  """
  delete_ref_incident_type(
    """filter the rows which have to be deleted"""
    where: ref_incident_type_bool_exp!
  ): ref_incident_type_mutation_response

  """
  delete single row from the table: "ref_incident_type"
  """
  delete_ref_incident_type_by_pk(incident_type_code: String!): ref_incident_type

  """
  delete data from the table: "student_addresses"
  """
  delete_student_addresses(
    """filter the rows which have to be deleted"""
    where: student_addresses_bool_exp!
  ): student_addresses_mutation_response

  """
  delete data from the table: "students"
  """
  delete_students(
    """filter the rows which have to be deleted"""
    where: students_bool_exp!
  ): students_mutation_response

  """
  delete single row from the table: "students"
  """
  delete_students_by_pk(student_id: bigint!): students

  """
  delete data from the table: "students_in_detention"
  """
  delete_students_in_detention(
    """filter the rows which have to be deleted"""
    where: students_in_detention_bool_exp!
  ): students_in_detention_mutation_response

  """
  delete data from the table: "teachers"
  """
  delete_teachers(
    """filter the rows which have to be deleted"""
    where: teachers_bool_exp!
  ): teachers_mutation_response

  """
  delete single row from the table: "teachers"
  """
  delete_teachers_by_pk(teacher_id: bigint!): teachers

  """
  insert data into the table: "addresses"
  """
  insert_addresses(
    """the rows to be inserted"""
    objects: [addresses_insert_input!]!

    """on conflict condition"""
    on_conflict: addresses_on_conflict
  ): addresses_mutation_response

  """
  insert a single row into the table: "addresses"
  """
  insert_addresses_one(
    """the row to be inserted"""
    object: addresses_insert_input!

    """on conflict condition"""
    on_conflict: addresses_on_conflict
  ): addresses

  """
  insert data into the table: "assessment_notes"
  """
  insert_assessment_notes(
    """the rows to be inserted"""
    objects: [assessment_notes_insert_input!]!
  ): assessment_notes_mutation_response

  """
  insert a single row into the table: "assessment_notes"
  """
  insert_assessment_notes_one(
    """the row to be inserted"""
    object: assessment_notes_insert_input!
  ): assessment_notes

  """
  insert data into the table: "behavior_incident"
  """
  insert_behavior_incident(
    """the rows to be inserted"""
    objects: [behavior_incident_insert_input!]!

    """on conflict condition"""
    on_conflict: behavior_incident_on_conflict
  ): behavior_incident_mutation_response

  """
  insert a single row into the table: "behavior_incident"
  """
  insert_behavior_incident_one(
    """the row to be inserted"""
    object: behavior_incident_insert_input!

    """on conflict condition"""
    on_conflict: behavior_incident_on_conflict
  ): behavior_incident

  """
  insert data into the table: "detention"
  """
  insert_detention(
    """the rows to be inserted"""
    objects: [detention_insert_input!]!

    """on conflict condition"""
    on_conflict: detention_on_conflict
  ): detention_mutation_response

  """
  insert a single row into the table: "detention"
  """
  insert_detention_one(
    """the row to be inserted"""
    object: detention_insert_input!

    """on conflict condition"""
    on_conflict: detention_on_conflict
  ): detention

  """
  insert data into the table: "ref_address_types"
  """
  insert_ref_address_types(
    """the rows to be inserted"""
    objects: [ref_address_types_insert_input!]!

    """on conflict condition"""
    on_conflict: ref_address_types_on_conflict
  ): ref_address_types_mutation_response

  """
  insert a single row into the table: "ref_address_types"
  """
  insert_ref_address_types_one(
    """the row to be inserted"""
    object: ref_address_types_insert_input!

    """on conflict condition"""
    on_conflict: ref_address_types_on_conflict
  ): ref_address_types

  """
  insert data into the table: "ref_detention_type"
  """
  insert_ref_detention_type(
    """the rows to be inserted"""
    objects: [ref_detention_type_insert_input!]!

    """on conflict condition"""
    on_conflict: ref_detention_type_on_conflict
  ): ref_detention_type_mutation_response

  """
  insert a single row into the table: "ref_detention_type"
  """
  insert_ref_detention_type_one(
    """the row to be inserted"""
    object: ref_detention_type_insert_input!

    """on conflict condition"""
    on_conflict: ref_detention_type_on_conflict
  ): ref_detention_type

  """
  insert data into the table: "ref_incident_type"
  """
  insert_ref_incident_type(
    """the rows to be inserted"""
    objects: [ref_incident_type_insert_input!]!

    """on conflict condition"""
    on_conflict: ref_incident_type_on_conflict
  ): ref_incident_type_mutation_response

  """
  insert a single row into the table: "ref_incident_type"
  """
  insert_ref_incident_type_one(
    """the row to be inserted"""
    object: ref_incident_type_insert_input!

    """on conflict condition"""
    on_conflict: ref_incident_type_on_conflict
  ): ref_incident_type

  """
  insert data into the table: "student_addresses"
  """
  insert_student_addresses(
    """the rows to be inserted"""
    objects: [student_addresses_insert_input!]!
  ): student_addresses_mutation_response

  """
  insert a single row into the table: "student_addresses"
  """
  insert_student_addresses_one(
    """the row to be inserted"""
    object: student_addresses_insert_input!
  ): student_addresses

  """
  insert data into the table: "students"
  """
  insert_students(
    """the rows to be inserted"""
    objects: [students_insert_input!]!

    """on conflict condition"""
    on_conflict: students_on_conflict
  ): students_mutation_response

  """
  insert data into the table: "students_in_detention"
  """
  insert_students_in_detention(
    """the rows to be inserted"""
    objects: [students_in_detention_insert_input!]!
  ): students_in_detention_mutation_response

  """
  insert a single row into the table: "students_in_detention"
  """
  insert_students_in_detention_one(
    """the row to be inserted"""
    object: students_in_detention_insert_input!
  ): students_in_detention

  """
  insert a single row into the table: "students"
  """
  insert_students_one(
    """the row to be inserted"""
    object: students_insert_input!

    """on conflict condition"""
    on_conflict: students_on_conflict
  ): students

  """
  insert data into the table: "teachers"
  """
  insert_teachers(
    """the rows to be inserted"""
    objects: [teachers_insert_input!]!

    """on conflict condition"""
    on_conflict: teachers_on_conflict
  ): teachers_mutation_response

  """
  insert a single row into the table: "teachers"
  """
  insert_teachers_one(
    """the row to be inserted"""
    object: teachers_insert_input!

    """on conflict condition"""
    on_conflict: teachers_on_conflict
  ): teachers

  """
  update data of the table: "addresses"
  """
  update_addresses(
    """increments the integer columns with given value of the filtered values"""
    _inc: addresses_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: addresses_set_input

    """filter the rows which have to be updated"""
    where: addresses_bool_exp!
  ): addresses_mutation_response

  """
  update single row of the table: "addresses"
  """
  update_addresses_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: addresses_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: addresses_set_input
    pk_columns: addresses_pk_columns_input!
  ): addresses

  """
  update data of the table: "assessment_notes"
  """
  update_assessment_notes(
    """increments the integer columns with given value of the filtered values"""
    _inc: assessment_notes_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: assessment_notes_set_input

    """filter the rows which have to be updated"""
    where: assessment_notes_bool_exp!
  ): assessment_notes_mutation_response

  """
  update data of the table: "behavior_incident"
  """
  update_behavior_incident(
    """increments the integer columns with given value of the filtered values"""
    _inc: behavior_incident_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: behavior_incident_set_input

    """filter the rows which have to be updated"""
    where: behavior_incident_bool_exp!
  ): behavior_incident_mutation_response

  """
  update single row of the table: "behavior_incident"
  """
  update_behavior_incident_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: behavior_incident_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: behavior_incident_set_input
    pk_columns: behavior_incident_pk_columns_input!
  ): behavior_incident

  """
  update data of the table: "detention"
  """
  update_detention(
    """increments the integer columns with given value of the filtered values"""
    _inc: detention_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: detention_set_input

    """filter the rows which have to be updated"""
    where: detention_bool_exp!
  ): detention_mutation_response

  """
  update single row of the table: "detention"
  """
  update_detention_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: detention_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: detention_set_input
    pk_columns: detention_pk_columns_input!
  ): detention

  """
  update data of the table: "ref_address_types"
  """
  update_ref_address_types(
    """sets the columns of the filtered rows to the given values"""
    _set: ref_address_types_set_input

    """filter the rows which have to be updated"""
    where: ref_address_types_bool_exp!
  ): ref_address_types_mutation_response

  """
  update single row of the table: "ref_address_types"
  """
  update_ref_address_types_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: ref_address_types_set_input
    pk_columns: ref_address_types_pk_columns_input!
  ): ref_address_types

  """
  update data of the table: "ref_detention_type"
  """
  update_ref_detention_type(
    """sets the columns of the filtered rows to the given values"""
    _set: ref_detention_type_set_input

    """filter the rows which have to be updated"""
    where: ref_detention_type_bool_exp!
  ): ref_detention_type_mutation_response

  """
  update single row of the table: "ref_detention_type"
  """
  update_ref_detention_type_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: ref_detention_type_set_input
    pk_columns: ref_detention_type_pk_columns_input!
  ): ref_detention_type

  """
  update data of the table: "ref_incident_type"
  """
  update_ref_incident_type(
    """sets the columns of the filtered rows to the given values"""
    _set: ref_incident_type_set_input

    """filter the rows which have to be updated"""
    where: ref_incident_type_bool_exp!
  ): ref_incident_type_mutation_response

  """
  update single row of the table: "ref_incident_type"
  """
  update_ref_incident_type_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: ref_incident_type_set_input
    pk_columns: ref_incident_type_pk_columns_input!
  ): ref_incident_type

  """
  update data of the table: "student_addresses"
  """
  update_student_addresses(
    """increments the integer columns with given value of the filtered values"""
    _inc: student_addresses_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: student_addresses_set_input

    """filter the rows which have to be updated"""
    where: student_addresses_bool_exp!
  ): student_addresses_mutation_response

  """
  update data of the table: "students"
  """
  update_students(
    """increments the integer columns with given value of the filtered values"""
    _inc: students_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: students_set_input

    """filter the rows which have to be updated"""
    where: students_bool_exp!
  ): students_mutation_response

  """
  update single row of the table: "students"
  """
  update_students_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: students_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: students_set_input
    pk_columns: students_pk_columns_input!
  ): students

  """
  update data of the table: "students_in_detention"
  """
  update_students_in_detention(
    """increments the integer columns with given value of the filtered values"""
    _inc: students_in_detention_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: students_in_detention_set_input

    """filter the rows which have to be updated"""
    where: students_in_detention_bool_exp!
  ): students_in_detention_mutation_response

  """
  update data of the table: "teachers"
  """
  update_teachers(
    """increments the integer columns with given value of the filtered values"""
    _inc: teachers_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: teachers_set_input

    """filter the rows which have to be updated"""
    where: teachers_bool_exp!
  ): teachers_mutation_response

  """
  update single row of the table: "teachers"
  """
  update_teachers_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: teachers_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: teachers_set_input
    pk_columns: teachers_pk_columns_input!
  ): teachers
}

scalar numeric

"""
expression to compare columns of type numeric. All fields are combined with logical 'AND'.
"""
input numeric_comparison_exp {
  _eq: numeric
  _gt: numeric
  _gte: numeric
  _in: [numeric!]
  _is_null: Boolean
  _lt: numeric
  _lte: numeric
  _neq: numeric
  _nin: [numeric!]
}

"""column ordering options"""
enum order_by {
  """in the ascending order, nulls last"""
  asc

  """in the ascending order, nulls first"""
  asc_nulls_first

  """in the ascending order, nulls last"""
  asc_nulls_last

  """in the descending order, nulls first"""
  desc

  """in the descending order, nulls first"""
  desc_nulls_first

  """in the descending order, nulls last"""
  desc_nulls_last
}

"""query root"""
type query_root {
  """
  fetch data from the table: "addresses"
  """
  addresses(
    """distinct select on columns"""
    distinct_on: [addresses_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [addresses_order_by!]

    """filter the rows returned"""
    where: addresses_bool_exp
  ): [addresses!]!

  """
  fetch aggregated fields from the table: "addresses"
  """
  addresses_aggregate(
    """distinct select on columns"""
    distinct_on: [addresses_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [addresses_order_by!]

    """filter the rows returned"""
    where: addresses_bool_exp
  ): addresses_aggregate!

  """fetch data from the table: "addresses" using primary key columns"""
  addresses_by_pk(address_id: bigint!): addresses

  """
  fetch data from the table: "assessment_notes"
  """
  assessment_notes(
    """distinct select on columns"""
    distinct_on: [assessment_notes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [assessment_notes_order_by!]

    """filter the rows returned"""
    where: assessment_notes_bool_exp
  ): [assessment_notes!]!

  """
  fetch aggregated fields from the table: "assessment_notes"
  """
  assessment_notes_aggregate(
    """distinct select on columns"""
    distinct_on: [assessment_notes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [assessment_notes_order_by!]

    """filter the rows returned"""
    where: assessment_notes_bool_exp
  ): assessment_notes_aggregate!

  """
  fetch data from the table: "behavior_incident"
  """
  behavior_incident(
    """distinct select on columns"""
    distinct_on: [behavior_incident_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [behavior_incident_order_by!]

    """filter the rows returned"""
    where: behavior_incident_bool_exp
  ): [behavior_incident!]!

  """
  fetch aggregated fields from the table: "behavior_incident"
  """
  behavior_incident_aggregate(
    """distinct select on columns"""
    distinct_on: [behavior_incident_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [behavior_incident_order_by!]

    """filter the rows returned"""
    where: behavior_incident_bool_exp
  ): behavior_incident_aggregate!

  """
  fetch data from the table: "behavior_incident" using primary key columns
  """
  behavior_incident_by_pk(incident_id: bigint!): behavior_incident

  """
  fetch data from the table: "detention"
  """
  detention(
    """distinct select on columns"""
    distinct_on: [detention_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [detention_order_by!]

    """filter the rows returned"""
    where: detention_bool_exp
  ): [detention!]!

  """
  fetch aggregated fields from the table: "detention"
  """
  detention_aggregate(
    """distinct select on columns"""
    distinct_on: [detention_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [detention_order_by!]

    """filter the rows returned"""
    where: detention_bool_exp
  ): detention_aggregate!

  """fetch data from the table: "detention" using primary key columns"""
  detention_by_pk(detention_id: bigint!): detention

  """
  fetch data from the table: "ref_address_types"
  """
  ref_address_types(
    """distinct select on columns"""
    distinct_on: [ref_address_types_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [ref_address_types_order_by!]

    """filter the rows returned"""
    where: ref_address_types_bool_exp
  ): [ref_address_types!]!

  """
  fetch aggregated fields from the table: "ref_address_types"
  """
  ref_address_types_aggregate(
    """distinct select on columns"""
    distinct_on: [ref_address_types_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [ref_address_types_order_by!]

    """filter the rows returned"""
    where: ref_address_types_bool_exp
  ): ref_address_types_aggregate!

  """
  fetch data from the table: "ref_address_types" using primary key columns
  """
  ref_address_types_by_pk(address_type_code: String!): ref_address_types

  """
  fetch data from the table: "ref_detention_type"
  """
  ref_detention_type(
    """distinct select on columns"""
    distinct_on: [ref_detention_type_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [ref_detention_type_order_by!]

    """filter the rows returned"""
    where: ref_detention_type_bool_exp
  ): [ref_detention_type!]!

  """
  fetch aggregated fields from the table: "ref_detention_type"
  """
  ref_detention_type_aggregate(
    """distinct select on columns"""
    distinct_on: [ref_detention_type_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [ref_detention_type_order_by!]

    """filter the rows returned"""
    where: ref_detention_type_bool_exp
  ): ref_detention_type_aggregate!

  """
  fetch data from the table: "ref_detention_type" using primary key columns
  """
  ref_detention_type_by_pk(detention_type_code: String!): ref_detention_type

  """
  fetch data from the table: "ref_incident_type"
  """
  ref_incident_type(
    """distinct select on columns"""
    distinct_on: [ref_incident_type_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [ref_incident_type_order_by!]

    """filter the rows returned"""
    where: ref_incident_type_bool_exp
  ): [ref_incident_type!]!

  """
  fetch aggregated fields from the table: "ref_incident_type"
  """
  ref_incident_type_aggregate(
    """distinct select on columns"""
    distinct_on: [ref_incident_type_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [ref_incident_type_order_by!]

    """filter the rows returned"""
    where: ref_incident_type_bool_exp
  ): ref_incident_type_aggregate!

  """
  fetch data from the table: "ref_incident_type" using primary key columns
  """
  ref_incident_type_by_pk(incident_type_code: String!): ref_incident_type

  """
  fetch data from the table: "student_addresses"
  """
  student_addresses(
    """distinct select on columns"""
    distinct_on: [student_addresses_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [student_addresses_order_by!]

    """filter the rows returned"""
    where: student_addresses_bool_exp
  ): [student_addresses!]!

  """
  fetch aggregated fields from the table: "student_addresses"
  """
  student_addresses_aggregate(
    """distinct select on columns"""
    distinct_on: [student_addresses_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [student_addresses_order_by!]

    """filter the rows returned"""
    where: student_addresses_bool_exp
  ): student_addresses_aggregate!

  """
  fetch data from the table: "students"
  """
  students(
    """distinct select on columns"""
    distinct_on: [students_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [students_order_by!]

    """filter the rows returned"""
    where: students_bool_exp
  ): [students!]!

  """
  fetch aggregated fields from the table: "students"
  """
  students_aggregate(
    """distinct select on columns"""
    distinct_on: [students_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [students_order_by!]

    """filter the rows returned"""
    where: students_bool_exp
  ): students_aggregate!

  """fetch data from the table: "students" using primary key columns"""
  students_by_pk(student_id: bigint!): students

  """
  fetch data from the table: "students_in_detention"
  """
  students_in_detention(
    """distinct select on columns"""
    distinct_on: [students_in_detention_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [students_in_detention_order_by!]

    """filter the rows returned"""
    where: students_in_detention_bool_exp
  ): [students_in_detention!]!

  """
  fetch aggregated fields from the table: "students_in_detention"
  """
  students_in_detention_aggregate(
    """distinct select on columns"""
    distinct_on: [students_in_detention_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [students_in_detention_order_by!]

    """filter the rows returned"""
    where: students_in_detention_bool_exp
  ): students_in_detention_aggregate!

  """
  fetch data from the table: "teachers"
  """
  teachers(
    """distinct select on columns"""
    distinct_on: [teachers_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [teachers_order_by!]

    """filter the rows returned"""
    where: teachers_bool_exp
  ): [teachers!]!

  """
  fetch aggregated fields from the table: "teachers"
  """
  teachers_aggregate(
    """distinct select on columns"""
    distinct_on: [teachers_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [teachers_order_by!]

    """filter the rows returned"""
    where: teachers_bool_exp
  ): teachers_aggregate!

  """fetch data from the table: "teachers" using primary key columns"""
  teachers_by_pk(teacher_id: bigint!): teachers
}

"""
columns and relationships of "ref_address_types"
"""
type ref_address_types {
  address_type_code: String!
  address_type_description: String
}

"""
aggregated selection of "ref_address_types"
"""
type ref_address_types_aggregate {
  aggregate: ref_address_types_aggregate_fields
  nodes: [ref_address_types!]!
}

"""
aggregate fields of "ref_address_types"
"""
type ref_address_types_aggregate_fields {
  count(columns: [ref_address_types_select_column!], distinct: Boolean): Int
  max: ref_address_types_max_fields
  min: ref_address_types_min_fields
}

"""
order by aggregate values of table "ref_address_types"
"""
input ref_address_types_aggregate_order_by {
  count: order_by
  max: ref_address_types_max_order_by
  min: ref_address_types_min_order_by
}

"""
input type for inserting array relation for remote table "ref_address_types"
"""
input ref_address_types_arr_rel_insert_input {
  data: [ref_address_types_insert_input!]!
  on_conflict: ref_address_types_on_conflict
}

"""
Boolean expression to filter rows from the table "ref_address_types". All fields are combined with a logical 'AND'.
"""
input ref_address_types_bool_exp {
  _and: [ref_address_types_bool_exp]
  _not: ref_address_types_bool_exp
  _or: [ref_address_types_bool_exp]
  address_type_code: String_comparison_exp
  address_type_description: String_comparison_exp
}

"""
unique or primary key constraints on table "ref_address_types"
"""
enum ref_address_types_constraint {
  """unique or primary key constraint"""
  idx_25740_sqlite_autoindex_ref_address_types_1
}

"""
input type for inserting data into table "ref_address_types"
"""
input ref_address_types_insert_input {
  address_type_code: String
  address_type_description: String
}

"""aggregate max on columns"""
type ref_address_types_max_fields {
  address_type_code: String
  address_type_description: String
}

"""
order by max() on columns of table "ref_address_types"
"""
input ref_address_types_max_order_by {
  address_type_code: order_by
  address_type_description: order_by
}

"""aggregate min on columns"""
type ref_address_types_min_fields {
  address_type_code: String
  address_type_description: String
}

"""
order by min() on columns of table "ref_address_types"
"""
input ref_address_types_min_order_by {
  address_type_code: order_by
  address_type_description: order_by
}

"""
response of any mutation on the table "ref_address_types"
"""
type ref_address_types_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [ref_address_types!]!
}

"""
input type for inserting object relation for remote table "ref_address_types"
"""
input ref_address_types_obj_rel_insert_input {
  data: ref_address_types_insert_input!
  on_conflict: ref_address_types_on_conflict
}

"""
on conflict condition type for table "ref_address_types"
"""
input ref_address_types_on_conflict {
  constraint: ref_address_types_constraint!
  update_columns: [ref_address_types_update_column!]!
  where: ref_address_types_bool_exp
}

"""
ordering options when selecting data from "ref_address_types"
"""
input ref_address_types_order_by {
  address_type_code: order_by
  address_type_description: order_by
}

"""
primary key columns input for table: "ref_address_types"
"""
input ref_address_types_pk_columns_input {
  address_type_code: String!
}

"""
select columns of table "ref_address_types"
"""
enum ref_address_types_select_column {
  """column name"""
  address_type_code

  """column name"""
  address_type_description
}

"""
input type for updating data in table "ref_address_types"
"""
input ref_address_types_set_input {
  address_type_code: String
  address_type_description: String
}

"""
update columns of table "ref_address_types"
"""
enum ref_address_types_update_column {
  """column name"""
  address_type_code

  """column name"""
  address_type_description
}

"""
columns and relationships of "ref_detention_type"
"""
type ref_detention_type {
  detention_type_code: String!
  detention_type_description: String

  """An array relationship"""
  detentions(
    """distinct select on columns"""
    distinct_on: [detention_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [detention_order_by!]

    """filter the rows returned"""
    where: detention_bool_exp
  ): [detention!]!

  """An aggregated array relationship"""
  detentions_aggregate(
    """distinct select on columns"""
    distinct_on: [detention_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [detention_order_by!]

    """filter the rows returned"""
    where: detention_bool_exp
  ): detention_aggregate!
}

"""
aggregated selection of "ref_detention_type"
"""
type ref_detention_type_aggregate {
  aggregate: ref_detention_type_aggregate_fields
  nodes: [ref_detention_type!]!
}

"""
aggregate fields of "ref_detention_type"
"""
type ref_detention_type_aggregate_fields {
  count(columns: [ref_detention_type_select_column!], distinct: Boolean): Int
  max: ref_detention_type_max_fields
  min: ref_detention_type_min_fields
}

"""
order by aggregate values of table "ref_detention_type"
"""
input ref_detention_type_aggregate_order_by {
  count: order_by
  max: ref_detention_type_max_order_by
  min: ref_detention_type_min_order_by
}

"""
input type for inserting array relation for remote table "ref_detention_type"
"""
input ref_detention_type_arr_rel_insert_input {
  data: [ref_detention_type_insert_input!]!
  on_conflict: ref_detention_type_on_conflict
}

"""
Boolean expression to filter rows from the table "ref_detention_type". All fields are combined with a logical 'AND'.
"""
input ref_detention_type_bool_exp {
  _and: [ref_detention_type_bool_exp]
  _not: ref_detention_type_bool_exp
  _or: [ref_detention_type_bool_exp]
  detention_type_code: String_comparison_exp
  detention_type_description: String_comparison_exp
  detentions: detention_bool_exp
}

"""
unique or primary key constraints on table "ref_detention_type"
"""
enum ref_detention_type_constraint {
  """unique or primary key constraint"""
  idx_25746_sqlite_autoindex_ref_detention_type_1
}

"""
input type for inserting data into table "ref_detention_type"
"""
input ref_detention_type_insert_input {
  detention_type_code: String
  detention_type_description: String
  detentions: detention_arr_rel_insert_input
}

"""aggregate max on columns"""
type ref_detention_type_max_fields {
  detention_type_code: String
  detention_type_description: String
}

"""
order by max() on columns of table "ref_detention_type"
"""
input ref_detention_type_max_order_by {
  detention_type_code: order_by
  detention_type_description: order_by
}

"""aggregate min on columns"""
type ref_detention_type_min_fields {
  detention_type_code: String
  detention_type_description: String
}

"""
order by min() on columns of table "ref_detention_type"
"""
input ref_detention_type_min_order_by {
  detention_type_code: order_by
  detention_type_description: order_by
}

"""
response of any mutation on the table "ref_detention_type"
"""
type ref_detention_type_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [ref_detention_type!]!
}

"""
input type for inserting object relation for remote table "ref_detention_type"
"""
input ref_detention_type_obj_rel_insert_input {
  data: ref_detention_type_insert_input!
  on_conflict: ref_detention_type_on_conflict
}

"""
on conflict condition type for table "ref_detention_type"
"""
input ref_detention_type_on_conflict {
  constraint: ref_detention_type_constraint!
  update_columns: [ref_detention_type_update_column!]!
  where: ref_detention_type_bool_exp
}

"""
ordering options when selecting data from "ref_detention_type"
"""
input ref_detention_type_order_by {
  detention_type_code: order_by
  detention_type_description: order_by
  detentions_aggregate: detention_aggregate_order_by
}

"""
primary key columns input for table: "ref_detention_type"
"""
input ref_detention_type_pk_columns_input {
  detention_type_code: String!
}

"""
select columns of table "ref_detention_type"
"""
enum ref_detention_type_select_column {
  """column name"""
  detention_type_code

  """column name"""
  detention_type_description
}

"""
input type for updating data in table "ref_detention_type"
"""
input ref_detention_type_set_input {
  detention_type_code: String
  detention_type_description: String
}

"""
update columns of table "ref_detention_type"
"""
enum ref_detention_type_update_column {
  """column name"""
  detention_type_code

  """column name"""
  detention_type_description
}

"""
columns and relationships of "ref_incident_type"
"""
type ref_incident_type {
  """An array relationship"""
  behavior_incidents(
    """distinct select on columns"""
    distinct_on: [behavior_incident_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [behavior_incident_order_by!]

    """filter the rows returned"""
    where: behavior_incident_bool_exp
  ): [behavior_incident!]!

  """An aggregated array relationship"""
  behavior_incidents_aggregate(
    """distinct select on columns"""
    distinct_on: [behavior_incident_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [behavior_incident_order_by!]

    """filter the rows returned"""
    where: behavior_incident_bool_exp
  ): behavior_incident_aggregate!
  incident_type_code: String!
  incident_type_description: String
}

"""
aggregated selection of "ref_incident_type"
"""
type ref_incident_type_aggregate {
  aggregate: ref_incident_type_aggregate_fields
  nodes: [ref_incident_type!]!
}

"""
aggregate fields of "ref_incident_type"
"""
type ref_incident_type_aggregate_fields {
  count(columns: [ref_incident_type_select_column!], distinct: Boolean): Int
  max: ref_incident_type_max_fields
  min: ref_incident_type_min_fields
}

"""
order by aggregate values of table "ref_incident_type"
"""
input ref_incident_type_aggregate_order_by {
  count: order_by
  max: ref_incident_type_max_order_by
  min: ref_incident_type_min_order_by
}

"""
input type for inserting array relation for remote table "ref_incident_type"
"""
input ref_incident_type_arr_rel_insert_input {
  data: [ref_incident_type_insert_input!]!
  on_conflict: ref_incident_type_on_conflict
}

"""
Boolean expression to filter rows from the table "ref_incident_type". All fields are combined with a logical 'AND'.
"""
input ref_incident_type_bool_exp {
  _and: [ref_incident_type_bool_exp]
  _not: ref_incident_type_bool_exp
  _or: [ref_incident_type_bool_exp]
  behavior_incidents: behavior_incident_bool_exp
  incident_type_code: String_comparison_exp
  incident_type_description: String_comparison_exp
}

"""
unique or primary key constraints on table "ref_incident_type"
"""
enum ref_incident_type_constraint {
  """unique or primary key constraint"""
  idx_25752_sqlite_autoindex_ref_incident_type_1
}

"""
input type for inserting data into table "ref_incident_type"
"""
input ref_incident_type_insert_input {
  behavior_incidents: behavior_incident_arr_rel_insert_input
  incident_type_code: String
  incident_type_description: String
}

"""aggregate max on columns"""
type ref_incident_type_max_fields {
  incident_type_code: String
  incident_type_description: String
}

"""
order by max() on columns of table "ref_incident_type"
"""
input ref_incident_type_max_order_by {
  incident_type_code: order_by
  incident_type_description: order_by
}

"""aggregate min on columns"""
type ref_incident_type_min_fields {
  incident_type_code: String
  incident_type_description: String
}

"""
order by min() on columns of table "ref_incident_type"
"""
input ref_incident_type_min_order_by {
  incident_type_code: order_by
  incident_type_description: order_by
}

"""
response of any mutation on the table "ref_incident_type"
"""
type ref_incident_type_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [ref_incident_type!]!
}

"""
input type for inserting object relation for remote table "ref_incident_type"
"""
input ref_incident_type_obj_rel_insert_input {
  data: ref_incident_type_insert_input!
  on_conflict: ref_incident_type_on_conflict
}

"""
on conflict condition type for table "ref_incident_type"
"""
input ref_incident_type_on_conflict {
  constraint: ref_incident_type_constraint!
  update_columns: [ref_incident_type_update_column!]!
  where: ref_incident_type_bool_exp
}

"""
ordering options when selecting data from "ref_incident_type"
"""
input ref_incident_type_order_by {
  behavior_incidents_aggregate: behavior_incident_aggregate_order_by
  incident_type_code: order_by
  incident_type_description: order_by
}

"""
primary key columns input for table: "ref_incident_type"
"""
input ref_incident_type_pk_columns_input {
  incident_type_code: String!
}

"""
select columns of table "ref_incident_type"
"""
enum ref_incident_type_select_column {
  """column name"""
  incident_type_code

  """column name"""
  incident_type_description
}

"""
input type for updating data in table "ref_incident_type"
"""
input ref_incident_type_set_input {
  incident_type_code: String
  incident_type_description: String
}

"""
update columns of table "ref_incident_type"
"""
enum ref_incident_type_update_column {
  """column name"""
  incident_type_code

  """column name"""
  incident_type_description
}

"""
expression to compare columns of type String. All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String
  _ilike: String
  _in: [String!]
  _is_null: Boolean
  _like: String
  _lt: String
  _lte: String
  _neq: String
  _nilike: String
  _nin: [String!]
  _nlike: String
  _nsimilar: String
  _similar: String
}

"""
columns and relationships of "student_addresses"
"""
type student_addresses {
  """An object relationship"""
  address: addresses
  address_id: bigint
  date_address_from: timestamptz
  date_address_to: timestamptz
  monthly_rental: numeric
  other_details: String

  """An object relationship"""
  student: students
  student_id: bigint
}

"""
aggregated selection of "student_addresses"
"""
type student_addresses_aggregate {
  aggregate: student_addresses_aggregate_fields
  nodes: [student_addresses!]!
}

"""
aggregate fields of "student_addresses"
"""
type student_addresses_aggregate_fields {
  avg: student_addresses_avg_fields
  count(columns: [student_addresses_select_column!], distinct: Boolean): Int
  max: student_addresses_max_fields
  min: student_addresses_min_fields
  stddev: student_addresses_stddev_fields
  stddev_pop: student_addresses_stddev_pop_fields
  stddev_samp: student_addresses_stddev_samp_fields
  sum: student_addresses_sum_fields
  var_pop: student_addresses_var_pop_fields
  var_samp: student_addresses_var_samp_fields
  variance: student_addresses_variance_fields
}

"""
order by aggregate values of table "student_addresses"
"""
input student_addresses_aggregate_order_by {
  avg: student_addresses_avg_order_by
  count: order_by
  max: student_addresses_max_order_by
  min: student_addresses_min_order_by
  stddev: student_addresses_stddev_order_by
  stddev_pop: student_addresses_stddev_pop_order_by
  stddev_samp: student_addresses_stddev_samp_order_by
  sum: student_addresses_sum_order_by
  var_pop: student_addresses_var_pop_order_by
  var_samp: student_addresses_var_samp_order_by
  variance: student_addresses_variance_order_by
}

"""
input type for inserting array relation for remote table "student_addresses"
"""
input student_addresses_arr_rel_insert_input {
  data: [student_addresses_insert_input!]!
}

"""aggregate avg on columns"""
type student_addresses_avg_fields {
  address_id: Float
  monthly_rental: Float
  student_id: Float
}

"""
order by avg() on columns of table "student_addresses"
"""
input student_addresses_avg_order_by {
  address_id: order_by
  monthly_rental: order_by
  student_id: order_by
}

"""
Boolean expression to filter rows from the table "student_addresses". All fields are combined with a logical 'AND'.
"""
input student_addresses_bool_exp {
  _and: [student_addresses_bool_exp]
  _not: student_addresses_bool_exp
  _or: [student_addresses_bool_exp]
  address: addresses_bool_exp
  address_id: bigint_comparison_exp
  date_address_from: timestamptz_comparison_exp
  date_address_to: timestamptz_comparison_exp
  monthly_rental: numeric_comparison_exp
  other_details: String_comparison_exp
  student: students_bool_exp
  student_id: bigint_comparison_exp
}

"""
input type for incrementing integer column in table "student_addresses"
"""
input student_addresses_inc_input {
  address_id: bigint
  monthly_rental: numeric
  student_id: bigint
}

"""
input type for inserting data into table "student_addresses"
"""
input student_addresses_insert_input {
  address: addresses_obj_rel_insert_input
  address_id: bigint
  date_address_from: timestamptz
  date_address_to: timestamptz
  monthly_rental: numeric
  other_details: String
  student: students_obj_rel_insert_input
  student_id: bigint
}

"""aggregate max on columns"""
type student_addresses_max_fields {
  address_id: bigint
  date_address_from: timestamptz
  date_address_to: timestamptz
  monthly_rental: numeric
  other_details: String
  student_id: bigint
}

"""
order by max() on columns of table "student_addresses"
"""
input student_addresses_max_order_by {
  address_id: order_by
  date_address_from: order_by
  date_address_to: order_by
  monthly_rental: order_by
  other_details: order_by
  student_id: order_by
}

"""aggregate min on columns"""
type student_addresses_min_fields {
  address_id: bigint
  date_address_from: timestamptz
  date_address_to: timestamptz
  monthly_rental: numeric
  other_details: String
  student_id: bigint
}

"""
order by min() on columns of table "student_addresses"
"""
input student_addresses_min_order_by {
  address_id: order_by
  date_address_from: order_by
  date_address_to: order_by
  monthly_rental: order_by
  other_details: order_by
  student_id: order_by
}

"""
response of any mutation on the table "student_addresses"
"""
type student_addresses_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [student_addresses!]!
}

"""
input type for inserting object relation for remote table "student_addresses"
"""
input student_addresses_obj_rel_insert_input {
  data: student_addresses_insert_input!
}

"""
ordering options when selecting data from "student_addresses"
"""
input student_addresses_order_by {
  address: addresses_order_by
  address_id: order_by
  date_address_from: order_by
  date_address_to: order_by
  monthly_rental: order_by
  other_details: order_by
  student: students_order_by
  student_id: order_by
}

"""
select columns of table "student_addresses"
"""
enum student_addresses_select_column {
  """column name"""
  address_id

  """column name"""
  date_address_from

  """column name"""
  date_address_to

  """column name"""
  monthly_rental

  """column name"""
  other_details

  """column name"""
  student_id
}

"""
input type for updating data in table "student_addresses"
"""
input student_addresses_set_input {
  address_id: bigint
  date_address_from: timestamptz
  date_address_to: timestamptz
  monthly_rental: numeric
  other_details: String
  student_id: bigint
}

"""aggregate stddev on columns"""
type student_addresses_stddev_fields {
  address_id: Float
  monthly_rental: Float
  student_id: Float
}

"""
order by stddev() on columns of table "student_addresses"
"""
input student_addresses_stddev_order_by {
  address_id: order_by
  monthly_rental: order_by
  student_id: order_by
}

"""aggregate stddev_pop on columns"""
type student_addresses_stddev_pop_fields {
  address_id: Float
  monthly_rental: Float
  student_id: Float
}

"""
order by stddev_pop() on columns of table "student_addresses"
"""
input student_addresses_stddev_pop_order_by {
  address_id: order_by
  monthly_rental: order_by
  student_id: order_by
}

"""aggregate stddev_samp on columns"""
type student_addresses_stddev_samp_fields {
  address_id: Float
  monthly_rental: Float
  student_id: Float
}

"""
order by stddev_samp() on columns of table "student_addresses"
"""
input student_addresses_stddev_samp_order_by {
  address_id: order_by
  monthly_rental: order_by
  student_id: order_by
}

"""aggregate sum on columns"""
type student_addresses_sum_fields {
  address_id: bigint
  monthly_rental: numeric
  student_id: bigint
}

"""
order by sum() on columns of table "student_addresses"
"""
input student_addresses_sum_order_by {
  address_id: order_by
  monthly_rental: order_by
  student_id: order_by
}

"""aggregate var_pop on columns"""
type student_addresses_var_pop_fields {
  address_id: Float
  monthly_rental: Float
  student_id: Float
}

"""
order by var_pop() on columns of table "student_addresses"
"""
input student_addresses_var_pop_order_by {
  address_id: order_by
  monthly_rental: order_by
  student_id: order_by
}

"""aggregate var_samp on columns"""
type student_addresses_var_samp_fields {
  address_id: Float
  monthly_rental: Float
  student_id: Float
}

"""
order by var_samp() on columns of table "student_addresses"
"""
input student_addresses_var_samp_order_by {
  address_id: order_by
  monthly_rental: order_by
  student_id: order_by
}

"""aggregate variance on columns"""
type student_addresses_variance_fields {
  address_id: Float
  monthly_rental: Float
  student_id: Float
}

"""
order by variance() on columns of table "student_addresses"
"""
input student_addresses_variance_order_by {
  address_id: order_by
  monthly_rental: order_by
  student_id: order_by
}

"""
columns and relationships of "students"
"""
type students {
  """An object relationship"""
  address: addresses
  address_id: bigint

  """An array relationship"""
  assessment_notes(
    """distinct select on columns"""
    distinct_on: [assessment_notes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [assessment_notes_order_by!]

    """filter the rows returned"""
    where: assessment_notes_bool_exp
  ): [assessment_notes!]!

  """An aggregated array relationship"""
  assessment_notes_aggregate(
    """distinct select on columns"""
    distinct_on: [assessment_notes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [assessment_notes_order_by!]

    """filter the rows returned"""
    where: assessment_notes_bool_exp
  ): assessment_notes_aggregate!

  """An array relationship"""
  behavior_incidents(
    """distinct select on columns"""
    distinct_on: [behavior_incident_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [behavior_incident_order_by!]

    """filter the rows returned"""
    where: behavior_incident_bool_exp
  ): [behavior_incident!]!

  """An aggregated array relationship"""
  behavior_incidents_aggregate(
    """distinct select on columns"""
    distinct_on: [behavior_incident_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [behavior_incident_order_by!]

    """filter the rows returned"""
    where: behavior_incident_bool_exp
  ): behavior_incident_aggregate!
  cell_mobile_number: String
  date_first_rental: timestamptz
  date_left_university: timestamptz
  email_address: String
  first_name: String
  last_name: String
  middle_name: String
  other_student_details: String

  """An array relationship"""
  student_addresses(
    """distinct select on columns"""
    distinct_on: [student_addresses_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [student_addresses_order_by!]

    """filter the rows returned"""
    where: student_addresses_bool_exp
  ): [student_addresses!]!

  """An aggregated array relationship"""
  student_addresses_aggregate(
    """distinct select on columns"""
    distinct_on: [student_addresses_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [student_addresses_order_by!]

    """filter the rows returned"""
    where: student_addresses_bool_exp
  ): student_addresses_aggregate!
  student_id: bigint!

  """An array relationship"""
  students_in_detentions(
    """distinct select on columns"""
    distinct_on: [students_in_detention_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [students_in_detention_order_by!]

    """filter the rows returned"""
    where: students_in_detention_bool_exp
  ): [students_in_detention!]!

  """An aggregated array relationship"""
  students_in_detentions_aggregate(
    """distinct select on columns"""
    distinct_on: [students_in_detention_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [students_in_detention_order_by!]

    """filter the rows returned"""
    where: students_in_detention_bool_exp
  ): students_in_detention_aggregate!
}

"""
aggregated selection of "students"
"""
type students_aggregate {
  aggregate: students_aggregate_fields
  nodes: [students!]!
}

"""
aggregate fields of "students"
"""
type students_aggregate_fields {
  avg: students_avg_fields
  count(columns: [students_select_column!], distinct: Boolean): Int
  max: students_max_fields
  min: students_min_fields
  stddev: students_stddev_fields
  stddev_pop: students_stddev_pop_fields
  stddev_samp: students_stddev_samp_fields
  sum: students_sum_fields
  var_pop: students_var_pop_fields
  var_samp: students_var_samp_fields
  variance: students_variance_fields
}

"""
order by aggregate values of table "students"
"""
input students_aggregate_order_by {
  avg: students_avg_order_by
  count: order_by
  max: students_max_order_by
  min: students_min_order_by
  stddev: students_stddev_order_by
  stddev_pop: students_stddev_pop_order_by
  stddev_samp: students_stddev_samp_order_by
  sum: students_sum_order_by
  var_pop: students_var_pop_order_by
  var_samp: students_var_samp_order_by
  variance: students_variance_order_by
}

"""
input type for inserting array relation for remote table "students"
"""
input students_arr_rel_insert_input {
  data: [students_insert_input!]!
  on_conflict: students_on_conflict
}

"""aggregate avg on columns"""
type students_avg_fields {
  address_id: Float
  student_id: Float
}

"""
order by avg() on columns of table "students"
"""
input students_avg_order_by {
  address_id: order_by
  student_id: order_by
}

"""
Boolean expression to filter rows from the table "students". All fields are combined with a logical 'AND'.
"""
input students_bool_exp {
  _and: [students_bool_exp]
  _not: students_bool_exp
  _or: [students_bool_exp]
  address: addresses_bool_exp
  address_id: bigint_comparison_exp
  assessment_notes: assessment_notes_bool_exp
  behavior_incidents: behavior_incident_bool_exp
  cell_mobile_number: String_comparison_exp
  date_first_rental: timestamptz_comparison_exp
  date_left_university: timestamptz_comparison_exp
  email_address: String_comparison_exp
  first_name: String_comparison_exp
  last_name: String_comparison_exp
  middle_name: String_comparison_exp
  other_student_details: String_comparison_exp
  student_addresses: student_addresses_bool_exp
  student_id: bigint_comparison_exp
  students_in_detentions: students_in_detention_bool_exp
}

"""
unique or primary key constraints on table "students"
"""
enum students_constraint {
  """unique or primary key constraint"""
  idx_25764_students_pkey
}

"""
columns and relationships of "students_in_detention"
"""
type students_in_detention {
  """An object relationship"""
  behavior_incident: behavior_incident

  """An object relationship"""
  detention: detention
  detention_id: bigint
  incident_id: bigint

  """An object relationship"""
  student: students
  student_id: bigint
}

"""
aggregated selection of "students_in_detention"
"""
type students_in_detention_aggregate {
  aggregate: students_in_detention_aggregate_fields
  nodes: [students_in_detention!]!
}

"""
aggregate fields of "students_in_detention"
"""
type students_in_detention_aggregate_fields {
  avg: students_in_detention_avg_fields
  count(columns: [students_in_detention_select_column!], distinct: Boolean): Int
  max: students_in_detention_max_fields
  min: students_in_detention_min_fields
  stddev: students_in_detention_stddev_fields
  stddev_pop: students_in_detention_stddev_pop_fields
  stddev_samp: students_in_detention_stddev_samp_fields
  sum: students_in_detention_sum_fields
  var_pop: students_in_detention_var_pop_fields
  var_samp: students_in_detention_var_samp_fields
  variance: students_in_detention_variance_fields
}

"""
order by aggregate values of table "students_in_detention"
"""
input students_in_detention_aggregate_order_by {
  avg: students_in_detention_avg_order_by
  count: order_by
  max: students_in_detention_max_order_by
  min: students_in_detention_min_order_by
  stddev: students_in_detention_stddev_order_by
  stddev_pop: students_in_detention_stddev_pop_order_by
  stddev_samp: students_in_detention_stddev_samp_order_by
  sum: students_in_detention_sum_order_by
  var_pop: students_in_detention_var_pop_order_by
  var_samp: students_in_detention_var_samp_order_by
  variance: students_in_detention_variance_order_by
}

"""
input type for inserting array relation for remote table "students_in_detention"
"""
input students_in_detention_arr_rel_insert_input {
  data: [students_in_detention_insert_input!]!
}

"""aggregate avg on columns"""
type students_in_detention_avg_fields {
  detention_id: Float
  incident_id: Float
  student_id: Float
}

"""
order by avg() on columns of table "students_in_detention"
"""
input students_in_detention_avg_order_by {
  detention_id: order_by
  incident_id: order_by
  student_id: order_by
}

"""
Boolean expression to filter rows from the table "students_in_detention". All fields are combined with a logical 'AND'.
"""
input students_in_detention_bool_exp {
  _and: [students_in_detention_bool_exp]
  _not: students_in_detention_bool_exp
  _or: [students_in_detention_bool_exp]
  behavior_incident: behavior_incident_bool_exp
  detention: detention_bool_exp
  detention_id: bigint_comparison_exp
  incident_id: bigint_comparison_exp
  student: students_bool_exp
  student_id: bigint_comparison_exp
}

"""
input type for incrementing integer column in table "students_in_detention"
"""
input students_in_detention_inc_input {
  detention_id: bigint
  incident_id: bigint
  student_id: bigint
}

"""
input type for inserting data into table "students_in_detention"
"""
input students_in_detention_insert_input {
  behavior_incident: behavior_incident_obj_rel_insert_input
  detention: detention_obj_rel_insert_input
  detention_id: bigint
  incident_id: bigint
  student: students_obj_rel_insert_input
  student_id: bigint
}

"""aggregate max on columns"""
type students_in_detention_max_fields {
  detention_id: bigint
  incident_id: bigint
  student_id: bigint
}

"""
order by max() on columns of table "students_in_detention"
"""
input students_in_detention_max_order_by {
  detention_id: order_by
  incident_id: order_by
  student_id: order_by
}

"""aggregate min on columns"""
type students_in_detention_min_fields {
  detention_id: bigint
  incident_id: bigint
  student_id: bigint
}

"""
order by min() on columns of table "students_in_detention"
"""
input students_in_detention_min_order_by {
  detention_id: order_by
  incident_id: order_by
  student_id: order_by
}

"""
response of any mutation on the table "students_in_detention"
"""
type students_in_detention_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [students_in_detention!]!
}

"""
input type for inserting object relation for remote table "students_in_detention"
"""
input students_in_detention_obj_rel_insert_input {
  data: students_in_detention_insert_input!
}

"""
ordering options when selecting data from "students_in_detention"
"""
input students_in_detention_order_by {
  behavior_incident: behavior_incident_order_by
  detention: detention_order_by
  detention_id: order_by
  incident_id: order_by
  student: students_order_by
  student_id: order_by
}

"""
select columns of table "students_in_detention"
"""
enum students_in_detention_select_column {
  """column name"""
  detention_id

  """column name"""
  incident_id

  """column name"""
  student_id
}

"""
input type for updating data in table "students_in_detention"
"""
input students_in_detention_set_input {
  detention_id: bigint
  incident_id: bigint
  student_id: bigint
}

"""aggregate stddev on columns"""
type students_in_detention_stddev_fields {
  detention_id: Float
  incident_id: Float
  student_id: Float
}

"""
order by stddev() on columns of table "students_in_detention"
"""
input students_in_detention_stddev_order_by {
  detention_id: order_by
  incident_id: order_by
  student_id: order_by
}

"""aggregate stddev_pop on columns"""
type students_in_detention_stddev_pop_fields {
  detention_id: Float
  incident_id: Float
  student_id: Float
}

"""
order by stddev_pop() on columns of table "students_in_detention"
"""
input students_in_detention_stddev_pop_order_by {
  detention_id: order_by
  incident_id: order_by
  student_id: order_by
}

"""aggregate stddev_samp on columns"""
type students_in_detention_stddev_samp_fields {
  detention_id: Float
  incident_id: Float
  student_id: Float
}

"""
order by stddev_samp() on columns of table "students_in_detention"
"""
input students_in_detention_stddev_samp_order_by {
  detention_id: order_by
  incident_id: order_by
  student_id: order_by
}

"""aggregate sum on columns"""
type students_in_detention_sum_fields {
  detention_id: bigint
  incident_id: bigint
  student_id: bigint
}

"""
order by sum() on columns of table "students_in_detention"
"""
input students_in_detention_sum_order_by {
  detention_id: order_by
  incident_id: order_by
  student_id: order_by
}

"""aggregate var_pop on columns"""
type students_in_detention_var_pop_fields {
  detention_id: Float
  incident_id: Float
  student_id: Float
}

"""
order by var_pop() on columns of table "students_in_detention"
"""
input students_in_detention_var_pop_order_by {
  detention_id: order_by
  incident_id: order_by
  student_id: order_by
}

"""aggregate var_samp on columns"""
type students_in_detention_var_samp_fields {
  detention_id: Float
  incident_id: Float
  student_id: Float
}

"""
order by var_samp() on columns of table "students_in_detention"
"""
input students_in_detention_var_samp_order_by {
  detention_id: order_by
  incident_id: order_by
  student_id: order_by
}

"""aggregate variance on columns"""
type students_in_detention_variance_fields {
  detention_id: Float
  incident_id: Float
  student_id: Float
}

"""
order by variance() on columns of table "students_in_detention"
"""
input students_in_detention_variance_order_by {
  detention_id: order_by
  incident_id: order_by
  student_id: order_by
}

"""
input type for incrementing integer column in table "students"
"""
input students_inc_input {
  address_id: bigint
  student_id: bigint
}

"""
input type for inserting data into table "students"
"""
input students_insert_input {
  address: addresses_obj_rel_insert_input
  address_id: bigint
  assessment_notes: assessment_notes_arr_rel_insert_input
  behavior_incidents: behavior_incident_arr_rel_insert_input
  cell_mobile_number: String
  date_first_rental: timestamptz
  date_left_university: timestamptz
  email_address: String
  first_name: String
  last_name: String
  middle_name: String
  other_student_details: String
  student_addresses: student_addresses_arr_rel_insert_input
  student_id: bigint
  students_in_detentions: students_in_detention_arr_rel_insert_input
}

"""aggregate max on columns"""
type students_max_fields {
  address_id: bigint
  cell_mobile_number: String
  date_first_rental: timestamptz
  date_left_university: timestamptz
  email_address: String
  first_name: String
  last_name: String
  middle_name: String
  other_student_details: String
  student_id: bigint
}

"""
order by max() on columns of table "students"
"""
input students_max_order_by {
  address_id: order_by
  cell_mobile_number: order_by
  date_first_rental: order_by
  date_left_university: order_by
  email_address: order_by
  first_name: order_by
  last_name: order_by
  middle_name: order_by
  other_student_details: order_by
  student_id: order_by
}

"""aggregate min on columns"""
type students_min_fields {
  address_id: bigint
  cell_mobile_number: String
  date_first_rental: timestamptz
  date_left_university: timestamptz
  email_address: String
  first_name: String
  last_name: String
  middle_name: String
  other_student_details: String
  student_id: bigint
}

"""
order by min() on columns of table "students"
"""
input students_min_order_by {
  address_id: order_by
  cell_mobile_number: order_by
  date_first_rental: order_by
  date_left_university: order_by
  email_address: order_by
  first_name: order_by
  last_name: order_by
  middle_name: order_by
  other_student_details: order_by
  student_id: order_by
}

"""
response of any mutation on the table "students"
"""
type students_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [students!]!
}

"""
input type for inserting object relation for remote table "students"
"""
input students_obj_rel_insert_input {
  data: students_insert_input!
  on_conflict: students_on_conflict
}

"""
on conflict condition type for table "students"
"""
input students_on_conflict {
  constraint: students_constraint!
  update_columns: [students_update_column!]!
  where: students_bool_exp
}

"""
ordering options when selecting data from "students"
"""
input students_order_by {
  address: addresses_order_by
  address_id: order_by
  assessment_notes_aggregate: assessment_notes_aggregate_order_by
  behavior_incidents_aggregate: behavior_incident_aggregate_order_by
  cell_mobile_number: order_by
  date_first_rental: order_by
  date_left_university: order_by
  email_address: order_by
  first_name: order_by
  last_name: order_by
  middle_name: order_by
  other_student_details: order_by
  student_addresses_aggregate: student_addresses_aggregate_order_by
  student_id: order_by
  students_in_detentions_aggregate: students_in_detention_aggregate_order_by
}

"""
primary key columns input for table: "students"
"""
input students_pk_columns_input {
  student_id: bigint!
}

"""
select columns of table "students"
"""
enum students_select_column {
  """column name"""
  address_id

  """column name"""
  cell_mobile_number

  """column name"""
  date_first_rental

  """column name"""
  date_left_university

  """column name"""
  email_address

  """column name"""
  first_name

  """column name"""
  last_name

  """column name"""
  middle_name

  """column name"""
  other_student_details

  """column name"""
  student_id
}

"""
input type for updating data in table "students"
"""
input students_set_input {
  address_id: bigint
  cell_mobile_number: String
  date_first_rental: timestamptz
  date_left_university: timestamptz
  email_address: String
  first_name: String
  last_name: String
  middle_name: String
  other_student_details: String
  student_id: bigint
}

"""aggregate stddev on columns"""
type students_stddev_fields {
  address_id: Float
  student_id: Float
}

"""
order by stddev() on columns of table "students"
"""
input students_stddev_order_by {
  address_id: order_by
  student_id: order_by
}

"""aggregate stddev_pop on columns"""
type students_stddev_pop_fields {
  address_id: Float
  student_id: Float
}

"""
order by stddev_pop() on columns of table "students"
"""
input students_stddev_pop_order_by {
  address_id: order_by
  student_id: order_by
}

"""aggregate stddev_samp on columns"""
type students_stddev_samp_fields {
  address_id: Float
  student_id: Float
}

"""
order by stddev_samp() on columns of table "students"
"""
input students_stddev_samp_order_by {
  address_id: order_by
  student_id: order_by
}

"""aggregate sum on columns"""
type students_sum_fields {
  address_id: bigint
  student_id: bigint
}

"""
order by sum() on columns of table "students"
"""
input students_sum_order_by {
  address_id: order_by
  student_id: order_by
}

"""
update columns of table "students"
"""
enum students_update_column {
  """column name"""
  address_id

  """column name"""
  cell_mobile_number

  """column name"""
  date_first_rental

  """column name"""
  date_left_university

  """column name"""
  email_address

  """column name"""
  first_name

  """column name"""
  last_name

  """column name"""
  middle_name

  """column name"""
  other_student_details

  """column name"""
  student_id
}

"""aggregate var_pop on columns"""
type students_var_pop_fields {
  address_id: Float
  student_id: Float
}

"""
order by var_pop() on columns of table "students"
"""
input students_var_pop_order_by {
  address_id: order_by
  student_id: order_by
}

"""aggregate var_samp on columns"""
type students_var_samp_fields {
  address_id: Float
  student_id: Float
}

"""
order by var_samp() on columns of table "students"
"""
input students_var_samp_order_by {
  address_id: order_by
  student_id: order_by
}

"""aggregate variance on columns"""
type students_variance_fields {
  address_id: Float
  student_id: Float
}

"""
order by variance() on columns of table "students"
"""
input students_variance_order_by {
  address_id: order_by
  student_id: order_by
}

"""subscription root"""
type subscription_root {
  """
  fetch data from the table: "addresses"
  """
  addresses(
    """distinct select on columns"""
    distinct_on: [addresses_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [addresses_order_by!]

    """filter the rows returned"""
    where: addresses_bool_exp
  ): [addresses!]!

  """
  fetch aggregated fields from the table: "addresses"
  """
  addresses_aggregate(
    """distinct select on columns"""
    distinct_on: [addresses_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [addresses_order_by!]

    """filter the rows returned"""
    where: addresses_bool_exp
  ): addresses_aggregate!

  """fetch data from the table: "addresses" using primary key columns"""
  addresses_by_pk(address_id: bigint!): addresses

  """
  fetch data from the table: "assessment_notes"
  """
  assessment_notes(
    """distinct select on columns"""
    distinct_on: [assessment_notes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [assessment_notes_order_by!]

    """filter the rows returned"""
    where: assessment_notes_bool_exp
  ): [assessment_notes!]!

  """
  fetch aggregated fields from the table: "assessment_notes"
  """
  assessment_notes_aggregate(
    """distinct select on columns"""
    distinct_on: [assessment_notes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [assessment_notes_order_by!]

    """filter the rows returned"""
    where: assessment_notes_bool_exp
  ): assessment_notes_aggregate!

  """
  fetch data from the table: "behavior_incident"
  """
  behavior_incident(
    """distinct select on columns"""
    distinct_on: [behavior_incident_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [behavior_incident_order_by!]

    """filter the rows returned"""
    where: behavior_incident_bool_exp
  ): [behavior_incident!]!

  """
  fetch aggregated fields from the table: "behavior_incident"
  """
  behavior_incident_aggregate(
    """distinct select on columns"""
    distinct_on: [behavior_incident_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [behavior_incident_order_by!]

    """filter the rows returned"""
    where: behavior_incident_bool_exp
  ): behavior_incident_aggregate!

  """
  fetch data from the table: "behavior_incident" using primary key columns
  """
  behavior_incident_by_pk(incident_id: bigint!): behavior_incident

  """
  fetch data from the table: "detention"
  """
  detention(
    """distinct select on columns"""
    distinct_on: [detention_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [detention_order_by!]

    """filter the rows returned"""
    where: detention_bool_exp
  ): [detention!]!

  """
  fetch aggregated fields from the table: "detention"
  """
  detention_aggregate(
    """distinct select on columns"""
    distinct_on: [detention_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [detention_order_by!]

    """filter the rows returned"""
    where: detention_bool_exp
  ): detention_aggregate!

  """fetch data from the table: "detention" using primary key columns"""
  detention_by_pk(detention_id: bigint!): detention

  """
  fetch data from the table: "ref_address_types"
  """
  ref_address_types(
    """distinct select on columns"""
    distinct_on: [ref_address_types_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [ref_address_types_order_by!]

    """filter the rows returned"""
    where: ref_address_types_bool_exp
  ): [ref_address_types!]!

  """
  fetch aggregated fields from the table: "ref_address_types"
  """
  ref_address_types_aggregate(
    """distinct select on columns"""
    distinct_on: [ref_address_types_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [ref_address_types_order_by!]

    """filter the rows returned"""
    where: ref_address_types_bool_exp
  ): ref_address_types_aggregate!

  """
  fetch data from the table: "ref_address_types" using primary key columns
  """
  ref_address_types_by_pk(address_type_code: String!): ref_address_types

  """
  fetch data from the table: "ref_detention_type"
  """
  ref_detention_type(
    """distinct select on columns"""
    distinct_on: [ref_detention_type_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [ref_detention_type_order_by!]

    """filter the rows returned"""
    where: ref_detention_type_bool_exp
  ): [ref_detention_type!]!

  """
  fetch aggregated fields from the table: "ref_detention_type"
  """
  ref_detention_type_aggregate(
    """distinct select on columns"""
    distinct_on: [ref_detention_type_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [ref_detention_type_order_by!]

    """filter the rows returned"""
    where: ref_detention_type_bool_exp
  ): ref_detention_type_aggregate!

  """
  fetch data from the table: "ref_detention_type" using primary key columns
  """
  ref_detention_type_by_pk(detention_type_code: String!): ref_detention_type

  """
  fetch data from the table: "ref_incident_type"
  """
  ref_incident_type(
    """distinct select on columns"""
    distinct_on: [ref_incident_type_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [ref_incident_type_order_by!]

    """filter the rows returned"""
    where: ref_incident_type_bool_exp
  ): [ref_incident_type!]!

  """
  fetch aggregated fields from the table: "ref_incident_type"
  """
  ref_incident_type_aggregate(
    """distinct select on columns"""
    distinct_on: [ref_incident_type_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [ref_incident_type_order_by!]

    """filter the rows returned"""
    where: ref_incident_type_bool_exp
  ): ref_incident_type_aggregate!

  """
  fetch data from the table: "ref_incident_type" using primary key columns
  """
  ref_incident_type_by_pk(incident_type_code: String!): ref_incident_type

  """
  fetch data from the table: "student_addresses"
  """
  student_addresses(
    """distinct select on columns"""
    distinct_on: [student_addresses_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [student_addresses_order_by!]

    """filter the rows returned"""
    where: student_addresses_bool_exp
  ): [student_addresses!]!

  """
  fetch aggregated fields from the table: "student_addresses"
  """
  student_addresses_aggregate(
    """distinct select on columns"""
    distinct_on: [student_addresses_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [student_addresses_order_by!]

    """filter the rows returned"""
    where: student_addresses_bool_exp
  ): student_addresses_aggregate!

  """
  fetch data from the table: "students"
  """
  students(
    """distinct select on columns"""
    distinct_on: [students_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [students_order_by!]

    """filter the rows returned"""
    where: students_bool_exp
  ): [students!]!

  """
  fetch aggregated fields from the table: "students"
  """
  students_aggregate(
    """distinct select on columns"""
    distinct_on: [students_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [students_order_by!]

    """filter the rows returned"""
    where: students_bool_exp
  ): students_aggregate!

  """fetch data from the table: "students" using primary key columns"""
  students_by_pk(student_id: bigint!): students

  """
  fetch data from the table: "students_in_detention"
  """
  students_in_detention(
    """distinct select on columns"""
    distinct_on: [students_in_detention_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [students_in_detention_order_by!]

    """filter the rows returned"""
    where: students_in_detention_bool_exp
  ): [students_in_detention!]!

  """
  fetch aggregated fields from the table: "students_in_detention"
  """
  students_in_detention_aggregate(
    """distinct select on columns"""
    distinct_on: [students_in_detention_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [students_in_detention_order_by!]

    """filter the rows returned"""
    where: students_in_detention_bool_exp
  ): students_in_detention_aggregate!

  """
  fetch data from the table: "teachers"
  """
  teachers(
    """distinct select on columns"""
    distinct_on: [teachers_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [teachers_order_by!]

    """filter the rows returned"""
    where: teachers_bool_exp
  ): [teachers!]!

  """
  fetch aggregated fields from the table: "teachers"
  """
  teachers_aggregate(
    """distinct select on columns"""
    distinct_on: [teachers_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [teachers_order_by!]

    """filter the rows returned"""
    where: teachers_bool_exp
  ): teachers_aggregate!

  """fetch data from the table: "teachers" using primary key columns"""
  teachers_by_pk(teacher_id: bigint!): teachers
}

"""
columns and relationships of "teachers"
"""
type teachers {
  """An object relationship"""
  address: addresses
  address_id: bigint

  """An array relationship"""
  assessment_notes(
    """distinct select on columns"""
    distinct_on: [assessment_notes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [assessment_notes_order_by!]

    """filter the rows returned"""
    where: assessment_notes_bool_exp
  ): [assessment_notes!]!

  """An aggregated array relationship"""
  assessment_notes_aggregate(
    """distinct select on columns"""
    distinct_on: [assessment_notes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [assessment_notes_order_by!]

    """filter the rows returned"""
    where: assessment_notes_bool_exp
  ): assessment_notes_aggregate!
  cell_mobile_number: String

  """An array relationship"""
  detentions(
    """distinct select on columns"""
    distinct_on: [detention_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [detention_order_by!]

    """filter the rows returned"""
    where: detention_bool_exp
  ): [detention!]!

  """An aggregated array relationship"""
  detentions_aggregate(
    """distinct select on columns"""
    distinct_on: [detention_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [detention_order_by!]

    """filter the rows returned"""
    where: detention_bool_exp
  ): detention_aggregate!
  email_address: String
  first_name: String
  gender: String
  last_name: String
  middle_name: String
  other_details: String
  teacher_id: bigint!
}

"""
aggregated selection of "teachers"
"""
type teachers_aggregate {
  aggregate: teachers_aggregate_fields
  nodes: [teachers!]!
}

"""
aggregate fields of "teachers"
"""
type teachers_aggregate_fields {
  avg: teachers_avg_fields
  count(columns: [teachers_select_column!], distinct: Boolean): Int
  max: teachers_max_fields
  min: teachers_min_fields
  stddev: teachers_stddev_fields
  stddev_pop: teachers_stddev_pop_fields
  stddev_samp: teachers_stddev_samp_fields
  sum: teachers_sum_fields
  var_pop: teachers_var_pop_fields
  var_samp: teachers_var_samp_fields
  variance: teachers_variance_fields
}

"""
order by aggregate values of table "teachers"
"""
input teachers_aggregate_order_by {
  avg: teachers_avg_order_by
  count: order_by
  max: teachers_max_order_by
  min: teachers_min_order_by
  stddev: teachers_stddev_order_by
  stddev_pop: teachers_stddev_pop_order_by
  stddev_samp: teachers_stddev_samp_order_by
  sum: teachers_sum_order_by
  var_pop: teachers_var_pop_order_by
  var_samp: teachers_var_samp_order_by
  variance: teachers_variance_order_by
}

"""
input type for inserting array relation for remote table "teachers"
"""
input teachers_arr_rel_insert_input {
  data: [teachers_insert_input!]!
  on_conflict: teachers_on_conflict
}

"""aggregate avg on columns"""
type teachers_avg_fields {
  address_id: Float
  teacher_id: Float
}

"""
order by avg() on columns of table "teachers"
"""
input teachers_avg_order_by {
  address_id: order_by
  teacher_id: order_by
}

"""
Boolean expression to filter rows from the table "teachers". All fields are combined with a logical 'AND'.
"""
input teachers_bool_exp {
  _and: [teachers_bool_exp]
  _not: teachers_bool_exp
  _or: [teachers_bool_exp]
  address: addresses_bool_exp
  address_id: bigint_comparison_exp
  assessment_notes: assessment_notes_bool_exp
  cell_mobile_number: String_comparison_exp
  detentions: detention_bool_exp
  email_address: String_comparison_exp
  first_name: String_comparison_exp
  gender: String_comparison_exp
  last_name: String_comparison_exp
  middle_name: String_comparison_exp
  other_details: String_comparison_exp
  teacher_id: bigint_comparison_exp
}

"""
unique or primary key constraints on table "teachers"
"""
enum teachers_constraint {
  """unique or primary key constraint"""
  idx_25770_teachers_pkey
}

"""
input type for incrementing integer column in table "teachers"
"""
input teachers_inc_input {
  address_id: bigint
  teacher_id: bigint
}

"""
input type for inserting data into table "teachers"
"""
input teachers_insert_input {
  address: addresses_obj_rel_insert_input
  address_id: bigint
  assessment_notes: assessment_notes_arr_rel_insert_input
  cell_mobile_number: String
  detentions: detention_arr_rel_insert_input
  email_address: String
  first_name: String
  gender: String
  last_name: String
  middle_name: String
  other_details: String
  teacher_id: bigint
}

"""aggregate max on columns"""
type teachers_max_fields {
  address_id: bigint
  cell_mobile_number: String
  email_address: String
  first_name: String
  gender: String
  last_name: String
  middle_name: String
  other_details: String
  teacher_id: bigint
}

"""
order by max() on columns of table "teachers"
"""
input teachers_max_order_by {
  address_id: order_by
  cell_mobile_number: order_by
  email_address: order_by
  first_name: order_by
  gender: order_by
  last_name: order_by
  middle_name: order_by
  other_details: order_by
  teacher_id: order_by
}

"""aggregate min on columns"""
type teachers_min_fields {
  address_id: bigint
  cell_mobile_number: String
  email_address: String
  first_name: String
  gender: String
  last_name: String
  middle_name: String
  other_details: String
  teacher_id: bigint
}

"""
order by min() on columns of table "teachers"
"""
input teachers_min_order_by {
  address_id: order_by
  cell_mobile_number: order_by
  email_address: order_by
  first_name: order_by
  gender: order_by
  last_name: order_by
  middle_name: order_by
  other_details: order_by
  teacher_id: order_by
}

"""
response of any mutation on the table "teachers"
"""
type teachers_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [teachers!]!
}

"""
input type for inserting object relation for remote table "teachers"
"""
input teachers_obj_rel_insert_input {
  data: teachers_insert_input!
  on_conflict: teachers_on_conflict
}

"""
on conflict condition type for table "teachers"
"""
input teachers_on_conflict {
  constraint: teachers_constraint!
  update_columns: [teachers_update_column!]!
  where: teachers_bool_exp
}

"""
ordering options when selecting data from "teachers"
"""
input teachers_order_by {
  address: addresses_order_by
  address_id: order_by
  assessment_notes_aggregate: assessment_notes_aggregate_order_by
  cell_mobile_number: order_by
  detentions_aggregate: detention_aggregate_order_by
  email_address: order_by
  first_name: order_by
  gender: order_by
  last_name: order_by
  middle_name: order_by
  other_details: order_by
  teacher_id: order_by
}

"""
primary key columns input for table: "teachers"
"""
input teachers_pk_columns_input {
  teacher_id: bigint!
}

"""
select columns of table "teachers"
"""
enum teachers_select_column {
  """column name"""
  address_id

  """column name"""
  cell_mobile_number

  """column name"""
  email_address

  """column name"""
  first_name

  """column name"""
  gender

  """column name"""
  last_name

  """column name"""
  middle_name

  """column name"""
  other_details

  """column name"""
  teacher_id
}

"""
input type for updating data in table "teachers"
"""
input teachers_set_input {
  address_id: bigint
  cell_mobile_number: String
  email_address: String
  first_name: String
  gender: String
  last_name: String
  middle_name: String
  other_details: String
  teacher_id: bigint
}

"""aggregate stddev on columns"""
type teachers_stddev_fields {
  address_id: Float
  teacher_id: Float
}

"""
order by stddev() on columns of table "teachers"
"""
input teachers_stddev_order_by {
  address_id: order_by
  teacher_id: order_by
}

"""aggregate stddev_pop on columns"""
type teachers_stddev_pop_fields {
  address_id: Float
  teacher_id: Float
}

"""
order by stddev_pop() on columns of table "teachers"
"""
input teachers_stddev_pop_order_by {
  address_id: order_by
  teacher_id: order_by
}

"""aggregate stddev_samp on columns"""
type teachers_stddev_samp_fields {
  address_id: Float
  teacher_id: Float
}

"""
order by stddev_samp() on columns of table "teachers"
"""
input teachers_stddev_samp_order_by {
  address_id: order_by
  teacher_id: order_by
}

"""aggregate sum on columns"""
type teachers_sum_fields {
  address_id: bigint
  teacher_id: bigint
}

"""
order by sum() on columns of table "teachers"
"""
input teachers_sum_order_by {
  address_id: order_by
  teacher_id: order_by
}

"""
update columns of table "teachers"
"""
enum teachers_update_column {
  """column name"""
  address_id

  """column name"""
  cell_mobile_number

  """column name"""
  email_address

  """column name"""
  first_name

  """column name"""
  gender

  """column name"""
  last_name

  """column name"""
  middle_name

  """column name"""
  other_details

  """column name"""
  teacher_id
}

"""aggregate var_pop on columns"""
type teachers_var_pop_fields {
  address_id: Float
  teacher_id: Float
}

"""
order by var_pop() on columns of table "teachers"
"""
input teachers_var_pop_order_by {
  address_id: order_by
  teacher_id: order_by
}

"""aggregate var_samp on columns"""
type teachers_var_samp_fields {
  address_id: Float
  teacher_id: Float
}

"""
order by var_samp() on columns of table "teachers"
"""
input teachers_var_samp_order_by {
  address_id: order_by
  teacher_id: order_by
}

"""aggregate variance on columns"""
type teachers_variance_fields {
  address_id: Float
  teacher_id: Float
}

"""
order by variance() on columns of table "teachers"
"""
input teachers_variance_order_by {
  address_id: order_by
  teacher_id: order_by
}

scalar timestamptz

"""
expression to compare columns of type timestamptz. All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}
