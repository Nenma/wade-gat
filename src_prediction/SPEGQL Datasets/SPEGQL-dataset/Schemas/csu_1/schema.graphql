schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""
Direct the client to resolve this field locally, either from the cache or local resolvers.
"""
directive @client(
  """
  When true, the client will never use the cache for this value. See
  https://www.apollographql.com/docs/react/essentials/local-state/#forcing-resolvers-with-clientalways-true
  """
  always: Boolean
) on FIELD | FRAGMENT_DEFINITION | INLINE_FRAGMENT

"""
Export this locally resolved field as a variable to be used in the remainder of this query. See
https://www.apollographql.com/docs/react/essentials/local-state/#using-client-fields-as-variables
"""
directive @export(
  """The variable name to export this field as."""
  as: String!
) on FIELD

"""
Specify a custom store key for this result. See
https://www.apollographql.com/docs/react/advanced/caching/#the-connection-directive
"""
directive @connection(
  """Specify the store key."""
  key: String!

  """
  An array of query argument names to include in the generated custom store key.
  """
  filter: [String!]
) on FIELD

scalar bigint

"""
expression to compare columns of type bigint. All fields are combined with logical 'AND'.
"""
input bigint_comparison_exp {
  _eq: bigint
  _gt: bigint
  _gte: bigint
  _in: [bigint!]
  _is_null: Boolean
  _lt: bigint
  _lte: bigint
  _neq: bigint
  _nin: [bigint!]
}

"""
columns and relationships of "campuses"
"""
type campuses {
  campus: String
  county: String

  """An array relationship"""
  csu_fees(
    """distinct select on columns"""
    distinct_on: [csu_fees_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [csu_fees_order_by!]

    """filter the rows returned"""
    where: csu_fees_bool_exp
  ): [csu_fees!]!

  """An aggregated array relationship"""
  csu_fees_aggregate(
    """distinct select on columns"""
    distinct_on: [csu_fees_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [csu_fees_order_by!]

    """filter the rows returned"""
    where: csu_fees_bool_exp
  ): csu_fees_aggregate!

  """An array relationship"""
  degrees(
    """distinct select on columns"""
    distinct_on: [degrees_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [degrees_order_by!]

    """filter the rows returned"""
    where: degrees_bool_exp
  ): [degrees!]!

  """An aggregated array relationship"""
  degrees_aggregate(
    """distinct select on columns"""
    distinct_on: [degrees_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [degrees_order_by!]

    """filter the rows returned"""
    where: degrees_bool_exp
  ): degrees_aggregate!

  """An array relationship"""
  discipline_enrollments(
    """distinct select on columns"""
    distinct_on: [discipline_enrollments_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [discipline_enrollments_order_by!]

    """filter the rows returned"""
    where: discipline_enrollments_bool_exp
  ): [discipline_enrollments!]!

  """An aggregated array relationship"""
  discipline_enrollments_aggregate(
    """distinct select on columns"""
    distinct_on: [discipline_enrollments_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [discipline_enrollments_order_by!]

    """filter the rows returned"""
    where: discipline_enrollments_bool_exp
  ): discipline_enrollments_aggregate!

  """An array relationship"""
  enrollments(
    """distinct select on columns"""
    distinct_on: [enrollments_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [enrollments_order_by!]

    """filter the rows returned"""
    where: enrollments_bool_exp
  ): [enrollments!]!

  """An aggregated array relationship"""
  enrollments_aggregate(
    """distinct select on columns"""
    distinct_on: [enrollments_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [enrollments_order_by!]

    """filter the rows returned"""
    where: enrollments_bool_exp
  ): enrollments_aggregate!

  """An array relationship"""
  faculties(
    """distinct select on columns"""
    distinct_on: [faculty_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [faculty_order_by!]

    """filter the rows returned"""
    where: faculty_bool_exp
  ): [faculty!]!

  """An aggregated array relationship"""
  faculties_aggregate(
    """distinct select on columns"""
    distinct_on: [faculty_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [faculty_order_by!]

    """filter the rows returned"""
    where: faculty_bool_exp
  ): faculty_aggregate!
  id: bigint!
  location: String
  year: bigint
}

"""
aggregated selection of "campuses"
"""
type campuses_aggregate {
  aggregate: campuses_aggregate_fields
  nodes: [campuses!]!
}

"""
aggregate fields of "campuses"
"""
type campuses_aggregate_fields {
  avg: campuses_avg_fields
  count(columns: [campuses_select_column!], distinct: Boolean): Int
  max: campuses_max_fields
  min: campuses_min_fields
  stddev: campuses_stddev_fields
  stddev_pop: campuses_stddev_pop_fields
  stddev_samp: campuses_stddev_samp_fields
  sum: campuses_sum_fields
  var_pop: campuses_var_pop_fields
  var_samp: campuses_var_samp_fields
  variance: campuses_variance_fields
}

"""
order by aggregate values of table "campuses"
"""
input campuses_aggregate_order_by {
  avg: campuses_avg_order_by
  count: order_by
  max: campuses_max_order_by
  min: campuses_min_order_by
  stddev: campuses_stddev_order_by
  stddev_pop: campuses_stddev_pop_order_by
  stddev_samp: campuses_stddev_samp_order_by
  sum: campuses_sum_order_by
  var_pop: campuses_var_pop_order_by
  var_samp: campuses_var_samp_order_by
  variance: campuses_variance_order_by
}

"""
input type for inserting array relation for remote table "campuses"
"""
input campuses_arr_rel_insert_input {
  data: [campuses_insert_input!]!
  on_conflict: campuses_on_conflict
}

"""aggregate avg on columns"""
type campuses_avg_fields {
  id: Float
  year: Float
}

"""
order by avg() on columns of table "campuses"
"""
input campuses_avg_order_by {
  id: order_by
  year: order_by
}

"""
Boolean expression to filter rows from the table "campuses". All fields are combined with a logical 'AND'.
"""
input campuses_bool_exp {
  _and: [campuses_bool_exp]
  _not: campuses_bool_exp
  _or: [campuses_bool_exp]
  campus: String_comparison_exp
  county: String_comparison_exp
  csu_fees: csu_fees_bool_exp
  degrees: degrees_bool_exp
  discipline_enrollments: discipline_enrollments_bool_exp
  enrollments: enrollments_bool_exp
  faculties: faculty_bool_exp
  id: bigint_comparison_exp
  location: String_comparison_exp
  year: bigint_comparison_exp
}

"""
unique or primary key constraints on table "campuses"
"""
enum campuses_constraint {
  """unique or primary key constraint"""
  idx_20729_campuses_pkey
}

"""
input type for incrementing integer column in table "campuses"
"""
input campuses_inc_input {
  id: bigint
  year: bigint
}

"""
input type for inserting data into table "campuses"
"""
input campuses_insert_input {
  campus: String
  county: String
  csu_fees: csu_fees_arr_rel_insert_input
  degrees: degrees_arr_rel_insert_input
  discipline_enrollments: discipline_enrollments_arr_rel_insert_input
  enrollments: enrollments_arr_rel_insert_input
  faculties: faculty_arr_rel_insert_input
  id: bigint
  location: String
  year: bigint
}

"""aggregate max on columns"""
type campuses_max_fields {
  campus: String
  county: String
  id: bigint
  location: String
  year: bigint
}

"""
order by max() on columns of table "campuses"
"""
input campuses_max_order_by {
  campus: order_by
  county: order_by
  id: order_by
  location: order_by
  year: order_by
}

"""aggregate min on columns"""
type campuses_min_fields {
  campus: String
  county: String
  id: bigint
  location: String
  year: bigint
}

"""
order by min() on columns of table "campuses"
"""
input campuses_min_order_by {
  campus: order_by
  county: order_by
  id: order_by
  location: order_by
  year: order_by
}

"""
response of any mutation on the table "campuses"
"""
type campuses_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [campuses!]!
}

"""
input type for inserting object relation for remote table "campuses"
"""
input campuses_obj_rel_insert_input {
  data: campuses_insert_input!
  on_conflict: campuses_on_conflict
}

"""
on conflict condition type for table "campuses"
"""
input campuses_on_conflict {
  constraint: campuses_constraint!
  update_columns: [campuses_update_column!]!
  where: campuses_bool_exp
}

"""
ordering options when selecting data from "campuses"
"""
input campuses_order_by {
  campus: order_by
  county: order_by
  csu_fees_aggregate: csu_fees_aggregate_order_by
  degrees_aggregate: degrees_aggregate_order_by
  discipline_enrollments_aggregate: discipline_enrollments_aggregate_order_by
  enrollments_aggregate: enrollments_aggregate_order_by
  faculties_aggregate: faculty_aggregate_order_by
  id: order_by
  location: order_by
  year: order_by
}

"""
primary key columns input for table: "campuses"
"""
input campuses_pk_columns_input {
  id: bigint!
}

"""
select columns of table "campuses"
"""
enum campuses_select_column {
  """column name"""
  campus

  """column name"""
  county

  """column name"""
  id

  """column name"""
  location

  """column name"""
  year
}

"""
input type for updating data in table "campuses"
"""
input campuses_set_input {
  campus: String
  county: String
  id: bigint
  location: String
  year: bigint
}

"""aggregate stddev on columns"""
type campuses_stddev_fields {
  id: Float
  year: Float
}

"""
order by stddev() on columns of table "campuses"
"""
input campuses_stddev_order_by {
  id: order_by
  year: order_by
}

"""aggregate stddev_pop on columns"""
type campuses_stddev_pop_fields {
  id: Float
  year: Float
}

"""
order by stddev_pop() on columns of table "campuses"
"""
input campuses_stddev_pop_order_by {
  id: order_by
  year: order_by
}

"""aggregate stddev_samp on columns"""
type campuses_stddev_samp_fields {
  id: Float
  year: Float
}

"""
order by stddev_samp() on columns of table "campuses"
"""
input campuses_stddev_samp_order_by {
  id: order_by
  year: order_by
}

"""aggregate sum on columns"""
type campuses_sum_fields {
  id: bigint
  year: bigint
}

"""
order by sum() on columns of table "campuses"
"""
input campuses_sum_order_by {
  id: order_by
  year: order_by
}

"""
update columns of table "campuses"
"""
enum campuses_update_column {
  """column name"""
  campus

  """column name"""
  county

  """column name"""
  id

  """column name"""
  location

  """column name"""
  year
}

"""aggregate var_pop on columns"""
type campuses_var_pop_fields {
  id: Float
  year: Float
}

"""
order by var_pop() on columns of table "campuses"
"""
input campuses_var_pop_order_by {
  id: order_by
  year: order_by
}

"""aggregate var_samp on columns"""
type campuses_var_samp_fields {
  id: Float
  year: Float
}

"""
order by var_samp() on columns of table "campuses"
"""
input campuses_var_samp_order_by {
  id: order_by
  year: order_by
}

"""aggregate variance on columns"""
type campuses_variance_fields {
  id: Float
  year: Float
}

"""
order by variance() on columns of table "campuses"
"""
input campuses_variance_order_by {
  id: order_by
  year: order_by
}

"""
columns and relationships of "csu_fees"
"""
type csu_fees {
  campus: bigint!

  """An object relationship"""
  campusByCampus: campuses!
  campusfee: bigint
  year: bigint
}

"""
aggregated selection of "csu_fees"
"""
type csu_fees_aggregate {
  aggregate: csu_fees_aggregate_fields
  nodes: [csu_fees!]!
}

"""
aggregate fields of "csu_fees"
"""
type csu_fees_aggregate_fields {
  avg: csu_fees_avg_fields
  count(columns: [csu_fees_select_column!], distinct: Boolean): Int
  max: csu_fees_max_fields
  min: csu_fees_min_fields
  stddev: csu_fees_stddev_fields
  stddev_pop: csu_fees_stddev_pop_fields
  stddev_samp: csu_fees_stddev_samp_fields
  sum: csu_fees_sum_fields
  var_pop: csu_fees_var_pop_fields
  var_samp: csu_fees_var_samp_fields
  variance: csu_fees_variance_fields
}

"""
order by aggregate values of table "csu_fees"
"""
input csu_fees_aggregate_order_by {
  avg: csu_fees_avg_order_by
  count: order_by
  max: csu_fees_max_order_by
  min: csu_fees_min_order_by
  stddev: csu_fees_stddev_order_by
  stddev_pop: csu_fees_stddev_pop_order_by
  stddev_samp: csu_fees_stddev_samp_order_by
  sum: csu_fees_sum_order_by
  var_pop: csu_fees_var_pop_order_by
  var_samp: csu_fees_var_samp_order_by
  variance: csu_fees_variance_order_by
}

"""
input type for inserting array relation for remote table "csu_fees"
"""
input csu_fees_arr_rel_insert_input {
  data: [csu_fees_insert_input!]!
  on_conflict: csu_fees_on_conflict
}

"""aggregate avg on columns"""
type csu_fees_avg_fields {
  campus: Float
  campusfee: Float
  year: Float
}

"""
order by avg() on columns of table "csu_fees"
"""
input csu_fees_avg_order_by {
  campus: order_by
  campusfee: order_by
  year: order_by
}

"""
Boolean expression to filter rows from the table "csu_fees". All fields are combined with a logical 'AND'.
"""
input csu_fees_bool_exp {
  _and: [csu_fees_bool_exp]
  _not: csu_fees_bool_exp
  _or: [csu_fees_bool_exp]
  campus: bigint_comparison_exp
  campusByCampus: campuses_bool_exp
  campusfee: bigint_comparison_exp
  year: bigint_comparison_exp
}

"""
unique or primary key constraints on table "csu_fees"
"""
enum csu_fees_constraint {
  """unique or primary key constraint"""
  idx_20735_csu_fees_pkey
}

"""
input type for incrementing integer column in table "csu_fees"
"""
input csu_fees_inc_input {
  campus: bigint
  campusfee: bigint
  year: bigint
}

"""
input type for inserting data into table "csu_fees"
"""
input csu_fees_insert_input {
  campus: bigint
  campusByCampus: campuses_obj_rel_insert_input
  campusfee: bigint
  year: bigint
}

"""aggregate max on columns"""
type csu_fees_max_fields {
  campus: bigint
  campusfee: bigint
  year: bigint
}

"""
order by max() on columns of table "csu_fees"
"""
input csu_fees_max_order_by {
  campus: order_by
  campusfee: order_by
  year: order_by
}

"""aggregate min on columns"""
type csu_fees_min_fields {
  campus: bigint
  campusfee: bigint
  year: bigint
}

"""
order by min() on columns of table "csu_fees"
"""
input csu_fees_min_order_by {
  campus: order_by
  campusfee: order_by
  year: order_by
}

"""
response of any mutation on the table "csu_fees"
"""
type csu_fees_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [csu_fees!]!
}

"""
input type for inserting object relation for remote table "csu_fees"
"""
input csu_fees_obj_rel_insert_input {
  data: csu_fees_insert_input!
  on_conflict: csu_fees_on_conflict
}

"""
on conflict condition type for table "csu_fees"
"""
input csu_fees_on_conflict {
  constraint: csu_fees_constraint!
  update_columns: [csu_fees_update_column!]!
  where: csu_fees_bool_exp
}

"""
ordering options when selecting data from "csu_fees"
"""
input csu_fees_order_by {
  campus: order_by
  campusByCampus: campuses_order_by
  campusfee: order_by
  year: order_by
}

"""
primary key columns input for table: "csu_fees"
"""
input csu_fees_pk_columns_input {
  campus: bigint!
}

"""
select columns of table "csu_fees"
"""
enum csu_fees_select_column {
  """column name"""
  campus

  """column name"""
  campusfee

  """column name"""
  year
}

"""
input type for updating data in table "csu_fees"
"""
input csu_fees_set_input {
  campus: bigint
  campusfee: bigint
  year: bigint
}

"""aggregate stddev on columns"""
type csu_fees_stddev_fields {
  campus: Float
  campusfee: Float
  year: Float
}

"""
order by stddev() on columns of table "csu_fees"
"""
input csu_fees_stddev_order_by {
  campus: order_by
  campusfee: order_by
  year: order_by
}

"""aggregate stddev_pop on columns"""
type csu_fees_stddev_pop_fields {
  campus: Float
  campusfee: Float
  year: Float
}

"""
order by stddev_pop() on columns of table "csu_fees"
"""
input csu_fees_stddev_pop_order_by {
  campus: order_by
  campusfee: order_by
  year: order_by
}

"""aggregate stddev_samp on columns"""
type csu_fees_stddev_samp_fields {
  campus: Float
  campusfee: Float
  year: Float
}

"""
order by stddev_samp() on columns of table "csu_fees"
"""
input csu_fees_stddev_samp_order_by {
  campus: order_by
  campusfee: order_by
  year: order_by
}

"""aggregate sum on columns"""
type csu_fees_sum_fields {
  campus: bigint
  campusfee: bigint
  year: bigint
}

"""
order by sum() on columns of table "csu_fees"
"""
input csu_fees_sum_order_by {
  campus: order_by
  campusfee: order_by
  year: order_by
}

"""
update columns of table "csu_fees"
"""
enum csu_fees_update_column {
  """column name"""
  campus

  """column name"""
  campusfee

  """column name"""
  year
}

"""aggregate var_pop on columns"""
type csu_fees_var_pop_fields {
  campus: Float
  campusfee: Float
  year: Float
}

"""
order by var_pop() on columns of table "csu_fees"
"""
input csu_fees_var_pop_order_by {
  campus: order_by
  campusfee: order_by
  year: order_by
}

"""aggregate var_samp on columns"""
type csu_fees_var_samp_fields {
  campus: Float
  campusfee: Float
  year: Float
}

"""
order by var_samp() on columns of table "csu_fees"
"""
input csu_fees_var_samp_order_by {
  campus: order_by
  campusfee: order_by
  year: order_by
}

"""aggregate variance on columns"""
type csu_fees_variance_fields {
  campus: Float
  campusfee: Float
  year: Float
}

"""
order by variance() on columns of table "csu_fees"
"""
input csu_fees_variance_order_by {
  campus: order_by
  campusfee: order_by
  year: order_by
}

"""
columns and relationships of "degrees"
"""
type degrees {
  campus: bigint!

  """An object relationship"""
  campusByCampus: campuses!
  degrees: bigint
  year: bigint!
}

"""
aggregated selection of "degrees"
"""
type degrees_aggregate {
  aggregate: degrees_aggregate_fields
  nodes: [degrees!]!
}

"""
aggregate fields of "degrees"
"""
type degrees_aggregate_fields {
  avg: degrees_avg_fields
  count(columns: [degrees_select_column!], distinct: Boolean): Int
  max: degrees_max_fields
  min: degrees_min_fields
  stddev: degrees_stddev_fields
  stddev_pop: degrees_stddev_pop_fields
  stddev_samp: degrees_stddev_samp_fields
  sum: degrees_sum_fields
  var_pop: degrees_var_pop_fields
  var_samp: degrees_var_samp_fields
  variance: degrees_variance_fields
}

"""
order by aggregate values of table "degrees"
"""
input degrees_aggregate_order_by {
  avg: degrees_avg_order_by
  count: order_by
  max: degrees_max_order_by
  min: degrees_min_order_by
  stddev: degrees_stddev_order_by
  stddev_pop: degrees_stddev_pop_order_by
  stddev_samp: degrees_stddev_samp_order_by
  sum: degrees_sum_order_by
  var_pop: degrees_var_pop_order_by
  var_samp: degrees_var_samp_order_by
  variance: degrees_variance_order_by
}

"""
input type for inserting array relation for remote table "degrees"
"""
input degrees_arr_rel_insert_input {
  data: [degrees_insert_input!]!
  on_conflict: degrees_on_conflict
}

"""aggregate avg on columns"""
type degrees_avg_fields {
  campus: Float
  degrees: Float
  year: Float
}

"""
order by avg() on columns of table "degrees"
"""
input degrees_avg_order_by {
  campus: order_by
  degrees: order_by
  year: order_by
}

"""
Boolean expression to filter rows from the table "degrees". All fields are combined with a logical 'AND'.
"""
input degrees_bool_exp {
  _and: [degrees_bool_exp]
  _not: degrees_bool_exp
  _or: [degrees_bool_exp]
  campus: bigint_comparison_exp
  campusByCampus: campuses_bool_exp
  degrees: bigint_comparison_exp
  year: bigint_comparison_exp
}

"""
unique or primary key constraints on table "degrees"
"""
enum degrees_constraint {
  """unique or primary key constraint"""
  idx_20738_degrees_pkey

  """unique or primary key constraint"""
  idx_20738_sqlite_autoindex_degrees_1
}

"""
input type for incrementing integer column in table "degrees"
"""
input degrees_inc_input {
  campus: bigint
  degrees: bigint
  year: bigint
}

"""
input type for inserting data into table "degrees"
"""
input degrees_insert_input {
  campus: bigint
  campusByCampus: campuses_obj_rel_insert_input
  degrees: bigint
  year: bigint
}

"""aggregate max on columns"""
type degrees_max_fields {
  campus: bigint
  degrees: bigint
  year: bigint
}

"""
order by max() on columns of table "degrees"
"""
input degrees_max_order_by {
  campus: order_by
  degrees: order_by
  year: order_by
}

"""aggregate min on columns"""
type degrees_min_fields {
  campus: bigint
  degrees: bigint
  year: bigint
}

"""
order by min() on columns of table "degrees"
"""
input degrees_min_order_by {
  campus: order_by
  degrees: order_by
  year: order_by
}

"""
response of any mutation on the table "degrees"
"""
type degrees_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [degrees!]!
}

"""
input type for inserting object relation for remote table "degrees"
"""
input degrees_obj_rel_insert_input {
  data: degrees_insert_input!
  on_conflict: degrees_on_conflict
}

"""
on conflict condition type for table "degrees"
"""
input degrees_on_conflict {
  constraint: degrees_constraint!
  update_columns: [degrees_update_column!]!
  where: degrees_bool_exp
}

"""
ordering options when selecting data from "degrees"
"""
input degrees_order_by {
  campus: order_by
  campusByCampus: campuses_order_by
  degrees: order_by
  year: order_by
}

"""
primary key columns input for table: "degrees"
"""
input degrees_pk_columns_input {
  campus: bigint!
  year: bigint!
}

"""
select columns of table "degrees"
"""
enum degrees_select_column {
  """column name"""
  campus

  """column name"""
  degrees

  """column name"""
  year
}

"""
input type for updating data in table "degrees"
"""
input degrees_set_input {
  campus: bigint
  degrees: bigint
  year: bigint
}

"""aggregate stddev on columns"""
type degrees_stddev_fields {
  campus: Float
  degrees: Float
  year: Float
}

"""
order by stddev() on columns of table "degrees"
"""
input degrees_stddev_order_by {
  campus: order_by
  degrees: order_by
  year: order_by
}

"""aggregate stddev_pop on columns"""
type degrees_stddev_pop_fields {
  campus: Float
  degrees: Float
  year: Float
}

"""
order by stddev_pop() on columns of table "degrees"
"""
input degrees_stddev_pop_order_by {
  campus: order_by
  degrees: order_by
  year: order_by
}

"""aggregate stddev_samp on columns"""
type degrees_stddev_samp_fields {
  campus: Float
  degrees: Float
  year: Float
}

"""
order by stddev_samp() on columns of table "degrees"
"""
input degrees_stddev_samp_order_by {
  campus: order_by
  degrees: order_by
  year: order_by
}

"""aggregate sum on columns"""
type degrees_sum_fields {
  campus: bigint
  degrees: bigint
  year: bigint
}

"""
order by sum() on columns of table "degrees"
"""
input degrees_sum_order_by {
  campus: order_by
  degrees: order_by
  year: order_by
}

"""
update columns of table "degrees"
"""
enum degrees_update_column {
  """column name"""
  campus

  """column name"""
  degrees

  """column name"""
  year
}

"""aggregate var_pop on columns"""
type degrees_var_pop_fields {
  campus: Float
  degrees: Float
  year: Float
}

"""
order by var_pop() on columns of table "degrees"
"""
input degrees_var_pop_order_by {
  campus: order_by
  degrees: order_by
  year: order_by
}

"""aggregate var_samp on columns"""
type degrees_var_samp_fields {
  campus: Float
  degrees: Float
  year: Float
}

"""
order by var_samp() on columns of table "degrees"
"""
input degrees_var_samp_order_by {
  campus: order_by
  degrees: order_by
  year: order_by
}

"""aggregate variance on columns"""
type degrees_variance_fields {
  campus: Float
  degrees: Float
  year: Float
}

"""
order by variance() on columns of table "degrees"
"""
input degrees_variance_order_by {
  campus: order_by
  degrees: order_by
  year: order_by
}

"""
columns and relationships of "discipline_enrollments"
"""
type discipline_enrollments {
  campus: bigint!

  """An object relationship"""
  campusByCampus: campuses!
  discipline: bigint!
  graduate: bigint
  undergraduate: bigint
  year: bigint
}

"""
aggregated selection of "discipline_enrollments"
"""
type discipline_enrollments_aggregate {
  aggregate: discipline_enrollments_aggregate_fields
  nodes: [discipline_enrollments!]!
}

"""
aggregate fields of "discipline_enrollments"
"""
type discipline_enrollments_aggregate_fields {
  avg: discipline_enrollments_avg_fields
  count(columns: [discipline_enrollments_select_column!], distinct: Boolean): Int
  max: discipline_enrollments_max_fields
  min: discipline_enrollments_min_fields
  stddev: discipline_enrollments_stddev_fields
  stddev_pop: discipline_enrollments_stddev_pop_fields
  stddev_samp: discipline_enrollments_stddev_samp_fields
  sum: discipline_enrollments_sum_fields
  var_pop: discipline_enrollments_var_pop_fields
  var_samp: discipline_enrollments_var_samp_fields
  variance: discipline_enrollments_variance_fields
}

"""
order by aggregate values of table "discipline_enrollments"
"""
input discipline_enrollments_aggregate_order_by {
  avg: discipline_enrollments_avg_order_by
  count: order_by
  max: discipline_enrollments_max_order_by
  min: discipline_enrollments_min_order_by
  stddev: discipline_enrollments_stddev_order_by
  stddev_pop: discipline_enrollments_stddev_pop_order_by
  stddev_samp: discipline_enrollments_stddev_samp_order_by
  sum: discipline_enrollments_sum_order_by
  var_pop: discipline_enrollments_var_pop_order_by
  var_samp: discipline_enrollments_var_samp_order_by
  variance: discipline_enrollments_variance_order_by
}

"""
input type for inserting array relation for remote table "discipline_enrollments"
"""
input discipline_enrollments_arr_rel_insert_input {
  data: [discipline_enrollments_insert_input!]!
  on_conflict: discipline_enrollments_on_conflict
}

"""aggregate avg on columns"""
type discipline_enrollments_avg_fields {
  campus: Float
  discipline: Float
  graduate: Float
  undergraduate: Float
  year: Float
}

"""
order by avg() on columns of table "discipline_enrollments"
"""
input discipline_enrollments_avg_order_by {
  campus: order_by
  discipline: order_by
  graduate: order_by
  undergraduate: order_by
  year: order_by
}

"""
Boolean expression to filter rows from the table "discipline_enrollments". All fields are combined with a logical 'AND'.
"""
input discipline_enrollments_bool_exp {
  _and: [discipline_enrollments_bool_exp]
  _not: discipline_enrollments_bool_exp
  _or: [discipline_enrollments_bool_exp]
  campus: bigint_comparison_exp
  campusByCampus: campuses_bool_exp
  discipline: bigint_comparison_exp
  graduate: bigint_comparison_exp
  undergraduate: bigint_comparison_exp
  year: bigint_comparison_exp
}

"""
unique or primary key constraints on table "discipline_enrollments"
"""
enum discipline_enrollments_constraint {
  """unique or primary key constraint"""
  idx_20741_discipline_enrollments_pkey

  """unique or primary key constraint"""
  idx_20741_sqlite_autoindex_discipline_enrollments_1
}

"""
input type for incrementing integer column in table "discipline_enrollments"
"""
input discipline_enrollments_inc_input {
  campus: bigint
  discipline: bigint
  graduate: bigint
  undergraduate: bigint
  year: bigint
}

"""
input type for inserting data into table "discipline_enrollments"
"""
input discipline_enrollments_insert_input {
  campus: bigint
  campusByCampus: campuses_obj_rel_insert_input
  discipline: bigint
  graduate: bigint
  undergraduate: bigint
  year: bigint
}

"""aggregate max on columns"""
type discipline_enrollments_max_fields {
  campus: bigint
  discipline: bigint
  graduate: bigint
  undergraduate: bigint
  year: bigint
}

"""
order by max() on columns of table "discipline_enrollments"
"""
input discipline_enrollments_max_order_by {
  campus: order_by
  discipline: order_by
  graduate: order_by
  undergraduate: order_by
  year: order_by
}

"""aggregate min on columns"""
type discipline_enrollments_min_fields {
  campus: bigint
  discipline: bigint
  graduate: bigint
  undergraduate: bigint
  year: bigint
}

"""
order by min() on columns of table "discipline_enrollments"
"""
input discipline_enrollments_min_order_by {
  campus: order_by
  discipline: order_by
  graduate: order_by
  undergraduate: order_by
  year: order_by
}

"""
response of any mutation on the table "discipline_enrollments"
"""
type discipline_enrollments_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [discipline_enrollments!]!
}

"""
input type for inserting object relation for remote table "discipline_enrollments"
"""
input discipline_enrollments_obj_rel_insert_input {
  data: discipline_enrollments_insert_input!
  on_conflict: discipline_enrollments_on_conflict
}

"""
on conflict condition type for table "discipline_enrollments"
"""
input discipline_enrollments_on_conflict {
  constraint: discipline_enrollments_constraint!
  update_columns: [discipline_enrollments_update_column!]!
  where: discipline_enrollments_bool_exp
}

"""
ordering options when selecting data from "discipline_enrollments"
"""
input discipline_enrollments_order_by {
  campus: order_by
  campusByCampus: campuses_order_by
  discipline: order_by
  graduate: order_by
  undergraduate: order_by
  year: order_by
}

"""
primary key columns input for table: "discipline_enrollments"
"""
input discipline_enrollments_pk_columns_input {
  campus: bigint!
  discipline: bigint!
}

"""
select columns of table "discipline_enrollments"
"""
enum discipline_enrollments_select_column {
  """column name"""
  campus

  """column name"""
  discipline

  """column name"""
  graduate

  """column name"""
  undergraduate

  """column name"""
  year
}

"""
input type for updating data in table "discipline_enrollments"
"""
input discipline_enrollments_set_input {
  campus: bigint
  discipline: bigint
  graduate: bigint
  undergraduate: bigint
  year: bigint
}

"""aggregate stddev on columns"""
type discipline_enrollments_stddev_fields {
  campus: Float
  discipline: Float
  graduate: Float
  undergraduate: Float
  year: Float
}

"""
order by stddev() on columns of table "discipline_enrollments"
"""
input discipline_enrollments_stddev_order_by {
  campus: order_by
  discipline: order_by
  graduate: order_by
  undergraduate: order_by
  year: order_by
}

"""aggregate stddev_pop on columns"""
type discipline_enrollments_stddev_pop_fields {
  campus: Float
  discipline: Float
  graduate: Float
  undergraduate: Float
  year: Float
}

"""
order by stddev_pop() on columns of table "discipline_enrollments"
"""
input discipline_enrollments_stddev_pop_order_by {
  campus: order_by
  discipline: order_by
  graduate: order_by
  undergraduate: order_by
  year: order_by
}

"""aggregate stddev_samp on columns"""
type discipline_enrollments_stddev_samp_fields {
  campus: Float
  discipline: Float
  graduate: Float
  undergraduate: Float
  year: Float
}

"""
order by stddev_samp() on columns of table "discipline_enrollments"
"""
input discipline_enrollments_stddev_samp_order_by {
  campus: order_by
  discipline: order_by
  graduate: order_by
  undergraduate: order_by
  year: order_by
}

"""aggregate sum on columns"""
type discipline_enrollments_sum_fields {
  campus: bigint
  discipline: bigint
  graduate: bigint
  undergraduate: bigint
  year: bigint
}

"""
order by sum() on columns of table "discipline_enrollments"
"""
input discipline_enrollments_sum_order_by {
  campus: order_by
  discipline: order_by
  graduate: order_by
  undergraduate: order_by
  year: order_by
}

"""
update columns of table "discipline_enrollments"
"""
enum discipline_enrollments_update_column {
  """column name"""
  campus

  """column name"""
  discipline

  """column name"""
  graduate

  """column name"""
  undergraduate

  """column name"""
  year
}

"""aggregate var_pop on columns"""
type discipline_enrollments_var_pop_fields {
  campus: Float
  discipline: Float
  graduate: Float
  undergraduate: Float
  year: Float
}

"""
order by var_pop() on columns of table "discipline_enrollments"
"""
input discipline_enrollments_var_pop_order_by {
  campus: order_by
  discipline: order_by
  graduate: order_by
  undergraduate: order_by
  year: order_by
}

"""aggregate var_samp on columns"""
type discipline_enrollments_var_samp_fields {
  campus: Float
  discipline: Float
  graduate: Float
  undergraduate: Float
  year: Float
}

"""
order by var_samp() on columns of table "discipline_enrollments"
"""
input discipline_enrollments_var_samp_order_by {
  campus: order_by
  discipline: order_by
  graduate: order_by
  undergraduate: order_by
  year: order_by
}

"""aggregate variance on columns"""
type discipline_enrollments_variance_fields {
  campus: Float
  discipline: Float
  graduate: Float
  undergraduate: Float
  year: Float
}

"""
order by variance() on columns of table "discipline_enrollments"
"""
input discipline_enrollments_variance_order_by {
  campus: order_by
  discipline: order_by
  graduate: order_by
  undergraduate: order_by
  year: order_by
}

"""
columns and relationships of "enrollments"
"""
type enrollments {
  campus: bigint!

  """An object relationship"""
  campusByCampus: campuses!
  fte_ay: bigint
  totalenrollment_ay: bigint
  year: bigint!
}

"""
aggregated selection of "enrollments"
"""
type enrollments_aggregate {
  aggregate: enrollments_aggregate_fields
  nodes: [enrollments!]!
}

"""
aggregate fields of "enrollments"
"""
type enrollments_aggregate_fields {
  avg: enrollments_avg_fields
  count(columns: [enrollments_select_column!], distinct: Boolean): Int
  max: enrollments_max_fields
  min: enrollments_min_fields
  stddev: enrollments_stddev_fields
  stddev_pop: enrollments_stddev_pop_fields
  stddev_samp: enrollments_stddev_samp_fields
  sum: enrollments_sum_fields
  var_pop: enrollments_var_pop_fields
  var_samp: enrollments_var_samp_fields
  variance: enrollments_variance_fields
}

"""
order by aggregate values of table "enrollments"
"""
input enrollments_aggregate_order_by {
  avg: enrollments_avg_order_by
  count: order_by
  max: enrollments_max_order_by
  min: enrollments_min_order_by
  stddev: enrollments_stddev_order_by
  stddev_pop: enrollments_stddev_pop_order_by
  stddev_samp: enrollments_stddev_samp_order_by
  sum: enrollments_sum_order_by
  var_pop: enrollments_var_pop_order_by
  var_samp: enrollments_var_samp_order_by
  variance: enrollments_variance_order_by
}

"""
input type for inserting array relation for remote table "enrollments"
"""
input enrollments_arr_rel_insert_input {
  data: [enrollments_insert_input!]!
  on_conflict: enrollments_on_conflict
}

"""aggregate avg on columns"""
type enrollments_avg_fields {
  campus: Float
  fte_ay: Float
  totalenrollment_ay: Float
  year: Float
}

"""
order by avg() on columns of table "enrollments"
"""
input enrollments_avg_order_by {
  campus: order_by
  fte_ay: order_by
  totalenrollment_ay: order_by
  year: order_by
}

"""
Boolean expression to filter rows from the table "enrollments". All fields are combined with a logical 'AND'.
"""
input enrollments_bool_exp {
  _and: [enrollments_bool_exp]
  _not: enrollments_bool_exp
  _or: [enrollments_bool_exp]
  campus: bigint_comparison_exp
  campusByCampus: campuses_bool_exp
  fte_ay: bigint_comparison_exp
  totalenrollment_ay: bigint_comparison_exp
  year: bigint_comparison_exp
}

"""
unique or primary key constraints on table "enrollments"
"""
enum enrollments_constraint {
  """unique or primary key constraint"""
  idx_20744_enrollments_pkey

  """unique or primary key constraint"""
  idx_20744_sqlite_autoindex_enrollments_1
}

"""
input type for incrementing integer column in table "enrollments"
"""
input enrollments_inc_input {
  campus: bigint
  fte_ay: bigint
  totalenrollment_ay: bigint
  year: bigint
}

"""
input type for inserting data into table "enrollments"
"""
input enrollments_insert_input {
  campus: bigint
  campusByCampus: campuses_obj_rel_insert_input
  fte_ay: bigint
  totalenrollment_ay: bigint
  year: bigint
}

"""aggregate max on columns"""
type enrollments_max_fields {
  campus: bigint
  fte_ay: bigint
  totalenrollment_ay: bigint
  year: bigint
}

"""
order by max() on columns of table "enrollments"
"""
input enrollments_max_order_by {
  campus: order_by
  fte_ay: order_by
  totalenrollment_ay: order_by
  year: order_by
}

"""aggregate min on columns"""
type enrollments_min_fields {
  campus: bigint
  fte_ay: bigint
  totalenrollment_ay: bigint
  year: bigint
}

"""
order by min() on columns of table "enrollments"
"""
input enrollments_min_order_by {
  campus: order_by
  fte_ay: order_by
  totalenrollment_ay: order_by
  year: order_by
}

"""
response of any mutation on the table "enrollments"
"""
type enrollments_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [enrollments!]!
}

"""
input type for inserting object relation for remote table "enrollments"
"""
input enrollments_obj_rel_insert_input {
  data: enrollments_insert_input!
  on_conflict: enrollments_on_conflict
}

"""
on conflict condition type for table "enrollments"
"""
input enrollments_on_conflict {
  constraint: enrollments_constraint!
  update_columns: [enrollments_update_column!]!
  where: enrollments_bool_exp
}

"""
ordering options when selecting data from "enrollments"
"""
input enrollments_order_by {
  campus: order_by
  campusByCampus: campuses_order_by
  fte_ay: order_by
  totalenrollment_ay: order_by
  year: order_by
}

"""
primary key columns input for table: "enrollments"
"""
input enrollments_pk_columns_input {
  campus: bigint!
  year: bigint!
}

"""
select columns of table "enrollments"
"""
enum enrollments_select_column {
  """column name"""
  campus

  """column name"""
  fte_ay

  """column name"""
  totalenrollment_ay

  """column name"""
  year
}

"""
input type for updating data in table "enrollments"
"""
input enrollments_set_input {
  campus: bigint
  fte_ay: bigint
  totalenrollment_ay: bigint
  year: bigint
}

"""aggregate stddev on columns"""
type enrollments_stddev_fields {
  campus: Float
  fte_ay: Float
  totalenrollment_ay: Float
  year: Float
}

"""
order by stddev() on columns of table "enrollments"
"""
input enrollments_stddev_order_by {
  campus: order_by
  fte_ay: order_by
  totalenrollment_ay: order_by
  year: order_by
}

"""aggregate stddev_pop on columns"""
type enrollments_stddev_pop_fields {
  campus: Float
  fte_ay: Float
  totalenrollment_ay: Float
  year: Float
}

"""
order by stddev_pop() on columns of table "enrollments"
"""
input enrollments_stddev_pop_order_by {
  campus: order_by
  fte_ay: order_by
  totalenrollment_ay: order_by
  year: order_by
}

"""aggregate stddev_samp on columns"""
type enrollments_stddev_samp_fields {
  campus: Float
  fte_ay: Float
  totalenrollment_ay: Float
  year: Float
}

"""
order by stddev_samp() on columns of table "enrollments"
"""
input enrollments_stddev_samp_order_by {
  campus: order_by
  fte_ay: order_by
  totalenrollment_ay: order_by
  year: order_by
}

"""aggregate sum on columns"""
type enrollments_sum_fields {
  campus: bigint
  fte_ay: bigint
  totalenrollment_ay: bigint
  year: bigint
}

"""
order by sum() on columns of table "enrollments"
"""
input enrollments_sum_order_by {
  campus: order_by
  fte_ay: order_by
  totalenrollment_ay: order_by
  year: order_by
}

"""
update columns of table "enrollments"
"""
enum enrollments_update_column {
  """column name"""
  campus

  """column name"""
  fte_ay

  """column name"""
  totalenrollment_ay

  """column name"""
  year
}

"""aggregate var_pop on columns"""
type enrollments_var_pop_fields {
  campus: Float
  fte_ay: Float
  totalenrollment_ay: Float
  year: Float
}

"""
order by var_pop() on columns of table "enrollments"
"""
input enrollments_var_pop_order_by {
  campus: order_by
  fte_ay: order_by
  totalenrollment_ay: order_by
  year: order_by
}

"""aggregate var_samp on columns"""
type enrollments_var_samp_fields {
  campus: Float
  fte_ay: Float
  totalenrollment_ay: Float
  year: Float
}

"""
order by var_samp() on columns of table "enrollments"
"""
input enrollments_var_samp_order_by {
  campus: order_by
  fte_ay: order_by
  totalenrollment_ay: order_by
  year: order_by
}

"""aggregate variance on columns"""
type enrollments_variance_fields {
  campus: Float
  fte_ay: Float
  totalenrollment_ay: Float
  year: Float
}

"""
order by variance() on columns of table "enrollments"
"""
input enrollments_variance_order_by {
  campus: order_by
  fte_ay: order_by
  totalenrollment_ay: order_by
  year: order_by
}

"""
columns and relationships of "faculty"
"""
type faculty {
  campus: bigint

  """An object relationship"""
  campusByCampus: campuses
  faculty: Float
  year: bigint
}

"""
aggregated selection of "faculty"
"""
type faculty_aggregate {
  aggregate: faculty_aggregate_fields
  nodes: [faculty!]!
}

"""
aggregate fields of "faculty"
"""
type faculty_aggregate_fields {
  avg: faculty_avg_fields
  count(columns: [faculty_select_column!], distinct: Boolean): Int
  max: faculty_max_fields
  min: faculty_min_fields
  stddev: faculty_stddev_fields
  stddev_pop: faculty_stddev_pop_fields
  stddev_samp: faculty_stddev_samp_fields
  sum: faculty_sum_fields
  var_pop: faculty_var_pop_fields
  var_samp: faculty_var_samp_fields
  variance: faculty_variance_fields
}

"""
order by aggregate values of table "faculty"
"""
input faculty_aggregate_order_by {
  avg: faculty_avg_order_by
  count: order_by
  max: faculty_max_order_by
  min: faculty_min_order_by
  stddev: faculty_stddev_order_by
  stddev_pop: faculty_stddev_pop_order_by
  stddev_samp: faculty_stddev_samp_order_by
  sum: faculty_sum_order_by
  var_pop: faculty_var_pop_order_by
  var_samp: faculty_var_samp_order_by
  variance: faculty_variance_order_by
}

"""
input type for inserting array relation for remote table "faculty"
"""
input faculty_arr_rel_insert_input {
  data: [faculty_insert_input!]!
}

"""aggregate avg on columns"""
type faculty_avg_fields {
  campus: Float
  faculty: Float
  year: Float
}

"""
order by avg() on columns of table "faculty"
"""
input faculty_avg_order_by {
  campus: order_by
  faculty: order_by
  year: order_by
}

"""
Boolean expression to filter rows from the table "faculty". All fields are combined with a logical 'AND'.
"""
input faculty_bool_exp {
  _and: [faculty_bool_exp]
  _not: faculty_bool_exp
  _or: [faculty_bool_exp]
  campus: bigint_comparison_exp
  campusByCampus: campuses_bool_exp
  faculty: Float_comparison_exp
  year: bigint_comparison_exp
}

"""
input type for incrementing integer column in table "faculty"
"""
input faculty_inc_input {
  campus: bigint
  faculty: Float
  year: bigint
}

"""
input type for inserting data into table "faculty"
"""
input faculty_insert_input {
  campus: bigint
  campusByCampus: campuses_obj_rel_insert_input
  faculty: Float
  year: bigint
}

"""aggregate max on columns"""
type faculty_max_fields {
  campus: bigint
  faculty: Float
  year: bigint
}

"""
order by max() on columns of table "faculty"
"""
input faculty_max_order_by {
  campus: order_by
  faculty: order_by
  year: order_by
}

"""aggregate min on columns"""
type faculty_min_fields {
  campus: bigint
  faculty: Float
  year: bigint
}

"""
order by min() on columns of table "faculty"
"""
input faculty_min_order_by {
  campus: order_by
  faculty: order_by
  year: order_by
}

"""
response of any mutation on the table "faculty"
"""
type faculty_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [faculty!]!
}

"""
input type for inserting object relation for remote table "faculty"
"""
input faculty_obj_rel_insert_input {
  data: faculty_insert_input!
}

"""
ordering options when selecting data from "faculty"
"""
input faculty_order_by {
  campus: order_by
  campusByCampus: campuses_order_by
  faculty: order_by
  year: order_by
}

"""
select columns of table "faculty"
"""
enum faculty_select_column {
  """column name"""
  campus

  """column name"""
  faculty

  """column name"""
  year
}

"""
input type for updating data in table "faculty"
"""
input faculty_set_input {
  campus: bigint
  faculty: Float
  year: bigint
}

"""aggregate stddev on columns"""
type faculty_stddev_fields {
  campus: Float
  faculty: Float
  year: Float
}

"""
order by stddev() on columns of table "faculty"
"""
input faculty_stddev_order_by {
  campus: order_by
  faculty: order_by
  year: order_by
}

"""aggregate stddev_pop on columns"""
type faculty_stddev_pop_fields {
  campus: Float
  faculty: Float
  year: Float
}

"""
order by stddev_pop() on columns of table "faculty"
"""
input faculty_stddev_pop_order_by {
  campus: order_by
  faculty: order_by
  year: order_by
}

"""aggregate stddev_samp on columns"""
type faculty_stddev_samp_fields {
  campus: Float
  faculty: Float
  year: Float
}

"""
order by stddev_samp() on columns of table "faculty"
"""
input faculty_stddev_samp_order_by {
  campus: order_by
  faculty: order_by
  year: order_by
}

"""aggregate sum on columns"""
type faculty_sum_fields {
  campus: bigint
  faculty: Float
  year: bigint
}

"""
order by sum() on columns of table "faculty"
"""
input faculty_sum_order_by {
  campus: order_by
  faculty: order_by
  year: order_by
}

"""aggregate var_pop on columns"""
type faculty_var_pop_fields {
  campus: Float
  faculty: Float
  year: Float
}

"""
order by var_pop() on columns of table "faculty"
"""
input faculty_var_pop_order_by {
  campus: order_by
  faculty: order_by
  year: order_by
}

"""aggregate var_samp on columns"""
type faculty_var_samp_fields {
  campus: Float
  faculty: Float
  year: Float
}

"""
order by var_samp() on columns of table "faculty"
"""
input faculty_var_samp_order_by {
  campus: order_by
  faculty: order_by
  year: order_by
}

"""aggregate variance on columns"""
type faculty_variance_fields {
  campus: Float
  faculty: Float
  year: Float
}

"""
order by variance() on columns of table "faculty"
"""
input faculty_variance_order_by {
  campus: order_by
  faculty: order_by
  year: order_by
}

"""
expression to compare columns of type Float. All fields are combined with logical 'AND'.
"""
input Float_comparison_exp {
  _eq: Float
  _gt: Float
  _gte: Float
  _in: [Float!]
  _is_null: Boolean
  _lt: Float
  _lte: Float
  _neq: Float
  _nin: [Float!]
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "campuses"
  """
  delete_campuses(
    """filter the rows which have to be deleted"""
    where: campuses_bool_exp!
  ): campuses_mutation_response

  """
  delete single row from the table: "campuses"
  """
  delete_campuses_by_pk(id: bigint!): campuses

  """
  delete data from the table: "csu_fees"
  """
  delete_csu_fees(
    """filter the rows which have to be deleted"""
    where: csu_fees_bool_exp!
  ): csu_fees_mutation_response

  """
  delete single row from the table: "csu_fees"
  """
  delete_csu_fees_by_pk(campus: bigint!): csu_fees

  """
  delete data from the table: "degrees"
  """
  delete_degrees(
    """filter the rows which have to be deleted"""
    where: degrees_bool_exp!
  ): degrees_mutation_response

  """
  delete single row from the table: "degrees"
  """
  delete_degrees_by_pk(campus: bigint!, year: bigint!): degrees

  """
  delete data from the table: "discipline_enrollments"
  """
  delete_discipline_enrollments(
    """filter the rows which have to be deleted"""
    where: discipline_enrollments_bool_exp!
  ): discipline_enrollments_mutation_response

  """
  delete single row from the table: "discipline_enrollments"
  """
  delete_discipline_enrollments_by_pk(campus: bigint!, discipline: bigint!): discipline_enrollments

  """
  delete data from the table: "enrollments"
  """
  delete_enrollments(
    """filter the rows which have to be deleted"""
    where: enrollments_bool_exp!
  ): enrollments_mutation_response

  """
  delete single row from the table: "enrollments"
  """
  delete_enrollments_by_pk(campus: bigint!, year: bigint!): enrollments

  """
  delete data from the table: "faculty"
  """
  delete_faculty(
    """filter the rows which have to be deleted"""
    where: faculty_bool_exp!
  ): faculty_mutation_response

  """
  insert data into the table: "campuses"
  """
  insert_campuses(
    """the rows to be inserted"""
    objects: [campuses_insert_input!]!

    """on conflict condition"""
    on_conflict: campuses_on_conflict
  ): campuses_mutation_response

  """
  insert a single row into the table: "campuses"
  """
  insert_campuses_one(
    """the row to be inserted"""
    object: campuses_insert_input!

    """on conflict condition"""
    on_conflict: campuses_on_conflict
  ): campuses

  """
  insert data into the table: "csu_fees"
  """
  insert_csu_fees(
    """the rows to be inserted"""
    objects: [csu_fees_insert_input!]!

    """on conflict condition"""
    on_conflict: csu_fees_on_conflict
  ): csu_fees_mutation_response

  """
  insert a single row into the table: "csu_fees"
  """
  insert_csu_fees_one(
    """the row to be inserted"""
    object: csu_fees_insert_input!

    """on conflict condition"""
    on_conflict: csu_fees_on_conflict
  ): csu_fees

  """
  insert data into the table: "degrees"
  """
  insert_degrees(
    """the rows to be inserted"""
    objects: [degrees_insert_input!]!

    """on conflict condition"""
    on_conflict: degrees_on_conflict
  ): degrees_mutation_response

  """
  insert a single row into the table: "degrees"
  """
  insert_degrees_one(
    """the row to be inserted"""
    object: degrees_insert_input!

    """on conflict condition"""
    on_conflict: degrees_on_conflict
  ): degrees

  """
  insert data into the table: "discipline_enrollments"
  """
  insert_discipline_enrollments(
    """the rows to be inserted"""
    objects: [discipline_enrollments_insert_input!]!

    """on conflict condition"""
    on_conflict: discipline_enrollments_on_conflict
  ): discipline_enrollments_mutation_response

  """
  insert a single row into the table: "discipline_enrollments"
  """
  insert_discipline_enrollments_one(
    """the row to be inserted"""
    object: discipline_enrollments_insert_input!

    """on conflict condition"""
    on_conflict: discipline_enrollments_on_conflict
  ): discipline_enrollments

  """
  insert data into the table: "enrollments"
  """
  insert_enrollments(
    """the rows to be inserted"""
    objects: [enrollments_insert_input!]!

    """on conflict condition"""
    on_conflict: enrollments_on_conflict
  ): enrollments_mutation_response

  """
  insert a single row into the table: "enrollments"
  """
  insert_enrollments_one(
    """the row to be inserted"""
    object: enrollments_insert_input!

    """on conflict condition"""
    on_conflict: enrollments_on_conflict
  ): enrollments

  """
  insert data into the table: "faculty"
  """
  insert_faculty(
    """the rows to be inserted"""
    objects: [faculty_insert_input!]!
  ): faculty_mutation_response

  """
  insert a single row into the table: "faculty"
  """
  insert_faculty_one(
    """the row to be inserted"""
    object: faculty_insert_input!
  ): faculty

  """
  update data of the table: "campuses"
  """
  update_campuses(
    """increments the integer columns with given value of the filtered values"""
    _inc: campuses_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: campuses_set_input

    """filter the rows which have to be updated"""
    where: campuses_bool_exp!
  ): campuses_mutation_response

  """
  update single row of the table: "campuses"
  """
  update_campuses_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: campuses_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: campuses_set_input
    pk_columns: campuses_pk_columns_input!
  ): campuses

  """
  update data of the table: "csu_fees"
  """
  update_csu_fees(
    """increments the integer columns with given value of the filtered values"""
    _inc: csu_fees_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: csu_fees_set_input

    """filter the rows which have to be updated"""
    where: csu_fees_bool_exp!
  ): csu_fees_mutation_response

  """
  update single row of the table: "csu_fees"
  """
  update_csu_fees_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: csu_fees_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: csu_fees_set_input
    pk_columns: csu_fees_pk_columns_input!
  ): csu_fees

  """
  update data of the table: "degrees"
  """
  update_degrees(
    """increments the integer columns with given value of the filtered values"""
    _inc: degrees_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: degrees_set_input

    """filter the rows which have to be updated"""
    where: degrees_bool_exp!
  ): degrees_mutation_response

  """
  update single row of the table: "degrees"
  """
  update_degrees_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: degrees_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: degrees_set_input
    pk_columns: degrees_pk_columns_input!
  ): degrees

  """
  update data of the table: "discipline_enrollments"
  """
  update_discipline_enrollments(
    """increments the integer columns with given value of the filtered values"""
    _inc: discipline_enrollments_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: discipline_enrollments_set_input

    """filter the rows which have to be updated"""
    where: discipline_enrollments_bool_exp!
  ): discipline_enrollments_mutation_response

  """
  update single row of the table: "discipline_enrollments"
  """
  update_discipline_enrollments_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: discipline_enrollments_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: discipline_enrollments_set_input
    pk_columns: discipline_enrollments_pk_columns_input!
  ): discipline_enrollments

  """
  update data of the table: "enrollments"
  """
  update_enrollments(
    """increments the integer columns with given value of the filtered values"""
    _inc: enrollments_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: enrollments_set_input

    """filter the rows which have to be updated"""
    where: enrollments_bool_exp!
  ): enrollments_mutation_response

  """
  update single row of the table: "enrollments"
  """
  update_enrollments_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: enrollments_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: enrollments_set_input
    pk_columns: enrollments_pk_columns_input!
  ): enrollments

  """
  update data of the table: "faculty"
  """
  update_faculty(
    """increments the integer columns with given value of the filtered values"""
    _inc: faculty_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: faculty_set_input

    """filter the rows which have to be updated"""
    where: faculty_bool_exp!
  ): faculty_mutation_response
}

"""column ordering options"""
enum order_by {
  """in the ascending order, nulls last"""
  asc

  """in the ascending order, nulls first"""
  asc_nulls_first

  """in the ascending order, nulls last"""
  asc_nulls_last

  """in the descending order, nulls first"""
  desc

  """in the descending order, nulls first"""
  desc_nulls_first

  """in the descending order, nulls last"""
  desc_nulls_last
}

"""query root"""
type query_root {
  """
  fetch data from the table: "campuses"
  """
  campuses(
    """distinct select on columns"""
    distinct_on: [campuses_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [campuses_order_by!]

    """filter the rows returned"""
    where: campuses_bool_exp
  ): [campuses!]!

  """
  fetch aggregated fields from the table: "campuses"
  """
  campuses_aggregate(
    """distinct select on columns"""
    distinct_on: [campuses_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [campuses_order_by!]

    """filter the rows returned"""
    where: campuses_bool_exp
  ): campuses_aggregate!

  """fetch data from the table: "campuses" using primary key columns"""
  campuses_by_pk(id: bigint!): campuses

  """
  fetch data from the table: "csu_fees"
  """
  csu_fees(
    """distinct select on columns"""
    distinct_on: [csu_fees_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [csu_fees_order_by!]

    """filter the rows returned"""
    where: csu_fees_bool_exp
  ): [csu_fees!]!

  """
  fetch aggregated fields from the table: "csu_fees"
  """
  csu_fees_aggregate(
    """distinct select on columns"""
    distinct_on: [csu_fees_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [csu_fees_order_by!]

    """filter the rows returned"""
    where: csu_fees_bool_exp
  ): csu_fees_aggregate!

  """fetch data from the table: "csu_fees" using primary key columns"""
  csu_fees_by_pk(campus: bigint!): csu_fees

  """
  fetch data from the table: "degrees"
  """
  degrees(
    """distinct select on columns"""
    distinct_on: [degrees_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [degrees_order_by!]

    """filter the rows returned"""
    where: degrees_bool_exp
  ): [degrees!]!

  """
  fetch aggregated fields from the table: "degrees"
  """
  degrees_aggregate(
    """distinct select on columns"""
    distinct_on: [degrees_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [degrees_order_by!]

    """filter the rows returned"""
    where: degrees_bool_exp
  ): degrees_aggregate!

  """fetch data from the table: "degrees" using primary key columns"""
  degrees_by_pk(campus: bigint!, year: bigint!): degrees

  """
  fetch data from the table: "discipline_enrollments"
  """
  discipline_enrollments(
    """distinct select on columns"""
    distinct_on: [discipline_enrollments_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [discipline_enrollments_order_by!]

    """filter the rows returned"""
    where: discipline_enrollments_bool_exp
  ): [discipline_enrollments!]!

  """
  fetch aggregated fields from the table: "discipline_enrollments"
  """
  discipline_enrollments_aggregate(
    """distinct select on columns"""
    distinct_on: [discipline_enrollments_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [discipline_enrollments_order_by!]

    """filter the rows returned"""
    where: discipline_enrollments_bool_exp
  ): discipline_enrollments_aggregate!

  """
  fetch data from the table: "discipline_enrollments" using primary key columns
  """
  discipline_enrollments_by_pk(campus: bigint!, discipline: bigint!): discipline_enrollments

  """
  fetch data from the table: "enrollments"
  """
  enrollments(
    """distinct select on columns"""
    distinct_on: [enrollments_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [enrollments_order_by!]

    """filter the rows returned"""
    where: enrollments_bool_exp
  ): [enrollments!]!

  """
  fetch aggregated fields from the table: "enrollments"
  """
  enrollments_aggregate(
    """distinct select on columns"""
    distinct_on: [enrollments_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [enrollments_order_by!]

    """filter the rows returned"""
    where: enrollments_bool_exp
  ): enrollments_aggregate!

  """fetch data from the table: "enrollments" using primary key columns"""
  enrollments_by_pk(campus: bigint!, year: bigint!): enrollments

  """
  fetch data from the table: "faculty"
  """
  faculty(
    """distinct select on columns"""
    distinct_on: [faculty_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [faculty_order_by!]

    """filter the rows returned"""
    where: faculty_bool_exp
  ): [faculty!]!

  """
  fetch aggregated fields from the table: "faculty"
  """
  faculty_aggregate(
    """distinct select on columns"""
    distinct_on: [faculty_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [faculty_order_by!]

    """filter the rows returned"""
    where: faculty_bool_exp
  ): faculty_aggregate!
}

"""
expression to compare columns of type String. All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String
  _ilike: String
  _in: [String!]
  _is_null: Boolean
  _like: String
  _lt: String
  _lte: String
  _neq: String
  _nilike: String
  _nin: [String!]
  _nlike: String
  _nsimilar: String
  _similar: String
}

"""subscription root"""
type subscription_root {
  """
  fetch data from the table: "campuses"
  """
  campuses(
    """distinct select on columns"""
    distinct_on: [campuses_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [campuses_order_by!]

    """filter the rows returned"""
    where: campuses_bool_exp
  ): [campuses!]!

  """
  fetch aggregated fields from the table: "campuses"
  """
  campuses_aggregate(
    """distinct select on columns"""
    distinct_on: [campuses_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [campuses_order_by!]

    """filter the rows returned"""
    where: campuses_bool_exp
  ): campuses_aggregate!

  """fetch data from the table: "campuses" using primary key columns"""
  campuses_by_pk(id: bigint!): campuses

  """
  fetch data from the table: "csu_fees"
  """
  csu_fees(
    """distinct select on columns"""
    distinct_on: [csu_fees_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [csu_fees_order_by!]

    """filter the rows returned"""
    where: csu_fees_bool_exp
  ): [csu_fees!]!

  """
  fetch aggregated fields from the table: "csu_fees"
  """
  csu_fees_aggregate(
    """distinct select on columns"""
    distinct_on: [csu_fees_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [csu_fees_order_by!]

    """filter the rows returned"""
    where: csu_fees_bool_exp
  ): csu_fees_aggregate!

  """fetch data from the table: "csu_fees" using primary key columns"""
  csu_fees_by_pk(campus: bigint!): csu_fees

  """
  fetch data from the table: "degrees"
  """
  degrees(
    """distinct select on columns"""
    distinct_on: [degrees_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [degrees_order_by!]

    """filter the rows returned"""
    where: degrees_bool_exp
  ): [degrees!]!

  """
  fetch aggregated fields from the table: "degrees"
  """
  degrees_aggregate(
    """distinct select on columns"""
    distinct_on: [degrees_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [degrees_order_by!]

    """filter the rows returned"""
    where: degrees_bool_exp
  ): degrees_aggregate!

  """fetch data from the table: "degrees" using primary key columns"""
  degrees_by_pk(campus: bigint!, year: bigint!): degrees

  """
  fetch data from the table: "discipline_enrollments"
  """
  discipline_enrollments(
    """distinct select on columns"""
    distinct_on: [discipline_enrollments_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [discipline_enrollments_order_by!]

    """filter the rows returned"""
    where: discipline_enrollments_bool_exp
  ): [discipline_enrollments!]!

  """
  fetch aggregated fields from the table: "discipline_enrollments"
  """
  discipline_enrollments_aggregate(
    """distinct select on columns"""
    distinct_on: [discipline_enrollments_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [discipline_enrollments_order_by!]

    """filter the rows returned"""
    where: discipline_enrollments_bool_exp
  ): discipline_enrollments_aggregate!

  """
  fetch data from the table: "discipline_enrollments" using primary key columns
  """
  discipline_enrollments_by_pk(campus: bigint!, discipline: bigint!): discipline_enrollments

  """
  fetch data from the table: "enrollments"
  """
  enrollments(
    """distinct select on columns"""
    distinct_on: [enrollments_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [enrollments_order_by!]

    """filter the rows returned"""
    where: enrollments_bool_exp
  ): [enrollments!]!

  """
  fetch aggregated fields from the table: "enrollments"
  """
  enrollments_aggregate(
    """distinct select on columns"""
    distinct_on: [enrollments_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [enrollments_order_by!]

    """filter the rows returned"""
    where: enrollments_bool_exp
  ): enrollments_aggregate!

  """fetch data from the table: "enrollments" using primary key columns"""
  enrollments_by_pk(campus: bigint!, year: bigint!): enrollments

  """
  fetch data from the table: "faculty"
  """
  faculty(
    """distinct select on columns"""
    distinct_on: [faculty_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [faculty_order_by!]

    """filter the rows returned"""
    where: faculty_bool_exp
  ): [faculty!]!

  """
  fetch aggregated fields from the table: "faculty"
  """
  faculty_aggregate(
    """distinct select on columns"""
    distinct_on: [faculty_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [faculty_order_by!]

    """filter the rows returned"""
    where: faculty_bool_exp
  ): faculty_aggregate!
}
