schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""
Direct the client to resolve this field locally, either from the cache or local resolvers.
"""
directive @client(
  """
  When true, the client will never use the cache for this value. See
  https://www.apollographql.com/docs/react/essentials/local-state/#forcing-resolvers-with-clientalways-true
  """
  always: Boolean
) on FIELD | FRAGMENT_DEFINITION | INLINE_FRAGMENT

"""
Export this locally resolved field as a variable to be used in the remainder of this query. See
https://www.apollographql.com/docs/react/essentials/local-state/#using-client-fields-as-variables
"""
directive @export(
  """The variable name to export this field as."""
  as: String!
) on FIELD

"""
Specify a custom store key for this result. See
https://www.apollographql.com/docs/react/advanced/caching/#the-connection-directive
"""
directive @connection(
  """Specify the store key."""
  key: String!

  """
  An array of query argument names to include in the generated custom store key.
  """
  filter: [String!]
) on FIELD

"""
columns and relationships of "captain"
"""
type captain {
  age: String
  captain_id: Int
  class: String
  name: String
  rank: String

  """An object relationship"""
  ship: ship
  ship_id: Int
}

"""
aggregated selection of "captain"
"""
type captain_aggregate {
  aggregate: captain_aggregate_fields
  nodes: [captain!]!
}

"""
aggregate fields of "captain"
"""
type captain_aggregate_fields {
  avg: captain_avg_fields
  count(columns: [captain_select_column!], distinct: Boolean): Int
  max: captain_max_fields
  min: captain_min_fields
  stddev: captain_stddev_fields
  stddev_pop: captain_stddev_pop_fields
  stddev_samp: captain_stddev_samp_fields
  sum: captain_sum_fields
  var_pop: captain_var_pop_fields
  var_samp: captain_var_samp_fields
  variance: captain_variance_fields
}

"""
order by aggregate values of table "captain"
"""
input captain_aggregate_order_by {
  avg: captain_avg_order_by
  count: order_by
  max: captain_max_order_by
  min: captain_min_order_by
  stddev: captain_stddev_order_by
  stddev_pop: captain_stddev_pop_order_by
  stddev_samp: captain_stddev_samp_order_by
  sum: captain_sum_order_by
  var_pop: captain_var_pop_order_by
  var_samp: captain_var_samp_order_by
  variance: captain_variance_order_by
}

"""
input type for inserting array relation for remote table "captain"
"""
input captain_arr_rel_insert_input {
  data: [captain_insert_input!]!
  on_conflict: captain_on_conflict
}

"""aggregate avg on columns"""
type captain_avg_fields {
  captain_id: Float
  ship_id: Float
}

"""
order by avg() on columns of table "captain"
"""
input captain_avg_order_by {
  captain_id: order_by
  ship_id: order_by
}

"""
Boolean expression to filter rows from the table "captain". All fields are combined with a logical 'AND'.
"""
input captain_bool_exp {
  _and: [captain_bool_exp]
  _not: captain_bool_exp
  _or: [captain_bool_exp]
  age: String_comparison_exp
  captain_id: Int_comparison_exp
  class: String_comparison_exp
  name: String_comparison_exp
  rank: String_comparison_exp
  ship: ship_bool_exp
  ship_id: Int_comparison_exp
}

"""
unique or primary key constraints on table "captain"
"""
enum captain_constraint {
  """unique or primary key constraint"""
  idx_18294_sqlite_autoindex_captain_1
}

"""
input type for incrementing integer column in table "captain"
"""
input captain_inc_input {
  captain_id: Int
  ship_id: Int
}

"""
input type for inserting data into table "captain"
"""
input captain_insert_input {
  age: String
  captain_id: Int
  class: String
  name: String
  rank: String
  ship: ship_obj_rel_insert_input
  ship_id: Int
}

"""aggregate max on columns"""
type captain_max_fields {
  age: String
  captain_id: Int
  class: String
  name: String
  rank: String
  ship_id: Int
}

"""
order by max() on columns of table "captain"
"""
input captain_max_order_by {
  age: order_by
  captain_id: order_by
  class: order_by
  name: order_by
  rank: order_by
  ship_id: order_by
}

"""aggregate min on columns"""
type captain_min_fields {
  age: String
  captain_id: Int
  class: String
  name: String
  rank: String
  ship_id: Int
}

"""
order by min() on columns of table "captain"
"""
input captain_min_order_by {
  age: order_by
  captain_id: order_by
  class: order_by
  name: order_by
  rank: order_by
  ship_id: order_by
}

"""
response of any mutation on the table "captain"
"""
type captain_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [captain!]!
}

"""
input type for inserting object relation for remote table "captain"
"""
input captain_obj_rel_insert_input {
  data: captain_insert_input!
  on_conflict: captain_on_conflict
}

"""
on conflict condition type for table "captain"
"""
input captain_on_conflict {
  constraint: captain_constraint!
  update_columns: [captain_update_column!]!
  where: captain_bool_exp
}

"""
ordering options when selecting data from "captain"
"""
input captain_order_by {
  age: order_by
  captain_id: order_by
  class: order_by
  name: order_by
  rank: order_by
  ship: ship_order_by
  ship_id: order_by
}

"""
select columns of table "captain"
"""
enum captain_select_column {
  """column name"""
  age

  """column name"""
  captain_id

  """column name"""
  class

  """column name"""
  name

  """column name"""
  rank

  """column name"""
  ship_id
}

"""
input type for updating data in table "captain"
"""
input captain_set_input {
  age: String
  captain_id: Int
  class: String
  name: String
  rank: String
  ship_id: Int
}

"""aggregate stddev on columns"""
type captain_stddev_fields {
  captain_id: Float
  ship_id: Float
}

"""
order by stddev() on columns of table "captain"
"""
input captain_stddev_order_by {
  captain_id: order_by
  ship_id: order_by
}

"""aggregate stddev_pop on columns"""
type captain_stddev_pop_fields {
  captain_id: Float
  ship_id: Float
}

"""
order by stddev_pop() on columns of table "captain"
"""
input captain_stddev_pop_order_by {
  captain_id: order_by
  ship_id: order_by
}

"""aggregate stddev_samp on columns"""
type captain_stddev_samp_fields {
  captain_id: Float
  ship_id: Float
}

"""
order by stddev_samp() on columns of table "captain"
"""
input captain_stddev_samp_order_by {
  captain_id: order_by
  ship_id: order_by
}

"""aggregate sum on columns"""
type captain_sum_fields {
  captain_id: Int
  ship_id: Int
}

"""
order by sum() on columns of table "captain"
"""
input captain_sum_order_by {
  captain_id: order_by
  ship_id: order_by
}

"""
update columns of table "captain"
"""
enum captain_update_column {
  """column name"""
  age

  """column name"""
  captain_id

  """column name"""
  class

  """column name"""
  name

  """column name"""
  rank

  """column name"""
  ship_id
}

"""aggregate var_pop on columns"""
type captain_var_pop_fields {
  captain_id: Float
  ship_id: Float
}

"""
order by var_pop() on columns of table "captain"
"""
input captain_var_pop_order_by {
  captain_id: order_by
  ship_id: order_by
}

"""aggregate var_samp on columns"""
type captain_var_samp_fields {
  captain_id: Float
  ship_id: Float
}

"""
order by var_samp() on columns of table "captain"
"""
input captain_var_samp_order_by {
  captain_id: order_by
  ship_id: order_by
}

"""aggregate variance on columns"""
type captain_variance_fields {
  captain_id: Float
  ship_id: Float
}

"""
order by variance() on columns of table "captain"
"""
input captain_variance_order_by {
  captain_id: order_by
  ship_id: order_by
}

"""
expression to compare columns of type Float. All fields are combined with logical 'AND'.
"""
input Float_comparison_exp {
  _eq: Float
  _gt: Float
  _gte: Float
  _in: [Float!]
  _is_null: Boolean
  _lt: Float
  _lte: Float
  _neq: Float
  _nin: [Float!]
}

"""
expression to compare columns of type Int. All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "captain"
  """
  delete_captain(
    """filter the rows which have to be deleted"""
    where: captain_bool_exp!
  ): captain_mutation_response

  """
  delete data from the table: "ship"
  """
  delete_ship(
    """filter the rows which have to be deleted"""
    where: ship_bool_exp!
  ): ship_mutation_response

  """
  insert data into the table: "captain"
  """
  insert_captain(
    """the rows to be inserted"""
    objects: [captain_insert_input!]!

    """on conflict condition"""
    on_conflict: captain_on_conflict
  ): captain_mutation_response

  """
  insert a single row into the table: "captain"
  """
  insert_captain_one(
    """the row to be inserted"""
    object: captain_insert_input!

    """on conflict condition"""
    on_conflict: captain_on_conflict
  ): captain

  """
  insert data into the table: "ship"
  """
  insert_ship(
    """the rows to be inserted"""
    objects: [ship_insert_input!]!

    """on conflict condition"""
    on_conflict: ship_on_conflict
  ): ship_mutation_response

  """
  insert a single row into the table: "ship"
  """
  insert_ship_one(
    """the row to be inserted"""
    object: ship_insert_input!

    """on conflict condition"""
    on_conflict: ship_on_conflict
  ): ship

  """
  update data of the table: "captain"
  """
  update_captain(
    """increments the integer columns with given value of the filtered values"""
    _inc: captain_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: captain_set_input

    """filter the rows which have to be updated"""
    where: captain_bool_exp!
  ): captain_mutation_response

  """
  update data of the table: "ship"
  """
  update_ship(
    """increments the integer columns with given value of the filtered values"""
    _inc: ship_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: ship_set_input

    """filter the rows which have to be updated"""
    where: ship_bool_exp!
  ): ship_mutation_response
}

"""column ordering options"""
enum order_by {
  """in the ascending order, nulls last"""
  asc

  """in the ascending order, nulls first"""
  asc_nulls_first

  """in the ascending order, nulls last"""
  asc_nulls_last

  """in the descending order, nulls first"""
  desc

  """in the descending order, nulls first"""
  desc_nulls_first

  """in the descending order, nulls last"""
  desc_nulls_last
}

"""query root"""
type query_root {
  """
  fetch data from the table: "captain"
  """
  captain(
    """distinct select on columns"""
    distinct_on: [captain_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [captain_order_by!]

    """filter the rows returned"""
    where: captain_bool_exp
  ): [captain!]!

  """
  fetch aggregated fields from the table: "captain"
  """
  captain_aggregate(
    """distinct select on columns"""
    distinct_on: [captain_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [captain_order_by!]

    """filter the rows returned"""
    where: captain_bool_exp
  ): captain_aggregate!

  """
  fetch data from the table: "ship"
  """
  ship(
    """distinct select on columns"""
    distinct_on: [ship_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [ship_order_by!]

    """filter the rows returned"""
    where: ship_bool_exp
  ): [ship!]!

  """
  fetch aggregated fields from the table: "ship"
  """
  ship_aggregate(
    """distinct select on columns"""
    distinct_on: [ship_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [ship_order_by!]

    """filter the rows returned"""
    where: ship_bool_exp
  ): ship_aggregate!
}

"""
columns and relationships of "ship"
"""
type ship {
  built_year: Float

  """An array relationship"""
  captains(
    """distinct select on columns"""
    distinct_on: [captain_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [captain_order_by!]

    """filter the rows returned"""
    where: captain_bool_exp
  ): [captain!]!

  """An aggregated array relationship"""
  captains_aggregate(
    """distinct select on columns"""
    distinct_on: [captain_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [captain_order_by!]

    """filter the rows returned"""
    where: captain_bool_exp
  ): captain_aggregate!
  class: String
  flag: String
  name: String
  ship_id: Int
  type: String
}

"""
aggregated selection of "ship"
"""
type ship_aggregate {
  aggregate: ship_aggregate_fields
  nodes: [ship!]!
}

"""
aggregate fields of "ship"
"""
type ship_aggregate_fields {
  avg: ship_avg_fields
  count(columns: [ship_select_column!], distinct: Boolean): Int
  max: ship_max_fields
  min: ship_min_fields
  stddev: ship_stddev_fields
  stddev_pop: ship_stddev_pop_fields
  stddev_samp: ship_stddev_samp_fields
  sum: ship_sum_fields
  var_pop: ship_var_pop_fields
  var_samp: ship_var_samp_fields
  variance: ship_variance_fields
}

"""
order by aggregate values of table "ship"
"""
input ship_aggregate_order_by {
  avg: ship_avg_order_by
  count: order_by
  max: ship_max_order_by
  min: ship_min_order_by
  stddev: ship_stddev_order_by
  stddev_pop: ship_stddev_pop_order_by
  stddev_samp: ship_stddev_samp_order_by
  sum: ship_sum_order_by
  var_pop: ship_var_pop_order_by
  var_samp: ship_var_samp_order_by
  variance: ship_variance_order_by
}

"""
input type for inserting array relation for remote table "ship"
"""
input ship_arr_rel_insert_input {
  data: [ship_insert_input!]!
  on_conflict: ship_on_conflict
}

"""aggregate avg on columns"""
type ship_avg_fields {
  built_year: Float
  ship_id: Float
}

"""
order by avg() on columns of table "ship"
"""
input ship_avg_order_by {
  built_year: order_by
  ship_id: order_by
}

"""
Boolean expression to filter rows from the table "ship". All fields are combined with a logical 'AND'.
"""
input ship_bool_exp {
  _and: [ship_bool_exp]
  _not: ship_bool_exp
  _or: [ship_bool_exp]
  built_year: Float_comparison_exp
  captains: captain_bool_exp
  class: String_comparison_exp
  flag: String_comparison_exp
  name: String_comparison_exp
  ship_id: Int_comparison_exp
  type: String_comparison_exp
}

"""
unique or primary key constraints on table "ship"
"""
enum ship_constraint {
  """unique or primary key constraint"""
  idx_18300_sqlite_autoindex_ship_1
}

"""
input type for incrementing integer column in table "ship"
"""
input ship_inc_input {
  built_year: Float
  ship_id: Int
}

"""
input type for inserting data into table "ship"
"""
input ship_insert_input {
  built_year: Float
  captains: captain_arr_rel_insert_input
  class: String
  flag: String
  name: String
  ship_id: Int
  type: String
}

"""aggregate max on columns"""
type ship_max_fields {
  built_year: Float
  class: String
  flag: String
  name: String
  ship_id: Int
  type: String
}

"""
order by max() on columns of table "ship"
"""
input ship_max_order_by {
  built_year: order_by
  class: order_by
  flag: order_by
  name: order_by
  ship_id: order_by
  type: order_by
}

"""aggregate min on columns"""
type ship_min_fields {
  built_year: Float
  class: String
  flag: String
  name: String
  ship_id: Int
  type: String
}

"""
order by min() on columns of table "ship"
"""
input ship_min_order_by {
  built_year: order_by
  class: order_by
  flag: order_by
  name: order_by
  ship_id: order_by
  type: order_by
}

"""
response of any mutation on the table "ship"
"""
type ship_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [ship!]!
}

"""
input type for inserting object relation for remote table "ship"
"""
input ship_obj_rel_insert_input {
  data: ship_insert_input!
  on_conflict: ship_on_conflict
}

"""
on conflict condition type for table "ship"
"""
input ship_on_conflict {
  constraint: ship_constraint!
  update_columns: [ship_update_column!]!
  where: ship_bool_exp
}

"""
ordering options when selecting data from "ship"
"""
input ship_order_by {
  built_year: order_by
  captains_aggregate: captain_aggregate_order_by
  class: order_by
  flag: order_by
  name: order_by
  ship_id: order_by
  type: order_by
}

"""
select columns of table "ship"
"""
enum ship_select_column {
  """column name"""
  built_year

  """column name"""
  class

  """column name"""
  flag

  """column name"""
  name

  """column name"""
  ship_id

  """column name"""
  type
}

"""
input type for updating data in table "ship"
"""
input ship_set_input {
  built_year: Float
  class: String
  flag: String
  name: String
  ship_id: Int
  type: String
}

"""aggregate stddev on columns"""
type ship_stddev_fields {
  built_year: Float
  ship_id: Float
}

"""
order by stddev() on columns of table "ship"
"""
input ship_stddev_order_by {
  built_year: order_by
  ship_id: order_by
}

"""aggregate stddev_pop on columns"""
type ship_stddev_pop_fields {
  built_year: Float
  ship_id: Float
}

"""
order by stddev_pop() on columns of table "ship"
"""
input ship_stddev_pop_order_by {
  built_year: order_by
  ship_id: order_by
}

"""aggregate stddev_samp on columns"""
type ship_stddev_samp_fields {
  built_year: Float
  ship_id: Float
}

"""
order by stddev_samp() on columns of table "ship"
"""
input ship_stddev_samp_order_by {
  built_year: order_by
  ship_id: order_by
}

"""aggregate sum on columns"""
type ship_sum_fields {
  built_year: Float
  ship_id: Int
}

"""
order by sum() on columns of table "ship"
"""
input ship_sum_order_by {
  built_year: order_by
  ship_id: order_by
}

"""
update columns of table "ship"
"""
enum ship_update_column {
  """column name"""
  built_year

  """column name"""
  class

  """column name"""
  flag

  """column name"""
  name

  """column name"""
  ship_id

  """column name"""
  type
}

"""aggregate var_pop on columns"""
type ship_var_pop_fields {
  built_year: Float
  ship_id: Float
}

"""
order by var_pop() on columns of table "ship"
"""
input ship_var_pop_order_by {
  built_year: order_by
  ship_id: order_by
}

"""aggregate var_samp on columns"""
type ship_var_samp_fields {
  built_year: Float
  ship_id: Float
}

"""
order by var_samp() on columns of table "ship"
"""
input ship_var_samp_order_by {
  built_year: order_by
  ship_id: order_by
}

"""aggregate variance on columns"""
type ship_variance_fields {
  built_year: Float
  ship_id: Float
}

"""
order by variance() on columns of table "ship"
"""
input ship_variance_order_by {
  built_year: order_by
  ship_id: order_by
}

"""
expression to compare columns of type String. All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String
  _ilike: String
  _in: [String!]
  _is_null: Boolean
  _like: String
  _lt: String
  _lte: String
  _neq: String
  _nilike: String
  _nin: [String!]
  _nlike: String
  _nsimilar: String
  _similar: String
}

"""subscription root"""
type subscription_root {
  """
  fetch data from the table: "captain"
  """
  captain(
    """distinct select on columns"""
    distinct_on: [captain_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [captain_order_by!]

    """filter the rows returned"""
    where: captain_bool_exp
  ): [captain!]!

  """
  fetch aggregated fields from the table: "captain"
  """
  captain_aggregate(
    """distinct select on columns"""
    distinct_on: [captain_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [captain_order_by!]

    """filter the rows returned"""
    where: captain_bool_exp
  ): captain_aggregate!

  """
  fetch data from the table: "ship"
  """
  ship(
    """distinct select on columns"""
    distinct_on: [ship_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [ship_order_by!]

    """filter the rows returned"""
    where: ship_bool_exp
  ): [ship!]!

  """
  fetch aggregated fields from the table: "ship"
  """
  ship_aggregate(
    """distinct select on columns"""
    distinct_on: [ship_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [ship_order_by!]

    """filter the rows returned"""
    where: ship_bool_exp
  ): ship_aggregate!
}
