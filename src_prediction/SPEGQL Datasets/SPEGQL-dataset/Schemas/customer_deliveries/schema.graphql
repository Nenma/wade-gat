schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""
Direct the client to resolve this field locally, either from the cache or local resolvers.
"""
directive @client(
  """
  When true, the client will never use the cache for this value. See
  https://www.apollographql.com/docs/react/essentials/local-state/#forcing-resolvers-with-clientalways-true
  """
  always: Boolean
) on FIELD | FRAGMENT_DEFINITION | INLINE_FRAGMENT

"""
Export this locally resolved field as a variable to be used in the remainder of this query. See
https://www.apollographql.com/docs/react/essentials/local-state/#using-client-fields-as-variables
"""
directive @export(
  """The variable name to export this field as."""
  as: String!
) on FIELD

"""
Specify a custom store key for this result. See
https://www.apollographql.com/docs/react/advanced/caching/#the-connection-directive
"""
directive @connection(
  """Specify the store key."""
  key: String!

  """
  An array of query argument names to include in the generated custom store key.
  """
  filter: [String!]
) on FIELD

"""
columns and relationships of "actual_order_products"
"""
type actual_order_products {
  """An object relationship"""
  actual_order: actual_orders
  actual_order_id: bigint

  """An object relationship"""
  product: products
  product_id: bigint
}

"""
aggregated selection of "actual_order_products"
"""
type actual_order_products_aggregate {
  aggregate: actual_order_products_aggregate_fields
  nodes: [actual_order_products!]!
}

"""
aggregate fields of "actual_order_products"
"""
type actual_order_products_aggregate_fields {
  avg: actual_order_products_avg_fields
  count(columns: [actual_order_products_select_column!], distinct: Boolean): Int
  max: actual_order_products_max_fields
  min: actual_order_products_min_fields
  stddev: actual_order_products_stddev_fields
  stddev_pop: actual_order_products_stddev_pop_fields
  stddev_samp: actual_order_products_stddev_samp_fields
  sum: actual_order_products_sum_fields
  var_pop: actual_order_products_var_pop_fields
  var_samp: actual_order_products_var_samp_fields
  variance: actual_order_products_variance_fields
}

"""
order by aggregate values of table "actual_order_products"
"""
input actual_order_products_aggregate_order_by {
  avg: actual_order_products_avg_order_by
  count: order_by
  max: actual_order_products_max_order_by
  min: actual_order_products_min_order_by
  stddev: actual_order_products_stddev_order_by
  stddev_pop: actual_order_products_stddev_pop_order_by
  stddev_samp: actual_order_products_stddev_samp_order_by
  sum: actual_order_products_sum_order_by
  var_pop: actual_order_products_var_pop_order_by
  var_samp: actual_order_products_var_samp_order_by
  variance: actual_order_products_variance_order_by
}

"""
input type for inserting array relation for remote table "actual_order_products"
"""
input actual_order_products_arr_rel_insert_input {
  data: [actual_order_products_insert_input!]!
}

"""aggregate avg on columns"""
type actual_order_products_avg_fields {
  actual_order_id: Float
  product_id: Float
}

"""
order by avg() on columns of table "actual_order_products"
"""
input actual_order_products_avg_order_by {
  actual_order_id: order_by
  product_id: order_by
}

"""
Boolean expression to filter rows from the table "actual_order_products". All fields are combined with a logical 'AND'.
"""
input actual_order_products_bool_exp {
  _and: [actual_order_products_bool_exp]
  _not: actual_order_products_bool_exp
  _or: [actual_order_products_bool_exp]
  actual_order: actual_orders_bool_exp
  actual_order_id: bigint_comparison_exp
  product: products_bool_exp
  product_id: bigint_comparison_exp
}

"""
input type for incrementing integer column in table "actual_order_products"
"""
input actual_order_products_inc_input {
  actual_order_id: bigint
  product_id: bigint
}

"""
input type for inserting data into table "actual_order_products"
"""
input actual_order_products_insert_input {
  actual_order: actual_orders_obj_rel_insert_input
  actual_order_id: bigint
  product: products_obj_rel_insert_input
  product_id: bigint
}

"""aggregate max on columns"""
type actual_order_products_max_fields {
  actual_order_id: bigint
  product_id: bigint
}

"""
order by max() on columns of table "actual_order_products"
"""
input actual_order_products_max_order_by {
  actual_order_id: order_by
  product_id: order_by
}

"""aggregate min on columns"""
type actual_order_products_min_fields {
  actual_order_id: bigint
  product_id: bigint
}

"""
order by min() on columns of table "actual_order_products"
"""
input actual_order_products_min_order_by {
  actual_order_id: order_by
  product_id: order_by
}

"""
response of any mutation on the table "actual_order_products"
"""
type actual_order_products_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [actual_order_products!]!
}

"""
input type for inserting object relation for remote table "actual_order_products"
"""
input actual_order_products_obj_rel_insert_input {
  data: actual_order_products_insert_input!
}

"""
ordering options when selecting data from "actual_order_products"
"""
input actual_order_products_order_by {
  actual_order: actual_orders_order_by
  actual_order_id: order_by
  product: products_order_by
  product_id: order_by
}

"""
select columns of table "actual_order_products"
"""
enum actual_order_products_select_column {
  """column name"""
  actual_order_id

  """column name"""
  product_id
}

"""
input type for updating data in table "actual_order_products"
"""
input actual_order_products_set_input {
  actual_order_id: bigint
  product_id: bigint
}

"""aggregate stddev on columns"""
type actual_order_products_stddev_fields {
  actual_order_id: Float
  product_id: Float
}

"""
order by stddev() on columns of table "actual_order_products"
"""
input actual_order_products_stddev_order_by {
  actual_order_id: order_by
  product_id: order_by
}

"""aggregate stddev_pop on columns"""
type actual_order_products_stddev_pop_fields {
  actual_order_id: Float
  product_id: Float
}

"""
order by stddev_pop() on columns of table "actual_order_products"
"""
input actual_order_products_stddev_pop_order_by {
  actual_order_id: order_by
  product_id: order_by
}

"""aggregate stddev_samp on columns"""
type actual_order_products_stddev_samp_fields {
  actual_order_id: Float
  product_id: Float
}

"""
order by stddev_samp() on columns of table "actual_order_products"
"""
input actual_order_products_stddev_samp_order_by {
  actual_order_id: order_by
  product_id: order_by
}

"""aggregate sum on columns"""
type actual_order_products_sum_fields {
  actual_order_id: bigint
  product_id: bigint
}

"""
order by sum() on columns of table "actual_order_products"
"""
input actual_order_products_sum_order_by {
  actual_order_id: order_by
  product_id: order_by
}

"""aggregate var_pop on columns"""
type actual_order_products_var_pop_fields {
  actual_order_id: Float
  product_id: Float
}

"""
order by var_pop() on columns of table "actual_order_products"
"""
input actual_order_products_var_pop_order_by {
  actual_order_id: order_by
  product_id: order_by
}

"""aggregate var_samp on columns"""
type actual_order_products_var_samp_fields {
  actual_order_id: Float
  product_id: Float
}

"""
order by var_samp() on columns of table "actual_order_products"
"""
input actual_order_products_var_samp_order_by {
  actual_order_id: order_by
  product_id: order_by
}

"""aggregate variance on columns"""
type actual_order_products_variance_fields {
  actual_order_id: Float
  product_id: Float
}

"""
order by variance() on columns of table "actual_order_products"
"""
input actual_order_products_variance_order_by {
  actual_order_id: order_by
  product_id: order_by
}

"""
columns and relationships of "actual_orders"
"""
type actual_orders {
  actual_order_date: timestamptz
  actual_order_id: bigint!

  """An array relationship"""
  actual_order_products(
    """distinct select on columns"""
    distinct_on: [actual_order_products_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [actual_order_products_order_by!]

    """filter the rows returned"""
    where: actual_order_products_bool_exp
  ): [actual_order_products!]!

  """An aggregated array relationship"""
  actual_order_products_aggregate(
    """distinct select on columns"""
    distinct_on: [actual_order_products_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [actual_order_products_order_by!]

    """filter the rows returned"""
    where: actual_order_products_bool_exp
  ): actual_order_products_aggregate!

  """An array relationship"""
  order_deliveries(
    """distinct select on columns"""
    distinct_on: [order_deliveries_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [order_deliveries_order_by!]

    """filter the rows returned"""
    where: order_deliveries_bool_exp
  ): [order_deliveries!]!

  """An aggregated array relationship"""
  order_deliveries_aggregate(
    """distinct select on columns"""
    distinct_on: [order_deliveries_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [order_deliveries_order_by!]

    """filter the rows returned"""
    where: order_deliveries_bool_exp
  ): order_deliveries_aggregate!
  order_status_code: String

  """An object relationship"""
  regular_order: regular_orders
  regular_order_id: bigint
}

"""
aggregated selection of "actual_orders"
"""
type actual_orders_aggregate {
  aggregate: actual_orders_aggregate_fields
  nodes: [actual_orders!]!
}

"""
aggregate fields of "actual_orders"
"""
type actual_orders_aggregate_fields {
  avg: actual_orders_avg_fields
  count(columns: [actual_orders_select_column!], distinct: Boolean): Int
  max: actual_orders_max_fields
  min: actual_orders_min_fields
  stddev: actual_orders_stddev_fields
  stddev_pop: actual_orders_stddev_pop_fields
  stddev_samp: actual_orders_stddev_samp_fields
  sum: actual_orders_sum_fields
  var_pop: actual_orders_var_pop_fields
  var_samp: actual_orders_var_samp_fields
  variance: actual_orders_variance_fields
}

"""
order by aggregate values of table "actual_orders"
"""
input actual_orders_aggregate_order_by {
  avg: actual_orders_avg_order_by
  count: order_by
  max: actual_orders_max_order_by
  min: actual_orders_min_order_by
  stddev: actual_orders_stddev_order_by
  stddev_pop: actual_orders_stddev_pop_order_by
  stddev_samp: actual_orders_stddev_samp_order_by
  sum: actual_orders_sum_order_by
  var_pop: actual_orders_var_pop_order_by
  var_samp: actual_orders_var_samp_order_by
  variance: actual_orders_variance_order_by
}

"""
input type for inserting array relation for remote table "actual_orders"
"""
input actual_orders_arr_rel_insert_input {
  data: [actual_orders_insert_input!]!
  on_conflict: actual_orders_on_conflict
}

"""aggregate avg on columns"""
type actual_orders_avg_fields {
  actual_order_id: Float
  regular_order_id: Float
}

"""
order by avg() on columns of table "actual_orders"
"""
input actual_orders_avg_order_by {
  actual_order_id: order_by
  regular_order_id: order_by
}

"""
Boolean expression to filter rows from the table "actual_orders". All fields are combined with a logical 'AND'.
"""
input actual_orders_bool_exp {
  _and: [actual_orders_bool_exp]
  _not: actual_orders_bool_exp
  _or: [actual_orders_bool_exp]
  actual_order_date: timestamptz_comparison_exp
  actual_order_id: bigint_comparison_exp
  actual_order_products: actual_order_products_bool_exp
  order_deliveries: order_deliveries_bool_exp
  order_status_code: String_comparison_exp
  regular_order: regular_orders_bool_exp
  regular_order_id: bigint_comparison_exp
}

"""
unique or primary key constraints on table "actual_orders"
"""
enum actual_orders_constraint {
  """unique or primary key constraint"""
  idx_21313_actual_orders_pkey
}

"""
input type for incrementing integer column in table "actual_orders"
"""
input actual_orders_inc_input {
  actual_order_id: bigint
  regular_order_id: bigint
}

"""
input type for inserting data into table "actual_orders"
"""
input actual_orders_insert_input {
  actual_order_date: timestamptz
  actual_order_id: bigint
  actual_order_products: actual_order_products_arr_rel_insert_input
  order_deliveries: order_deliveries_arr_rel_insert_input
  order_status_code: String
  regular_order: regular_orders_obj_rel_insert_input
  regular_order_id: bigint
}

"""aggregate max on columns"""
type actual_orders_max_fields {
  actual_order_date: timestamptz
  actual_order_id: bigint
  order_status_code: String
  regular_order_id: bigint
}

"""
order by max() on columns of table "actual_orders"
"""
input actual_orders_max_order_by {
  actual_order_date: order_by
  actual_order_id: order_by
  order_status_code: order_by
  regular_order_id: order_by
}

"""aggregate min on columns"""
type actual_orders_min_fields {
  actual_order_date: timestamptz
  actual_order_id: bigint
  order_status_code: String
  regular_order_id: bigint
}

"""
order by min() on columns of table "actual_orders"
"""
input actual_orders_min_order_by {
  actual_order_date: order_by
  actual_order_id: order_by
  order_status_code: order_by
  regular_order_id: order_by
}

"""
response of any mutation on the table "actual_orders"
"""
type actual_orders_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [actual_orders!]!
}

"""
input type for inserting object relation for remote table "actual_orders"
"""
input actual_orders_obj_rel_insert_input {
  data: actual_orders_insert_input!
  on_conflict: actual_orders_on_conflict
}

"""
on conflict condition type for table "actual_orders"
"""
input actual_orders_on_conflict {
  constraint: actual_orders_constraint!
  update_columns: [actual_orders_update_column!]!
  where: actual_orders_bool_exp
}

"""
ordering options when selecting data from "actual_orders"
"""
input actual_orders_order_by {
  actual_order_date: order_by
  actual_order_id: order_by
  actual_order_products_aggregate: actual_order_products_aggregate_order_by
  order_deliveries_aggregate: order_deliveries_aggregate_order_by
  order_status_code: order_by
  regular_order: regular_orders_order_by
  regular_order_id: order_by
}

"""
primary key columns input for table: "actual_orders"
"""
input actual_orders_pk_columns_input {
  actual_order_id: bigint!
}

"""
select columns of table "actual_orders"
"""
enum actual_orders_select_column {
  """column name"""
  actual_order_date

  """column name"""
  actual_order_id

  """column name"""
  order_status_code

  """column name"""
  regular_order_id
}

"""
input type for updating data in table "actual_orders"
"""
input actual_orders_set_input {
  actual_order_date: timestamptz
  actual_order_id: bigint
  order_status_code: String
  regular_order_id: bigint
}

"""aggregate stddev on columns"""
type actual_orders_stddev_fields {
  actual_order_id: Float
  regular_order_id: Float
}

"""
order by stddev() on columns of table "actual_orders"
"""
input actual_orders_stddev_order_by {
  actual_order_id: order_by
  regular_order_id: order_by
}

"""aggregate stddev_pop on columns"""
type actual_orders_stddev_pop_fields {
  actual_order_id: Float
  regular_order_id: Float
}

"""
order by stddev_pop() on columns of table "actual_orders"
"""
input actual_orders_stddev_pop_order_by {
  actual_order_id: order_by
  regular_order_id: order_by
}

"""aggregate stddev_samp on columns"""
type actual_orders_stddev_samp_fields {
  actual_order_id: Float
  regular_order_id: Float
}

"""
order by stddev_samp() on columns of table "actual_orders"
"""
input actual_orders_stddev_samp_order_by {
  actual_order_id: order_by
  regular_order_id: order_by
}

"""aggregate sum on columns"""
type actual_orders_sum_fields {
  actual_order_id: bigint
  regular_order_id: bigint
}

"""
order by sum() on columns of table "actual_orders"
"""
input actual_orders_sum_order_by {
  actual_order_id: order_by
  regular_order_id: order_by
}

"""
update columns of table "actual_orders"
"""
enum actual_orders_update_column {
  """column name"""
  actual_order_date

  """column name"""
  actual_order_id

  """column name"""
  order_status_code

  """column name"""
  regular_order_id
}

"""aggregate var_pop on columns"""
type actual_orders_var_pop_fields {
  actual_order_id: Float
  regular_order_id: Float
}

"""
order by var_pop() on columns of table "actual_orders"
"""
input actual_orders_var_pop_order_by {
  actual_order_id: order_by
  regular_order_id: order_by
}

"""aggregate var_samp on columns"""
type actual_orders_var_samp_fields {
  actual_order_id: Float
  regular_order_id: Float
}

"""
order by var_samp() on columns of table "actual_orders"
"""
input actual_orders_var_samp_order_by {
  actual_order_id: order_by
  regular_order_id: order_by
}

"""aggregate variance on columns"""
type actual_orders_variance_fields {
  actual_order_id: Float
  regular_order_id: Float
}

"""
order by variance() on columns of table "actual_orders"
"""
input actual_orders_variance_order_by {
  actual_order_id: order_by
  regular_order_id: order_by
}

"""
columns and relationships of "addresses"
"""
type addresses {
  address_details: String
  address_id: bigint!
  city: String
  country: String

  """An array relationship"""
  customer_addresses(
    """distinct select on columns"""
    distinct_on: [customer_addresses_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [customer_addresses_order_by!]

    """filter the rows returned"""
    where: customer_addresses_bool_exp
  ): [customer_addresses!]!

  """An aggregated array relationship"""
  customer_addresses_aggregate(
    """distinct select on columns"""
    distinct_on: [customer_addresses_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [customer_addresses_order_by!]

    """filter the rows returned"""
    where: customer_addresses_bool_exp
  ): customer_addresses_aggregate!

  """An array relationship"""
  delivery_route_locations(
    """distinct select on columns"""
    distinct_on: [delivery_route_locations_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [delivery_route_locations_order_by!]

    """filter the rows returned"""
    where: delivery_route_locations_bool_exp
  ): [delivery_route_locations!]!

  """An aggregated array relationship"""
  delivery_route_locations_aggregate(
    """distinct select on columns"""
    distinct_on: [delivery_route_locations_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [delivery_route_locations_order_by!]

    """filter the rows returned"""
    where: delivery_route_locations_bool_exp
  ): delivery_route_locations_aggregate!

  """An array relationship"""
  employees(
    """distinct select on columns"""
    distinct_on: [employees_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [employees_order_by!]

    """filter the rows returned"""
    where: employees_bool_exp
  ): [employees!]!

  """An aggregated array relationship"""
  employees_aggregate(
    """distinct select on columns"""
    distinct_on: [employees_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [employees_order_by!]

    """filter the rows returned"""
    where: employees_bool_exp
  ): employees_aggregate!
  state_province_county: String
  zip_postcode: String
}

"""
aggregated selection of "addresses"
"""
type addresses_aggregate {
  aggregate: addresses_aggregate_fields
  nodes: [addresses!]!
}

"""
aggregate fields of "addresses"
"""
type addresses_aggregate_fields {
  avg: addresses_avg_fields
  count(columns: [addresses_select_column!], distinct: Boolean): Int
  max: addresses_max_fields
  min: addresses_min_fields
  stddev: addresses_stddev_fields
  stddev_pop: addresses_stddev_pop_fields
  stddev_samp: addresses_stddev_samp_fields
  sum: addresses_sum_fields
  var_pop: addresses_var_pop_fields
  var_samp: addresses_var_samp_fields
  variance: addresses_variance_fields
}

"""
order by aggregate values of table "addresses"
"""
input addresses_aggregate_order_by {
  avg: addresses_avg_order_by
  count: order_by
  max: addresses_max_order_by
  min: addresses_min_order_by
  stddev: addresses_stddev_order_by
  stddev_pop: addresses_stddev_pop_order_by
  stddev_samp: addresses_stddev_samp_order_by
  sum: addresses_sum_order_by
  var_pop: addresses_var_pop_order_by
  var_samp: addresses_var_samp_order_by
  variance: addresses_variance_order_by
}

"""
input type for inserting array relation for remote table "addresses"
"""
input addresses_arr_rel_insert_input {
  data: [addresses_insert_input!]!
  on_conflict: addresses_on_conflict
}

"""aggregate avg on columns"""
type addresses_avg_fields {
  address_id: Float
}

"""
order by avg() on columns of table "addresses"
"""
input addresses_avg_order_by {
  address_id: order_by
}

"""
Boolean expression to filter rows from the table "addresses". All fields are combined with a logical 'AND'.
"""
input addresses_bool_exp {
  _and: [addresses_bool_exp]
  _not: addresses_bool_exp
  _or: [addresses_bool_exp]
  address_details: String_comparison_exp
  address_id: bigint_comparison_exp
  city: String_comparison_exp
  country: String_comparison_exp
  customer_addresses: customer_addresses_bool_exp
  delivery_route_locations: delivery_route_locations_bool_exp
  employees: employees_bool_exp
  state_province_county: String_comparison_exp
  zip_postcode: String_comparison_exp
}

"""
unique or primary key constraints on table "addresses"
"""
enum addresses_constraint {
  """unique or primary key constraint"""
  idx_21295_addresses_pkey
}

"""
input type for incrementing integer column in table "addresses"
"""
input addresses_inc_input {
  address_id: bigint
}

"""
input type for inserting data into table "addresses"
"""
input addresses_insert_input {
  address_details: String
  address_id: bigint
  city: String
  country: String
  customer_addresses: customer_addresses_arr_rel_insert_input
  delivery_route_locations: delivery_route_locations_arr_rel_insert_input
  employees: employees_arr_rel_insert_input
  state_province_county: String
  zip_postcode: String
}

"""aggregate max on columns"""
type addresses_max_fields {
  address_details: String
  address_id: bigint
  city: String
  country: String
  state_province_county: String
  zip_postcode: String
}

"""
order by max() on columns of table "addresses"
"""
input addresses_max_order_by {
  address_details: order_by
  address_id: order_by
  city: order_by
  country: order_by
  state_province_county: order_by
  zip_postcode: order_by
}

"""aggregate min on columns"""
type addresses_min_fields {
  address_details: String
  address_id: bigint
  city: String
  country: String
  state_province_county: String
  zip_postcode: String
}

"""
order by min() on columns of table "addresses"
"""
input addresses_min_order_by {
  address_details: order_by
  address_id: order_by
  city: order_by
  country: order_by
  state_province_county: order_by
  zip_postcode: order_by
}

"""
response of any mutation on the table "addresses"
"""
type addresses_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [addresses!]!
}

"""
input type for inserting object relation for remote table "addresses"
"""
input addresses_obj_rel_insert_input {
  data: addresses_insert_input!
  on_conflict: addresses_on_conflict
}

"""
on conflict condition type for table "addresses"
"""
input addresses_on_conflict {
  constraint: addresses_constraint!
  update_columns: [addresses_update_column!]!
  where: addresses_bool_exp
}

"""
ordering options when selecting data from "addresses"
"""
input addresses_order_by {
  address_details: order_by
  address_id: order_by
  city: order_by
  country: order_by
  customer_addresses_aggregate: customer_addresses_aggregate_order_by
  delivery_route_locations_aggregate: delivery_route_locations_aggregate_order_by
  employees_aggregate: employees_aggregate_order_by
  state_province_county: order_by
  zip_postcode: order_by
}

"""
primary key columns input for table: "addresses"
"""
input addresses_pk_columns_input {
  address_id: bigint!
}

"""
select columns of table "addresses"
"""
enum addresses_select_column {
  """column name"""
  address_details

  """column name"""
  address_id

  """column name"""
  city

  """column name"""
  country

  """column name"""
  state_province_county

  """column name"""
  zip_postcode
}

"""
input type for updating data in table "addresses"
"""
input addresses_set_input {
  address_details: String
  address_id: bigint
  city: String
  country: String
  state_province_county: String
  zip_postcode: String
}

"""aggregate stddev on columns"""
type addresses_stddev_fields {
  address_id: Float
}

"""
order by stddev() on columns of table "addresses"
"""
input addresses_stddev_order_by {
  address_id: order_by
}

"""aggregate stddev_pop on columns"""
type addresses_stddev_pop_fields {
  address_id: Float
}

"""
order by stddev_pop() on columns of table "addresses"
"""
input addresses_stddev_pop_order_by {
  address_id: order_by
}

"""aggregate stddev_samp on columns"""
type addresses_stddev_samp_fields {
  address_id: Float
}

"""
order by stddev_samp() on columns of table "addresses"
"""
input addresses_stddev_samp_order_by {
  address_id: order_by
}

"""aggregate sum on columns"""
type addresses_sum_fields {
  address_id: bigint
}

"""
order by sum() on columns of table "addresses"
"""
input addresses_sum_order_by {
  address_id: order_by
}

"""
update columns of table "addresses"
"""
enum addresses_update_column {
  """column name"""
  address_details

  """column name"""
  address_id

  """column name"""
  city

  """column name"""
  country

  """column name"""
  state_province_county

  """column name"""
  zip_postcode
}

"""aggregate var_pop on columns"""
type addresses_var_pop_fields {
  address_id: Float
}

"""
order by var_pop() on columns of table "addresses"
"""
input addresses_var_pop_order_by {
  address_id: order_by
}

"""aggregate var_samp on columns"""
type addresses_var_samp_fields {
  address_id: Float
}

"""
order by var_samp() on columns of table "addresses"
"""
input addresses_var_samp_order_by {
  address_id: order_by
}

"""aggregate variance on columns"""
type addresses_variance_fields {
  address_id: Float
}

"""
order by variance() on columns of table "addresses"
"""
input addresses_variance_order_by {
  address_id: order_by
}

scalar bigint

"""
expression to compare columns of type bigint. All fields are combined with logical 'AND'.
"""
input bigint_comparison_exp {
  _eq: bigint
  _gt: bigint
  _gte: bigint
  _in: [bigint!]
  _is_null: Boolean
  _lt: bigint
  _lte: bigint
  _neq: bigint
  _nin: [bigint!]
}

"""
columns and relationships of "customer_addresses"
"""
type customer_addresses {
  """An object relationship"""
  address: addresses
  address_id: bigint
  address_type: String

  """An object relationship"""
  customer: customers
  customer_id: bigint
  date_from: timestamptz
  date_to: timestamptz
}

"""
aggregated selection of "customer_addresses"
"""
type customer_addresses_aggregate {
  aggregate: customer_addresses_aggregate_fields
  nodes: [customer_addresses!]!
}

"""
aggregate fields of "customer_addresses"
"""
type customer_addresses_aggregate_fields {
  avg: customer_addresses_avg_fields
  count(columns: [customer_addresses_select_column!], distinct: Boolean): Int
  max: customer_addresses_max_fields
  min: customer_addresses_min_fields
  stddev: customer_addresses_stddev_fields
  stddev_pop: customer_addresses_stddev_pop_fields
  stddev_samp: customer_addresses_stddev_samp_fields
  sum: customer_addresses_sum_fields
  var_pop: customer_addresses_var_pop_fields
  var_samp: customer_addresses_var_samp_fields
  variance: customer_addresses_variance_fields
}

"""
order by aggregate values of table "customer_addresses"
"""
input customer_addresses_aggregate_order_by {
  avg: customer_addresses_avg_order_by
  count: order_by
  max: customer_addresses_max_order_by
  min: customer_addresses_min_order_by
  stddev: customer_addresses_stddev_order_by
  stddev_pop: customer_addresses_stddev_pop_order_by
  stddev_samp: customer_addresses_stddev_samp_order_by
  sum: customer_addresses_sum_order_by
  var_pop: customer_addresses_var_pop_order_by
  var_samp: customer_addresses_var_samp_order_by
  variance: customer_addresses_variance_order_by
}

"""
input type for inserting array relation for remote table "customer_addresses"
"""
input customer_addresses_arr_rel_insert_input {
  data: [customer_addresses_insert_input!]!
}

"""aggregate avg on columns"""
type customer_addresses_avg_fields {
  address_id: Float
  customer_id: Float
}

"""
order by avg() on columns of table "customer_addresses"
"""
input customer_addresses_avg_order_by {
  address_id: order_by
  customer_id: order_by
}

"""
Boolean expression to filter rows from the table "customer_addresses". All fields are combined with a logical 'AND'.
"""
input customer_addresses_bool_exp {
  _and: [customer_addresses_bool_exp]
  _not: customer_addresses_bool_exp
  _or: [customer_addresses_bool_exp]
  address: addresses_bool_exp
  address_id: bigint_comparison_exp
  address_type: String_comparison_exp
  customer: customers_bool_exp
  customer_id: bigint_comparison_exp
  date_from: timestamptz_comparison_exp
  date_to: timestamptz_comparison_exp
}

"""
input type for incrementing integer column in table "customer_addresses"
"""
input customer_addresses_inc_input {
  address_id: bigint
  customer_id: bigint
}

"""
input type for inserting data into table "customer_addresses"
"""
input customer_addresses_insert_input {
  address: addresses_obj_rel_insert_input
  address_id: bigint
  address_type: String
  customer: customers_obj_rel_insert_input
  customer_id: bigint
  date_from: timestamptz
  date_to: timestamptz
}

"""aggregate max on columns"""
type customer_addresses_max_fields {
  address_id: bigint
  address_type: String
  customer_id: bigint
  date_from: timestamptz
  date_to: timestamptz
}

"""
order by max() on columns of table "customer_addresses"
"""
input customer_addresses_max_order_by {
  address_id: order_by
  address_type: order_by
  customer_id: order_by
  date_from: order_by
  date_to: order_by
}

"""aggregate min on columns"""
type customer_addresses_min_fields {
  address_id: bigint
  address_type: String
  customer_id: bigint
  date_from: timestamptz
  date_to: timestamptz
}

"""
order by min() on columns of table "customer_addresses"
"""
input customer_addresses_min_order_by {
  address_id: order_by
  address_type: order_by
  customer_id: order_by
  date_from: order_by
  date_to: order_by
}

"""
response of any mutation on the table "customer_addresses"
"""
type customer_addresses_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [customer_addresses!]!
}

"""
input type for inserting object relation for remote table "customer_addresses"
"""
input customer_addresses_obj_rel_insert_input {
  data: customer_addresses_insert_input!
}

"""
ordering options when selecting data from "customer_addresses"
"""
input customer_addresses_order_by {
  address: addresses_order_by
  address_id: order_by
  address_type: order_by
  customer: customers_order_by
  customer_id: order_by
  date_from: order_by
  date_to: order_by
}

"""
select columns of table "customer_addresses"
"""
enum customer_addresses_select_column {
  """column name"""
  address_id

  """column name"""
  address_type

  """column name"""
  customer_id

  """column name"""
  date_from

  """column name"""
  date_to
}

"""
input type for updating data in table "customer_addresses"
"""
input customer_addresses_set_input {
  address_id: bigint
  address_type: String
  customer_id: bigint
  date_from: timestamptz
  date_to: timestamptz
}

"""aggregate stddev on columns"""
type customer_addresses_stddev_fields {
  address_id: Float
  customer_id: Float
}

"""
order by stddev() on columns of table "customer_addresses"
"""
input customer_addresses_stddev_order_by {
  address_id: order_by
  customer_id: order_by
}

"""aggregate stddev_pop on columns"""
type customer_addresses_stddev_pop_fields {
  address_id: Float
  customer_id: Float
}

"""
order by stddev_pop() on columns of table "customer_addresses"
"""
input customer_addresses_stddev_pop_order_by {
  address_id: order_by
  customer_id: order_by
}

"""aggregate stddev_samp on columns"""
type customer_addresses_stddev_samp_fields {
  address_id: Float
  customer_id: Float
}

"""
order by stddev_samp() on columns of table "customer_addresses"
"""
input customer_addresses_stddev_samp_order_by {
  address_id: order_by
  customer_id: order_by
}

"""aggregate sum on columns"""
type customer_addresses_sum_fields {
  address_id: bigint
  customer_id: bigint
}

"""
order by sum() on columns of table "customer_addresses"
"""
input customer_addresses_sum_order_by {
  address_id: order_by
  customer_id: order_by
}

"""aggregate var_pop on columns"""
type customer_addresses_var_pop_fields {
  address_id: Float
  customer_id: Float
}

"""
order by var_pop() on columns of table "customer_addresses"
"""
input customer_addresses_var_pop_order_by {
  address_id: order_by
  customer_id: order_by
}

"""aggregate var_samp on columns"""
type customer_addresses_var_samp_fields {
  address_id: Float
  customer_id: Float
}

"""
order by var_samp() on columns of table "customer_addresses"
"""
input customer_addresses_var_samp_order_by {
  address_id: order_by
  customer_id: order_by
}

"""aggregate variance on columns"""
type customer_addresses_variance_fields {
  address_id: Float
  customer_id: Float
}

"""
order by variance() on columns of table "customer_addresses"
"""
input customer_addresses_variance_order_by {
  address_id: order_by
  customer_id: order_by
}

"""
columns and relationships of "customers"
"""
type customers {
  """An array relationship"""
  customer_addresses(
    """distinct select on columns"""
    distinct_on: [customer_addresses_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [customer_addresses_order_by!]

    """filter the rows returned"""
    where: customer_addresses_bool_exp
  ): [customer_addresses!]!

  """An aggregated array relationship"""
  customer_addresses_aggregate(
    """distinct select on columns"""
    distinct_on: [customer_addresses_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [customer_addresses_order_by!]

    """filter the rows returned"""
    where: customer_addresses_bool_exp
  ): customer_addresses_aggregate!
  customer_email: String
  customer_id: bigint!
  customer_name: String
  customer_phone: String
  date_became_customer: timestamptz
  payment_method: String

  """An array relationship"""
  regular_orders(
    """distinct select on columns"""
    distinct_on: [regular_orders_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [regular_orders_order_by!]

    """filter the rows returned"""
    where: regular_orders_bool_exp
  ): [regular_orders!]!

  """An aggregated array relationship"""
  regular_orders_aggregate(
    """distinct select on columns"""
    distinct_on: [regular_orders_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [regular_orders_order_by!]

    """filter the rows returned"""
    where: regular_orders_bool_exp
  ): regular_orders_aggregate!
}

"""
aggregated selection of "customers"
"""
type customers_aggregate {
  aggregate: customers_aggregate_fields
  nodes: [customers!]!
}

"""
aggregate fields of "customers"
"""
type customers_aggregate_fields {
  avg: customers_avg_fields
  count(columns: [customers_select_column!], distinct: Boolean): Int
  max: customers_max_fields
  min: customers_min_fields
  stddev: customers_stddev_fields
  stddev_pop: customers_stddev_pop_fields
  stddev_samp: customers_stddev_samp_fields
  sum: customers_sum_fields
  var_pop: customers_var_pop_fields
  var_samp: customers_var_samp_fields
  variance: customers_variance_fields
}

"""
order by aggregate values of table "customers"
"""
input customers_aggregate_order_by {
  avg: customers_avg_order_by
  count: order_by
  max: customers_max_order_by
  min: customers_min_order_by
  stddev: customers_stddev_order_by
  stddev_pop: customers_stddev_pop_order_by
  stddev_samp: customers_stddev_samp_order_by
  sum: customers_sum_order_by
  var_pop: customers_var_pop_order_by
  var_samp: customers_var_samp_order_by
  variance: customers_variance_order_by
}

"""
input type for inserting array relation for remote table "customers"
"""
input customers_arr_rel_insert_input {
  data: [customers_insert_input!]!
  on_conflict: customers_on_conflict
}

"""aggregate avg on columns"""
type customers_avg_fields {
  customer_id: Float
}

"""
order by avg() on columns of table "customers"
"""
input customers_avg_order_by {
  customer_id: order_by
}

"""
Boolean expression to filter rows from the table "customers". All fields are combined with a logical 'AND'.
"""
input customers_bool_exp {
  _and: [customers_bool_exp]
  _not: customers_bool_exp
  _or: [customers_bool_exp]
  customer_addresses: customer_addresses_bool_exp
  customer_email: String_comparison_exp
  customer_id: bigint_comparison_exp
  customer_name: String_comparison_exp
  customer_phone: String_comparison_exp
  date_became_customer: timestamptz_comparison_exp
  payment_method: String_comparison_exp
  regular_orders: regular_orders_bool_exp
}

"""
unique or primary key constraints on table "customers"
"""
enum customers_constraint {
  """unique or primary key constraint"""
  idx_21301_customers_pkey
}

"""
input type for incrementing integer column in table "customers"
"""
input customers_inc_input {
  customer_id: bigint
}

"""
input type for inserting data into table "customers"
"""
input customers_insert_input {
  customer_addresses: customer_addresses_arr_rel_insert_input
  customer_email: String
  customer_id: bigint
  customer_name: String
  customer_phone: String
  date_became_customer: timestamptz
  payment_method: String
  regular_orders: regular_orders_arr_rel_insert_input
}

"""aggregate max on columns"""
type customers_max_fields {
  customer_email: String
  customer_id: bigint
  customer_name: String
  customer_phone: String
  date_became_customer: timestamptz
  payment_method: String
}

"""
order by max() on columns of table "customers"
"""
input customers_max_order_by {
  customer_email: order_by
  customer_id: order_by
  customer_name: order_by
  customer_phone: order_by
  date_became_customer: order_by
  payment_method: order_by
}

"""aggregate min on columns"""
type customers_min_fields {
  customer_email: String
  customer_id: bigint
  customer_name: String
  customer_phone: String
  date_became_customer: timestamptz
  payment_method: String
}

"""
order by min() on columns of table "customers"
"""
input customers_min_order_by {
  customer_email: order_by
  customer_id: order_by
  customer_name: order_by
  customer_phone: order_by
  date_became_customer: order_by
  payment_method: order_by
}

"""
response of any mutation on the table "customers"
"""
type customers_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [customers!]!
}

"""
input type for inserting object relation for remote table "customers"
"""
input customers_obj_rel_insert_input {
  data: customers_insert_input!
  on_conflict: customers_on_conflict
}

"""
on conflict condition type for table "customers"
"""
input customers_on_conflict {
  constraint: customers_constraint!
  update_columns: [customers_update_column!]!
  where: customers_bool_exp
}

"""
ordering options when selecting data from "customers"
"""
input customers_order_by {
  customer_addresses_aggregate: customer_addresses_aggregate_order_by
  customer_email: order_by
  customer_id: order_by
  customer_name: order_by
  customer_phone: order_by
  date_became_customer: order_by
  payment_method: order_by
  regular_orders_aggregate: regular_orders_aggregate_order_by
}

"""
primary key columns input for table: "customers"
"""
input customers_pk_columns_input {
  customer_id: bigint!
}

"""
select columns of table "customers"
"""
enum customers_select_column {
  """column name"""
  customer_email

  """column name"""
  customer_id

  """column name"""
  customer_name

  """column name"""
  customer_phone

  """column name"""
  date_became_customer

  """column name"""
  payment_method
}

"""
input type for updating data in table "customers"
"""
input customers_set_input {
  customer_email: String
  customer_id: bigint
  customer_name: String
  customer_phone: String
  date_became_customer: timestamptz
  payment_method: String
}

"""aggregate stddev on columns"""
type customers_stddev_fields {
  customer_id: Float
}

"""
order by stddev() on columns of table "customers"
"""
input customers_stddev_order_by {
  customer_id: order_by
}

"""aggregate stddev_pop on columns"""
type customers_stddev_pop_fields {
  customer_id: Float
}

"""
order by stddev_pop() on columns of table "customers"
"""
input customers_stddev_pop_order_by {
  customer_id: order_by
}

"""aggregate stddev_samp on columns"""
type customers_stddev_samp_fields {
  customer_id: Float
}

"""
order by stddev_samp() on columns of table "customers"
"""
input customers_stddev_samp_order_by {
  customer_id: order_by
}

"""aggregate sum on columns"""
type customers_sum_fields {
  customer_id: bigint
}

"""
order by sum() on columns of table "customers"
"""
input customers_sum_order_by {
  customer_id: order_by
}

"""
update columns of table "customers"
"""
enum customers_update_column {
  """column name"""
  customer_email

  """column name"""
  customer_id

  """column name"""
  customer_name

  """column name"""
  customer_phone

  """column name"""
  date_became_customer

  """column name"""
  payment_method
}

"""aggregate var_pop on columns"""
type customers_var_pop_fields {
  customer_id: Float
}

"""
order by var_pop() on columns of table "customers"
"""
input customers_var_pop_order_by {
  customer_id: order_by
}

"""aggregate var_samp on columns"""
type customers_var_samp_fields {
  customer_id: Float
}

"""
order by var_samp() on columns of table "customers"
"""
input customers_var_samp_order_by {
  customer_id: order_by
}

"""aggregate variance on columns"""
type customers_variance_fields {
  customer_id: Float
}

"""
order by variance() on columns of table "customers"
"""
input customers_variance_order_by {
  customer_id: order_by
}

"""
columns and relationships of "delivery_route_locations"
"""
type delivery_route_locations {
  """An object relationship"""
  address: addresses

  """An object relationship"""
  delivery_route: delivery_routes
  location_address_id: bigint
  location_code: String!
  location_name: String

  """An array relationship"""
  order_deliveries(
    """distinct select on columns"""
    distinct_on: [order_deliveries_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [order_deliveries_order_by!]

    """filter the rows returned"""
    where: order_deliveries_bool_exp
  ): [order_deliveries!]!

  """An aggregated array relationship"""
  order_deliveries_aggregate(
    """distinct select on columns"""
    distinct_on: [order_deliveries_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [order_deliveries_order_by!]

    """filter the rows returned"""
    where: order_deliveries_bool_exp
  ): order_deliveries_aggregate!
  route_id: bigint
}

"""
aggregated selection of "delivery_route_locations"
"""
type delivery_route_locations_aggregate {
  aggregate: delivery_route_locations_aggregate_fields
  nodes: [delivery_route_locations!]!
}

"""
aggregate fields of "delivery_route_locations"
"""
type delivery_route_locations_aggregate_fields {
  avg: delivery_route_locations_avg_fields
  count(columns: [delivery_route_locations_select_column!], distinct: Boolean): Int
  max: delivery_route_locations_max_fields
  min: delivery_route_locations_min_fields
  stddev: delivery_route_locations_stddev_fields
  stddev_pop: delivery_route_locations_stddev_pop_fields
  stddev_samp: delivery_route_locations_stddev_samp_fields
  sum: delivery_route_locations_sum_fields
  var_pop: delivery_route_locations_var_pop_fields
  var_samp: delivery_route_locations_var_samp_fields
  variance: delivery_route_locations_variance_fields
}

"""
order by aggregate values of table "delivery_route_locations"
"""
input delivery_route_locations_aggregate_order_by {
  avg: delivery_route_locations_avg_order_by
  count: order_by
  max: delivery_route_locations_max_order_by
  min: delivery_route_locations_min_order_by
  stddev: delivery_route_locations_stddev_order_by
  stddev_pop: delivery_route_locations_stddev_pop_order_by
  stddev_samp: delivery_route_locations_stddev_samp_order_by
  sum: delivery_route_locations_sum_order_by
  var_pop: delivery_route_locations_var_pop_order_by
  var_samp: delivery_route_locations_var_samp_order_by
  variance: delivery_route_locations_variance_order_by
}

"""
input type for inserting array relation for remote table "delivery_route_locations"
"""
input delivery_route_locations_arr_rel_insert_input {
  data: [delivery_route_locations_insert_input!]!
  on_conflict: delivery_route_locations_on_conflict
}

"""aggregate avg on columns"""
type delivery_route_locations_avg_fields {
  location_address_id: Float
  route_id: Float
}

"""
order by avg() on columns of table "delivery_route_locations"
"""
input delivery_route_locations_avg_order_by {
  location_address_id: order_by
  route_id: order_by
}

"""
Boolean expression to filter rows from the table "delivery_route_locations". All fields are combined with a logical 'AND'.
"""
input delivery_route_locations_bool_exp {
  _and: [delivery_route_locations_bool_exp]
  _not: delivery_route_locations_bool_exp
  _or: [delivery_route_locations_bool_exp]
  address: addresses_bool_exp
  delivery_route: delivery_routes_bool_exp
  location_address_id: bigint_comparison_exp
  location_code: String_comparison_exp
  location_name: String_comparison_exp
  order_deliveries: order_deliveries_bool_exp
  route_id: bigint_comparison_exp
}

"""
unique or primary key constraints on table "delivery_route_locations"
"""
enum delivery_route_locations_constraint {
  """unique or primary key constraint"""
  idx_21334_sqlite_autoindex_delivery_route_locations_1
}

"""
input type for incrementing integer column in table "delivery_route_locations"
"""
input delivery_route_locations_inc_input {
  location_address_id: bigint
  route_id: bigint
}

"""
input type for inserting data into table "delivery_route_locations"
"""
input delivery_route_locations_insert_input {
  address: addresses_obj_rel_insert_input
  delivery_route: delivery_routes_obj_rel_insert_input
  location_address_id: bigint
  location_code: String
  location_name: String
  order_deliveries: order_deliveries_arr_rel_insert_input
  route_id: bigint
}

"""aggregate max on columns"""
type delivery_route_locations_max_fields {
  location_address_id: bigint
  location_code: String
  location_name: String
  route_id: bigint
}

"""
order by max() on columns of table "delivery_route_locations"
"""
input delivery_route_locations_max_order_by {
  location_address_id: order_by
  location_code: order_by
  location_name: order_by
  route_id: order_by
}

"""aggregate min on columns"""
type delivery_route_locations_min_fields {
  location_address_id: bigint
  location_code: String
  location_name: String
  route_id: bigint
}

"""
order by min() on columns of table "delivery_route_locations"
"""
input delivery_route_locations_min_order_by {
  location_address_id: order_by
  location_code: order_by
  location_name: order_by
  route_id: order_by
}

"""
response of any mutation on the table "delivery_route_locations"
"""
type delivery_route_locations_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [delivery_route_locations!]!
}

"""
input type for inserting object relation for remote table "delivery_route_locations"
"""
input delivery_route_locations_obj_rel_insert_input {
  data: delivery_route_locations_insert_input!
  on_conflict: delivery_route_locations_on_conflict
}

"""
on conflict condition type for table "delivery_route_locations"
"""
input delivery_route_locations_on_conflict {
  constraint: delivery_route_locations_constraint!
  update_columns: [delivery_route_locations_update_column!]!
  where: delivery_route_locations_bool_exp
}

"""
ordering options when selecting data from "delivery_route_locations"
"""
input delivery_route_locations_order_by {
  address: addresses_order_by
  delivery_route: delivery_routes_order_by
  location_address_id: order_by
  location_code: order_by
  location_name: order_by
  order_deliveries_aggregate: order_deliveries_aggregate_order_by
  route_id: order_by
}

"""
primary key columns input for table: "delivery_route_locations"
"""
input delivery_route_locations_pk_columns_input {
  location_code: String!
}

"""
select columns of table "delivery_route_locations"
"""
enum delivery_route_locations_select_column {
  """column name"""
  location_address_id

  """column name"""
  location_code

  """column name"""
  location_name

  """column name"""
  route_id
}

"""
input type for updating data in table "delivery_route_locations"
"""
input delivery_route_locations_set_input {
  location_address_id: bigint
  location_code: String
  location_name: String
  route_id: bigint
}

"""aggregate stddev on columns"""
type delivery_route_locations_stddev_fields {
  location_address_id: Float
  route_id: Float
}

"""
order by stddev() on columns of table "delivery_route_locations"
"""
input delivery_route_locations_stddev_order_by {
  location_address_id: order_by
  route_id: order_by
}

"""aggregate stddev_pop on columns"""
type delivery_route_locations_stddev_pop_fields {
  location_address_id: Float
  route_id: Float
}

"""
order by stddev_pop() on columns of table "delivery_route_locations"
"""
input delivery_route_locations_stddev_pop_order_by {
  location_address_id: order_by
  route_id: order_by
}

"""aggregate stddev_samp on columns"""
type delivery_route_locations_stddev_samp_fields {
  location_address_id: Float
  route_id: Float
}

"""
order by stddev_samp() on columns of table "delivery_route_locations"
"""
input delivery_route_locations_stddev_samp_order_by {
  location_address_id: order_by
  route_id: order_by
}

"""aggregate sum on columns"""
type delivery_route_locations_sum_fields {
  location_address_id: bigint
  route_id: bigint
}

"""
order by sum() on columns of table "delivery_route_locations"
"""
input delivery_route_locations_sum_order_by {
  location_address_id: order_by
  route_id: order_by
}

"""
update columns of table "delivery_route_locations"
"""
enum delivery_route_locations_update_column {
  """column name"""
  location_address_id

  """column name"""
  location_code

  """column name"""
  location_name

  """column name"""
  route_id
}

"""aggregate var_pop on columns"""
type delivery_route_locations_var_pop_fields {
  location_address_id: Float
  route_id: Float
}

"""
order by var_pop() on columns of table "delivery_route_locations"
"""
input delivery_route_locations_var_pop_order_by {
  location_address_id: order_by
  route_id: order_by
}

"""aggregate var_samp on columns"""
type delivery_route_locations_var_samp_fields {
  location_address_id: Float
  route_id: Float
}

"""
order by var_samp() on columns of table "delivery_route_locations"
"""
input delivery_route_locations_var_samp_order_by {
  location_address_id: order_by
  route_id: order_by
}

"""aggregate variance on columns"""
type delivery_route_locations_variance_fields {
  location_address_id: Float
  route_id: Float
}

"""
order by variance() on columns of table "delivery_route_locations"
"""
input delivery_route_locations_variance_order_by {
  location_address_id: order_by
  route_id: order_by
}

"""
columns and relationships of "delivery_routes"
"""
type delivery_routes {
  """An array relationship"""
  delivery_route_locations(
    """distinct select on columns"""
    distinct_on: [delivery_route_locations_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [delivery_route_locations_order_by!]

    """filter the rows returned"""
    where: delivery_route_locations_bool_exp
  ): [delivery_route_locations!]!

  """An aggregated array relationship"""
  delivery_route_locations_aggregate(
    """distinct select on columns"""
    distinct_on: [delivery_route_locations_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [delivery_route_locations_order_by!]

    """filter the rows returned"""
    where: delivery_route_locations_bool_exp
  ): delivery_route_locations_aggregate!
  other_route_details: String
  route_id: bigint!
  route_name: String
}

"""
aggregated selection of "delivery_routes"
"""
type delivery_routes_aggregate {
  aggregate: delivery_routes_aggregate_fields
  nodes: [delivery_routes!]!
}

"""
aggregate fields of "delivery_routes"
"""
type delivery_routes_aggregate_fields {
  avg: delivery_routes_avg_fields
  count(columns: [delivery_routes_select_column!], distinct: Boolean): Int
  max: delivery_routes_max_fields
  min: delivery_routes_min_fields
  stddev: delivery_routes_stddev_fields
  stddev_pop: delivery_routes_stddev_pop_fields
  stddev_samp: delivery_routes_stddev_samp_fields
  sum: delivery_routes_sum_fields
  var_pop: delivery_routes_var_pop_fields
  var_samp: delivery_routes_var_samp_fields
  variance: delivery_routes_variance_fields
}

"""
order by aggregate values of table "delivery_routes"
"""
input delivery_routes_aggregate_order_by {
  avg: delivery_routes_avg_order_by
  count: order_by
  max: delivery_routes_max_order_by
  min: delivery_routes_min_order_by
  stddev: delivery_routes_stddev_order_by
  stddev_pop: delivery_routes_stddev_pop_order_by
  stddev_samp: delivery_routes_stddev_samp_order_by
  sum: delivery_routes_sum_order_by
  var_pop: delivery_routes_var_pop_order_by
  var_samp: delivery_routes_var_samp_order_by
  variance: delivery_routes_variance_order_by
}

"""
input type for inserting array relation for remote table "delivery_routes"
"""
input delivery_routes_arr_rel_insert_input {
  data: [delivery_routes_insert_input!]!
  on_conflict: delivery_routes_on_conflict
}

"""aggregate avg on columns"""
type delivery_routes_avg_fields {
  route_id: Float
}

"""
order by avg() on columns of table "delivery_routes"
"""
input delivery_routes_avg_order_by {
  route_id: order_by
}

"""
Boolean expression to filter rows from the table "delivery_routes". All fields are combined with a logical 'AND'.
"""
input delivery_routes_bool_exp {
  _and: [delivery_routes_bool_exp]
  _not: delivery_routes_bool_exp
  _or: [delivery_routes_bool_exp]
  delivery_route_locations: delivery_route_locations_bool_exp
  other_route_details: String_comparison_exp
  route_id: bigint_comparison_exp
  route_name: String_comparison_exp
}

"""
unique or primary key constraints on table "delivery_routes"
"""
enum delivery_routes_constraint {
  """unique or primary key constraint"""
  idx_21328_delivery_routes_pkey
}

"""
input type for incrementing integer column in table "delivery_routes"
"""
input delivery_routes_inc_input {
  route_id: bigint
}

"""
input type for inserting data into table "delivery_routes"
"""
input delivery_routes_insert_input {
  delivery_route_locations: delivery_route_locations_arr_rel_insert_input
  other_route_details: String
  route_id: bigint
  route_name: String
}

"""aggregate max on columns"""
type delivery_routes_max_fields {
  other_route_details: String
  route_id: bigint
  route_name: String
}

"""
order by max() on columns of table "delivery_routes"
"""
input delivery_routes_max_order_by {
  other_route_details: order_by
  route_id: order_by
  route_name: order_by
}

"""aggregate min on columns"""
type delivery_routes_min_fields {
  other_route_details: String
  route_id: bigint
  route_name: String
}

"""
order by min() on columns of table "delivery_routes"
"""
input delivery_routes_min_order_by {
  other_route_details: order_by
  route_id: order_by
  route_name: order_by
}

"""
response of any mutation on the table "delivery_routes"
"""
type delivery_routes_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [delivery_routes!]!
}

"""
input type for inserting object relation for remote table "delivery_routes"
"""
input delivery_routes_obj_rel_insert_input {
  data: delivery_routes_insert_input!
  on_conflict: delivery_routes_on_conflict
}

"""
on conflict condition type for table "delivery_routes"
"""
input delivery_routes_on_conflict {
  constraint: delivery_routes_constraint!
  update_columns: [delivery_routes_update_column!]!
  where: delivery_routes_bool_exp
}

"""
ordering options when selecting data from "delivery_routes"
"""
input delivery_routes_order_by {
  delivery_route_locations_aggregate: delivery_route_locations_aggregate_order_by
  other_route_details: order_by
  route_id: order_by
  route_name: order_by
}

"""
primary key columns input for table: "delivery_routes"
"""
input delivery_routes_pk_columns_input {
  route_id: bigint!
}

"""
select columns of table "delivery_routes"
"""
enum delivery_routes_select_column {
  """column name"""
  other_route_details

  """column name"""
  route_id

  """column name"""
  route_name
}

"""
input type for updating data in table "delivery_routes"
"""
input delivery_routes_set_input {
  other_route_details: String
  route_id: bigint
  route_name: String
}

"""aggregate stddev on columns"""
type delivery_routes_stddev_fields {
  route_id: Float
}

"""
order by stddev() on columns of table "delivery_routes"
"""
input delivery_routes_stddev_order_by {
  route_id: order_by
}

"""aggregate stddev_pop on columns"""
type delivery_routes_stddev_pop_fields {
  route_id: Float
}

"""
order by stddev_pop() on columns of table "delivery_routes"
"""
input delivery_routes_stddev_pop_order_by {
  route_id: order_by
}

"""aggregate stddev_samp on columns"""
type delivery_routes_stddev_samp_fields {
  route_id: Float
}

"""
order by stddev_samp() on columns of table "delivery_routes"
"""
input delivery_routes_stddev_samp_order_by {
  route_id: order_by
}

"""aggregate sum on columns"""
type delivery_routes_sum_fields {
  route_id: bigint
}

"""
order by sum() on columns of table "delivery_routes"
"""
input delivery_routes_sum_order_by {
  route_id: order_by
}

"""
update columns of table "delivery_routes"
"""
enum delivery_routes_update_column {
  """column name"""
  other_route_details

  """column name"""
  route_id

  """column name"""
  route_name
}

"""aggregate var_pop on columns"""
type delivery_routes_var_pop_fields {
  route_id: Float
}

"""
order by var_pop() on columns of table "delivery_routes"
"""
input delivery_routes_var_pop_order_by {
  route_id: order_by
}

"""aggregate var_samp on columns"""
type delivery_routes_var_samp_fields {
  route_id: Float
}

"""
order by var_samp() on columns of table "delivery_routes"
"""
input delivery_routes_var_samp_order_by {
  route_id: order_by
}

"""aggregate variance on columns"""
type delivery_routes_variance_fields {
  route_id: Float
}

"""
order by variance() on columns of table "delivery_routes"
"""
input delivery_routes_variance_order_by {
  route_id: order_by
}

"""
columns and relationships of "employees"
"""
type employees {
  """An object relationship"""
  address: addresses
  employee_address_id: bigint
  employee_id: bigint!
  employee_name: String
  employee_phone: String

  """An array relationship"""
  order_deliveries(
    """distinct select on columns"""
    distinct_on: [order_deliveries_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [order_deliveries_order_by!]

    """filter the rows returned"""
    where: order_deliveries_bool_exp
  ): [order_deliveries!]!

  """An aggregated array relationship"""
  order_deliveries_aggregate(
    """distinct select on columns"""
    distinct_on: [order_deliveries_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [order_deliveries_order_by!]

    """filter the rows returned"""
    where: order_deliveries_bool_exp
  ): order_deliveries_aggregate!
}

"""
aggregated selection of "employees"
"""
type employees_aggregate {
  aggregate: employees_aggregate_fields
  nodes: [employees!]!
}

"""
aggregate fields of "employees"
"""
type employees_aggregate_fields {
  avg: employees_avg_fields
  count(columns: [employees_select_column!], distinct: Boolean): Int
  max: employees_max_fields
  min: employees_min_fields
  stddev: employees_stddev_fields
  stddev_pop: employees_stddev_pop_fields
  stddev_samp: employees_stddev_samp_fields
  sum: employees_sum_fields
  var_pop: employees_var_pop_fields
  var_samp: employees_var_samp_fields
  variance: employees_variance_fields
}

"""
order by aggregate values of table "employees"
"""
input employees_aggregate_order_by {
  avg: employees_avg_order_by
  count: order_by
  max: employees_max_order_by
  min: employees_min_order_by
  stddev: employees_stddev_order_by
  stddev_pop: employees_stddev_pop_order_by
  stddev_samp: employees_stddev_samp_order_by
  sum: employees_sum_order_by
  var_pop: employees_var_pop_order_by
  var_samp: employees_var_samp_order_by
  variance: employees_variance_order_by
}

"""
input type for inserting array relation for remote table "employees"
"""
input employees_arr_rel_insert_input {
  data: [employees_insert_input!]!
  on_conflict: employees_on_conflict
}

"""aggregate avg on columns"""
type employees_avg_fields {
  employee_address_id: Float
  employee_id: Float
}

"""
order by avg() on columns of table "employees"
"""
input employees_avg_order_by {
  employee_address_id: order_by
  employee_id: order_by
}

"""
Boolean expression to filter rows from the table "employees". All fields are combined with a logical 'AND'.
"""
input employees_bool_exp {
  _and: [employees_bool_exp]
  _not: employees_bool_exp
  _or: [employees_bool_exp]
  address: addresses_bool_exp
  employee_address_id: bigint_comparison_exp
  employee_id: bigint_comparison_exp
  employee_name: String_comparison_exp
  employee_phone: String_comparison_exp
  order_deliveries: order_deliveries_bool_exp
}

"""
unique or primary key constraints on table "employees"
"""
enum employees_constraint {
  """unique or primary key constraint"""
  idx_21346_employees_pkey
}

"""
input type for incrementing integer column in table "employees"
"""
input employees_inc_input {
  employee_address_id: bigint
  employee_id: bigint
}

"""
input type for inserting data into table "employees"
"""
input employees_insert_input {
  address: addresses_obj_rel_insert_input
  employee_address_id: bigint
  employee_id: bigint
  employee_name: String
  employee_phone: String
  order_deliveries: order_deliveries_arr_rel_insert_input
}

"""aggregate max on columns"""
type employees_max_fields {
  employee_address_id: bigint
  employee_id: bigint
  employee_name: String
  employee_phone: String
}

"""
order by max() on columns of table "employees"
"""
input employees_max_order_by {
  employee_address_id: order_by
  employee_id: order_by
  employee_name: order_by
  employee_phone: order_by
}

"""aggregate min on columns"""
type employees_min_fields {
  employee_address_id: bigint
  employee_id: bigint
  employee_name: String
  employee_phone: String
}

"""
order by min() on columns of table "employees"
"""
input employees_min_order_by {
  employee_address_id: order_by
  employee_id: order_by
  employee_name: order_by
  employee_phone: order_by
}

"""
response of any mutation on the table "employees"
"""
type employees_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [employees!]!
}

"""
input type for inserting object relation for remote table "employees"
"""
input employees_obj_rel_insert_input {
  data: employees_insert_input!
  on_conflict: employees_on_conflict
}

"""
on conflict condition type for table "employees"
"""
input employees_on_conflict {
  constraint: employees_constraint!
  update_columns: [employees_update_column!]!
  where: employees_bool_exp
}

"""
ordering options when selecting data from "employees"
"""
input employees_order_by {
  address: addresses_order_by
  employee_address_id: order_by
  employee_id: order_by
  employee_name: order_by
  employee_phone: order_by
  order_deliveries_aggregate: order_deliveries_aggregate_order_by
}

"""
primary key columns input for table: "employees"
"""
input employees_pk_columns_input {
  employee_id: bigint!
}

"""
select columns of table "employees"
"""
enum employees_select_column {
  """column name"""
  employee_address_id

  """column name"""
  employee_id

  """column name"""
  employee_name

  """column name"""
  employee_phone
}

"""
input type for updating data in table "employees"
"""
input employees_set_input {
  employee_address_id: bigint
  employee_id: bigint
  employee_name: String
  employee_phone: String
}

"""aggregate stddev on columns"""
type employees_stddev_fields {
  employee_address_id: Float
  employee_id: Float
}

"""
order by stddev() on columns of table "employees"
"""
input employees_stddev_order_by {
  employee_address_id: order_by
  employee_id: order_by
}

"""aggregate stddev_pop on columns"""
type employees_stddev_pop_fields {
  employee_address_id: Float
  employee_id: Float
}

"""
order by stddev_pop() on columns of table "employees"
"""
input employees_stddev_pop_order_by {
  employee_address_id: order_by
  employee_id: order_by
}

"""aggregate stddev_samp on columns"""
type employees_stddev_samp_fields {
  employee_address_id: Float
  employee_id: Float
}

"""
order by stddev_samp() on columns of table "employees"
"""
input employees_stddev_samp_order_by {
  employee_address_id: order_by
  employee_id: order_by
}

"""aggregate sum on columns"""
type employees_sum_fields {
  employee_address_id: bigint
  employee_id: bigint
}

"""
order by sum() on columns of table "employees"
"""
input employees_sum_order_by {
  employee_address_id: order_by
  employee_id: order_by
}

"""
update columns of table "employees"
"""
enum employees_update_column {
  """column name"""
  employee_address_id

  """column name"""
  employee_id

  """column name"""
  employee_name

  """column name"""
  employee_phone
}

"""aggregate var_pop on columns"""
type employees_var_pop_fields {
  employee_address_id: Float
  employee_id: Float
}

"""
order by var_pop() on columns of table "employees"
"""
input employees_var_pop_order_by {
  employee_address_id: order_by
  employee_id: order_by
}

"""aggregate var_samp on columns"""
type employees_var_samp_fields {
  employee_address_id: Float
  employee_id: Float
}

"""
order by var_samp() on columns of table "employees"
"""
input employees_var_samp_order_by {
  employee_address_id: order_by
  employee_id: order_by
}

"""aggregate variance on columns"""
type employees_variance_fields {
  employee_address_id: Float
  employee_id: Float
}

"""
order by variance() on columns of table "employees"
"""
input employees_variance_order_by {
  employee_address_id: order_by
  employee_id: order_by
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "actual_order_products"
  """
  delete_actual_order_products(
    """filter the rows which have to be deleted"""
    where: actual_order_products_bool_exp!
  ): actual_order_products_mutation_response

  """
  delete data from the table: "actual_orders"
  """
  delete_actual_orders(
    """filter the rows which have to be deleted"""
    where: actual_orders_bool_exp!
  ): actual_orders_mutation_response

  """
  delete single row from the table: "actual_orders"
  """
  delete_actual_orders_by_pk(actual_order_id: bigint!): actual_orders

  """
  delete data from the table: "addresses"
  """
  delete_addresses(
    """filter the rows which have to be deleted"""
    where: addresses_bool_exp!
  ): addresses_mutation_response

  """
  delete single row from the table: "addresses"
  """
  delete_addresses_by_pk(address_id: bigint!): addresses

  """
  delete data from the table: "customer_addresses"
  """
  delete_customer_addresses(
    """filter the rows which have to be deleted"""
    where: customer_addresses_bool_exp!
  ): customer_addresses_mutation_response

  """
  delete data from the table: "customers"
  """
  delete_customers(
    """filter the rows which have to be deleted"""
    where: customers_bool_exp!
  ): customers_mutation_response

  """
  delete single row from the table: "customers"
  """
  delete_customers_by_pk(customer_id: bigint!): customers

  """
  delete data from the table: "delivery_route_locations"
  """
  delete_delivery_route_locations(
    """filter the rows which have to be deleted"""
    where: delivery_route_locations_bool_exp!
  ): delivery_route_locations_mutation_response

  """
  delete single row from the table: "delivery_route_locations"
  """
  delete_delivery_route_locations_by_pk(location_code: String!): delivery_route_locations

  """
  delete data from the table: "delivery_routes"
  """
  delete_delivery_routes(
    """filter the rows which have to be deleted"""
    where: delivery_routes_bool_exp!
  ): delivery_routes_mutation_response

  """
  delete single row from the table: "delivery_routes"
  """
  delete_delivery_routes_by_pk(route_id: bigint!): delivery_routes

  """
  delete data from the table: "employees"
  """
  delete_employees(
    """filter the rows which have to be deleted"""
    where: employees_bool_exp!
  ): employees_mutation_response

  """
  delete single row from the table: "employees"
  """
  delete_employees_by_pk(employee_id: bigint!): employees

  """
  delete data from the table: "order_deliveries"
  """
  delete_order_deliveries(
    """filter the rows which have to be deleted"""
    where: order_deliveries_bool_exp!
  ): order_deliveries_mutation_response

  """
  delete data from the table: "products"
  """
  delete_products(
    """filter the rows which have to be deleted"""
    where: products_bool_exp!
  ): products_mutation_response

  """
  delete single row from the table: "products"
  """
  delete_products_by_pk(product_id: bigint!): products

  """
  delete data from the table: "regular_order_products"
  """
  delete_regular_order_products(
    """filter the rows which have to be deleted"""
    where: regular_order_products_bool_exp!
  ): regular_order_products_mutation_response

  """
  delete data from the table: "regular_orders"
  """
  delete_regular_orders(
    """filter the rows which have to be deleted"""
    where: regular_orders_bool_exp!
  ): regular_orders_mutation_response

  """
  delete single row from the table: "regular_orders"
  """
  delete_regular_orders_by_pk(regular_order_id: bigint!): regular_orders

  """
  delete data from the table: "trucks"
  """
  delete_trucks(
    """filter the rows which have to be deleted"""
    where: trucks_bool_exp!
  ): trucks_mutation_response

  """
  delete single row from the table: "trucks"
  """
  delete_trucks_by_pk(truck_id: bigint!): trucks

  """
  insert data into the table: "actual_order_products"
  """
  insert_actual_order_products(
    """the rows to be inserted"""
    objects: [actual_order_products_insert_input!]!
  ): actual_order_products_mutation_response

  """
  insert a single row into the table: "actual_order_products"
  """
  insert_actual_order_products_one(
    """the row to be inserted"""
    object: actual_order_products_insert_input!
  ): actual_order_products

  """
  insert data into the table: "actual_orders"
  """
  insert_actual_orders(
    """the rows to be inserted"""
    objects: [actual_orders_insert_input!]!

    """on conflict condition"""
    on_conflict: actual_orders_on_conflict
  ): actual_orders_mutation_response

  """
  insert a single row into the table: "actual_orders"
  """
  insert_actual_orders_one(
    """the row to be inserted"""
    object: actual_orders_insert_input!

    """on conflict condition"""
    on_conflict: actual_orders_on_conflict
  ): actual_orders

  """
  insert data into the table: "addresses"
  """
  insert_addresses(
    """the rows to be inserted"""
    objects: [addresses_insert_input!]!

    """on conflict condition"""
    on_conflict: addresses_on_conflict
  ): addresses_mutation_response

  """
  insert a single row into the table: "addresses"
  """
  insert_addresses_one(
    """the row to be inserted"""
    object: addresses_insert_input!

    """on conflict condition"""
    on_conflict: addresses_on_conflict
  ): addresses

  """
  insert data into the table: "customer_addresses"
  """
  insert_customer_addresses(
    """the rows to be inserted"""
    objects: [customer_addresses_insert_input!]!
  ): customer_addresses_mutation_response

  """
  insert a single row into the table: "customer_addresses"
  """
  insert_customer_addresses_one(
    """the row to be inserted"""
    object: customer_addresses_insert_input!
  ): customer_addresses

  """
  insert data into the table: "customers"
  """
  insert_customers(
    """the rows to be inserted"""
    objects: [customers_insert_input!]!

    """on conflict condition"""
    on_conflict: customers_on_conflict
  ): customers_mutation_response

  """
  insert a single row into the table: "customers"
  """
  insert_customers_one(
    """the row to be inserted"""
    object: customers_insert_input!

    """on conflict condition"""
    on_conflict: customers_on_conflict
  ): customers

  """
  insert data into the table: "delivery_route_locations"
  """
  insert_delivery_route_locations(
    """the rows to be inserted"""
    objects: [delivery_route_locations_insert_input!]!

    """on conflict condition"""
    on_conflict: delivery_route_locations_on_conflict
  ): delivery_route_locations_mutation_response

  """
  insert a single row into the table: "delivery_route_locations"
  """
  insert_delivery_route_locations_one(
    """the row to be inserted"""
    object: delivery_route_locations_insert_input!

    """on conflict condition"""
    on_conflict: delivery_route_locations_on_conflict
  ): delivery_route_locations

  """
  insert data into the table: "delivery_routes"
  """
  insert_delivery_routes(
    """the rows to be inserted"""
    objects: [delivery_routes_insert_input!]!

    """on conflict condition"""
    on_conflict: delivery_routes_on_conflict
  ): delivery_routes_mutation_response

  """
  insert a single row into the table: "delivery_routes"
  """
  insert_delivery_routes_one(
    """the row to be inserted"""
    object: delivery_routes_insert_input!

    """on conflict condition"""
    on_conflict: delivery_routes_on_conflict
  ): delivery_routes

  """
  insert data into the table: "employees"
  """
  insert_employees(
    """the rows to be inserted"""
    objects: [employees_insert_input!]!

    """on conflict condition"""
    on_conflict: employees_on_conflict
  ): employees_mutation_response

  """
  insert a single row into the table: "employees"
  """
  insert_employees_one(
    """the row to be inserted"""
    object: employees_insert_input!

    """on conflict condition"""
    on_conflict: employees_on_conflict
  ): employees

  """
  insert data into the table: "order_deliveries"
  """
  insert_order_deliveries(
    """the rows to be inserted"""
    objects: [order_deliveries_insert_input!]!
  ): order_deliveries_mutation_response

  """
  insert a single row into the table: "order_deliveries"
  """
  insert_order_deliveries_one(
    """the row to be inserted"""
    object: order_deliveries_insert_input!
  ): order_deliveries

  """
  insert data into the table: "products"
  """
  insert_products(
    """the rows to be inserted"""
    objects: [products_insert_input!]!

    """on conflict condition"""
    on_conflict: products_on_conflict
  ): products_mutation_response

  """
  insert a single row into the table: "products"
  """
  insert_products_one(
    """the row to be inserted"""
    object: products_insert_input!

    """on conflict condition"""
    on_conflict: products_on_conflict
  ): products

  """
  insert data into the table: "regular_order_products"
  """
  insert_regular_order_products(
    """the rows to be inserted"""
    objects: [regular_order_products_insert_input!]!
  ): regular_order_products_mutation_response

  """
  insert a single row into the table: "regular_order_products"
  """
  insert_regular_order_products_one(
    """the row to be inserted"""
    object: regular_order_products_insert_input!
  ): regular_order_products

  """
  insert data into the table: "regular_orders"
  """
  insert_regular_orders(
    """the rows to be inserted"""
    objects: [regular_orders_insert_input!]!

    """on conflict condition"""
    on_conflict: regular_orders_on_conflict
  ): regular_orders_mutation_response

  """
  insert a single row into the table: "regular_orders"
  """
  insert_regular_orders_one(
    """the row to be inserted"""
    object: regular_orders_insert_input!

    """on conflict condition"""
    on_conflict: regular_orders_on_conflict
  ): regular_orders

  """
  insert data into the table: "trucks"
  """
  insert_trucks(
    """the rows to be inserted"""
    objects: [trucks_insert_input!]!

    """on conflict condition"""
    on_conflict: trucks_on_conflict
  ): trucks_mutation_response

  """
  insert a single row into the table: "trucks"
  """
  insert_trucks_one(
    """the row to be inserted"""
    object: trucks_insert_input!

    """on conflict condition"""
    on_conflict: trucks_on_conflict
  ): trucks

  """
  update data of the table: "actual_order_products"
  """
  update_actual_order_products(
    """increments the integer columns with given value of the filtered values"""
    _inc: actual_order_products_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: actual_order_products_set_input

    """filter the rows which have to be updated"""
    where: actual_order_products_bool_exp!
  ): actual_order_products_mutation_response

  """
  update data of the table: "actual_orders"
  """
  update_actual_orders(
    """increments the integer columns with given value of the filtered values"""
    _inc: actual_orders_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: actual_orders_set_input

    """filter the rows which have to be updated"""
    where: actual_orders_bool_exp!
  ): actual_orders_mutation_response

  """
  update single row of the table: "actual_orders"
  """
  update_actual_orders_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: actual_orders_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: actual_orders_set_input
    pk_columns: actual_orders_pk_columns_input!
  ): actual_orders

  """
  update data of the table: "addresses"
  """
  update_addresses(
    """increments the integer columns with given value of the filtered values"""
    _inc: addresses_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: addresses_set_input

    """filter the rows which have to be updated"""
    where: addresses_bool_exp!
  ): addresses_mutation_response

  """
  update single row of the table: "addresses"
  """
  update_addresses_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: addresses_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: addresses_set_input
    pk_columns: addresses_pk_columns_input!
  ): addresses

  """
  update data of the table: "customer_addresses"
  """
  update_customer_addresses(
    """increments the integer columns with given value of the filtered values"""
    _inc: customer_addresses_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: customer_addresses_set_input

    """filter the rows which have to be updated"""
    where: customer_addresses_bool_exp!
  ): customer_addresses_mutation_response

  """
  update data of the table: "customers"
  """
  update_customers(
    """increments the integer columns with given value of the filtered values"""
    _inc: customers_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: customers_set_input

    """filter the rows which have to be updated"""
    where: customers_bool_exp!
  ): customers_mutation_response

  """
  update single row of the table: "customers"
  """
  update_customers_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: customers_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: customers_set_input
    pk_columns: customers_pk_columns_input!
  ): customers

  """
  update data of the table: "delivery_route_locations"
  """
  update_delivery_route_locations(
    """increments the integer columns with given value of the filtered values"""
    _inc: delivery_route_locations_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: delivery_route_locations_set_input

    """filter the rows which have to be updated"""
    where: delivery_route_locations_bool_exp!
  ): delivery_route_locations_mutation_response

  """
  update single row of the table: "delivery_route_locations"
  """
  update_delivery_route_locations_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: delivery_route_locations_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: delivery_route_locations_set_input
    pk_columns: delivery_route_locations_pk_columns_input!
  ): delivery_route_locations

  """
  update data of the table: "delivery_routes"
  """
  update_delivery_routes(
    """increments the integer columns with given value of the filtered values"""
    _inc: delivery_routes_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: delivery_routes_set_input

    """filter the rows which have to be updated"""
    where: delivery_routes_bool_exp!
  ): delivery_routes_mutation_response

  """
  update single row of the table: "delivery_routes"
  """
  update_delivery_routes_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: delivery_routes_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: delivery_routes_set_input
    pk_columns: delivery_routes_pk_columns_input!
  ): delivery_routes

  """
  update data of the table: "employees"
  """
  update_employees(
    """increments the integer columns with given value of the filtered values"""
    _inc: employees_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: employees_set_input

    """filter the rows which have to be updated"""
    where: employees_bool_exp!
  ): employees_mutation_response

  """
  update single row of the table: "employees"
  """
  update_employees_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: employees_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: employees_set_input
    pk_columns: employees_pk_columns_input!
  ): employees

  """
  update data of the table: "order_deliveries"
  """
  update_order_deliveries(
    """increments the integer columns with given value of the filtered values"""
    _inc: order_deliveries_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: order_deliveries_set_input

    """filter the rows which have to be updated"""
    where: order_deliveries_bool_exp!
  ): order_deliveries_mutation_response

  """
  update data of the table: "products"
  """
  update_products(
    """increments the integer columns with given value of the filtered values"""
    _inc: products_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: products_set_input

    """filter the rows which have to be updated"""
    where: products_bool_exp!
  ): products_mutation_response

  """
  update single row of the table: "products"
  """
  update_products_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: products_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: products_set_input
    pk_columns: products_pk_columns_input!
  ): products

  """
  update data of the table: "regular_order_products"
  """
  update_regular_order_products(
    """increments the integer columns with given value of the filtered values"""
    _inc: regular_order_products_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: regular_order_products_set_input

    """filter the rows which have to be updated"""
    where: regular_order_products_bool_exp!
  ): regular_order_products_mutation_response

  """
  update data of the table: "regular_orders"
  """
  update_regular_orders(
    """increments the integer columns with given value of the filtered values"""
    _inc: regular_orders_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: regular_orders_set_input

    """filter the rows which have to be updated"""
    where: regular_orders_bool_exp!
  ): regular_orders_mutation_response

  """
  update single row of the table: "regular_orders"
  """
  update_regular_orders_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: regular_orders_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: regular_orders_set_input
    pk_columns: regular_orders_pk_columns_input!
  ): regular_orders

  """
  update data of the table: "trucks"
  """
  update_trucks(
    """increments the integer columns with given value of the filtered values"""
    _inc: trucks_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: trucks_set_input

    """filter the rows which have to be updated"""
    where: trucks_bool_exp!
  ): trucks_mutation_response

  """
  update single row of the table: "trucks"
  """
  update_trucks_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: trucks_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: trucks_set_input
    pk_columns: trucks_pk_columns_input!
  ): trucks
}

scalar numeric

"""
expression to compare columns of type numeric. All fields are combined with logical 'AND'.
"""
input numeric_comparison_exp {
  _eq: numeric
  _gt: numeric
  _gte: numeric
  _in: [numeric!]
  _is_null: Boolean
  _lt: numeric
  _lte: numeric
  _neq: numeric
  _nin: [numeric!]
}

"""column ordering options"""
enum order_by {
  """in the ascending order, nulls last"""
  asc

  """in the ascending order, nulls first"""
  asc_nulls_first

  """in the ascending order, nulls last"""
  asc_nulls_last

  """in the descending order, nulls first"""
  desc

  """in the descending order, nulls first"""
  desc_nulls_first

  """in the descending order, nulls last"""
  desc_nulls_last
}

"""
columns and relationships of "order_deliveries"
"""
type order_deliveries {
  """An object relationship"""
  actual_order: actual_orders
  actual_order_id: bigint
  delivery_date: timestamptz

  """An object relationship"""
  delivery_route_location: delivery_route_locations
  delivery_status_code: String
  driver_employee_id: bigint

  """An object relationship"""
  employee: employees
  location_code: String

  """An object relationship"""
  truck: trucks
  truck_id: bigint
}

"""
aggregated selection of "order_deliveries"
"""
type order_deliveries_aggregate {
  aggregate: order_deliveries_aggregate_fields
  nodes: [order_deliveries!]!
}

"""
aggregate fields of "order_deliveries"
"""
type order_deliveries_aggregate_fields {
  avg: order_deliveries_avg_fields
  count(columns: [order_deliveries_select_column!], distinct: Boolean): Int
  max: order_deliveries_max_fields
  min: order_deliveries_min_fields
  stddev: order_deliveries_stddev_fields
  stddev_pop: order_deliveries_stddev_pop_fields
  stddev_samp: order_deliveries_stddev_samp_fields
  sum: order_deliveries_sum_fields
  var_pop: order_deliveries_var_pop_fields
  var_samp: order_deliveries_var_samp_fields
  variance: order_deliveries_variance_fields
}

"""
order by aggregate values of table "order_deliveries"
"""
input order_deliveries_aggregate_order_by {
  avg: order_deliveries_avg_order_by
  count: order_by
  max: order_deliveries_max_order_by
  min: order_deliveries_min_order_by
  stddev: order_deliveries_stddev_order_by
  stddev_pop: order_deliveries_stddev_pop_order_by
  stddev_samp: order_deliveries_stddev_samp_order_by
  sum: order_deliveries_sum_order_by
  var_pop: order_deliveries_var_pop_order_by
  var_samp: order_deliveries_var_samp_order_by
  variance: order_deliveries_variance_order_by
}

"""
input type for inserting array relation for remote table "order_deliveries"
"""
input order_deliveries_arr_rel_insert_input {
  data: [order_deliveries_insert_input!]!
}

"""aggregate avg on columns"""
type order_deliveries_avg_fields {
  actual_order_id: Float
  driver_employee_id: Float
  truck_id: Float
}

"""
order by avg() on columns of table "order_deliveries"
"""
input order_deliveries_avg_order_by {
  actual_order_id: order_by
  driver_employee_id: order_by
  truck_id: order_by
}

"""
Boolean expression to filter rows from the table "order_deliveries". All fields are combined with a logical 'AND'.
"""
input order_deliveries_bool_exp {
  _and: [order_deliveries_bool_exp]
  _not: order_deliveries_bool_exp
  _or: [order_deliveries_bool_exp]
  actual_order: actual_orders_bool_exp
  actual_order_id: bigint_comparison_exp
  delivery_date: timestamptz_comparison_exp
  delivery_route_location: delivery_route_locations_bool_exp
  delivery_status_code: String_comparison_exp
  driver_employee_id: bigint_comparison_exp
  employee: employees_bool_exp
  location_code: String_comparison_exp
  truck: trucks_bool_exp
  truck_id: bigint_comparison_exp
}

"""
input type for incrementing integer column in table "order_deliveries"
"""
input order_deliveries_inc_input {
  actual_order_id: bigint
  driver_employee_id: bigint
  truck_id: bigint
}

"""
input type for inserting data into table "order_deliveries"
"""
input order_deliveries_insert_input {
  actual_order: actual_orders_obj_rel_insert_input
  actual_order_id: bigint
  delivery_date: timestamptz
  delivery_route_location: delivery_route_locations_obj_rel_insert_input
  delivery_status_code: String
  driver_employee_id: bigint
  employee: employees_obj_rel_insert_input
  location_code: String
  truck: trucks_obj_rel_insert_input
  truck_id: bigint
}

"""aggregate max on columns"""
type order_deliveries_max_fields {
  actual_order_id: bigint
  delivery_date: timestamptz
  delivery_status_code: String
  driver_employee_id: bigint
  location_code: String
  truck_id: bigint
}

"""
order by max() on columns of table "order_deliveries"
"""
input order_deliveries_max_order_by {
  actual_order_id: order_by
  delivery_date: order_by
  delivery_status_code: order_by
  driver_employee_id: order_by
  location_code: order_by
  truck_id: order_by
}

"""aggregate min on columns"""
type order_deliveries_min_fields {
  actual_order_id: bigint
  delivery_date: timestamptz
  delivery_status_code: String
  driver_employee_id: bigint
  location_code: String
  truck_id: bigint
}

"""
order by min() on columns of table "order_deliveries"
"""
input order_deliveries_min_order_by {
  actual_order_id: order_by
  delivery_date: order_by
  delivery_status_code: order_by
  driver_employee_id: order_by
  location_code: order_by
  truck_id: order_by
}

"""
response of any mutation on the table "order_deliveries"
"""
type order_deliveries_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [order_deliveries!]!
}

"""
input type for inserting object relation for remote table "order_deliveries"
"""
input order_deliveries_obj_rel_insert_input {
  data: order_deliveries_insert_input!
}

"""
ordering options when selecting data from "order_deliveries"
"""
input order_deliveries_order_by {
  actual_order: actual_orders_order_by
  actual_order_id: order_by
  delivery_date: order_by
  delivery_route_location: delivery_route_locations_order_by
  delivery_status_code: order_by
  driver_employee_id: order_by
  employee: employees_order_by
  location_code: order_by
  truck: trucks_order_by
  truck_id: order_by
}

"""
select columns of table "order_deliveries"
"""
enum order_deliveries_select_column {
  """column name"""
  actual_order_id

  """column name"""
  delivery_date

  """column name"""
  delivery_status_code

  """column name"""
  driver_employee_id

  """column name"""
  location_code

  """column name"""
  truck_id
}

"""
input type for updating data in table "order_deliveries"
"""
input order_deliveries_set_input {
  actual_order_id: bigint
  delivery_date: timestamptz
  delivery_status_code: String
  driver_employee_id: bigint
  location_code: String
  truck_id: bigint
}

"""aggregate stddev on columns"""
type order_deliveries_stddev_fields {
  actual_order_id: Float
  driver_employee_id: Float
  truck_id: Float
}

"""
order by stddev() on columns of table "order_deliveries"
"""
input order_deliveries_stddev_order_by {
  actual_order_id: order_by
  driver_employee_id: order_by
  truck_id: order_by
}

"""aggregate stddev_pop on columns"""
type order_deliveries_stddev_pop_fields {
  actual_order_id: Float
  driver_employee_id: Float
  truck_id: Float
}

"""
order by stddev_pop() on columns of table "order_deliveries"
"""
input order_deliveries_stddev_pop_order_by {
  actual_order_id: order_by
  driver_employee_id: order_by
  truck_id: order_by
}

"""aggregate stddev_samp on columns"""
type order_deliveries_stddev_samp_fields {
  actual_order_id: Float
  driver_employee_id: Float
  truck_id: Float
}

"""
order by stddev_samp() on columns of table "order_deliveries"
"""
input order_deliveries_stddev_samp_order_by {
  actual_order_id: order_by
  driver_employee_id: order_by
  truck_id: order_by
}

"""aggregate sum on columns"""
type order_deliveries_sum_fields {
  actual_order_id: bigint
  driver_employee_id: bigint
  truck_id: bigint
}

"""
order by sum() on columns of table "order_deliveries"
"""
input order_deliveries_sum_order_by {
  actual_order_id: order_by
  driver_employee_id: order_by
  truck_id: order_by
}

"""aggregate var_pop on columns"""
type order_deliveries_var_pop_fields {
  actual_order_id: Float
  driver_employee_id: Float
  truck_id: Float
}

"""
order by var_pop() on columns of table "order_deliveries"
"""
input order_deliveries_var_pop_order_by {
  actual_order_id: order_by
  driver_employee_id: order_by
  truck_id: order_by
}

"""aggregate var_samp on columns"""
type order_deliveries_var_samp_fields {
  actual_order_id: Float
  driver_employee_id: Float
  truck_id: Float
}

"""
order by var_samp() on columns of table "order_deliveries"
"""
input order_deliveries_var_samp_order_by {
  actual_order_id: order_by
  driver_employee_id: order_by
  truck_id: order_by
}

"""aggregate variance on columns"""
type order_deliveries_variance_fields {
  actual_order_id: Float
  driver_employee_id: Float
  truck_id: Float
}

"""
order by variance() on columns of table "order_deliveries"
"""
input order_deliveries_variance_order_by {
  actual_order_id: order_by
  driver_employee_id: order_by
  truck_id: order_by
}

"""
columns and relationships of "products"
"""
type products {
  """An array relationship"""
  actual_order_products(
    """distinct select on columns"""
    distinct_on: [actual_order_products_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [actual_order_products_order_by!]

    """filter the rows returned"""
    where: actual_order_products_bool_exp
  ): [actual_order_products!]!

  """An aggregated array relationship"""
  actual_order_products_aggregate(
    """distinct select on columns"""
    distinct_on: [actual_order_products_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [actual_order_products_order_by!]

    """filter the rows returned"""
    where: actual_order_products_bool_exp
  ): actual_order_products_aggregate!
  product_description: String
  product_id: bigint!
  product_name: String
  product_price: numeric

  """An array relationship"""
  regular_order_products(
    """distinct select on columns"""
    distinct_on: [regular_order_products_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [regular_order_products_order_by!]

    """filter the rows returned"""
    where: regular_order_products_bool_exp
  ): [regular_order_products!]!

  """An aggregated array relationship"""
  regular_order_products_aggregate(
    """distinct select on columns"""
    distinct_on: [regular_order_products_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [regular_order_products_order_by!]

    """filter the rows returned"""
    where: regular_order_products_bool_exp
  ): regular_order_products_aggregate!
}

"""
aggregated selection of "products"
"""
type products_aggregate {
  aggregate: products_aggregate_fields
  nodes: [products!]!
}

"""
aggregate fields of "products"
"""
type products_aggregate_fields {
  avg: products_avg_fields
  count(columns: [products_select_column!], distinct: Boolean): Int
  max: products_max_fields
  min: products_min_fields
  stddev: products_stddev_fields
  stddev_pop: products_stddev_pop_fields
  stddev_samp: products_stddev_samp_fields
  sum: products_sum_fields
  var_pop: products_var_pop_fields
  var_samp: products_var_samp_fields
  variance: products_variance_fields
}

"""
order by aggregate values of table "products"
"""
input products_aggregate_order_by {
  avg: products_avg_order_by
  count: order_by
  max: products_max_order_by
  min: products_min_order_by
  stddev: products_stddev_order_by
  stddev_pop: products_stddev_pop_order_by
  stddev_samp: products_stddev_samp_order_by
  sum: products_sum_order_by
  var_pop: products_var_pop_order_by
  var_samp: products_var_samp_order_by
  variance: products_variance_order_by
}

"""
input type for inserting array relation for remote table "products"
"""
input products_arr_rel_insert_input {
  data: [products_insert_input!]!
  on_conflict: products_on_conflict
}

"""aggregate avg on columns"""
type products_avg_fields {
  product_id: Float
  product_price: Float
}

"""
order by avg() on columns of table "products"
"""
input products_avg_order_by {
  product_id: order_by
  product_price: order_by
}

"""
Boolean expression to filter rows from the table "products". All fields are combined with a logical 'AND'.
"""
input products_bool_exp {
  _and: [products_bool_exp]
  _not: products_bool_exp
  _or: [products_bool_exp]
  actual_order_products: actual_order_products_bool_exp
  product_description: String_comparison_exp
  product_id: bigint_comparison_exp
  product_name: String_comparison_exp
  product_price: numeric_comparison_exp
  regular_order_products: regular_order_products_bool_exp
}

"""
unique or primary key constraints on table "products"
"""
enum products_constraint {
  """unique or primary key constraint"""
  idx_21289_products_pkey
}

"""
input type for incrementing integer column in table "products"
"""
input products_inc_input {
  product_id: bigint
  product_price: numeric
}

"""
input type for inserting data into table "products"
"""
input products_insert_input {
  actual_order_products: actual_order_products_arr_rel_insert_input
  product_description: String
  product_id: bigint
  product_name: String
  product_price: numeric
  regular_order_products: regular_order_products_arr_rel_insert_input
}

"""aggregate max on columns"""
type products_max_fields {
  product_description: String
  product_id: bigint
  product_name: String
  product_price: numeric
}

"""
order by max() on columns of table "products"
"""
input products_max_order_by {
  product_description: order_by
  product_id: order_by
  product_name: order_by
  product_price: order_by
}

"""aggregate min on columns"""
type products_min_fields {
  product_description: String
  product_id: bigint
  product_name: String
  product_price: numeric
}

"""
order by min() on columns of table "products"
"""
input products_min_order_by {
  product_description: order_by
  product_id: order_by
  product_name: order_by
  product_price: order_by
}

"""
response of any mutation on the table "products"
"""
type products_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [products!]!
}

"""
input type for inserting object relation for remote table "products"
"""
input products_obj_rel_insert_input {
  data: products_insert_input!
  on_conflict: products_on_conflict
}

"""
on conflict condition type for table "products"
"""
input products_on_conflict {
  constraint: products_constraint!
  update_columns: [products_update_column!]!
  where: products_bool_exp
}

"""
ordering options when selecting data from "products"
"""
input products_order_by {
  actual_order_products_aggregate: actual_order_products_aggregate_order_by
  product_description: order_by
  product_id: order_by
  product_name: order_by
  product_price: order_by
  regular_order_products_aggregate: regular_order_products_aggregate_order_by
}

"""
primary key columns input for table: "products"
"""
input products_pk_columns_input {
  product_id: bigint!
}

"""
select columns of table "products"
"""
enum products_select_column {
  """column name"""
  product_description

  """column name"""
  product_id

  """column name"""
  product_name

  """column name"""
  product_price
}

"""
input type for updating data in table "products"
"""
input products_set_input {
  product_description: String
  product_id: bigint
  product_name: String
  product_price: numeric
}

"""aggregate stddev on columns"""
type products_stddev_fields {
  product_id: Float
  product_price: Float
}

"""
order by stddev() on columns of table "products"
"""
input products_stddev_order_by {
  product_id: order_by
  product_price: order_by
}

"""aggregate stddev_pop on columns"""
type products_stddev_pop_fields {
  product_id: Float
  product_price: Float
}

"""
order by stddev_pop() on columns of table "products"
"""
input products_stddev_pop_order_by {
  product_id: order_by
  product_price: order_by
}

"""aggregate stddev_samp on columns"""
type products_stddev_samp_fields {
  product_id: Float
  product_price: Float
}

"""
order by stddev_samp() on columns of table "products"
"""
input products_stddev_samp_order_by {
  product_id: order_by
  product_price: order_by
}

"""aggregate sum on columns"""
type products_sum_fields {
  product_id: bigint
  product_price: numeric
}

"""
order by sum() on columns of table "products"
"""
input products_sum_order_by {
  product_id: order_by
  product_price: order_by
}

"""
update columns of table "products"
"""
enum products_update_column {
  """column name"""
  product_description

  """column name"""
  product_id

  """column name"""
  product_name

  """column name"""
  product_price
}

"""aggregate var_pop on columns"""
type products_var_pop_fields {
  product_id: Float
  product_price: Float
}

"""
order by var_pop() on columns of table "products"
"""
input products_var_pop_order_by {
  product_id: order_by
  product_price: order_by
}

"""aggregate var_samp on columns"""
type products_var_samp_fields {
  product_id: Float
  product_price: Float
}

"""
order by var_samp() on columns of table "products"
"""
input products_var_samp_order_by {
  product_id: order_by
  product_price: order_by
}

"""aggregate variance on columns"""
type products_variance_fields {
  product_id: Float
  product_price: Float
}

"""
order by variance() on columns of table "products"
"""
input products_variance_order_by {
  product_id: order_by
  product_price: order_by
}

"""query root"""
type query_root {
  """
  fetch data from the table: "actual_order_products"
  """
  actual_order_products(
    """distinct select on columns"""
    distinct_on: [actual_order_products_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [actual_order_products_order_by!]

    """filter the rows returned"""
    where: actual_order_products_bool_exp
  ): [actual_order_products!]!

  """
  fetch aggregated fields from the table: "actual_order_products"
  """
  actual_order_products_aggregate(
    """distinct select on columns"""
    distinct_on: [actual_order_products_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [actual_order_products_order_by!]

    """filter the rows returned"""
    where: actual_order_products_bool_exp
  ): actual_order_products_aggregate!

  """
  fetch data from the table: "actual_orders"
  """
  actual_orders(
    """distinct select on columns"""
    distinct_on: [actual_orders_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [actual_orders_order_by!]

    """filter the rows returned"""
    where: actual_orders_bool_exp
  ): [actual_orders!]!

  """
  fetch aggregated fields from the table: "actual_orders"
  """
  actual_orders_aggregate(
    """distinct select on columns"""
    distinct_on: [actual_orders_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [actual_orders_order_by!]

    """filter the rows returned"""
    where: actual_orders_bool_exp
  ): actual_orders_aggregate!

  """fetch data from the table: "actual_orders" using primary key columns"""
  actual_orders_by_pk(actual_order_id: bigint!): actual_orders

  """
  fetch data from the table: "addresses"
  """
  addresses(
    """distinct select on columns"""
    distinct_on: [addresses_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [addresses_order_by!]

    """filter the rows returned"""
    where: addresses_bool_exp
  ): [addresses!]!

  """
  fetch aggregated fields from the table: "addresses"
  """
  addresses_aggregate(
    """distinct select on columns"""
    distinct_on: [addresses_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [addresses_order_by!]

    """filter the rows returned"""
    where: addresses_bool_exp
  ): addresses_aggregate!

  """fetch data from the table: "addresses" using primary key columns"""
  addresses_by_pk(address_id: bigint!): addresses

  """
  fetch data from the table: "customer_addresses"
  """
  customer_addresses(
    """distinct select on columns"""
    distinct_on: [customer_addresses_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [customer_addresses_order_by!]

    """filter the rows returned"""
    where: customer_addresses_bool_exp
  ): [customer_addresses!]!

  """
  fetch aggregated fields from the table: "customer_addresses"
  """
  customer_addresses_aggregate(
    """distinct select on columns"""
    distinct_on: [customer_addresses_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [customer_addresses_order_by!]

    """filter the rows returned"""
    where: customer_addresses_bool_exp
  ): customer_addresses_aggregate!

  """
  fetch data from the table: "customers"
  """
  customers(
    """distinct select on columns"""
    distinct_on: [customers_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [customers_order_by!]

    """filter the rows returned"""
    where: customers_bool_exp
  ): [customers!]!

  """
  fetch aggregated fields from the table: "customers"
  """
  customers_aggregate(
    """distinct select on columns"""
    distinct_on: [customers_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [customers_order_by!]

    """filter the rows returned"""
    where: customers_bool_exp
  ): customers_aggregate!

  """fetch data from the table: "customers" using primary key columns"""
  customers_by_pk(customer_id: bigint!): customers

  """
  fetch data from the table: "delivery_route_locations"
  """
  delivery_route_locations(
    """distinct select on columns"""
    distinct_on: [delivery_route_locations_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [delivery_route_locations_order_by!]

    """filter the rows returned"""
    where: delivery_route_locations_bool_exp
  ): [delivery_route_locations!]!

  """
  fetch aggregated fields from the table: "delivery_route_locations"
  """
  delivery_route_locations_aggregate(
    """distinct select on columns"""
    distinct_on: [delivery_route_locations_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [delivery_route_locations_order_by!]

    """filter the rows returned"""
    where: delivery_route_locations_bool_exp
  ): delivery_route_locations_aggregate!

  """
  fetch data from the table: "delivery_route_locations" using primary key columns
  """
  delivery_route_locations_by_pk(location_code: String!): delivery_route_locations

  """
  fetch data from the table: "delivery_routes"
  """
  delivery_routes(
    """distinct select on columns"""
    distinct_on: [delivery_routes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [delivery_routes_order_by!]

    """filter the rows returned"""
    where: delivery_routes_bool_exp
  ): [delivery_routes!]!

  """
  fetch aggregated fields from the table: "delivery_routes"
  """
  delivery_routes_aggregate(
    """distinct select on columns"""
    distinct_on: [delivery_routes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [delivery_routes_order_by!]

    """filter the rows returned"""
    where: delivery_routes_bool_exp
  ): delivery_routes_aggregate!

  """fetch data from the table: "delivery_routes" using primary key columns"""
  delivery_routes_by_pk(route_id: bigint!): delivery_routes

  """
  fetch data from the table: "employees"
  """
  employees(
    """distinct select on columns"""
    distinct_on: [employees_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [employees_order_by!]

    """filter the rows returned"""
    where: employees_bool_exp
  ): [employees!]!

  """
  fetch aggregated fields from the table: "employees"
  """
  employees_aggregate(
    """distinct select on columns"""
    distinct_on: [employees_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [employees_order_by!]

    """filter the rows returned"""
    where: employees_bool_exp
  ): employees_aggregate!

  """fetch data from the table: "employees" using primary key columns"""
  employees_by_pk(employee_id: bigint!): employees

  """
  fetch data from the table: "order_deliveries"
  """
  order_deliveries(
    """distinct select on columns"""
    distinct_on: [order_deliveries_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [order_deliveries_order_by!]

    """filter the rows returned"""
    where: order_deliveries_bool_exp
  ): [order_deliveries!]!

  """
  fetch aggregated fields from the table: "order_deliveries"
  """
  order_deliveries_aggregate(
    """distinct select on columns"""
    distinct_on: [order_deliveries_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [order_deliveries_order_by!]

    """filter the rows returned"""
    where: order_deliveries_bool_exp
  ): order_deliveries_aggregate!

  """
  fetch data from the table: "products"
  """
  products(
    """distinct select on columns"""
    distinct_on: [products_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [products_order_by!]

    """filter the rows returned"""
    where: products_bool_exp
  ): [products!]!

  """
  fetch aggregated fields from the table: "products"
  """
  products_aggregate(
    """distinct select on columns"""
    distinct_on: [products_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [products_order_by!]

    """filter the rows returned"""
    where: products_bool_exp
  ): products_aggregate!

  """fetch data from the table: "products" using primary key columns"""
  products_by_pk(product_id: bigint!): products

  """
  fetch data from the table: "regular_order_products"
  """
  regular_order_products(
    """distinct select on columns"""
    distinct_on: [regular_order_products_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [regular_order_products_order_by!]

    """filter the rows returned"""
    where: regular_order_products_bool_exp
  ): [regular_order_products!]!

  """
  fetch aggregated fields from the table: "regular_order_products"
  """
  regular_order_products_aggregate(
    """distinct select on columns"""
    distinct_on: [regular_order_products_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [regular_order_products_order_by!]

    """filter the rows returned"""
    where: regular_order_products_bool_exp
  ): regular_order_products_aggregate!

  """
  fetch data from the table: "regular_orders"
  """
  regular_orders(
    """distinct select on columns"""
    distinct_on: [regular_orders_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [regular_orders_order_by!]

    """filter the rows returned"""
    where: regular_orders_bool_exp
  ): [regular_orders!]!

  """
  fetch aggregated fields from the table: "regular_orders"
  """
  regular_orders_aggregate(
    """distinct select on columns"""
    distinct_on: [regular_orders_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [regular_orders_order_by!]

    """filter the rows returned"""
    where: regular_orders_bool_exp
  ): regular_orders_aggregate!

  """fetch data from the table: "regular_orders" using primary key columns"""
  regular_orders_by_pk(regular_order_id: bigint!): regular_orders

  """
  fetch data from the table: "trucks"
  """
  trucks(
    """distinct select on columns"""
    distinct_on: [trucks_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [trucks_order_by!]

    """filter the rows returned"""
    where: trucks_bool_exp
  ): [trucks!]!

  """
  fetch aggregated fields from the table: "trucks"
  """
  trucks_aggregate(
    """distinct select on columns"""
    distinct_on: [trucks_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [trucks_order_by!]

    """filter the rows returned"""
    where: trucks_bool_exp
  ): trucks_aggregate!

  """fetch data from the table: "trucks" using primary key columns"""
  trucks_by_pk(truck_id: bigint!): trucks
}

"""
columns and relationships of "regular_order_products"
"""
type regular_order_products {
  """An object relationship"""
  product: products
  product_id: bigint

  """An object relationship"""
  regular_order: regular_orders
  regular_order_id: bigint
}

"""
aggregated selection of "regular_order_products"
"""
type regular_order_products_aggregate {
  aggregate: regular_order_products_aggregate_fields
  nodes: [regular_order_products!]!
}

"""
aggregate fields of "regular_order_products"
"""
type regular_order_products_aggregate_fields {
  avg: regular_order_products_avg_fields
  count(columns: [regular_order_products_select_column!], distinct: Boolean): Int
  max: regular_order_products_max_fields
  min: regular_order_products_min_fields
  stddev: regular_order_products_stddev_fields
  stddev_pop: regular_order_products_stddev_pop_fields
  stddev_samp: regular_order_products_stddev_samp_fields
  sum: regular_order_products_sum_fields
  var_pop: regular_order_products_var_pop_fields
  var_samp: regular_order_products_var_samp_fields
  variance: regular_order_products_variance_fields
}

"""
order by aggregate values of table "regular_order_products"
"""
input regular_order_products_aggregate_order_by {
  avg: regular_order_products_avg_order_by
  count: order_by
  max: regular_order_products_max_order_by
  min: regular_order_products_min_order_by
  stddev: regular_order_products_stddev_order_by
  stddev_pop: regular_order_products_stddev_pop_order_by
  stddev_samp: regular_order_products_stddev_samp_order_by
  sum: regular_order_products_sum_order_by
  var_pop: regular_order_products_var_pop_order_by
  var_samp: regular_order_products_var_samp_order_by
  variance: regular_order_products_variance_order_by
}

"""
input type for inserting array relation for remote table "regular_order_products"
"""
input regular_order_products_arr_rel_insert_input {
  data: [regular_order_products_insert_input!]!
}

"""aggregate avg on columns"""
type regular_order_products_avg_fields {
  product_id: Float
  regular_order_id: Float
}

"""
order by avg() on columns of table "regular_order_products"
"""
input regular_order_products_avg_order_by {
  product_id: order_by
  regular_order_id: order_by
}

"""
Boolean expression to filter rows from the table "regular_order_products". All fields are combined with a logical 'AND'.
"""
input regular_order_products_bool_exp {
  _and: [regular_order_products_bool_exp]
  _not: regular_order_products_bool_exp
  _or: [regular_order_products_bool_exp]
  product: products_bool_exp
  product_id: bigint_comparison_exp
  regular_order: regular_orders_bool_exp
  regular_order_id: bigint_comparison_exp
}

"""
input type for incrementing integer column in table "regular_order_products"
"""
input regular_order_products_inc_input {
  product_id: bigint
  regular_order_id: bigint
}

"""
input type for inserting data into table "regular_order_products"
"""
input regular_order_products_insert_input {
  product: products_obj_rel_insert_input
  product_id: bigint
  regular_order: regular_orders_obj_rel_insert_input
  regular_order_id: bigint
}

"""aggregate max on columns"""
type regular_order_products_max_fields {
  product_id: bigint
  regular_order_id: bigint
}

"""
order by max() on columns of table "regular_order_products"
"""
input regular_order_products_max_order_by {
  product_id: order_by
  regular_order_id: order_by
}

"""aggregate min on columns"""
type regular_order_products_min_fields {
  product_id: bigint
  regular_order_id: bigint
}

"""
order by min() on columns of table "regular_order_products"
"""
input regular_order_products_min_order_by {
  product_id: order_by
  regular_order_id: order_by
}

"""
response of any mutation on the table "regular_order_products"
"""
type regular_order_products_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [regular_order_products!]!
}

"""
input type for inserting object relation for remote table "regular_order_products"
"""
input regular_order_products_obj_rel_insert_input {
  data: regular_order_products_insert_input!
}

"""
ordering options when selecting data from "regular_order_products"
"""
input regular_order_products_order_by {
  product: products_order_by
  product_id: order_by
  regular_order: regular_orders_order_by
  regular_order_id: order_by
}

"""
select columns of table "regular_order_products"
"""
enum regular_order_products_select_column {
  """column name"""
  product_id

  """column name"""
  regular_order_id
}

"""
input type for updating data in table "regular_order_products"
"""
input regular_order_products_set_input {
  product_id: bigint
  regular_order_id: bigint
}

"""aggregate stddev on columns"""
type regular_order_products_stddev_fields {
  product_id: Float
  regular_order_id: Float
}

"""
order by stddev() on columns of table "regular_order_products"
"""
input regular_order_products_stddev_order_by {
  product_id: order_by
  regular_order_id: order_by
}

"""aggregate stddev_pop on columns"""
type regular_order_products_stddev_pop_fields {
  product_id: Float
  regular_order_id: Float
}

"""
order by stddev_pop() on columns of table "regular_order_products"
"""
input regular_order_products_stddev_pop_order_by {
  product_id: order_by
  regular_order_id: order_by
}

"""aggregate stddev_samp on columns"""
type regular_order_products_stddev_samp_fields {
  product_id: Float
  regular_order_id: Float
}

"""
order by stddev_samp() on columns of table "regular_order_products"
"""
input regular_order_products_stddev_samp_order_by {
  product_id: order_by
  regular_order_id: order_by
}

"""aggregate sum on columns"""
type regular_order_products_sum_fields {
  product_id: bigint
  regular_order_id: bigint
}

"""
order by sum() on columns of table "regular_order_products"
"""
input regular_order_products_sum_order_by {
  product_id: order_by
  regular_order_id: order_by
}

"""aggregate var_pop on columns"""
type regular_order_products_var_pop_fields {
  product_id: Float
  regular_order_id: Float
}

"""
order by var_pop() on columns of table "regular_order_products"
"""
input regular_order_products_var_pop_order_by {
  product_id: order_by
  regular_order_id: order_by
}

"""aggregate var_samp on columns"""
type regular_order_products_var_samp_fields {
  product_id: Float
  regular_order_id: Float
}

"""
order by var_samp() on columns of table "regular_order_products"
"""
input regular_order_products_var_samp_order_by {
  product_id: order_by
  regular_order_id: order_by
}

"""aggregate variance on columns"""
type regular_order_products_variance_fields {
  product_id: Float
  regular_order_id: Float
}

"""
order by variance() on columns of table "regular_order_products"
"""
input regular_order_products_variance_order_by {
  product_id: order_by
  regular_order_id: order_by
}

"""
columns and relationships of "regular_orders"
"""
type regular_orders {
  """An array relationship"""
  actual_orders(
    """distinct select on columns"""
    distinct_on: [actual_orders_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [actual_orders_order_by!]

    """filter the rows returned"""
    where: actual_orders_bool_exp
  ): [actual_orders!]!

  """An aggregated array relationship"""
  actual_orders_aggregate(
    """distinct select on columns"""
    distinct_on: [actual_orders_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [actual_orders_order_by!]

    """filter the rows returned"""
    where: actual_orders_bool_exp
  ): actual_orders_aggregate!

  """An object relationship"""
  customer: customers
  distributer_id: bigint
  regular_order_id: bigint!

  """An array relationship"""
  regular_order_products(
    """distinct select on columns"""
    distinct_on: [regular_order_products_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [regular_order_products_order_by!]

    """filter the rows returned"""
    where: regular_order_products_bool_exp
  ): [regular_order_products!]!

  """An aggregated array relationship"""
  regular_order_products_aggregate(
    """distinct select on columns"""
    distinct_on: [regular_order_products_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [regular_order_products_order_by!]

    """filter the rows returned"""
    where: regular_order_products_bool_exp
  ): regular_order_products_aggregate!
}

"""
aggregated selection of "regular_orders"
"""
type regular_orders_aggregate {
  aggregate: regular_orders_aggregate_fields
  nodes: [regular_orders!]!
}

"""
aggregate fields of "regular_orders"
"""
type regular_orders_aggregate_fields {
  avg: regular_orders_avg_fields
  count(columns: [regular_orders_select_column!], distinct: Boolean): Int
  max: regular_orders_max_fields
  min: regular_orders_min_fields
  stddev: regular_orders_stddev_fields
  stddev_pop: regular_orders_stddev_pop_fields
  stddev_samp: regular_orders_stddev_samp_fields
  sum: regular_orders_sum_fields
  var_pop: regular_orders_var_pop_fields
  var_samp: regular_orders_var_samp_fields
  variance: regular_orders_variance_fields
}

"""
order by aggregate values of table "regular_orders"
"""
input regular_orders_aggregate_order_by {
  avg: regular_orders_avg_order_by
  count: order_by
  max: regular_orders_max_order_by
  min: regular_orders_min_order_by
  stddev: regular_orders_stddev_order_by
  stddev_pop: regular_orders_stddev_pop_order_by
  stddev_samp: regular_orders_stddev_samp_order_by
  sum: regular_orders_sum_order_by
  var_pop: regular_orders_var_pop_order_by
  var_samp: regular_orders_var_samp_order_by
  variance: regular_orders_variance_order_by
}

"""
input type for inserting array relation for remote table "regular_orders"
"""
input regular_orders_arr_rel_insert_input {
  data: [regular_orders_insert_input!]!
  on_conflict: regular_orders_on_conflict
}

"""aggregate avg on columns"""
type regular_orders_avg_fields {
  distributer_id: Float
  regular_order_id: Float
}

"""
order by avg() on columns of table "regular_orders"
"""
input regular_orders_avg_order_by {
  distributer_id: order_by
  regular_order_id: order_by
}

"""
Boolean expression to filter rows from the table "regular_orders". All fields are combined with a logical 'AND'.
"""
input regular_orders_bool_exp {
  _and: [regular_orders_bool_exp]
  _not: regular_orders_bool_exp
  _or: [regular_orders_bool_exp]
  actual_orders: actual_orders_bool_exp
  customer: customers_bool_exp
  distributer_id: bigint_comparison_exp
  regular_order_id: bigint_comparison_exp
  regular_order_products: regular_order_products_bool_exp
}

"""
unique or primary key constraints on table "regular_orders"
"""
enum regular_orders_constraint {
  """unique or primary key constraint"""
  idx_21307_regular_orders_pkey
}

"""
input type for incrementing integer column in table "regular_orders"
"""
input regular_orders_inc_input {
  distributer_id: bigint
  regular_order_id: bigint
}

"""
input type for inserting data into table "regular_orders"
"""
input regular_orders_insert_input {
  actual_orders: actual_orders_arr_rel_insert_input
  customer: customers_obj_rel_insert_input
  distributer_id: bigint
  regular_order_id: bigint
  regular_order_products: regular_order_products_arr_rel_insert_input
}

"""aggregate max on columns"""
type regular_orders_max_fields {
  distributer_id: bigint
  regular_order_id: bigint
}

"""
order by max() on columns of table "regular_orders"
"""
input regular_orders_max_order_by {
  distributer_id: order_by
  regular_order_id: order_by
}

"""aggregate min on columns"""
type regular_orders_min_fields {
  distributer_id: bigint
  regular_order_id: bigint
}

"""
order by min() on columns of table "regular_orders"
"""
input regular_orders_min_order_by {
  distributer_id: order_by
  regular_order_id: order_by
}

"""
response of any mutation on the table "regular_orders"
"""
type regular_orders_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [regular_orders!]!
}

"""
input type for inserting object relation for remote table "regular_orders"
"""
input regular_orders_obj_rel_insert_input {
  data: regular_orders_insert_input!
  on_conflict: regular_orders_on_conflict
}

"""
on conflict condition type for table "regular_orders"
"""
input regular_orders_on_conflict {
  constraint: regular_orders_constraint!
  update_columns: [regular_orders_update_column!]!
  where: regular_orders_bool_exp
}

"""
ordering options when selecting data from "regular_orders"
"""
input regular_orders_order_by {
  actual_orders_aggregate: actual_orders_aggregate_order_by
  customer: customers_order_by
  distributer_id: order_by
  regular_order_id: order_by
  regular_order_products_aggregate: regular_order_products_aggregate_order_by
}

"""
primary key columns input for table: "regular_orders"
"""
input regular_orders_pk_columns_input {
  regular_order_id: bigint!
}

"""
select columns of table "regular_orders"
"""
enum regular_orders_select_column {
  """column name"""
  distributer_id

  """column name"""
  regular_order_id
}

"""
input type for updating data in table "regular_orders"
"""
input regular_orders_set_input {
  distributer_id: bigint
  regular_order_id: bigint
}

"""aggregate stddev on columns"""
type regular_orders_stddev_fields {
  distributer_id: Float
  regular_order_id: Float
}

"""
order by stddev() on columns of table "regular_orders"
"""
input regular_orders_stddev_order_by {
  distributer_id: order_by
  regular_order_id: order_by
}

"""aggregate stddev_pop on columns"""
type regular_orders_stddev_pop_fields {
  distributer_id: Float
  regular_order_id: Float
}

"""
order by stddev_pop() on columns of table "regular_orders"
"""
input regular_orders_stddev_pop_order_by {
  distributer_id: order_by
  regular_order_id: order_by
}

"""aggregate stddev_samp on columns"""
type regular_orders_stddev_samp_fields {
  distributer_id: Float
  regular_order_id: Float
}

"""
order by stddev_samp() on columns of table "regular_orders"
"""
input regular_orders_stddev_samp_order_by {
  distributer_id: order_by
  regular_order_id: order_by
}

"""aggregate sum on columns"""
type regular_orders_sum_fields {
  distributer_id: bigint
  regular_order_id: bigint
}

"""
order by sum() on columns of table "regular_orders"
"""
input regular_orders_sum_order_by {
  distributer_id: order_by
  regular_order_id: order_by
}

"""
update columns of table "regular_orders"
"""
enum regular_orders_update_column {
  """column name"""
  distributer_id

  """column name"""
  regular_order_id
}

"""aggregate var_pop on columns"""
type regular_orders_var_pop_fields {
  distributer_id: Float
  regular_order_id: Float
}

"""
order by var_pop() on columns of table "regular_orders"
"""
input regular_orders_var_pop_order_by {
  distributer_id: order_by
  regular_order_id: order_by
}

"""aggregate var_samp on columns"""
type regular_orders_var_samp_fields {
  distributer_id: Float
  regular_order_id: Float
}

"""
order by var_samp() on columns of table "regular_orders"
"""
input regular_orders_var_samp_order_by {
  distributer_id: order_by
  regular_order_id: order_by
}

"""aggregate variance on columns"""
type regular_orders_variance_fields {
  distributer_id: Float
  regular_order_id: Float
}

"""
order by variance() on columns of table "regular_orders"
"""
input regular_orders_variance_order_by {
  distributer_id: order_by
  regular_order_id: order_by
}

"""
expression to compare columns of type String. All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String
  _ilike: String
  _in: [String!]
  _is_null: Boolean
  _like: String
  _lt: String
  _lte: String
  _neq: String
  _nilike: String
  _nin: [String!]
  _nlike: String
  _nsimilar: String
  _similar: String
}

"""subscription root"""
type subscription_root {
  """
  fetch data from the table: "actual_order_products"
  """
  actual_order_products(
    """distinct select on columns"""
    distinct_on: [actual_order_products_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [actual_order_products_order_by!]

    """filter the rows returned"""
    where: actual_order_products_bool_exp
  ): [actual_order_products!]!

  """
  fetch aggregated fields from the table: "actual_order_products"
  """
  actual_order_products_aggregate(
    """distinct select on columns"""
    distinct_on: [actual_order_products_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [actual_order_products_order_by!]

    """filter the rows returned"""
    where: actual_order_products_bool_exp
  ): actual_order_products_aggregate!

  """
  fetch data from the table: "actual_orders"
  """
  actual_orders(
    """distinct select on columns"""
    distinct_on: [actual_orders_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [actual_orders_order_by!]

    """filter the rows returned"""
    where: actual_orders_bool_exp
  ): [actual_orders!]!

  """
  fetch aggregated fields from the table: "actual_orders"
  """
  actual_orders_aggregate(
    """distinct select on columns"""
    distinct_on: [actual_orders_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [actual_orders_order_by!]

    """filter the rows returned"""
    where: actual_orders_bool_exp
  ): actual_orders_aggregate!

  """fetch data from the table: "actual_orders" using primary key columns"""
  actual_orders_by_pk(actual_order_id: bigint!): actual_orders

  """
  fetch data from the table: "addresses"
  """
  addresses(
    """distinct select on columns"""
    distinct_on: [addresses_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [addresses_order_by!]

    """filter the rows returned"""
    where: addresses_bool_exp
  ): [addresses!]!

  """
  fetch aggregated fields from the table: "addresses"
  """
  addresses_aggregate(
    """distinct select on columns"""
    distinct_on: [addresses_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [addresses_order_by!]

    """filter the rows returned"""
    where: addresses_bool_exp
  ): addresses_aggregate!

  """fetch data from the table: "addresses" using primary key columns"""
  addresses_by_pk(address_id: bigint!): addresses

  """
  fetch data from the table: "customer_addresses"
  """
  customer_addresses(
    """distinct select on columns"""
    distinct_on: [customer_addresses_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [customer_addresses_order_by!]

    """filter the rows returned"""
    where: customer_addresses_bool_exp
  ): [customer_addresses!]!

  """
  fetch aggregated fields from the table: "customer_addresses"
  """
  customer_addresses_aggregate(
    """distinct select on columns"""
    distinct_on: [customer_addresses_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [customer_addresses_order_by!]

    """filter the rows returned"""
    where: customer_addresses_bool_exp
  ): customer_addresses_aggregate!

  """
  fetch data from the table: "customers"
  """
  customers(
    """distinct select on columns"""
    distinct_on: [customers_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [customers_order_by!]

    """filter the rows returned"""
    where: customers_bool_exp
  ): [customers!]!

  """
  fetch aggregated fields from the table: "customers"
  """
  customers_aggregate(
    """distinct select on columns"""
    distinct_on: [customers_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [customers_order_by!]

    """filter the rows returned"""
    where: customers_bool_exp
  ): customers_aggregate!

  """fetch data from the table: "customers" using primary key columns"""
  customers_by_pk(customer_id: bigint!): customers

  """
  fetch data from the table: "delivery_route_locations"
  """
  delivery_route_locations(
    """distinct select on columns"""
    distinct_on: [delivery_route_locations_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [delivery_route_locations_order_by!]

    """filter the rows returned"""
    where: delivery_route_locations_bool_exp
  ): [delivery_route_locations!]!

  """
  fetch aggregated fields from the table: "delivery_route_locations"
  """
  delivery_route_locations_aggregate(
    """distinct select on columns"""
    distinct_on: [delivery_route_locations_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [delivery_route_locations_order_by!]

    """filter the rows returned"""
    where: delivery_route_locations_bool_exp
  ): delivery_route_locations_aggregate!

  """
  fetch data from the table: "delivery_route_locations" using primary key columns
  """
  delivery_route_locations_by_pk(location_code: String!): delivery_route_locations

  """
  fetch data from the table: "delivery_routes"
  """
  delivery_routes(
    """distinct select on columns"""
    distinct_on: [delivery_routes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [delivery_routes_order_by!]

    """filter the rows returned"""
    where: delivery_routes_bool_exp
  ): [delivery_routes!]!

  """
  fetch aggregated fields from the table: "delivery_routes"
  """
  delivery_routes_aggregate(
    """distinct select on columns"""
    distinct_on: [delivery_routes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [delivery_routes_order_by!]

    """filter the rows returned"""
    where: delivery_routes_bool_exp
  ): delivery_routes_aggregate!

  """fetch data from the table: "delivery_routes" using primary key columns"""
  delivery_routes_by_pk(route_id: bigint!): delivery_routes

  """
  fetch data from the table: "employees"
  """
  employees(
    """distinct select on columns"""
    distinct_on: [employees_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [employees_order_by!]

    """filter the rows returned"""
    where: employees_bool_exp
  ): [employees!]!

  """
  fetch aggregated fields from the table: "employees"
  """
  employees_aggregate(
    """distinct select on columns"""
    distinct_on: [employees_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [employees_order_by!]

    """filter the rows returned"""
    where: employees_bool_exp
  ): employees_aggregate!

  """fetch data from the table: "employees" using primary key columns"""
  employees_by_pk(employee_id: bigint!): employees

  """
  fetch data from the table: "order_deliveries"
  """
  order_deliveries(
    """distinct select on columns"""
    distinct_on: [order_deliveries_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [order_deliveries_order_by!]

    """filter the rows returned"""
    where: order_deliveries_bool_exp
  ): [order_deliveries!]!

  """
  fetch aggregated fields from the table: "order_deliveries"
  """
  order_deliveries_aggregate(
    """distinct select on columns"""
    distinct_on: [order_deliveries_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [order_deliveries_order_by!]

    """filter the rows returned"""
    where: order_deliveries_bool_exp
  ): order_deliveries_aggregate!

  """
  fetch data from the table: "products"
  """
  products(
    """distinct select on columns"""
    distinct_on: [products_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [products_order_by!]

    """filter the rows returned"""
    where: products_bool_exp
  ): [products!]!

  """
  fetch aggregated fields from the table: "products"
  """
  products_aggregate(
    """distinct select on columns"""
    distinct_on: [products_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [products_order_by!]

    """filter the rows returned"""
    where: products_bool_exp
  ): products_aggregate!

  """fetch data from the table: "products" using primary key columns"""
  products_by_pk(product_id: bigint!): products

  """
  fetch data from the table: "regular_order_products"
  """
  regular_order_products(
    """distinct select on columns"""
    distinct_on: [regular_order_products_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [regular_order_products_order_by!]

    """filter the rows returned"""
    where: regular_order_products_bool_exp
  ): [regular_order_products!]!

  """
  fetch aggregated fields from the table: "regular_order_products"
  """
  regular_order_products_aggregate(
    """distinct select on columns"""
    distinct_on: [regular_order_products_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [regular_order_products_order_by!]

    """filter the rows returned"""
    where: regular_order_products_bool_exp
  ): regular_order_products_aggregate!

  """
  fetch data from the table: "regular_orders"
  """
  regular_orders(
    """distinct select on columns"""
    distinct_on: [regular_orders_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [regular_orders_order_by!]

    """filter the rows returned"""
    where: regular_orders_bool_exp
  ): [regular_orders!]!

  """
  fetch aggregated fields from the table: "regular_orders"
  """
  regular_orders_aggregate(
    """distinct select on columns"""
    distinct_on: [regular_orders_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [regular_orders_order_by!]

    """filter the rows returned"""
    where: regular_orders_bool_exp
  ): regular_orders_aggregate!

  """fetch data from the table: "regular_orders" using primary key columns"""
  regular_orders_by_pk(regular_order_id: bigint!): regular_orders

  """
  fetch data from the table: "trucks"
  """
  trucks(
    """distinct select on columns"""
    distinct_on: [trucks_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [trucks_order_by!]

    """filter the rows returned"""
    where: trucks_bool_exp
  ): [trucks!]!

  """
  fetch aggregated fields from the table: "trucks"
  """
  trucks_aggregate(
    """distinct select on columns"""
    distinct_on: [trucks_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [trucks_order_by!]

    """filter the rows returned"""
    where: trucks_bool_exp
  ): trucks_aggregate!

  """fetch data from the table: "trucks" using primary key columns"""
  trucks_by_pk(truck_id: bigint!): trucks
}

scalar timestamptz

"""
expression to compare columns of type timestamptz. All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}

"""
columns and relationships of "trucks"
"""
type trucks {
  """An array relationship"""
  order_deliveries(
    """distinct select on columns"""
    distinct_on: [order_deliveries_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [order_deliveries_order_by!]

    """filter the rows returned"""
    where: order_deliveries_bool_exp
  ): [order_deliveries!]!

  """An aggregated array relationship"""
  order_deliveries_aggregate(
    """distinct select on columns"""
    distinct_on: [order_deliveries_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [order_deliveries_order_by!]

    """filter the rows returned"""
    where: order_deliveries_bool_exp
  ): order_deliveries_aggregate!
  truck_details: String
  truck_id: bigint!
  truck_licence_number: String
}

"""
aggregated selection of "trucks"
"""
type trucks_aggregate {
  aggregate: trucks_aggregate_fields
  nodes: [trucks!]!
}

"""
aggregate fields of "trucks"
"""
type trucks_aggregate_fields {
  avg: trucks_avg_fields
  count(columns: [trucks_select_column!], distinct: Boolean): Int
  max: trucks_max_fields
  min: trucks_min_fields
  stddev: trucks_stddev_fields
  stddev_pop: trucks_stddev_pop_fields
  stddev_samp: trucks_stddev_samp_fields
  sum: trucks_sum_fields
  var_pop: trucks_var_pop_fields
  var_samp: trucks_var_samp_fields
  variance: trucks_variance_fields
}

"""
order by aggregate values of table "trucks"
"""
input trucks_aggregate_order_by {
  avg: trucks_avg_order_by
  count: order_by
  max: trucks_max_order_by
  min: trucks_min_order_by
  stddev: trucks_stddev_order_by
  stddev_pop: trucks_stddev_pop_order_by
  stddev_samp: trucks_stddev_samp_order_by
  sum: trucks_sum_order_by
  var_pop: trucks_var_pop_order_by
  var_samp: trucks_var_samp_order_by
  variance: trucks_variance_order_by
}

"""
input type for inserting array relation for remote table "trucks"
"""
input trucks_arr_rel_insert_input {
  data: [trucks_insert_input!]!
  on_conflict: trucks_on_conflict
}

"""aggregate avg on columns"""
type trucks_avg_fields {
  truck_id: Float
}

"""
order by avg() on columns of table "trucks"
"""
input trucks_avg_order_by {
  truck_id: order_by
}

"""
Boolean expression to filter rows from the table "trucks". All fields are combined with a logical 'AND'.
"""
input trucks_bool_exp {
  _and: [trucks_bool_exp]
  _not: trucks_bool_exp
  _or: [trucks_bool_exp]
  order_deliveries: order_deliveries_bool_exp
  truck_details: String_comparison_exp
  truck_id: bigint_comparison_exp
  truck_licence_number: String_comparison_exp
}

"""
unique or primary key constraints on table "trucks"
"""
enum trucks_constraint {
  """unique or primary key constraint"""
  idx_21340_trucks_pkey
}

"""
input type for incrementing integer column in table "trucks"
"""
input trucks_inc_input {
  truck_id: bigint
}

"""
input type for inserting data into table "trucks"
"""
input trucks_insert_input {
  order_deliveries: order_deliveries_arr_rel_insert_input
  truck_details: String
  truck_id: bigint
  truck_licence_number: String
}

"""aggregate max on columns"""
type trucks_max_fields {
  truck_details: String
  truck_id: bigint
  truck_licence_number: String
}

"""
order by max() on columns of table "trucks"
"""
input trucks_max_order_by {
  truck_details: order_by
  truck_id: order_by
  truck_licence_number: order_by
}

"""aggregate min on columns"""
type trucks_min_fields {
  truck_details: String
  truck_id: bigint
  truck_licence_number: String
}

"""
order by min() on columns of table "trucks"
"""
input trucks_min_order_by {
  truck_details: order_by
  truck_id: order_by
  truck_licence_number: order_by
}

"""
response of any mutation on the table "trucks"
"""
type trucks_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [trucks!]!
}

"""
input type for inserting object relation for remote table "trucks"
"""
input trucks_obj_rel_insert_input {
  data: trucks_insert_input!
  on_conflict: trucks_on_conflict
}

"""
on conflict condition type for table "trucks"
"""
input trucks_on_conflict {
  constraint: trucks_constraint!
  update_columns: [trucks_update_column!]!
  where: trucks_bool_exp
}

"""
ordering options when selecting data from "trucks"
"""
input trucks_order_by {
  order_deliveries_aggregate: order_deliveries_aggregate_order_by
  truck_details: order_by
  truck_id: order_by
  truck_licence_number: order_by
}

"""
primary key columns input for table: "trucks"
"""
input trucks_pk_columns_input {
  truck_id: bigint!
}

"""
select columns of table "trucks"
"""
enum trucks_select_column {
  """column name"""
  truck_details

  """column name"""
  truck_id

  """column name"""
  truck_licence_number
}

"""
input type for updating data in table "trucks"
"""
input trucks_set_input {
  truck_details: String
  truck_id: bigint
  truck_licence_number: String
}

"""aggregate stddev on columns"""
type trucks_stddev_fields {
  truck_id: Float
}

"""
order by stddev() on columns of table "trucks"
"""
input trucks_stddev_order_by {
  truck_id: order_by
}

"""aggregate stddev_pop on columns"""
type trucks_stddev_pop_fields {
  truck_id: Float
}

"""
order by stddev_pop() on columns of table "trucks"
"""
input trucks_stddev_pop_order_by {
  truck_id: order_by
}

"""aggregate stddev_samp on columns"""
type trucks_stddev_samp_fields {
  truck_id: Float
}

"""
order by stddev_samp() on columns of table "trucks"
"""
input trucks_stddev_samp_order_by {
  truck_id: order_by
}

"""aggregate sum on columns"""
type trucks_sum_fields {
  truck_id: bigint
}

"""
order by sum() on columns of table "trucks"
"""
input trucks_sum_order_by {
  truck_id: order_by
}

"""
update columns of table "trucks"
"""
enum trucks_update_column {
  """column name"""
  truck_details

  """column name"""
  truck_id

  """column name"""
  truck_licence_number
}

"""aggregate var_pop on columns"""
type trucks_var_pop_fields {
  truck_id: Float
}

"""
order by var_pop() on columns of table "trucks"
"""
input trucks_var_pop_order_by {
  truck_id: order_by
}

"""aggregate var_samp on columns"""
type trucks_var_samp_fields {
  truck_id: Float
}

"""
order by var_samp() on columns of table "trucks"
"""
input trucks_var_samp_order_by {
  truck_id: order_by
}

"""aggregate variance on columns"""
type trucks_variance_fields {
  truck_id: Float
}

"""
order by variance() on columns of table "trucks"
"""
input trucks_variance_order_by {
  truck_id: order_by
}
