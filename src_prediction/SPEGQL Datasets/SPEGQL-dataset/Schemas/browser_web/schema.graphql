schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""
Direct the client to resolve this field locally, either from the cache or local resolvers.
"""
directive @client(
  """
  When true, the client will never use the cache for this value. See
  https://www.apollographql.com/docs/react/essentials/local-state/#forcing-resolvers-with-clientalways-true
  """
  always: Boolean
) on FIELD | FRAGMENT_DEFINITION | INLINE_FRAGMENT

"""
Export this locally resolved field as a variable to be used in the remainder of this query. See
https://www.apollographql.com/docs/react/essentials/local-state/#using-client-fields-as-variables
"""
directive @export(
  """The variable name to export this field as."""
  as: String!
) on FIELD

"""
Specify a custom store key for this result. See
https://www.apollographql.com/docs/react/advanced/caching/#the-connection-directive
"""
directive @connection(
  """Specify the store key."""
  key: String!

  """
  An array of query argument names to include in the generated custom store key.
  """
  filter: [String!]
) on FIELD

"""
columns and relationships of "accelerator_compatible_browser"
"""
type accelerator_compatible_browser {
  accelerator_id: Int!

  """An object relationship"""
  browser: browser!
  browser_id: Int!
  compatible_since_year: Int

  """An object relationship"""
  web_client_accelerator: web_client_accelerator!
}

"""
aggregated selection of "accelerator_compatible_browser"
"""
type accelerator_compatible_browser_aggregate {
  aggregate: accelerator_compatible_browser_aggregate_fields
  nodes: [accelerator_compatible_browser!]!
}

"""
aggregate fields of "accelerator_compatible_browser"
"""
type accelerator_compatible_browser_aggregate_fields {
  avg: accelerator_compatible_browser_avg_fields
  count(columns: [accelerator_compatible_browser_select_column!], distinct: Boolean): Int
  max: accelerator_compatible_browser_max_fields
  min: accelerator_compatible_browser_min_fields
  stddev: accelerator_compatible_browser_stddev_fields
  stddev_pop: accelerator_compatible_browser_stddev_pop_fields
  stddev_samp: accelerator_compatible_browser_stddev_samp_fields
  sum: accelerator_compatible_browser_sum_fields
  var_pop: accelerator_compatible_browser_var_pop_fields
  var_samp: accelerator_compatible_browser_var_samp_fields
  variance: accelerator_compatible_browser_variance_fields
}

"""
order by aggregate values of table "accelerator_compatible_browser"
"""
input accelerator_compatible_browser_aggregate_order_by {
  avg: accelerator_compatible_browser_avg_order_by
  count: order_by
  max: accelerator_compatible_browser_max_order_by
  min: accelerator_compatible_browser_min_order_by
  stddev: accelerator_compatible_browser_stddev_order_by
  stddev_pop: accelerator_compatible_browser_stddev_pop_order_by
  stddev_samp: accelerator_compatible_browser_stddev_samp_order_by
  sum: accelerator_compatible_browser_sum_order_by
  var_pop: accelerator_compatible_browser_var_pop_order_by
  var_samp: accelerator_compatible_browser_var_samp_order_by
  variance: accelerator_compatible_browser_variance_order_by
}

"""
input type for inserting array relation for remote table "accelerator_compatible_browser"
"""
input accelerator_compatible_browser_arr_rel_insert_input {
  data: [accelerator_compatible_browser_insert_input!]!
  on_conflict: accelerator_compatible_browser_on_conflict
}

"""aggregate avg on columns"""
type accelerator_compatible_browser_avg_fields {
  accelerator_id: Float
  browser_id: Float
  compatible_since_year: Float
}

"""
order by avg() on columns of table "accelerator_compatible_browser"
"""
input accelerator_compatible_browser_avg_order_by {
  accelerator_id: order_by
  browser_id: order_by
  compatible_since_year: order_by
}

"""
Boolean expression to filter rows from the table
"accelerator_compatible_browser". All fields are combined with a logical 'AND'.
"""
input accelerator_compatible_browser_bool_exp {
  _and: [accelerator_compatible_browser_bool_exp]
  _not: accelerator_compatible_browser_bool_exp
  _or: [accelerator_compatible_browser_bool_exp]
  accelerator_id: Int_comparison_exp
  browser: browser_bool_exp
  browser_id: Int_comparison_exp
  compatible_since_year: Int_comparison_exp
  web_client_accelerator: web_client_accelerator_bool_exp
}

"""
unique or primary key constraints on table "accelerator_compatible_browser"
"""
enum accelerator_compatible_browser_constraint {
  """unique or primary key constraint"""
  idx_17056_sqlite_autoindex_accelerator_compatible_browser_1
}

"""
input type for incrementing integer column in table "accelerator_compatible_browser"
"""
input accelerator_compatible_browser_inc_input {
  accelerator_id: Int
  browser_id: Int
  compatible_since_year: Int
}

"""
input type for inserting data into table "accelerator_compatible_browser"
"""
input accelerator_compatible_browser_insert_input {
  accelerator_id: Int
  browser: browser_obj_rel_insert_input
  browser_id: Int
  compatible_since_year: Int
  web_client_accelerator: web_client_accelerator_obj_rel_insert_input
}

"""aggregate max on columns"""
type accelerator_compatible_browser_max_fields {
  accelerator_id: Int
  browser_id: Int
  compatible_since_year: Int
}

"""
order by max() on columns of table "accelerator_compatible_browser"
"""
input accelerator_compatible_browser_max_order_by {
  accelerator_id: order_by
  browser_id: order_by
  compatible_since_year: order_by
}

"""aggregate min on columns"""
type accelerator_compatible_browser_min_fields {
  accelerator_id: Int
  browser_id: Int
  compatible_since_year: Int
}

"""
order by min() on columns of table "accelerator_compatible_browser"
"""
input accelerator_compatible_browser_min_order_by {
  accelerator_id: order_by
  browser_id: order_by
  compatible_since_year: order_by
}

"""
response of any mutation on the table "accelerator_compatible_browser"
"""
type accelerator_compatible_browser_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [accelerator_compatible_browser!]!
}

"""
input type for inserting object relation for remote table "accelerator_compatible_browser"
"""
input accelerator_compatible_browser_obj_rel_insert_input {
  data: accelerator_compatible_browser_insert_input!
  on_conflict: accelerator_compatible_browser_on_conflict
}

"""
on conflict condition type for table "accelerator_compatible_browser"
"""
input accelerator_compatible_browser_on_conflict {
  constraint: accelerator_compatible_browser_constraint!
  update_columns: [accelerator_compatible_browser_update_column!]!
  where: accelerator_compatible_browser_bool_exp
}

"""
ordering options when selecting data from "accelerator_compatible_browser"
"""
input accelerator_compatible_browser_order_by {
  accelerator_id: order_by
  browser: browser_order_by
  browser_id: order_by
  compatible_since_year: order_by
  web_client_accelerator: web_client_accelerator_order_by
}

"""
primary key columns input for table: "accelerator_compatible_browser"
"""
input accelerator_compatible_browser_pk_columns_input {
  accelerator_id: Int!
  browser_id: Int!
}

"""
select columns of table "accelerator_compatible_browser"
"""
enum accelerator_compatible_browser_select_column {
  """column name"""
  accelerator_id

  """column name"""
  browser_id

  """column name"""
  compatible_since_year
}

"""
input type for updating data in table "accelerator_compatible_browser"
"""
input accelerator_compatible_browser_set_input {
  accelerator_id: Int
  browser_id: Int
  compatible_since_year: Int
}

"""aggregate stddev on columns"""
type accelerator_compatible_browser_stddev_fields {
  accelerator_id: Float
  browser_id: Float
  compatible_since_year: Float
}

"""
order by stddev() on columns of table "accelerator_compatible_browser"
"""
input accelerator_compatible_browser_stddev_order_by {
  accelerator_id: order_by
  browser_id: order_by
  compatible_since_year: order_by
}

"""aggregate stddev_pop on columns"""
type accelerator_compatible_browser_stddev_pop_fields {
  accelerator_id: Float
  browser_id: Float
  compatible_since_year: Float
}

"""
order by stddev_pop() on columns of table "accelerator_compatible_browser"
"""
input accelerator_compatible_browser_stddev_pop_order_by {
  accelerator_id: order_by
  browser_id: order_by
  compatible_since_year: order_by
}

"""aggregate stddev_samp on columns"""
type accelerator_compatible_browser_stddev_samp_fields {
  accelerator_id: Float
  browser_id: Float
  compatible_since_year: Float
}

"""
order by stddev_samp() on columns of table "accelerator_compatible_browser"
"""
input accelerator_compatible_browser_stddev_samp_order_by {
  accelerator_id: order_by
  browser_id: order_by
  compatible_since_year: order_by
}

"""aggregate sum on columns"""
type accelerator_compatible_browser_sum_fields {
  accelerator_id: Int
  browser_id: Int
  compatible_since_year: Int
}

"""
order by sum() on columns of table "accelerator_compatible_browser"
"""
input accelerator_compatible_browser_sum_order_by {
  accelerator_id: order_by
  browser_id: order_by
  compatible_since_year: order_by
}

"""
update columns of table "accelerator_compatible_browser"
"""
enum accelerator_compatible_browser_update_column {
  """column name"""
  accelerator_id

  """column name"""
  browser_id

  """column name"""
  compatible_since_year
}

"""aggregate var_pop on columns"""
type accelerator_compatible_browser_var_pop_fields {
  accelerator_id: Float
  browser_id: Float
  compatible_since_year: Float
}

"""
order by var_pop() on columns of table "accelerator_compatible_browser"
"""
input accelerator_compatible_browser_var_pop_order_by {
  accelerator_id: order_by
  browser_id: order_by
  compatible_since_year: order_by
}

"""aggregate var_samp on columns"""
type accelerator_compatible_browser_var_samp_fields {
  accelerator_id: Float
  browser_id: Float
  compatible_since_year: Float
}

"""
order by var_samp() on columns of table "accelerator_compatible_browser"
"""
input accelerator_compatible_browser_var_samp_order_by {
  accelerator_id: order_by
  browser_id: order_by
  compatible_since_year: order_by
}

"""aggregate variance on columns"""
type accelerator_compatible_browser_variance_fields {
  accelerator_id: Float
  browser_id: Float
  compatible_since_year: Float
}

"""
order by variance() on columns of table "accelerator_compatible_browser"
"""
input accelerator_compatible_browser_variance_order_by {
  accelerator_id: order_by
  browser_id: order_by
  compatible_since_year: order_by
}

"""
columns and relationships of "browser"
"""
type browser {
  """An array relationship"""
  accelerator_compatible_browsers(
    """distinct select on columns"""
    distinct_on: [accelerator_compatible_browser_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [accelerator_compatible_browser_order_by!]

    """filter the rows returned"""
    where: accelerator_compatible_browser_bool_exp
  ): [accelerator_compatible_browser!]!

  """An aggregated array relationship"""
  accelerator_compatible_browsers_aggregate(
    """distinct select on columns"""
    distinct_on: [accelerator_compatible_browser_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [accelerator_compatible_browser_order_by!]

    """filter the rows returned"""
    where: accelerator_compatible_browser_bool_exp
  ): accelerator_compatible_browser_aggregate!
  id: Int!
  market_share: Float
  name: String
}

"""
aggregated selection of "browser"
"""
type browser_aggregate {
  aggregate: browser_aggregate_fields
  nodes: [browser!]!
}

"""
aggregate fields of "browser"
"""
type browser_aggregate_fields {
  avg: browser_avg_fields
  count(columns: [browser_select_column!], distinct: Boolean): Int
  max: browser_max_fields
  min: browser_min_fields
  stddev: browser_stddev_fields
  stddev_pop: browser_stddev_pop_fields
  stddev_samp: browser_stddev_samp_fields
  sum: browser_sum_fields
  var_pop: browser_var_pop_fields
  var_samp: browser_var_samp_fields
  variance: browser_variance_fields
}

"""
order by aggregate values of table "browser"
"""
input browser_aggregate_order_by {
  avg: browser_avg_order_by
  count: order_by
  max: browser_max_order_by
  min: browser_min_order_by
  stddev: browser_stddev_order_by
  stddev_pop: browser_stddev_pop_order_by
  stddev_samp: browser_stddev_samp_order_by
  sum: browser_sum_order_by
  var_pop: browser_var_pop_order_by
  var_samp: browser_var_samp_order_by
  variance: browser_variance_order_by
}

"""
input type for inserting array relation for remote table "browser"
"""
input browser_arr_rel_insert_input {
  data: [browser_insert_input!]!
  on_conflict: browser_on_conflict
}

"""aggregate avg on columns"""
type browser_avg_fields {
  id: Float
  market_share: Float
}

"""
order by avg() on columns of table "browser"
"""
input browser_avg_order_by {
  id: order_by
  market_share: order_by
}

"""
Boolean expression to filter rows from the table "browser". All fields are combined with a logical 'AND'.
"""
input browser_bool_exp {
  _and: [browser_bool_exp]
  _not: browser_bool_exp
  _or: [browser_bool_exp]
  accelerator_compatible_browsers: accelerator_compatible_browser_bool_exp
  id: Int_comparison_exp
  market_share: Float_comparison_exp
  name: String_comparison_exp
}

"""
unique or primary key constraints on table "browser"
"""
enum browser_constraint {
  """unique or primary key constraint"""
  idx_17050_sqlite_autoindex_browser_1
}

"""
input type for incrementing integer column in table "browser"
"""
input browser_inc_input {
  id: Int
  market_share: Float
}

"""
input type for inserting data into table "browser"
"""
input browser_insert_input {
  accelerator_compatible_browsers: accelerator_compatible_browser_arr_rel_insert_input
  id: Int
  market_share: Float
  name: String
}

"""aggregate max on columns"""
type browser_max_fields {
  id: Int
  market_share: Float
  name: String
}

"""
order by max() on columns of table "browser"
"""
input browser_max_order_by {
  id: order_by
  market_share: order_by
  name: order_by
}

"""aggregate min on columns"""
type browser_min_fields {
  id: Int
  market_share: Float
  name: String
}

"""
order by min() on columns of table "browser"
"""
input browser_min_order_by {
  id: order_by
  market_share: order_by
  name: order_by
}

"""
response of any mutation on the table "browser"
"""
type browser_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [browser!]!
}

"""
input type for inserting object relation for remote table "browser"
"""
input browser_obj_rel_insert_input {
  data: browser_insert_input!
  on_conflict: browser_on_conflict
}

"""
on conflict condition type for table "browser"
"""
input browser_on_conflict {
  constraint: browser_constraint!
  update_columns: [browser_update_column!]!
  where: browser_bool_exp
}

"""
ordering options when selecting data from "browser"
"""
input browser_order_by {
  accelerator_compatible_browsers_aggregate: accelerator_compatible_browser_aggregate_order_by
  id: order_by
  market_share: order_by
  name: order_by
}

"""
primary key columns input for table: "browser"
"""
input browser_pk_columns_input {
  id: Int!
}

"""
select columns of table "browser"
"""
enum browser_select_column {
  """column name"""
  id

  """column name"""
  market_share

  """column name"""
  name
}

"""
input type for updating data in table "browser"
"""
input browser_set_input {
  id: Int
  market_share: Float
  name: String
}

"""aggregate stddev on columns"""
type browser_stddev_fields {
  id: Float
  market_share: Float
}

"""
order by stddev() on columns of table "browser"
"""
input browser_stddev_order_by {
  id: order_by
  market_share: order_by
}

"""aggregate stddev_pop on columns"""
type browser_stddev_pop_fields {
  id: Float
  market_share: Float
}

"""
order by stddev_pop() on columns of table "browser"
"""
input browser_stddev_pop_order_by {
  id: order_by
  market_share: order_by
}

"""aggregate stddev_samp on columns"""
type browser_stddev_samp_fields {
  id: Float
  market_share: Float
}

"""
order by stddev_samp() on columns of table "browser"
"""
input browser_stddev_samp_order_by {
  id: order_by
  market_share: order_by
}

"""aggregate sum on columns"""
type browser_sum_fields {
  id: Int
  market_share: Float
}

"""
order by sum() on columns of table "browser"
"""
input browser_sum_order_by {
  id: order_by
  market_share: order_by
}

"""
update columns of table "browser"
"""
enum browser_update_column {
  """column name"""
  id

  """column name"""
  market_share

  """column name"""
  name
}

"""aggregate var_pop on columns"""
type browser_var_pop_fields {
  id: Float
  market_share: Float
}

"""
order by var_pop() on columns of table "browser"
"""
input browser_var_pop_order_by {
  id: order_by
  market_share: order_by
}

"""aggregate var_samp on columns"""
type browser_var_samp_fields {
  id: Float
  market_share: Float
}

"""
order by var_samp() on columns of table "browser"
"""
input browser_var_samp_order_by {
  id: order_by
  market_share: order_by
}

"""aggregate variance on columns"""
type browser_variance_fields {
  id: Float
  market_share: Float
}

"""
order by variance() on columns of table "browser"
"""
input browser_variance_order_by {
  id: order_by
  market_share: order_by
}

"""
expression to compare columns of type Float. All fields are combined with logical 'AND'.
"""
input Float_comparison_exp {
  _eq: Float
  _gt: Float
  _gte: Float
  _in: [Float!]
  _is_null: Boolean
  _lt: Float
  _lte: Float
  _neq: Float
  _nin: [Float!]
}

"""
expression to compare columns of type Int. All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "accelerator_compatible_browser"
  """
  delete_accelerator_compatible_browser(
    """filter the rows which have to be deleted"""
    where: accelerator_compatible_browser_bool_exp!
  ): accelerator_compatible_browser_mutation_response

  """
  delete single row from the table: "accelerator_compatible_browser"
  """
  delete_accelerator_compatible_browser_by_pk(accelerator_id: Int!, browser_id: Int!): accelerator_compatible_browser

  """
  delete data from the table: "browser"
  """
  delete_browser(
    """filter the rows which have to be deleted"""
    where: browser_bool_exp!
  ): browser_mutation_response

  """
  delete single row from the table: "browser"
  """
  delete_browser_by_pk(id: Int!): browser

  """
  delete data from the table: "web_client_accelerator"
  """
  delete_web_client_accelerator(
    """filter the rows which have to be deleted"""
    where: web_client_accelerator_bool_exp!
  ): web_client_accelerator_mutation_response

  """
  delete single row from the table: "web_client_accelerator"
  """
  delete_web_client_accelerator_by_pk(id: Int!): web_client_accelerator

  """
  insert data into the table: "accelerator_compatible_browser"
  """
  insert_accelerator_compatible_browser(
    """the rows to be inserted"""
    objects: [accelerator_compatible_browser_insert_input!]!

    """on conflict condition"""
    on_conflict: accelerator_compatible_browser_on_conflict
  ): accelerator_compatible_browser_mutation_response

  """
  insert a single row into the table: "accelerator_compatible_browser"
  """
  insert_accelerator_compatible_browser_one(
    """the row to be inserted"""
    object: accelerator_compatible_browser_insert_input!

    """on conflict condition"""
    on_conflict: accelerator_compatible_browser_on_conflict
  ): accelerator_compatible_browser

  """
  insert data into the table: "browser"
  """
  insert_browser(
    """the rows to be inserted"""
    objects: [browser_insert_input!]!

    """on conflict condition"""
    on_conflict: browser_on_conflict
  ): browser_mutation_response

  """
  insert a single row into the table: "browser"
  """
  insert_browser_one(
    """the row to be inserted"""
    object: browser_insert_input!

    """on conflict condition"""
    on_conflict: browser_on_conflict
  ): browser

  """
  insert data into the table: "web_client_accelerator"
  """
  insert_web_client_accelerator(
    """the rows to be inserted"""
    objects: [web_client_accelerator_insert_input!]!

    """on conflict condition"""
    on_conflict: web_client_accelerator_on_conflict
  ): web_client_accelerator_mutation_response

  """
  insert a single row into the table: "web_client_accelerator"
  """
  insert_web_client_accelerator_one(
    """the row to be inserted"""
    object: web_client_accelerator_insert_input!

    """on conflict condition"""
    on_conflict: web_client_accelerator_on_conflict
  ): web_client_accelerator

  """
  update data of the table: "accelerator_compatible_browser"
  """
  update_accelerator_compatible_browser(
    """increments the integer columns with given value of the filtered values"""
    _inc: accelerator_compatible_browser_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: accelerator_compatible_browser_set_input

    """filter the rows which have to be updated"""
    where: accelerator_compatible_browser_bool_exp!
  ): accelerator_compatible_browser_mutation_response

  """
  update single row of the table: "accelerator_compatible_browser"
  """
  update_accelerator_compatible_browser_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: accelerator_compatible_browser_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: accelerator_compatible_browser_set_input
    pk_columns: accelerator_compatible_browser_pk_columns_input!
  ): accelerator_compatible_browser

  """
  update data of the table: "browser"
  """
  update_browser(
    """increments the integer columns with given value of the filtered values"""
    _inc: browser_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: browser_set_input

    """filter the rows which have to be updated"""
    where: browser_bool_exp!
  ): browser_mutation_response

  """
  update single row of the table: "browser"
  """
  update_browser_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: browser_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: browser_set_input
    pk_columns: browser_pk_columns_input!
  ): browser

  """
  update data of the table: "web_client_accelerator"
  """
  update_web_client_accelerator(
    """increments the integer columns with given value of the filtered values"""
    _inc: web_client_accelerator_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: web_client_accelerator_set_input

    """filter the rows which have to be updated"""
    where: web_client_accelerator_bool_exp!
  ): web_client_accelerator_mutation_response

  """
  update single row of the table: "web_client_accelerator"
  """
  update_web_client_accelerator_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: web_client_accelerator_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: web_client_accelerator_set_input
    pk_columns: web_client_accelerator_pk_columns_input!
  ): web_client_accelerator
}

"""column ordering options"""
enum order_by {
  """in the ascending order, nulls last"""
  asc

  """in the ascending order, nulls first"""
  asc_nulls_first

  """in the ascending order, nulls last"""
  asc_nulls_last

  """in the descending order, nulls first"""
  desc

  """in the descending order, nulls first"""
  desc_nulls_first

  """in the descending order, nulls last"""
  desc_nulls_last
}

"""query root"""
type query_root {
  """
  fetch data from the table: "accelerator_compatible_browser"
  """
  accelerator_compatible_browser(
    """distinct select on columns"""
    distinct_on: [accelerator_compatible_browser_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [accelerator_compatible_browser_order_by!]

    """filter the rows returned"""
    where: accelerator_compatible_browser_bool_exp
  ): [accelerator_compatible_browser!]!

  """
  fetch aggregated fields from the table: "accelerator_compatible_browser"
  """
  accelerator_compatible_browser_aggregate(
    """distinct select on columns"""
    distinct_on: [accelerator_compatible_browser_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [accelerator_compatible_browser_order_by!]

    """filter the rows returned"""
    where: accelerator_compatible_browser_bool_exp
  ): accelerator_compatible_browser_aggregate!

  """
  fetch data from the table: "accelerator_compatible_browser" using primary key columns
  """
  accelerator_compatible_browser_by_pk(accelerator_id: Int!, browser_id: Int!): accelerator_compatible_browser

  """
  fetch data from the table: "browser"
  """
  browser(
    """distinct select on columns"""
    distinct_on: [browser_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [browser_order_by!]

    """filter the rows returned"""
    where: browser_bool_exp
  ): [browser!]!

  """
  fetch aggregated fields from the table: "browser"
  """
  browser_aggregate(
    """distinct select on columns"""
    distinct_on: [browser_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [browser_order_by!]

    """filter the rows returned"""
    where: browser_bool_exp
  ): browser_aggregate!

  """fetch data from the table: "browser" using primary key columns"""
  browser_by_pk(id: Int!): browser

  """
  fetch data from the table: "web_client_accelerator"
  """
  web_client_accelerator(
    """distinct select on columns"""
    distinct_on: [web_client_accelerator_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [web_client_accelerator_order_by!]

    """filter the rows returned"""
    where: web_client_accelerator_bool_exp
  ): [web_client_accelerator!]!

  """
  fetch aggregated fields from the table: "web_client_accelerator"
  """
  web_client_accelerator_aggregate(
    """distinct select on columns"""
    distinct_on: [web_client_accelerator_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [web_client_accelerator_order_by!]

    """filter the rows returned"""
    where: web_client_accelerator_bool_exp
  ): web_client_accelerator_aggregate!

  """
  fetch data from the table: "web_client_accelerator" using primary key columns
  """
  web_client_accelerator_by_pk(id: Int!): web_client_accelerator
}

"""
expression to compare columns of type String. All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String
  _ilike: String
  _in: [String!]
  _is_null: Boolean
  _like: String
  _lt: String
  _lte: String
  _neq: String
  _nilike: String
  _nin: [String!]
  _nlike: String
  _nsimilar: String
  _similar: String
}

"""subscription root"""
type subscription_root {
  """
  fetch data from the table: "accelerator_compatible_browser"
  """
  accelerator_compatible_browser(
    """distinct select on columns"""
    distinct_on: [accelerator_compatible_browser_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [accelerator_compatible_browser_order_by!]

    """filter the rows returned"""
    where: accelerator_compatible_browser_bool_exp
  ): [accelerator_compatible_browser!]!

  """
  fetch aggregated fields from the table: "accelerator_compatible_browser"
  """
  accelerator_compatible_browser_aggregate(
    """distinct select on columns"""
    distinct_on: [accelerator_compatible_browser_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [accelerator_compatible_browser_order_by!]

    """filter the rows returned"""
    where: accelerator_compatible_browser_bool_exp
  ): accelerator_compatible_browser_aggregate!

  """
  fetch data from the table: "accelerator_compatible_browser" using primary key columns
  """
  accelerator_compatible_browser_by_pk(accelerator_id: Int!, browser_id: Int!): accelerator_compatible_browser

  """
  fetch data from the table: "browser"
  """
  browser(
    """distinct select on columns"""
    distinct_on: [browser_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [browser_order_by!]

    """filter the rows returned"""
    where: browser_bool_exp
  ): [browser!]!

  """
  fetch aggregated fields from the table: "browser"
  """
  browser_aggregate(
    """distinct select on columns"""
    distinct_on: [browser_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [browser_order_by!]

    """filter the rows returned"""
    where: browser_bool_exp
  ): browser_aggregate!

  """fetch data from the table: "browser" using primary key columns"""
  browser_by_pk(id: Int!): browser

  """
  fetch data from the table: "web_client_accelerator"
  """
  web_client_accelerator(
    """distinct select on columns"""
    distinct_on: [web_client_accelerator_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [web_client_accelerator_order_by!]

    """filter the rows returned"""
    where: web_client_accelerator_bool_exp
  ): [web_client_accelerator!]!

  """
  fetch aggregated fields from the table: "web_client_accelerator"
  """
  web_client_accelerator_aggregate(
    """distinct select on columns"""
    distinct_on: [web_client_accelerator_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [web_client_accelerator_order_by!]

    """filter the rows returned"""
    where: web_client_accelerator_bool_exp
  ): web_client_accelerator_aggregate!

  """
  fetch data from the table: "web_client_accelerator" using primary key columns
  """
  web_client_accelerator_by_pk(id: Int!): web_client_accelerator
}

"""
columns and relationships of "web_client_accelerator"
"""
type web_client_accelerator {
  """An array relationship"""
  accelerator_compatible_browsers(
    """distinct select on columns"""
    distinct_on: [accelerator_compatible_browser_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [accelerator_compatible_browser_order_by!]

    """filter the rows returned"""
    where: accelerator_compatible_browser_bool_exp
  ): [accelerator_compatible_browser!]!

  """An aggregated array relationship"""
  accelerator_compatible_browsers_aggregate(
    """distinct select on columns"""
    distinct_on: [accelerator_compatible_browser_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [accelerator_compatible_browser_order_by!]

    """filter the rows returned"""
    where: accelerator_compatible_browser_bool_exp
  ): accelerator_compatible_browser_aggregate!
  client: String
  connection: String
  id: Int!
  name: String
  operating_system: String
}

"""
aggregated selection of "web_client_accelerator"
"""
type web_client_accelerator_aggregate {
  aggregate: web_client_accelerator_aggregate_fields
  nodes: [web_client_accelerator!]!
}

"""
aggregate fields of "web_client_accelerator"
"""
type web_client_accelerator_aggregate_fields {
  avg: web_client_accelerator_avg_fields
  count(columns: [web_client_accelerator_select_column!], distinct: Boolean): Int
  max: web_client_accelerator_max_fields
  min: web_client_accelerator_min_fields
  stddev: web_client_accelerator_stddev_fields
  stddev_pop: web_client_accelerator_stddev_pop_fields
  stddev_samp: web_client_accelerator_stddev_samp_fields
  sum: web_client_accelerator_sum_fields
  var_pop: web_client_accelerator_var_pop_fields
  var_samp: web_client_accelerator_var_samp_fields
  variance: web_client_accelerator_variance_fields
}

"""
order by aggregate values of table "web_client_accelerator"
"""
input web_client_accelerator_aggregate_order_by {
  avg: web_client_accelerator_avg_order_by
  count: order_by
  max: web_client_accelerator_max_order_by
  min: web_client_accelerator_min_order_by
  stddev: web_client_accelerator_stddev_order_by
  stddev_pop: web_client_accelerator_stddev_pop_order_by
  stddev_samp: web_client_accelerator_stddev_samp_order_by
  sum: web_client_accelerator_sum_order_by
  var_pop: web_client_accelerator_var_pop_order_by
  var_samp: web_client_accelerator_var_samp_order_by
  variance: web_client_accelerator_variance_order_by
}

"""
input type for inserting array relation for remote table "web_client_accelerator"
"""
input web_client_accelerator_arr_rel_insert_input {
  data: [web_client_accelerator_insert_input!]!
  on_conflict: web_client_accelerator_on_conflict
}

"""aggregate avg on columns"""
type web_client_accelerator_avg_fields {
  id: Float
}

"""
order by avg() on columns of table "web_client_accelerator"
"""
input web_client_accelerator_avg_order_by {
  id: order_by
}

"""
Boolean expression to filter rows from the table "web_client_accelerator". All fields are combined with a logical 'AND'.
"""
input web_client_accelerator_bool_exp {
  _and: [web_client_accelerator_bool_exp]
  _not: web_client_accelerator_bool_exp
  _or: [web_client_accelerator_bool_exp]
  accelerator_compatible_browsers: accelerator_compatible_browser_bool_exp
  client: String_comparison_exp
  connection: String_comparison_exp
  id: Int_comparison_exp
  name: String_comparison_exp
  operating_system: String_comparison_exp
}

"""
unique or primary key constraints on table "web_client_accelerator"
"""
enum web_client_accelerator_constraint {
  """unique or primary key constraint"""
  idx_17044_sqlite_autoindex_web_client_accelerator_1
}

"""
input type for incrementing integer column in table "web_client_accelerator"
"""
input web_client_accelerator_inc_input {
  id: Int
}

"""
input type for inserting data into table "web_client_accelerator"
"""
input web_client_accelerator_insert_input {
  accelerator_compatible_browsers: accelerator_compatible_browser_arr_rel_insert_input
  client: String
  connection: String
  id: Int
  name: String
  operating_system: String
}

"""aggregate max on columns"""
type web_client_accelerator_max_fields {
  client: String
  connection: String
  id: Int
  name: String
  operating_system: String
}

"""
order by max() on columns of table "web_client_accelerator"
"""
input web_client_accelerator_max_order_by {
  client: order_by
  connection: order_by
  id: order_by
  name: order_by
  operating_system: order_by
}

"""aggregate min on columns"""
type web_client_accelerator_min_fields {
  client: String
  connection: String
  id: Int
  name: String
  operating_system: String
}

"""
order by min() on columns of table "web_client_accelerator"
"""
input web_client_accelerator_min_order_by {
  client: order_by
  connection: order_by
  id: order_by
  name: order_by
  operating_system: order_by
}

"""
response of any mutation on the table "web_client_accelerator"
"""
type web_client_accelerator_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [web_client_accelerator!]!
}

"""
input type for inserting object relation for remote table "web_client_accelerator"
"""
input web_client_accelerator_obj_rel_insert_input {
  data: web_client_accelerator_insert_input!
  on_conflict: web_client_accelerator_on_conflict
}

"""
on conflict condition type for table "web_client_accelerator"
"""
input web_client_accelerator_on_conflict {
  constraint: web_client_accelerator_constraint!
  update_columns: [web_client_accelerator_update_column!]!
  where: web_client_accelerator_bool_exp
}

"""
ordering options when selecting data from "web_client_accelerator"
"""
input web_client_accelerator_order_by {
  accelerator_compatible_browsers_aggregate: accelerator_compatible_browser_aggregate_order_by
  client: order_by
  connection: order_by
  id: order_by
  name: order_by
  operating_system: order_by
}

"""
primary key columns input for table: "web_client_accelerator"
"""
input web_client_accelerator_pk_columns_input {
  id: Int!
}

"""
select columns of table "web_client_accelerator"
"""
enum web_client_accelerator_select_column {
  """column name"""
  client

  """column name"""
  connection

  """column name"""
  id

  """column name"""
  name

  """column name"""
  operating_system
}

"""
input type for updating data in table "web_client_accelerator"
"""
input web_client_accelerator_set_input {
  client: String
  connection: String
  id: Int
  name: String
  operating_system: String
}

"""aggregate stddev on columns"""
type web_client_accelerator_stddev_fields {
  id: Float
}

"""
order by stddev() on columns of table "web_client_accelerator"
"""
input web_client_accelerator_stddev_order_by {
  id: order_by
}

"""aggregate stddev_pop on columns"""
type web_client_accelerator_stddev_pop_fields {
  id: Float
}

"""
order by stddev_pop() on columns of table "web_client_accelerator"
"""
input web_client_accelerator_stddev_pop_order_by {
  id: order_by
}

"""aggregate stddev_samp on columns"""
type web_client_accelerator_stddev_samp_fields {
  id: Float
}

"""
order by stddev_samp() on columns of table "web_client_accelerator"
"""
input web_client_accelerator_stddev_samp_order_by {
  id: order_by
}

"""aggregate sum on columns"""
type web_client_accelerator_sum_fields {
  id: Int
}

"""
order by sum() on columns of table "web_client_accelerator"
"""
input web_client_accelerator_sum_order_by {
  id: order_by
}

"""
update columns of table "web_client_accelerator"
"""
enum web_client_accelerator_update_column {
  """column name"""
  client

  """column name"""
  connection

  """column name"""
  id

  """column name"""
  name

  """column name"""
  operating_system
}

"""aggregate var_pop on columns"""
type web_client_accelerator_var_pop_fields {
  id: Float
}

"""
order by var_pop() on columns of table "web_client_accelerator"
"""
input web_client_accelerator_var_pop_order_by {
  id: order_by
}

"""aggregate var_samp on columns"""
type web_client_accelerator_var_samp_fields {
  id: Float
}

"""
order by var_samp() on columns of table "web_client_accelerator"
"""
input web_client_accelerator_var_samp_order_by {
  id: order_by
}

"""aggregate variance on columns"""
type web_client_accelerator_variance_fields {
  id: Float
}

"""
order by variance() on columns of table "web_client_accelerator"
"""
input web_client_accelerator_variance_order_by {
  id: order_by
}
