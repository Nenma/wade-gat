schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""
Direct the client to resolve this field locally, either from the cache or local resolvers.
"""
directive @client(
  """
  When true, the client will never use the cache for this value. See
  https://www.apollographql.com/docs/react/essentials/local-state/#forcing-resolvers-with-clientalways-true
  """
  always: Boolean
) on FIELD | FRAGMENT_DEFINITION | INLINE_FRAGMENT

"""
Export this locally resolved field as a variable to be used in the remainder of this query. See
https://www.apollographql.com/docs/react/essentials/local-state/#using-client-fields-as-variables
"""
directive @export(
  """The variable name to export this field as."""
  as: String!
) on FIELD

"""
Specify a custom store key for this result. See
https://www.apollographql.com/docs/react/advanced/caching/#the-connection-directive
"""
directive @connection(
  """Specify the store key."""
  key: String!

  """
  An array of query argument names to include in the generated custom store key.
  """
  filter: [String!]
) on FIELD

"""
columns and relationships of "asset_parts"
"""
type asset_parts {
  """An object relationship"""
  asset: assets
  asset_id: bigint

  """An object relationship"""
  part: parts
  part_id: bigint
}

"""
aggregated selection of "asset_parts"
"""
type asset_parts_aggregate {
  aggregate: asset_parts_aggregate_fields
  nodes: [asset_parts!]!
}

"""
aggregate fields of "asset_parts"
"""
type asset_parts_aggregate_fields {
  avg: asset_parts_avg_fields
  count(columns: [asset_parts_select_column!], distinct: Boolean): Int
  max: asset_parts_max_fields
  min: asset_parts_min_fields
  stddev: asset_parts_stddev_fields
  stddev_pop: asset_parts_stddev_pop_fields
  stddev_samp: asset_parts_stddev_samp_fields
  sum: asset_parts_sum_fields
  var_pop: asset_parts_var_pop_fields
  var_samp: asset_parts_var_samp_fields
  variance: asset_parts_variance_fields
}

"""
order by aggregate values of table "asset_parts"
"""
input asset_parts_aggregate_order_by {
  avg: asset_parts_avg_order_by
  count: order_by
  max: asset_parts_max_order_by
  min: asset_parts_min_order_by
  stddev: asset_parts_stddev_order_by
  stddev_pop: asset_parts_stddev_pop_order_by
  stddev_samp: asset_parts_stddev_samp_order_by
  sum: asset_parts_sum_order_by
  var_pop: asset_parts_var_pop_order_by
  var_samp: asset_parts_var_samp_order_by
  variance: asset_parts_variance_order_by
}

"""
input type for inserting array relation for remote table "asset_parts"
"""
input asset_parts_arr_rel_insert_input {
  data: [asset_parts_insert_input!]!
}

"""aggregate avg on columns"""
type asset_parts_avg_fields {
  asset_id: Float
  part_id: Float
}

"""
order by avg() on columns of table "asset_parts"
"""
input asset_parts_avg_order_by {
  asset_id: order_by
  part_id: order_by
}

"""
Boolean expression to filter rows from the table "asset_parts". All fields are combined with a logical 'AND'.
"""
input asset_parts_bool_exp {
  _and: [asset_parts_bool_exp]
  _not: asset_parts_bool_exp
  _or: [asset_parts_bool_exp]
  asset: assets_bool_exp
  asset_id: bigint_comparison_exp
  part: parts_bool_exp
  part_id: bigint_comparison_exp
}

"""
input type for incrementing integer column in table "asset_parts"
"""
input asset_parts_inc_input {
  asset_id: bigint
  part_id: bigint
}

"""
input type for inserting data into table "asset_parts"
"""
input asset_parts_insert_input {
  asset: assets_obj_rel_insert_input
  asset_id: bigint
  part: parts_obj_rel_insert_input
  part_id: bigint
}

"""aggregate max on columns"""
type asset_parts_max_fields {
  asset_id: bigint
  part_id: bigint
}

"""
order by max() on columns of table "asset_parts"
"""
input asset_parts_max_order_by {
  asset_id: order_by
  part_id: order_by
}

"""aggregate min on columns"""
type asset_parts_min_fields {
  asset_id: bigint
  part_id: bigint
}

"""
order by min() on columns of table "asset_parts"
"""
input asset_parts_min_order_by {
  asset_id: order_by
  part_id: order_by
}

"""
response of any mutation on the table "asset_parts"
"""
type asset_parts_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [asset_parts!]!
}

"""
input type for inserting object relation for remote table "asset_parts"
"""
input asset_parts_obj_rel_insert_input {
  data: asset_parts_insert_input!
}

"""
ordering options when selecting data from "asset_parts"
"""
input asset_parts_order_by {
  asset: assets_order_by
  asset_id: order_by
  part: parts_order_by
  part_id: order_by
}

"""
select columns of table "asset_parts"
"""
enum asset_parts_select_column {
  """column name"""
  asset_id

  """column name"""
  part_id
}

"""
input type for updating data in table "asset_parts"
"""
input asset_parts_set_input {
  asset_id: bigint
  part_id: bigint
}

"""aggregate stddev on columns"""
type asset_parts_stddev_fields {
  asset_id: Float
  part_id: Float
}

"""
order by stddev() on columns of table "asset_parts"
"""
input asset_parts_stddev_order_by {
  asset_id: order_by
  part_id: order_by
}

"""aggregate stddev_pop on columns"""
type asset_parts_stddev_pop_fields {
  asset_id: Float
  part_id: Float
}

"""
order by stddev_pop() on columns of table "asset_parts"
"""
input asset_parts_stddev_pop_order_by {
  asset_id: order_by
  part_id: order_by
}

"""aggregate stddev_samp on columns"""
type asset_parts_stddev_samp_fields {
  asset_id: Float
  part_id: Float
}

"""
order by stddev_samp() on columns of table "asset_parts"
"""
input asset_parts_stddev_samp_order_by {
  asset_id: order_by
  part_id: order_by
}

"""aggregate sum on columns"""
type asset_parts_sum_fields {
  asset_id: bigint
  part_id: bigint
}

"""
order by sum() on columns of table "asset_parts"
"""
input asset_parts_sum_order_by {
  asset_id: order_by
  part_id: order_by
}

"""aggregate var_pop on columns"""
type asset_parts_var_pop_fields {
  asset_id: Float
  part_id: Float
}

"""
order by var_pop() on columns of table "asset_parts"
"""
input asset_parts_var_pop_order_by {
  asset_id: order_by
  part_id: order_by
}

"""aggregate var_samp on columns"""
type asset_parts_var_samp_fields {
  asset_id: Float
  part_id: Float
}

"""
order by var_samp() on columns of table "asset_parts"
"""
input asset_parts_var_samp_order_by {
  asset_id: order_by
  part_id: order_by
}

"""aggregate variance on columns"""
type asset_parts_variance_fields {
  asset_id: Float
  part_id: Float
}

"""
order by variance() on columns of table "asset_parts"
"""
input asset_parts_variance_order_by {
  asset_id: order_by
  part_id: order_by
}

"""
columns and relationships of "assets"
"""
type assets {
  asset_acquired_date: timestamptz
  asset_details: String
  asset_disposed_date: timestamptz
  asset_id: bigint!
  asset_make: String
  asset_model: String

  """An array relationship"""
  asset_parts(
    """distinct select on columns"""
    distinct_on: [asset_parts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [asset_parts_order_by!]

    """filter the rows returned"""
    where: asset_parts_bool_exp
  ): [asset_parts!]!

  """An aggregated array relationship"""
  asset_parts_aggregate(
    """distinct select on columns"""
    distinct_on: [asset_parts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [asset_parts_order_by!]

    """filter the rows returned"""
    where: asset_parts_bool_exp
  ): asset_parts_aggregate!

  """An array relationship"""
  fault_logs(
    """distinct select on columns"""
    distinct_on: [fault_log_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [fault_log_order_by!]

    """filter the rows returned"""
    where: fault_log_bool_exp
  ): [fault_log!]!

  """An aggregated array relationship"""
  fault_logs_aggregate(
    """distinct select on columns"""
    distinct_on: [fault_log_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [fault_log_order_by!]

    """filter the rows returned"""
    where: fault_log_bool_exp
  ): fault_log_aggregate!

  """An object relationship"""
  maintenance_contract: maintenance_contracts
  maintenance_contract_id: bigint
  other_asset_details: String
  supplier_company_id: bigint

  """An object relationship"""
  third_party_company: third_party_companies
}

"""
aggregated selection of "assets"
"""
type assets_aggregate {
  aggregate: assets_aggregate_fields
  nodes: [assets!]!
}

"""
aggregate fields of "assets"
"""
type assets_aggregate_fields {
  avg: assets_avg_fields
  count(columns: [assets_select_column!], distinct: Boolean): Int
  max: assets_max_fields
  min: assets_min_fields
  stddev: assets_stddev_fields
  stddev_pop: assets_stddev_pop_fields
  stddev_samp: assets_stddev_samp_fields
  sum: assets_sum_fields
  var_pop: assets_var_pop_fields
  var_samp: assets_var_samp_fields
  variance: assets_variance_fields
}

"""
order by aggregate values of table "assets"
"""
input assets_aggregate_order_by {
  avg: assets_avg_order_by
  count: order_by
  max: assets_max_order_by
  min: assets_min_order_by
  stddev: assets_stddev_order_by
  stddev_pop: assets_stddev_pop_order_by
  stddev_samp: assets_stddev_samp_order_by
  sum: assets_sum_order_by
  var_pop: assets_var_pop_order_by
  var_samp: assets_var_samp_order_by
  variance: assets_variance_order_by
}

"""
input type for inserting array relation for remote table "assets"
"""
input assets_arr_rel_insert_input {
  data: [assets_insert_input!]!
  on_conflict: assets_on_conflict
}

"""aggregate avg on columns"""
type assets_avg_fields {
  asset_id: Float
  maintenance_contract_id: Float
  supplier_company_id: Float
}

"""
order by avg() on columns of table "assets"
"""
input assets_avg_order_by {
  asset_id: order_by
  maintenance_contract_id: order_by
  supplier_company_id: order_by
}

"""
Boolean expression to filter rows from the table "assets". All fields are combined with a logical 'AND'.
"""
input assets_bool_exp {
  _and: [assets_bool_exp]
  _not: assets_bool_exp
  _or: [assets_bool_exp]
  asset_acquired_date: timestamptz_comparison_exp
  asset_details: String_comparison_exp
  asset_disposed_date: timestamptz_comparison_exp
  asset_id: bigint_comparison_exp
  asset_make: String_comparison_exp
  asset_model: String_comparison_exp
  asset_parts: asset_parts_bool_exp
  fault_logs: fault_log_bool_exp
  maintenance_contract: maintenance_contracts_bool_exp
  maintenance_contract_id: bigint_comparison_exp
  other_asset_details: String_comparison_exp
  supplier_company_id: bigint_comparison_exp
  third_party_company: third_party_companies_bool_exp
}

"""
unique or primary key constraints on table "assets"
"""
enum assets_constraint {
  """unique or primary key constraint"""
  idx_27056_assets_pkey
}

"""
input type for incrementing integer column in table "assets"
"""
input assets_inc_input {
  asset_id: bigint
  maintenance_contract_id: bigint
  supplier_company_id: bigint
}

"""
input type for inserting data into table "assets"
"""
input assets_insert_input {
  asset_acquired_date: timestamptz
  asset_details: String
  asset_disposed_date: timestamptz
  asset_id: bigint
  asset_make: String
  asset_model: String
  asset_parts: asset_parts_arr_rel_insert_input
  fault_logs: fault_log_arr_rel_insert_input
  maintenance_contract: maintenance_contracts_obj_rel_insert_input
  maintenance_contract_id: bigint
  other_asset_details: String
  supplier_company_id: bigint
  third_party_company: third_party_companies_obj_rel_insert_input
}

"""aggregate max on columns"""
type assets_max_fields {
  asset_acquired_date: timestamptz
  asset_details: String
  asset_disposed_date: timestamptz
  asset_id: bigint
  asset_make: String
  asset_model: String
  maintenance_contract_id: bigint
  other_asset_details: String
  supplier_company_id: bigint
}

"""
order by max() on columns of table "assets"
"""
input assets_max_order_by {
  asset_acquired_date: order_by
  asset_details: order_by
  asset_disposed_date: order_by
  asset_id: order_by
  asset_make: order_by
  asset_model: order_by
  maintenance_contract_id: order_by
  other_asset_details: order_by
  supplier_company_id: order_by
}

"""aggregate min on columns"""
type assets_min_fields {
  asset_acquired_date: timestamptz
  asset_details: String
  asset_disposed_date: timestamptz
  asset_id: bigint
  asset_make: String
  asset_model: String
  maintenance_contract_id: bigint
  other_asset_details: String
  supplier_company_id: bigint
}

"""
order by min() on columns of table "assets"
"""
input assets_min_order_by {
  asset_acquired_date: order_by
  asset_details: order_by
  asset_disposed_date: order_by
  asset_id: order_by
  asset_make: order_by
  asset_model: order_by
  maintenance_contract_id: order_by
  other_asset_details: order_by
  supplier_company_id: order_by
}

"""
response of any mutation on the table "assets"
"""
type assets_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [assets!]!
}

"""
input type for inserting object relation for remote table "assets"
"""
input assets_obj_rel_insert_input {
  data: assets_insert_input!
  on_conflict: assets_on_conflict
}

"""
on conflict condition type for table "assets"
"""
input assets_on_conflict {
  constraint: assets_constraint!
  update_columns: [assets_update_column!]!
  where: assets_bool_exp
}

"""
ordering options when selecting data from "assets"
"""
input assets_order_by {
  asset_acquired_date: order_by
  asset_details: order_by
  asset_disposed_date: order_by
  asset_id: order_by
  asset_make: order_by
  asset_model: order_by
  asset_parts_aggregate: asset_parts_aggregate_order_by
  fault_logs_aggregate: fault_log_aggregate_order_by
  maintenance_contract: maintenance_contracts_order_by
  maintenance_contract_id: order_by
  other_asset_details: order_by
  supplier_company_id: order_by
  third_party_company: third_party_companies_order_by
}

"""
primary key columns input for table: "assets"
"""
input assets_pk_columns_input {
  asset_id: bigint!
}

"""
select columns of table "assets"
"""
enum assets_select_column {
  """column name"""
  asset_acquired_date

  """column name"""
  asset_details

  """column name"""
  asset_disposed_date

  """column name"""
  asset_id

  """column name"""
  asset_make

  """column name"""
  asset_model

  """column name"""
  maintenance_contract_id

  """column name"""
  other_asset_details

  """column name"""
  supplier_company_id
}

"""
input type for updating data in table "assets"
"""
input assets_set_input {
  asset_acquired_date: timestamptz
  asset_details: String
  asset_disposed_date: timestamptz
  asset_id: bigint
  asset_make: String
  asset_model: String
  maintenance_contract_id: bigint
  other_asset_details: String
  supplier_company_id: bigint
}

"""aggregate stddev on columns"""
type assets_stddev_fields {
  asset_id: Float
  maintenance_contract_id: Float
  supplier_company_id: Float
}

"""
order by stddev() on columns of table "assets"
"""
input assets_stddev_order_by {
  asset_id: order_by
  maintenance_contract_id: order_by
  supplier_company_id: order_by
}

"""aggregate stddev_pop on columns"""
type assets_stddev_pop_fields {
  asset_id: Float
  maintenance_contract_id: Float
  supplier_company_id: Float
}

"""
order by stddev_pop() on columns of table "assets"
"""
input assets_stddev_pop_order_by {
  asset_id: order_by
  maintenance_contract_id: order_by
  supplier_company_id: order_by
}

"""aggregate stddev_samp on columns"""
type assets_stddev_samp_fields {
  asset_id: Float
  maintenance_contract_id: Float
  supplier_company_id: Float
}

"""
order by stddev_samp() on columns of table "assets"
"""
input assets_stddev_samp_order_by {
  asset_id: order_by
  maintenance_contract_id: order_by
  supplier_company_id: order_by
}

"""aggregate sum on columns"""
type assets_sum_fields {
  asset_id: bigint
  maintenance_contract_id: bigint
  supplier_company_id: bigint
}

"""
order by sum() on columns of table "assets"
"""
input assets_sum_order_by {
  asset_id: order_by
  maintenance_contract_id: order_by
  supplier_company_id: order_by
}

"""
update columns of table "assets"
"""
enum assets_update_column {
  """column name"""
  asset_acquired_date

  """column name"""
  asset_details

  """column name"""
  asset_disposed_date

  """column name"""
  asset_id

  """column name"""
  asset_make

  """column name"""
  asset_model

  """column name"""
  maintenance_contract_id

  """column name"""
  other_asset_details

  """column name"""
  supplier_company_id
}

"""aggregate var_pop on columns"""
type assets_var_pop_fields {
  asset_id: Float
  maintenance_contract_id: Float
  supplier_company_id: Float
}

"""
order by var_pop() on columns of table "assets"
"""
input assets_var_pop_order_by {
  asset_id: order_by
  maintenance_contract_id: order_by
  supplier_company_id: order_by
}

"""aggregate var_samp on columns"""
type assets_var_samp_fields {
  asset_id: Float
  maintenance_contract_id: Float
  supplier_company_id: Float
}

"""
order by var_samp() on columns of table "assets"
"""
input assets_var_samp_order_by {
  asset_id: order_by
  maintenance_contract_id: order_by
  supplier_company_id: order_by
}

"""aggregate variance on columns"""
type assets_variance_fields {
  asset_id: Float
  maintenance_contract_id: Float
  supplier_company_id: Float
}

"""
order by variance() on columns of table "assets"
"""
input assets_variance_order_by {
  asset_id: order_by
  maintenance_contract_id: order_by
  supplier_company_id: order_by
}

scalar bigint

"""
expression to compare columns of type bigint. All fields are combined with logical 'AND'.
"""
input bigint_comparison_exp {
  _eq: bigint
  _gt: bigint
  _gte: bigint
  _in: [bigint!]
  _is_null: Boolean
  _lt: bigint
  _lte: bigint
  _neq: bigint
  _nin: [bigint!]
}

"""
columns and relationships of "engineer_skills"
"""
type engineer_skills {
  engineer_id: bigint

  """An object relationship"""
  maintenance_engineer: maintenance_engineers

  """An object relationship"""
  skill: skills
  skill_id: bigint
}

"""
aggregated selection of "engineer_skills"
"""
type engineer_skills_aggregate {
  aggregate: engineer_skills_aggregate_fields
  nodes: [engineer_skills!]!
}

"""
aggregate fields of "engineer_skills"
"""
type engineer_skills_aggregate_fields {
  avg: engineer_skills_avg_fields
  count(columns: [engineer_skills_select_column!], distinct: Boolean): Int
  max: engineer_skills_max_fields
  min: engineer_skills_min_fields
  stddev: engineer_skills_stddev_fields
  stddev_pop: engineer_skills_stddev_pop_fields
  stddev_samp: engineer_skills_stddev_samp_fields
  sum: engineer_skills_sum_fields
  var_pop: engineer_skills_var_pop_fields
  var_samp: engineer_skills_var_samp_fields
  variance: engineer_skills_variance_fields
}

"""
order by aggregate values of table "engineer_skills"
"""
input engineer_skills_aggregate_order_by {
  avg: engineer_skills_avg_order_by
  count: order_by
  max: engineer_skills_max_order_by
  min: engineer_skills_min_order_by
  stddev: engineer_skills_stddev_order_by
  stddev_pop: engineer_skills_stddev_pop_order_by
  stddev_samp: engineer_skills_stddev_samp_order_by
  sum: engineer_skills_sum_order_by
  var_pop: engineer_skills_var_pop_order_by
  var_samp: engineer_skills_var_samp_order_by
  variance: engineer_skills_variance_order_by
}

"""
input type for inserting array relation for remote table "engineer_skills"
"""
input engineer_skills_arr_rel_insert_input {
  data: [engineer_skills_insert_input!]!
}

"""aggregate avg on columns"""
type engineer_skills_avg_fields {
  engineer_id: Float
  skill_id: Float
}

"""
order by avg() on columns of table "engineer_skills"
"""
input engineer_skills_avg_order_by {
  engineer_id: order_by
  skill_id: order_by
}

"""
Boolean expression to filter rows from the table "engineer_skills". All fields are combined with a logical 'AND'.
"""
input engineer_skills_bool_exp {
  _and: [engineer_skills_bool_exp]
  _not: engineer_skills_bool_exp
  _or: [engineer_skills_bool_exp]
  engineer_id: bigint_comparison_exp
  maintenance_engineer: maintenance_engineers_bool_exp
  skill: skills_bool_exp
  skill_id: bigint_comparison_exp
}

"""
input type for incrementing integer column in table "engineer_skills"
"""
input engineer_skills_inc_input {
  engineer_id: bigint
  skill_id: bigint
}

"""
input type for inserting data into table "engineer_skills"
"""
input engineer_skills_insert_input {
  engineer_id: bigint
  maintenance_engineer: maintenance_engineers_obj_rel_insert_input
  skill: skills_obj_rel_insert_input
  skill_id: bigint
}

"""aggregate max on columns"""
type engineer_skills_max_fields {
  engineer_id: bigint
  skill_id: bigint
}

"""
order by max() on columns of table "engineer_skills"
"""
input engineer_skills_max_order_by {
  engineer_id: order_by
  skill_id: order_by
}

"""aggregate min on columns"""
type engineer_skills_min_fields {
  engineer_id: bigint
  skill_id: bigint
}

"""
order by min() on columns of table "engineer_skills"
"""
input engineer_skills_min_order_by {
  engineer_id: order_by
  skill_id: order_by
}

"""
response of any mutation on the table "engineer_skills"
"""
type engineer_skills_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [engineer_skills!]!
}

"""
input type for inserting object relation for remote table "engineer_skills"
"""
input engineer_skills_obj_rel_insert_input {
  data: engineer_skills_insert_input!
}

"""
ordering options when selecting data from "engineer_skills"
"""
input engineer_skills_order_by {
  engineer_id: order_by
  maintenance_engineer: maintenance_engineers_order_by
  skill: skills_order_by
  skill_id: order_by
}

"""
select columns of table "engineer_skills"
"""
enum engineer_skills_select_column {
  """column name"""
  engineer_id

  """column name"""
  skill_id
}

"""
input type for updating data in table "engineer_skills"
"""
input engineer_skills_set_input {
  engineer_id: bigint
  skill_id: bigint
}

"""aggregate stddev on columns"""
type engineer_skills_stddev_fields {
  engineer_id: Float
  skill_id: Float
}

"""
order by stddev() on columns of table "engineer_skills"
"""
input engineer_skills_stddev_order_by {
  engineer_id: order_by
  skill_id: order_by
}

"""aggregate stddev_pop on columns"""
type engineer_skills_stddev_pop_fields {
  engineer_id: Float
  skill_id: Float
}

"""
order by stddev_pop() on columns of table "engineer_skills"
"""
input engineer_skills_stddev_pop_order_by {
  engineer_id: order_by
  skill_id: order_by
}

"""aggregate stddev_samp on columns"""
type engineer_skills_stddev_samp_fields {
  engineer_id: Float
  skill_id: Float
}

"""
order by stddev_samp() on columns of table "engineer_skills"
"""
input engineer_skills_stddev_samp_order_by {
  engineer_id: order_by
  skill_id: order_by
}

"""aggregate sum on columns"""
type engineer_skills_sum_fields {
  engineer_id: bigint
  skill_id: bigint
}

"""
order by sum() on columns of table "engineer_skills"
"""
input engineer_skills_sum_order_by {
  engineer_id: order_by
  skill_id: order_by
}

"""aggregate var_pop on columns"""
type engineer_skills_var_pop_fields {
  engineer_id: Float
  skill_id: Float
}

"""
order by var_pop() on columns of table "engineer_skills"
"""
input engineer_skills_var_pop_order_by {
  engineer_id: order_by
  skill_id: order_by
}

"""aggregate var_samp on columns"""
type engineer_skills_var_samp_fields {
  engineer_id: Float
  skill_id: Float
}

"""
order by var_samp() on columns of table "engineer_skills"
"""
input engineer_skills_var_samp_order_by {
  engineer_id: order_by
  skill_id: order_by
}

"""aggregate variance on columns"""
type engineer_skills_variance_fields {
  engineer_id: Float
  skill_id: Float
}

"""
order by variance() on columns of table "engineer_skills"
"""
input engineer_skills_variance_order_by {
  engineer_id: order_by
  skill_id: order_by
}

"""
columns and relationships of "engineer_visits"
"""
type engineer_visits {
  contact_staff_id: bigint
  engineer_id: bigint
  engineer_visit_id: bigint!

  """An object relationship"""
  fault_log: fault_log
  fault_log_entry_id: bigint
  fault_status: String

  """An object relationship"""
  maintenance_engineer: maintenance_engineers
  other_visit_details: String

  """An object relationship"""
  staff: staff
  visit_end_datetime: timestamptz
  visit_start_datetime: timestamptz
}

"""
aggregated selection of "engineer_visits"
"""
type engineer_visits_aggregate {
  aggregate: engineer_visits_aggregate_fields
  nodes: [engineer_visits!]!
}

"""
aggregate fields of "engineer_visits"
"""
type engineer_visits_aggregate_fields {
  avg: engineer_visits_avg_fields
  count(columns: [engineer_visits_select_column!], distinct: Boolean): Int
  max: engineer_visits_max_fields
  min: engineer_visits_min_fields
  stddev: engineer_visits_stddev_fields
  stddev_pop: engineer_visits_stddev_pop_fields
  stddev_samp: engineer_visits_stddev_samp_fields
  sum: engineer_visits_sum_fields
  var_pop: engineer_visits_var_pop_fields
  var_samp: engineer_visits_var_samp_fields
  variance: engineer_visits_variance_fields
}

"""
order by aggregate values of table "engineer_visits"
"""
input engineer_visits_aggregate_order_by {
  avg: engineer_visits_avg_order_by
  count: order_by
  max: engineer_visits_max_order_by
  min: engineer_visits_min_order_by
  stddev: engineer_visits_stddev_order_by
  stddev_pop: engineer_visits_stddev_pop_order_by
  stddev_samp: engineer_visits_stddev_samp_order_by
  sum: engineer_visits_sum_order_by
  var_pop: engineer_visits_var_pop_order_by
  var_samp: engineer_visits_var_samp_order_by
  variance: engineer_visits_variance_order_by
}

"""
input type for inserting array relation for remote table "engineer_visits"
"""
input engineer_visits_arr_rel_insert_input {
  data: [engineer_visits_insert_input!]!
  on_conflict: engineer_visits_on_conflict
}

"""aggregate avg on columns"""
type engineer_visits_avg_fields {
  contact_staff_id: Float
  engineer_id: Float
  engineer_visit_id: Float
  fault_log_entry_id: Float
}

"""
order by avg() on columns of table "engineer_visits"
"""
input engineer_visits_avg_order_by {
  contact_staff_id: order_by
  engineer_id: order_by
  engineer_visit_id: order_by
  fault_log_entry_id: order_by
}

"""
Boolean expression to filter rows from the table "engineer_visits". All fields are combined with a logical 'AND'.
"""
input engineer_visits_bool_exp {
  _and: [engineer_visits_bool_exp]
  _not: engineer_visits_bool_exp
  _or: [engineer_visits_bool_exp]
  contact_staff_id: bigint_comparison_exp
  engineer_id: bigint_comparison_exp
  engineer_visit_id: bigint_comparison_exp
  fault_log: fault_log_bool_exp
  fault_log_entry_id: bigint_comparison_exp
  fault_status: String_comparison_exp
  maintenance_engineer: maintenance_engineers_bool_exp
  other_visit_details: String_comparison_exp
  staff: staff_bool_exp
  visit_end_datetime: timestamptz_comparison_exp
  visit_start_datetime: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "engineer_visits"
"""
enum engineer_visits_constraint {
  """unique or primary key constraint"""
  idx_27080_engineer_visits_pkey
}

"""
input type for incrementing integer column in table "engineer_visits"
"""
input engineer_visits_inc_input {
  contact_staff_id: bigint
  engineer_id: bigint
  engineer_visit_id: bigint
  fault_log_entry_id: bigint
}

"""
input type for inserting data into table "engineer_visits"
"""
input engineer_visits_insert_input {
  contact_staff_id: bigint
  engineer_id: bigint
  engineer_visit_id: bigint
  fault_log: fault_log_obj_rel_insert_input
  fault_log_entry_id: bigint
  fault_status: String
  maintenance_engineer: maintenance_engineers_obj_rel_insert_input
  other_visit_details: String
  staff: staff_obj_rel_insert_input
  visit_end_datetime: timestamptz
  visit_start_datetime: timestamptz
}

"""aggregate max on columns"""
type engineer_visits_max_fields {
  contact_staff_id: bigint
  engineer_id: bigint
  engineer_visit_id: bigint
  fault_log_entry_id: bigint
  fault_status: String
  other_visit_details: String
  visit_end_datetime: timestamptz
  visit_start_datetime: timestamptz
}

"""
order by max() on columns of table "engineer_visits"
"""
input engineer_visits_max_order_by {
  contact_staff_id: order_by
  engineer_id: order_by
  engineer_visit_id: order_by
  fault_log_entry_id: order_by
  fault_status: order_by
  other_visit_details: order_by
  visit_end_datetime: order_by
  visit_start_datetime: order_by
}

"""aggregate min on columns"""
type engineer_visits_min_fields {
  contact_staff_id: bigint
  engineer_id: bigint
  engineer_visit_id: bigint
  fault_log_entry_id: bigint
  fault_status: String
  other_visit_details: String
  visit_end_datetime: timestamptz
  visit_start_datetime: timestamptz
}

"""
order by min() on columns of table "engineer_visits"
"""
input engineer_visits_min_order_by {
  contact_staff_id: order_by
  engineer_id: order_by
  engineer_visit_id: order_by
  fault_log_entry_id: order_by
  fault_status: order_by
  other_visit_details: order_by
  visit_end_datetime: order_by
  visit_start_datetime: order_by
}

"""
response of any mutation on the table "engineer_visits"
"""
type engineer_visits_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [engineer_visits!]!
}

"""
input type for inserting object relation for remote table "engineer_visits"
"""
input engineer_visits_obj_rel_insert_input {
  data: engineer_visits_insert_input!
  on_conflict: engineer_visits_on_conflict
}

"""
on conflict condition type for table "engineer_visits"
"""
input engineer_visits_on_conflict {
  constraint: engineer_visits_constraint!
  update_columns: [engineer_visits_update_column!]!
  where: engineer_visits_bool_exp
}

"""
ordering options when selecting data from "engineer_visits"
"""
input engineer_visits_order_by {
  contact_staff_id: order_by
  engineer_id: order_by
  engineer_visit_id: order_by
  fault_log: fault_log_order_by
  fault_log_entry_id: order_by
  fault_status: order_by
  maintenance_engineer: maintenance_engineers_order_by
  other_visit_details: order_by
  staff: staff_order_by
  visit_end_datetime: order_by
  visit_start_datetime: order_by
}

"""
primary key columns input for table: "engineer_visits"
"""
input engineer_visits_pk_columns_input {
  engineer_visit_id: bigint!
}

"""
select columns of table "engineer_visits"
"""
enum engineer_visits_select_column {
  """column name"""
  contact_staff_id

  """column name"""
  engineer_id

  """column name"""
  engineer_visit_id

  """column name"""
  fault_log_entry_id

  """column name"""
  fault_status

  """column name"""
  other_visit_details

  """column name"""
  visit_end_datetime

  """column name"""
  visit_start_datetime
}

"""
input type for updating data in table "engineer_visits"
"""
input engineer_visits_set_input {
  contact_staff_id: bigint
  engineer_id: bigint
  engineer_visit_id: bigint
  fault_log_entry_id: bigint
  fault_status: String
  other_visit_details: String
  visit_end_datetime: timestamptz
  visit_start_datetime: timestamptz
}

"""aggregate stddev on columns"""
type engineer_visits_stddev_fields {
  contact_staff_id: Float
  engineer_id: Float
  engineer_visit_id: Float
  fault_log_entry_id: Float
}

"""
order by stddev() on columns of table "engineer_visits"
"""
input engineer_visits_stddev_order_by {
  contact_staff_id: order_by
  engineer_id: order_by
  engineer_visit_id: order_by
  fault_log_entry_id: order_by
}

"""aggregate stddev_pop on columns"""
type engineer_visits_stddev_pop_fields {
  contact_staff_id: Float
  engineer_id: Float
  engineer_visit_id: Float
  fault_log_entry_id: Float
}

"""
order by stddev_pop() on columns of table "engineer_visits"
"""
input engineer_visits_stddev_pop_order_by {
  contact_staff_id: order_by
  engineer_id: order_by
  engineer_visit_id: order_by
  fault_log_entry_id: order_by
}

"""aggregate stddev_samp on columns"""
type engineer_visits_stddev_samp_fields {
  contact_staff_id: Float
  engineer_id: Float
  engineer_visit_id: Float
  fault_log_entry_id: Float
}

"""
order by stddev_samp() on columns of table "engineer_visits"
"""
input engineer_visits_stddev_samp_order_by {
  contact_staff_id: order_by
  engineer_id: order_by
  engineer_visit_id: order_by
  fault_log_entry_id: order_by
}

"""aggregate sum on columns"""
type engineer_visits_sum_fields {
  contact_staff_id: bigint
  engineer_id: bigint
  engineer_visit_id: bigint
  fault_log_entry_id: bigint
}

"""
order by sum() on columns of table "engineer_visits"
"""
input engineer_visits_sum_order_by {
  contact_staff_id: order_by
  engineer_id: order_by
  engineer_visit_id: order_by
  fault_log_entry_id: order_by
}

"""
update columns of table "engineer_visits"
"""
enum engineer_visits_update_column {
  """column name"""
  contact_staff_id

  """column name"""
  engineer_id

  """column name"""
  engineer_visit_id

  """column name"""
  fault_log_entry_id

  """column name"""
  fault_status

  """column name"""
  other_visit_details

  """column name"""
  visit_end_datetime

  """column name"""
  visit_start_datetime
}

"""aggregate var_pop on columns"""
type engineer_visits_var_pop_fields {
  contact_staff_id: Float
  engineer_id: Float
  engineer_visit_id: Float
  fault_log_entry_id: Float
}

"""
order by var_pop() on columns of table "engineer_visits"
"""
input engineer_visits_var_pop_order_by {
  contact_staff_id: order_by
  engineer_id: order_by
  engineer_visit_id: order_by
  fault_log_entry_id: order_by
}

"""aggregate var_samp on columns"""
type engineer_visits_var_samp_fields {
  contact_staff_id: Float
  engineer_id: Float
  engineer_visit_id: Float
  fault_log_entry_id: Float
}

"""
order by var_samp() on columns of table "engineer_visits"
"""
input engineer_visits_var_samp_order_by {
  contact_staff_id: order_by
  engineer_id: order_by
  engineer_visit_id: order_by
  fault_log_entry_id: order_by
}

"""aggregate variance on columns"""
type engineer_visits_variance_fields {
  contact_staff_id: Float
  engineer_id: Float
  engineer_visit_id: Float
  fault_log_entry_id: Float
}

"""
order by variance() on columns of table "engineer_visits"
"""
input engineer_visits_variance_order_by {
  contact_staff_id: order_by
  engineer_id: order_by
  engineer_visit_id: order_by
  fault_log_entry_id: order_by
}

"""
columns and relationships of "fault_log"
"""
type fault_log {
  """An object relationship"""
  asset: assets
  asset_id: bigint

  """An array relationship"""
  engineer_visits(
    """distinct select on columns"""
    distinct_on: [engineer_visits_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [engineer_visits_order_by!]

    """filter the rows returned"""
    where: engineer_visits_bool_exp
  ): [engineer_visits!]!

  """An aggregated array relationship"""
  engineer_visits_aggregate(
    """distinct select on columns"""
    distinct_on: [engineer_visits_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [engineer_visits_order_by!]

    """filter the rows returned"""
    where: engineer_visits_bool_exp
  ): engineer_visits_aggregate!
  fault_description: String
  fault_log_entry_datetime: timestamptz
  fault_log_entry_id: bigint!

  """An array relationship"""
  fault_log_parts(
    """distinct select on columns"""
    distinct_on: [fault_log_parts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [fault_log_parts_order_by!]

    """filter the rows returned"""
    where: fault_log_parts_bool_exp
  ): [fault_log_parts!]!

  """An aggregated array relationship"""
  fault_log_parts_aggregate(
    """distinct select on columns"""
    distinct_on: [fault_log_parts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [fault_log_parts_order_by!]

    """filter the rows returned"""
    where: fault_log_parts_bool_exp
  ): fault_log_parts_aggregate!
  other_fault_details: String
  recorded_by_staff_id: bigint

  """An object relationship"""
  staff: staff
}

"""
aggregated selection of "fault_log"
"""
type fault_log_aggregate {
  aggregate: fault_log_aggregate_fields
  nodes: [fault_log!]!
}

"""
aggregate fields of "fault_log"
"""
type fault_log_aggregate_fields {
  avg: fault_log_avg_fields
  count(columns: [fault_log_select_column!], distinct: Boolean): Int
  max: fault_log_max_fields
  min: fault_log_min_fields
  stddev: fault_log_stddev_fields
  stddev_pop: fault_log_stddev_pop_fields
  stddev_samp: fault_log_stddev_samp_fields
  sum: fault_log_sum_fields
  var_pop: fault_log_var_pop_fields
  var_samp: fault_log_var_samp_fields
  variance: fault_log_variance_fields
}

"""
order by aggregate values of table "fault_log"
"""
input fault_log_aggregate_order_by {
  avg: fault_log_avg_order_by
  count: order_by
  max: fault_log_max_order_by
  min: fault_log_min_order_by
  stddev: fault_log_stddev_order_by
  stddev_pop: fault_log_stddev_pop_order_by
  stddev_samp: fault_log_stddev_samp_order_by
  sum: fault_log_sum_order_by
  var_pop: fault_log_var_pop_order_by
  var_samp: fault_log_var_samp_order_by
  variance: fault_log_variance_order_by
}

"""
input type for inserting array relation for remote table "fault_log"
"""
input fault_log_arr_rel_insert_input {
  data: [fault_log_insert_input!]!
  on_conflict: fault_log_on_conflict
}

"""aggregate avg on columns"""
type fault_log_avg_fields {
  asset_id: Float
  fault_log_entry_id: Float
  recorded_by_staff_id: Float
}

"""
order by avg() on columns of table "fault_log"
"""
input fault_log_avg_order_by {
  asset_id: order_by
  fault_log_entry_id: order_by
  recorded_by_staff_id: order_by
}

"""
Boolean expression to filter rows from the table "fault_log". All fields are combined with a logical 'AND'.
"""
input fault_log_bool_exp {
  _and: [fault_log_bool_exp]
  _not: fault_log_bool_exp
  _or: [fault_log_bool_exp]
  asset: assets_bool_exp
  asset_id: bigint_comparison_exp
  engineer_visits: engineer_visits_bool_exp
  fault_description: String_comparison_exp
  fault_log_entry_datetime: timestamptz_comparison_exp
  fault_log_entry_id: bigint_comparison_exp
  fault_log_parts: fault_log_parts_bool_exp
  other_fault_details: String_comparison_exp
  recorded_by_staff_id: bigint_comparison_exp
  staff: staff_bool_exp
}

"""
unique or primary key constraints on table "fault_log"
"""
enum fault_log_constraint {
  """unique or primary key constraint"""
  idx_27074_fault_log_pkey
}

"""
input type for incrementing integer column in table "fault_log"
"""
input fault_log_inc_input {
  asset_id: bigint
  fault_log_entry_id: bigint
  recorded_by_staff_id: bigint
}

"""
input type for inserting data into table "fault_log"
"""
input fault_log_insert_input {
  asset: assets_obj_rel_insert_input
  asset_id: bigint
  engineer_visits: engineer_visits_arr_rel_insert_input
  fault_description: String
  fault_log_entry_datetime: timestamptz
  fault_log_entry_id: bigint
  fault_log_parts: fault_log_parts_arr_rel_insert_input
  other_fault_details: String
  recorded_by_staff_id: bigint
  staff: staff_obj_rel_insert_input
}

"""aggregate max on columns"""
type fault_log_max_fields {
  asset_id: bigint
  fault_description: String
  fault_log_entry_datetime: timestamptz
  fault_log_entry_id: bigint
  other_fault_details: String
  recorded_by_staff_id: bigint
}

"""
order by max() on columns of table "fault_log"
"""
input fault_log_max_order_by {
  asset_id: order_by
  fault_description: order_by
  fault_log_entry_datetime: order_by
  fault_log_entry_id: order_by
  other_fault_details: order_by
  recorded_by_staff_id: order_by
}

"""aggregate min on columns"""
type fault_log_min_fields {
  asset_id: bigint
  fault_description: String
  fault_log_entry_datetime: timestamptz
  fault_log_entry_id: bigint
  other_fault_details: String
  recorded_by_staff_id: bigint
}

"""
order by min() on columns of table "fault_log"
"""
input fault_log_min_order_by {
  asset_id: order_by
  fault_description: order_by
  fault_log_entry_datetime: order_by
  fault_log_entry_id: order_by
  other_fault_details: order_by
  recorded_by_staff_id: order_by
}

"""
response of any mutation on the table "fault_log"
"""
type fault_log_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [fault_log!]!
}

"""
input type for inserting object relation for remote table "fault_log"
"""
input fault_log_obj_rel_insert_input {
  data: fault_log_insert_input!
  on_conflict: fault_log_on_conflict
}

"""
on conflict condition type for table "fault_log"
"""
input fault_log_on_conflict {
  constraint: fault_log_constraint!
  update_columns: [fault_log_update_column!]!
  where: fault_log_bool_exp
}

"""
ordering options when selecting data from "fault_log"
"""
input fault_log_order_by {
  asset: assets_order_by
  asset_id: order_by
  engineer_visits_aggregate: engineer_visits_aggregate_order_by
  fault_description: order_by
  fault_log_entry_datetime: order_by
  fault_log_entry_id: order_by
  fault_log_parts_aggregate: fault_log_parts_aggregate_order_by
  other_fault_details: order_by
  recorded_by_staff_id: order_by
  staff: staff_order_by
}

"""
columns and relationships of "fault_log_parts"
"""
type fault_log_parts {
  """An object relationship"""
  fault_log: fault_log
  fault_log_entry_id: bigint
  fault_status: String

  """An object relationship"""
  part_fault: part_faults
  part_fault_id: bigint
}

"""
aggregated selection of "fault_log_parts"
"""
type fault_log_parts_aggregate {
  aggregate: fault_log_parts_aggregate_fields
  nodes: [fault_log_parts!]!
}

"""
aggregate fields of "fault_log_parts"
"""
type fault_log_parts_aggregate_fields {
  avg: fault_log_parts_avg_fields
  count(columns: [fault_log_parts_select_column!], distinct: Boolean): Int
  max: fault_log_parts_max_fields
  min: fault_log_parts_min_fields
  stddev: fault_log_parts_stddev_fields
  stddev_pop: fault_log_parts_stddev_pop_fields
  stddev_samp: fault_log_parts_stddev_samp_fields
  sum: fault_log_parts_sum_fields
  var_pop: fault_log_parts_var_pop_fields
  var_samp: fault_log_parts_var_samp_fields
  variance: fault_log_parts_variance_fields
}

"""
order by aggregate values of table "fault_log_parts"
"""
input fault_log_parts_aggregate_order_by {
  avg: fault_log_parts_avg_order_by
  count: order_by
  max: fault_log_parts_max_order_by
  min: fault_log_parts_min_order_by
  stddev: fault_log_parts_stddev_order_by
  stddev_pop: fault_log_parts_stddev_pop_order_by
  stddev_samp: fault_log_parts_stddev_samp_order_by
  sum: fault_log_parts_sum_order_by
  var_pop: fault_log_parts_var_pop_order_by
  var_samp: fault_log_parts_var_samp_order_by
  variance: fault_log_parts_variance_order_by
}

"""
input type for inserting array relation for remote table "fault_log_parts"
"""
input fault_log_parts_arr_rel_insert_input {
  data: [fault_log_parts_insert_input!]!
}

"""aggregate avg on columns"""
type fault_log_parts_avg_fields {
  fault_log_entry_id: Float
  part_fault_id: Float
}

"""
order by avg() on columns of table "fault_log_parts"
"""
input fault_log_parts_avg_order_by {
  fault_log_entry_id: order_by
  part_fault_id: order_by
}

"""
Boolean expression to filter rows from the table "fault_log_parts". All fields are combined with a logical 'AND'.
"""
input fault_log_parts_bool_exp {
  _and: [fault_log_parts_bool_exp]
  _not: fault_log_parts_bool_exp
  _or: [fault_log_parts_bool_exp]
  fault_log: fault_log_bool_exp
  fault_log_entry_id: bigint_comparison_exp
  fault_status: String_comparison_exp
  part_fault: part_faults_bool_exp
  part_fault_id: bigint_comparison_exp
}

"""
input type for incrementing integer column in table "fault_log_parts"
"""
input fault_log_parts_inc_input {
  fault_log_entry_id: bigint
  part_fault_id: bigint
}

"""
input type for inserting data into table "fault_log_parts"
"""
input fault_log_parts_insert_input {
  fault_log: fault_log_obj_rel_insert_input
  fault_log_entry_id: bigint
  fault_status: String
  part_fault: part_faults_obj_rel_insert_input
  part_fault_id: bigint
}

"""aggregate max on columns"""
type fault_log_parts_max_fields {
  fault_log_entry_id: bigint
  fault_status: String
  part_fault_id: bigint
}

"""
order by max() on columns of table "fault_log_parts"
"""
input fault_log_parts_max_order_by {
  fault_log_entry_id: order_by
  fault_status: order_by
  part_fault_id: order_by
}

"""aggregate min on columns"""
type fault_log_parts_min_fields {
  fault_log_entry_id: bigint
  fault_status: String
  part_fault_id: bigint
}

"""
order by min() on columns of table "fault_log_parts"
"""
input fault_log_parts_min_order_by {
  fault_log_entry_id: order_by
  fault_status: order_by
  part_fault_id: order_by
}

"""
response of any mutation on the table "fault_log_parts"
"""
type fault_log_parts_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [fault_log_parts!]!
}

"""
input type for inserting object relation for remote table "fault_log_parts"
"""
input fault_log_parts_obj_rel_insert_input {
  data: fault_log_parts_insert_input!
}

"""
ordering options when selecting data from "fault_log_parts"
"""
input fault_log_parts_order_by {
  fault_log: fault_log_order_by
  fault_log_entry_id: order_by
  fault_status: order_by
  part_fault: part_faults_order_by
  part_fault_id: order_by
}

"""
select columns of table "fault_log_parts"
"""
enum fault_log_parts_select_column {
  """column name"""
  fault_log_entry_id

  """column name"""
  fault_status

  """column name"""
  part_fault_id
}

"""
input type for updating data in table "fault_log_parts"
"""
input fault_log_parts_set_input {
  fault_log_entry_id: bigint
  fault_status: String
  part_fault_id: bigint
}

"""aggregate stddev on columns"""
type fault_log_parts_stddev_fields {
  fault_log_entry_id: Float
  part_fault_id: Float
}

"""
order by stddev() on columns of table "fault_log_parts"
"""
input fault_log_parts_stddev_order_by {
  fault_log_entry_id: order_by
  part_fault_id: order_by
}

"""aggregate stddev_pop on columns"""
type fault_log_parts_stddev_pop_fields {
  fault_log_entry_id: Float
  part_fault_id: Float
}

"""
order by stddev_pop() on columns of table "fault_log_parts"
"""
input fault_log_parts_stddev_pop_order_by {
  fault_log_entry_id: order_by
  part_fault_id: order_by
}

"""aggregate stddev_samp on columns"""
type fault_log_parts_stddev_samp_fields {
  fault_log_entry_id: Float
  part_fault_id: Float
}

"""
order by stddev_samp() on columns of table "fault_log_parts"
"""
input fault_log_parts_stddev_samp_order_by {
  fault_log_entry_id: order_by
  part_fault_id: order_by
}

"""aggregate sum on columns"""
type fault_log_parts_sum_fields {
  fault_log_entry_id: bigint
  part_fault_id: bigint
}

"""
order by sum() on columns of table "fault_log_parts"
"""
input fault_log_parts_sum_order_by {
  fault_log_entry_id: order_by
  part_fault_id: order_by
}

"""aggregate var_pop on columns"""
type fault_log_parts_var_pop_fields {
  fault_log_entry_id: Float
  part_fault_id: Float
}

"""
order by var_pop() on columns of table "fault_log_parts"
"""
input fault_log_parts_var_pop_order_by {
  fault_log_entry_id: order_by
  part_fault_id: order_by
}

"""aggregate var_samp on columns"""
type fault_log_parts_var_samp_fields {
  fault_log_entry_id: Float
  part_fault_id: Float
}

"""
order by var_samp() on columns of table "fault_log_parts"
"""
input fault_log_parts_var_samp_order_by {
  fault_log_entry_id: order_by
  part_fault_id: order_by
}

"""aggregate variance on columns"""
type fault_log_parts_variance_fields {
  fault_log_entry_id: Float
  part_fault_id: Float
}

"""
order by variance() on columns of table "fault_log_parts"
"""
input fault_log_parts_variance_order_by {
  fault_log_entry_id: order_by
  part_fault_id: order_by
}

"""
primary key columns input for table: "fault_log"
"""
input fault_log_pk_columns_input {
  fault_log_entry_id: bigint!
}

"""
select columns of table "fault_log"
"""
enum fault_log_select_column {
  """column name"""
  asset_id

  """column name"""
  fault_description

  """column name"""
  fault_log_entry_datetime

  """column name"""
  fault_log_entry_id

  """column name"""
  other_fault_details

  """column name"""
  recorded_by_staff_id
}

"""
input type for updating data in table "fault_log"
"""
input fault_log_set_input {
  asset_id: bigint
  fault_description: String
  fault_log_entry_datetime: timestamptz
  fault_log_entry_id: bigint
  other_fault_details: String
  recorded_by_staff_id: bigint
}

"""aggregate stddev on columns"""
type fault_log_stddev_fields {
  asset_id: Float
  fault_log_entry_id: Float
  recorded_by_staff_id: Float
}

"""
order by stddev() on columns of table "fault_log"
"""
input fault_log_stddev_order_by {
  asset_id: order_by
  fault_log_entry_id: order_by
  recorded_by_staff_id: order_by
}

"""aggregate stddev_pop on columns"""
type fault_log_stddev_pop_fields {
  asset_id: Float
  fault_log_entry_id: Float
  recorded_by_staff_id: Float
}

"""
order by stddev_pop() on columns of table "fault_log"
"""
input fault_log_stddev_pop_order_by {
  asset_id: order_by
  fault_log_entry_id: order_by
  recorded_by_staff_id: order_by
}

"""aggregate stddev_samp on columns"""
type fault_log_stddev_samp_fields {
  asset_id: Float
  fault_log_entry_id: Float
  recorded_by_staff_id: Float
}

"""
order by stddev_samp() on columns of table "fault_log"
"""
input fault_log_stddev_samp_order_by {
  asset_id: order_by
  fault_log_entry_id: order_by
  recorded_by_staff_id: order_by
}

"""aggregate sum on columns"""
type fault_log_sum_fields {
  asset_id: bigint
  fault_log_entry_id: bigint
  recorded_by_staff_id: bigint
}

"""
order by sum() on columns of table "fault_log"
"""
input fault_log_sum_order_by {
  asset_id: order_by
  fault_log_entry_id: order_by
  recorded_by_staff_id: order_by
}

"""
update columns of table "fault_log"
"""
enum fault_log_update_column {
  """column name"""
  asset_id

  """column name"""
  fault_description

  """column name"""
  fault_log_entry_datetime

  """column name"""
  fault_log_entry_id

  """column name"""
  other_fault_details

  """column name"""
  recorded_by_staff_id
}

"""aggregate var_pop on columns"""
type fault_log_var_pop_fields {
  asset_id: Float
  fault_log_entry_id: Float
  recorded_by_staff_id: Float
}

"""
order by var_pop() on columns of table "fault_log"
"""
input fault_log_var_pop_order_by {
  asset_id: order_by
  fault_log_entry_id: order_by
  recorded_by_staff_id: order_by
}

"""aggregate var_samp on columns"""
type fault_log_var_samp_fields {
  asset_id: Float
  fault_log_entry_id: Float
  recorded_by_staff_id: Float
}

"""
order by var_samp() on columns of table "fault_log"
"""
input fault_log_var_samp_order_by {
  asset_id: order_by
  fault_log_entry_id: order_by
  recorded_by_staff_id: order_by
}

"""aggregate variance on columns"""
type fault_log_variance_fields {
  asset_id: Float
  fault_log_entry_id: Float
  recorded_by_staff_id: Float
}

"""
order by variance() on columns of table "fault_log"
"""
input fault_log_variance_order_by {
  asset_id: order_by
  fault_log_entry_id: order_by
  recorded_by_staff_id: order_by
}

"""
columns and relationships of "maintenance_contracts"
"""
type maintenance_contracts {
  """An array relationship"""
  assets(
    """distinct select on columns"""
    distinct_on: [assets_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [assets_order_by!]

    """filter the rows returned"""
    where: assets_bool_exp
  ): [assets!]!

  """An aggregated array relationship"""
  assets_aggregate(
    """distinct select on columns"""
    distinct_on: [assets_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [assets_order_by!]

    """filter the rows returned"""
    where: assets_bool_exp
  ): assets_aggregate!
  contract_end_date: timestamptz
  contract_start_date: timestamptz
  maintenance_contract_company_id: bigint
  maintenance_contract_id: bigint!
  other_contract_details: String

  """An object relationship"""
  third_party_company: third_party_companies
}

"""
aggregated selection of "maintenance_contracts"
"""
type maintenance_contracts_aggregate {
  aggregate: maintenance_contracts_aggregate_fields
  nodes: [maintenance_contracts!]!
}

"""
aggregate fields of "maintenance_contracts"
"""
type maintenance_contracts_aggregate_fields {
  avg: maintenance_contracts_avg_fields
  count(columns: [maintenance_contracts_select_column!], distinct: Boolean): Int
  max: maintenance_contracts_max_fields
  min: maintenance_contracts_min_fields
  stddev: maintenance_contracts_stddev_fields
  stddev_pop: maintenance_contracts_stddev_pop_fields
  stddev_samp: maintenance_contracts_stddev_samp_fields
  sum: maintenance_contracts_sum_fields
  var_pop: maintenance_contracts_var_pop_fields
  var_samp: maintenance_contracts_var_samp_fields
  variance: maintenance_contracts_variance_fields
}

"""
order by aggregate values of table "maintenance_contracts"
"""
input maintenance_contracts_aggregate_order_by {
  avg: maintenance_contracts_avg_order_by
  count: order_by
  max: maintenance_contracts_max_order_by
  min: maintenance_contracts_min_order_by
  stddev: maintenance_contracts_stddev_order_by
  stddev_pop: maintenance_contracts_stddev_pop_order_by
  stddev_samp: maintenance_contracts_stddev_samp_order_by
  sum: maintenance_contracts_sum_order_by
  var_pop: maintenance_contracts_var_pop_order_by
  var_samp: maintenance_contracts_var_samp_order_by
  variance: maintenance_contracts_variance_order_by
}

"""
input type for inserting array relation for remote table "maintenance_contracts"
"""
input maintenance_contracts_arr_rel_insert_input {
  data: [maintenance_contracts_insert_input!]!
  on_conflict: maintenance_contracts_on_conflict
}

"""aggregate avg on columns"""
type maintenance_contracts_avg_fields {
  maintenance_contract_company_id: Float
  maintenance_contract_id: Float
}

"""
order by avg() on columns of table "maintenance_contracts"
"""
input maintenance_contracts_avg_order_by {
  maintenance_contract_company_id: order_by
  maintenance_contract_id: order_by
}

"""
Boolean expression to filter rows from the table "maintenance_contracts". All fields are combined with a logical 'AND'.
"""
input maintenance_contracts_bool_exp {
  _and: [maintenance_contracts_bool_exp]
  _not: maintenance_contracts_bool_exp
  _or: [maintenance_contracts_bool_exp]
  assets: assets_bool_exp
  contract_end_date: timestamptz_comparison_exp
  contract_start_date: timestamptz_comparison_exp
  maintenance_contract_company_id: bigint_comparison_exp
  maintenance_contract_id: bigint_comparison_exp
  other_contract_details: String_comparison_exp
  third_party_company: third_party_companies_bool_exp
}

"""
unique or primary key constraints on table "maintenance_contracts"
"""
enum maintenance_contracts_constraint {
  """unique or primary key constraint"""
  idx_27032_maintenance_contracts_pkey
}

"""
input type for incrementing integer column in table "maintenance_contracts"
"""
input maintenance_contracts_inc_input {
  maintenance_contract_company_id: bigint
  maintenance_contract_id: bigint
}

"""
input type for inserting data into table "maintenance_contracts"
"""
input maintenance_contracts_insert_input {
  assets: assets_arr_rel_insert_input
  contract_end_date: timestamptz
  contract_start_date: timestamptz
  maintenance_contract_company_id: bigint
  maintenance_contract_id: bigint
  other_contract_details: String
  third_party_company: third_party_companies_obj_rel_insert_input
}

"""aggregate max on columns"""
type maintenance_contracts_max_fields {
  contract_end_date: timestamptz
  contract_start_date: timestamptz
  maintenance_contract_company_id: bigint
  maintenance_contract_id: bigint
  other_contract_details: String
}

"""
order by max() on columns of table "maintenance_contracts"
"""
input maintenance_contracts_max_order_by {
  contract_end_date: order_by
  contract_start_date: order_by
  maintenance_contract_company_id: order_by
  maintenance_contract_id: order_by
  other_contract_details: order_by
}

"""aggregate min on columns"""
type maintenance_contracts_min_fields {
  contract_end_date: timestamptz
  contract_start_date: timestamptz
  maintenance_contract_company_id: bigint
  maintenance_contract_id: bigint
  other_contract_details: String
}

"""
order by min() on columns of table "maintenance_contracts"
"""
input maintenance_contracts_min_order_by {
  contract_end_date: order_by
  contract_start_date: order_by
  maintenance_contract_company_id: order_by
  maintenance_contract_id: order_by
  other_contract_details: order_by
}

"""
response of any mutation on the table "maintenance_contracts"
"""
type maintenance_contracts_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [maintenance_contracts!]!
}

"""
input type for inserting object relation for remote table "maintenance_contracts"
"""
input maintenance_contracts_obj_rel_insert_input {
  data: maintenance_contracts_insert_input!
  on_conflict: maintenance_contracts_on_conflict
}

"""
on conflict condition type for table "maintenance_contracts"
"""
input maintenance_contracts_on_conflict {
  constraint: maintenance_contracts_constraint!
  update_columns: [maintenance_contracts_update_column!]!
  where: maintenance_contracts_bool_exp
}

"""
ordering options when selecting data from "maintenance_contracts"
"""
input maintenance_contracts_order_by {
  assets_aggregate: assets_aggregate_order_by
  contract_end_date: order_by
  contract_start_date: order_by
  maintenance_contract_company_id: order_by
  maintenance_contract_id: order_by
  other_contract_details: order_by
  third_party_company: third_party_companies_order_by
}

"""
primary key columns input for table: "maintenance_contracts"
"""
input maintenance_contracts_pk_columns_input {
  maintenance_contract_id: bigint!
}

"""
select columns of table "maintenance_contracts"
"""
enum maintenance_contracts_select_column {
  """column name"""
  contract_end_date

  """column name"""
  contract_start_date

  """column name"""
  maintenance_contract_company_id

  """column name"""
  maintenance_contract_id

  """column name"""
  other_contract_details
}

"""
input type for updating data in table "maintenance_contracts"
"""
input maintenance_contracts_set_input {
  contract_end_date: timestamptz
  contract_start_date: timestamptz
  maintenance_contract_company_id: bigint
  maintenance_contract_id: bigint
  other_contract_details: String
}

"""aggregate stddev on columns"""
type maintenance_contracts_stddev_fields {
  maintenance_contract_company_id: Float
  maintenance_contract_id: Float
}

"""
order by stddev() on columns of table "maintenance_contracts"
"""
input maintenance_contracts_stddev_order_by {
  maintenance_contract_company_id: order_by
  maintenance_contract_id: order_by
}

"""aggregate stddev_pop on columns"""
type maintenance_contracts_stddev_pop_fields {
  maintenance_contract_company_id: Float
  maintenance_contract_id: Float
}

"""
order by stddev_pop() on columns of table "maintenance_contracts"
"""
input maintenance_contracts_stddev_pop_order_by {
  maintenance_contract_company_id: order_by
  maintenance_contract_id: order_by
}

"""aggregate stddev_samp on columns"""
type maintenance_contracts_stddev_samp_fields {
  maintenance_contract_company_id: Float
  maintenance_contract_id: Float
}

"""
order by stddev_samp() on columns of table "maintenance_contracts"
"""
input maintenance_contracts_stddev_samp_order_by {
  maintenance_contract_company_id: order_by
  maintenance_contract_id: order_by
}

"""aggregate sum on columns"""
type maintenance_contracts_sum_fields {
  maintenance_contract_company_id: bigint
  maintenance_contract_id: bigint
}

"""
order by sum() on columns of table "maintenance_contracts"
"""
input maintenance_contracts_sum_order_by {
  maintenance_contract_company_id: order_by
  maintenance_contract_id: order_by
}

"""
update columns of table "maintenance_contracts"
"""
enum maintenance_contracts_update_column {
  """column name"""
  contract_end_date

  """column name"""
  contract_start_date

  """column name"""
  maintenance_contract_company_id

  """column name"""
  maintenance_contract_id

  """column name"""
  other_contract_details
}

"""aggregate var_pop on columns"""
type maintenance_contracts_var_pop_fields {
  maintenance_contract_company_id: Float
  maintenance_contract_id: Float
}

"""
order by var_pop() on columns of table "maintenance_contracts"
"""
input maintenance_contracts_var_pop_order_by {
  maintenance_contract_company_id: order_by
  maintenance_contract_id: order_by
}

"""aggregate var_samp on columns"""
type maintenance_contracts_var_samp_fields {
  maintenance_contract_company_id: Float
  maintenance_contract_id: Float
}

"""
order by var_samp() on columns of table "maintenance_contracts"
"""
input maintenance_contracts_var_samp_order_by {
  maintenance_contract_company_id: order_by
  maintenance_contract_id: order_by
}

"""aggregate variance on columns"""
type maintenance_contracts_variance_fields {
  maintenance_contract_company_id: Float
  maintenance_contract_id: Float
}

"""
order by variance() on columns of table "maintenance_contracts"
"""
input maintenance_contracts_variance_order_by {
  maintenance_contract_company_id: order_by
  maintenance_contract_id: order_by
}

"""
columns and relationships of "maintenance_engineers"
"""
type maintenance_engineers {
  company_id: bigint
  engineer_id: bigint!

  """An array relationship"""
  engineer_skills(
    """distinct select on columns"""
    distinct_on: [engineer_skills_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [engineer_skills_order_by!]

    """filter the rows returned"""
    where: engineer_skills_bool_exp
  ): [engineer_skills!]!

  """An aggregated array relationship"""
  engineer_skills_aggregate(
    """distinct select on columns"""
    distinct_on: [engineer_skills_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [engineer_skills_order_by!]

    """filter the rows returned"""
    where: engineer_skills_bool_exp
  ): engineer_skills_aggregate!

  """An array relationship"""
  engineer_visits(
    """distinct select on columns"""
    distinct_on: [engineer_visits_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [engineer_visits_order_by!]

    """filter the rows returned"""
    where: engineer_visits_bool_exp
  ): [engineer_visits!]!

  """An aggregated array relationship"""
  engineer_visits_aggregate(
    """distinct select on columns"""
    distinct_on: [engineer_visits_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [engineer_visits_order_by!]

    """filter the rows returned"""
    where: engineer_visits_bool_exp
  ): engineer_visits_aggregate!
  first_name: String
  last_name: String
  other_details: String

  """An object relationship"""
  third_party_company: third_party_companies
}

"""
aggregated selection of "maintenance_engineers"
"""
type maintenance_engineers_aggregate {
  aggregate: maintenance_engineers_aggregate_fields
  nodes: [maintenance_engineers!]!
}

"""
aggregate fields of "maintenance_engineers"
"""
type maintenance_engineers_aggregate_fields {
  avg: maintenance_engineers_avg_fields
  count(columns: [maintenance_engineers_select_column!], distinct: Boolean): Int
  max: maintenance_engineers_max_fields
  min: maintenance_engineers_min_fields
  stddev: maintenance_engineers_stddev_fields
  stddev_pop: maintenance_engineers_stddev_pop_fields
  stddev_samp: maintenance_engineers_stddev_samp_fields
  sum: maintenance_engineers_sum_fields
  var_pop: maintenance_engineers_var_pop_fields
  var_samp: maintenance_engineers_var_samp_fields
  variance: maintenance_engineers_variance_fields
}

"""
order by aggregate values of table "maintenance_engineers"
"""
input maintenance_engineers_aggregate_order_by {
  avg: maintenance_engineers_avg_order_by
  count: order_by
  max: maintenance_engineers_max_order_by
  min: maintenance_engineers_min_order_by
  stddev: maintenance_engineers_stddev_order_by
  stddev_pop: maintenance_engineers_stddev_pop_order_by
  stddev_samp: maintenance_engineers_stddev_samp_order_by
  sum: maintenance_engineers_sum_order_by
  var_pop: maintenance_engineers_var_pop_order_by
  var_samp: maintenance_engineers_var_samp_order_by
  variance: maintenance_engineers_variance_order_by
}

"""
input type for inserting array relation for remote table "maintenance_engineers"
"""
input maintenance_engineers_arr_rel_insert_input {
  data: [maintenance_engineers_insert_input!]!
  on_conflict: maintenance_engineers_on_conflict
}

"""aggregate avg on columns"""
type maintenance_engineers_avg_fields {
  company_id: Float
  engineer_id: Float
}

"""
order by avg() on columns of table "maintenance_engineers"
"""
input maintenance_engineers_avg_order_by {
  company_id: order_by
  engineer_id: order_by
}

"""
Boolean expression to filter rows from the table "maintenance_engineers". All fields are combined with a logical 'AND'.
"""
input maintenance_engineers_bool_exp {
  _and: [maintenance_engineers_bool_exp]
  _not: maintenance_engineers_bool_exp
  _or: [maintenance_engineers_bool_exp]
  company_id: bigint_comparison_exp
  engineer_id: bigint_comparison_exp
  engineer_skills: engineer_skills_bool_exp
  engineer_visits: engineer_visits_bool_exp
  first_name: String_comparison_exp
  last_name: String_comparison_exp
  other_details: String_comparison_exp
  third_party_company: third_party_companies_bool_exp
}

"""
unique or primary key constraints on table "maintenance_engineers"
"""
enum maintenance_engineers_constraint {
  """unique or primary key constraint"""
  idx_27065_maintenance_engineers_pkey
}

"""
input type for incrementing integer column in table "maintenance_engineers"
"""
input maintenance_engineers_inc_input {
  company_id: bigint
  engineer_id: bigint
}

"""
input type for inserting data into table "maintenance_engineers"
"""
input maintenance_engineers_insert_input {
  company_id: bigint
  engineer_id: bigint
  engineer_skills: engineer_skills_arr_rel_insert_input
  engineer_visits: engineer_visits_arr_rel_insert_input
  first_name: String
  last_name: String
  other_details: String
  third_party_company: third_party_companies_obj_rel_insert_input
}

"""aggregate max on columns"""
type maintenance_engineers_max_fields {
  company_id: bigint
  engineer_id: bigint
  first_name: String
  last_name: String
  other_details: String
}

"""
order by max() on columns of table "maintenance_engineers"
"""
input maintenance_engineers_max_order_by {
  company_id: order_by
  engineer_id: order_by
  first_name: order_by
  last_name: order_by
  other_details: order_by
}

"""aggregate min on columns"""
type maintenance_engineers_min_fields {
  company_id: bigint
  engineer_id: bigint
  first_name: String
  last_name: String
  other_details: String
}

"""
order by min() on columns of table "maintenance_engineers"
"""
input maintenance_engineers_min_order_by {
  company_id: order_by
  engineer_id: order_by
  first_name: order_by
  last_name: order_by
  other_details: order_by
}

"""
response of any mutation on the table "maintenance_engineers"
"""
type maintenance_engineers_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [maintenance_engineers!]!
}

"""
input type for inserting object relation for remote table "maintenance_engineers"
"""
input maintenance_engineers_obj_rel_insert_input {
  data: maintenance_engineers_insert_input!
  on_conflict: maintenance_engineers_on_conflict
}

"""
on conflict condition type for table "maintenance_engineers"
"""
input maintenance_engineers_on_conflict {
  constraint: maintenance_engineers_constraint!
  update_columns: [maintenance_engineers_update_column!]!
  where: maintenance_engineers_bool_exp
}

"""
ordering options when selecting data from "maintenance_engineers"
"""
input maintenance_engineers_order_by {
  company_id: order_by
  engineer_id: order_by
  engineer_skills_aggregate: engineer_skills_aggregate_order_by
  engineer_visits_aggregate: engineer_visits_aggregate_order_by
  first_name: order_by
  last_name: order_by
  other_details: order_by
  third_party_company: third_party_companies_order_by
}

"""
primary key columns input for table: "maintenance_engineers"
"""
input maintenance_engineers_pk_columns_input {
  engineer_id: bigint!
}

"""
select columns of table "maintenance_engineers"
"""
enum maintenance_engineers_select_column {
  """column name"""
  company_id

  """column name"""
  engineer_id

  """column name"""
  first_name

  """column name"""
  last_name

  """column name"""
  other_details
}

"""
input type for updating data in table "maintenance_engineers"
"""
input maintenance_engineers_set_input {
  company_id: bigint
  engineer_id: bigint
  first_name: String
  last_name: String
  other_details: String
}

"""aggregate stddev on columns"""
type maintenance_engineers_stddev_fields {
  company_id: Float
  engineer_id: Float
}

"""
order by stddev() on columns of table "maintenance_engineers"
"""
input maintenance_engineers_stddev_order_by {
  company_id: order_by
  engineer_id: order_by
}

"""aggregate stddev_pop on columns"""
type maintenance_engineers_stddev_pop_fields {
  company_id: Float
  engineer_id: Float
}

"""
order by stddev_pop() on columns of table "maintenance_engineers"
"""
input maintenance_engineers_stddev_pop_order_by {
  company_id: order_by
  engineer_id: order_by
}

"""aggregate stddev_samp on columns"""
type maintenance_engineers_stddev_samp_fields {
  company_id: Float
  engineer_id: Float
}

"""
order by stddev_samp() on columns of table "maintenance_engineers"
"""
input maintenance_engineers_stddev_samp_order_by {
  company_id: order_by
  engineer_id: order_by
}

"""aggregate sum on columns"""
type maintenance_engineers_sum_fields {
  company_id: bigint
  engineer_id: bigint
}

"""
order by sum() on columns of table "maintenance_engineers"
"""
input maintenance_engineers_sum_order_by {
  company_id: order_by
  engineer_id: order_by
}

"""
update columns of table "maintenance_engineers"
"""
enum maintenance_engineers_update_column {
  """column name"""
  company_id

  """column name"""
  engineer_id

  """column name"""
  first_name

  """column name"""
  last_name

  """column name"""
  other_details
}

"""aggregate var_pop on columns"""
type maintenance_engineers_var_pop_fields {
  company_id: Float
  engineer_id: Float
}

"""
order by var_pop() on columns of table "maintenance_engineers"
"""
input maintenance_engineers_var_pop_order_by {
  company_id: order_by
  engineer_id: order_by
}

"""aggregate var_samp on columns"""
type maintenance_engineers_var_samp_fields {
  company_id: Float
  engineer_id: Float
}

"""
order by var_samp() on columns of table "maintenance_engineers"
"""
input maintenance_engineers_var_samp_order_by {
  company_id: order_by
  engineer_id: order_by
}

"""aggregate variance on columns"""
type maintenance_engineers_variance_fields {
  company_id: Float
  engineer_id: Float
}

"""
order by variance() on columns of table "maintenance_engineers"
"""
input maintenance_engineers_variance_order_by {
  company_id: order_by
  engineer_id: order_by
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "asset_parts"
  """
  delete_asset_parts(
    """filter the rows which have to be deleted"""
    where: asset_parts_bool_exp!
  ): asset_parts_mutation_response

  """
  delete data from the table: "assets"
  """
  delete_assets(
    """filter the rows which have to be deleted"""
    where: assets_bool_exp!
  ): assets_mutation_response

  """
  delete single row from the table: "assets"
  """
  delete_assets_by_pk(asset_id: bigint!): assets

  """
  delete data from the table: "engineer_skills"
  """
  delete_engineer_skills(
    """filter the rows which have to be deleted"""
    where: engineer_skills_bool_exp!
  ): engineer_skills_mutation_response

  """
  delete data from the table: "engineer_visits"
  """
  delete_engineer_visits(
    """filter the rows which have to be deleted"""
    where: engineer_visits_bool_exp!
  ): engineer_visits_mutation_response

  """
  delete single row from the table: "engineer_visits"
  """
  delete_engineer_visits_by_pk(engineer_visit_id: bigint!): engineer_visits

  """
  delete data from the table: "fault_log"
  """
  delete_fault_log(
    """filter the rows which have to be deleted"""
    where: fault_log_bool_exp!
  ): fault_log_mutation_response

  """
  delete single row from the table: "fault_log"
  """
  delete_fault_log_by_pk(fault_log_entry_id: bigint!): fault_log

  """
  delete data from the table: "fault_log_parts"
  """
  delete_fault_log_parts(
    """filter the rows which have to be deleted"""
    where: fault_log_parts_bool_exp!
  ): fault_log_parts_mutation_response

  """
  delete data from the table: "maintenance_contracts"
  """
  delete_maintenance_contracts(
    """filter the rows which have to be deleted"""
    where: maintenance_contracts_bool_exp!
  ): maintenance_contracts_mutation_response

  """
  delete single row from the table: "maintenance_contracts"
  """
  delete_maintenance_contracts_by_pk(maintenance_contract_id: bigint!): maintenance_contracts

  """
  delete data from the table: "maintenance_engineers"
  """
  delete_maintenance_engineers(
    """filter the rows which have to be deleted"""
    where: maintenance_engineers_bool_exp!
  ): maintenance_engineers_mutation_response

  """
  delete single row from the table: "maintenance_engineers"
  """
  delete_maintenance_engineers_by_pk(engineer_id: bigint!): maintenance_engineers

  """
  delete data from the table: "part_faults"
  """
  delete_part_faults(
    """filter the rows which have to be deleted"""
    where: part_faults_bool_exp!
  ): part_faults_mutation_response

  """
  delete single row from the table: "part_faults"
  """
  delete_part_faults_by_pk(part_fault_id: bigint!): part_faults

  """
  delete data from the table: "parts"
  """
  delete_parts(
    """filter the rows which have to be deleted"""
    where: parts_bool_exp!
  ): parts_mutation_response

  """
  delete single row from the table: "parts"
  """
  delete_parts_by_pk(part_id: bigint!): parts

  """
  delete data from the table: "skills"
  """
  delete_skills(
    """filter the rows which have to be deleted"""
    where: skills_bool_exp!
  ): skills_mutation_response

  """
  delete single row from the table: "skills"
  """
  delete_skills_by_pk(skill_id: bigint!): skills

  """
  delete data from the table: "skills_required_to_fix"
  """
  delete_skills_required_to_fix(
    """filter the rows which have to be deleted"""
    where: skills_required_to_fix_bool_exp!
  ): skills_required_to_fix_mutation_response

  """
  delete data from the table: "staff"
  """
  delete_staff(
    """filter the rows which have to be deleted"""
    where: staff_bool_exp!
  ): staff_mutation_response

  """
  delete single row from the table: "staff"
  """
  delete_staff_by_pk(staff_id: bigint!): staff

  """
  delete data from the table: "third_party_companies"
  """
  delete_third_party_companies(
    """filter the rows which have to be deleted"""
    where: third_party_companies_bool_exp!
  ): third_party_companies_mutation_response

  """
  delete single row from the table: "third_party_companies"
  """
  delete_third_party_companies_by_pk(company_id: bigint!): third_party_companies

  """
  insert data into the table: "asset_parts"
  """
  insert_asset_parts(
    """the rows to be inserted"""
    objects: [asset_parts_insert_input!]!
  ): asset_parts_mutation_response

  """
  insert a single row into the table: "asset_parts"
  """
  insert_asset_parts_one(
    """the row to be inserted"""
    object: asset_parts_insert_input!
  ): asset_parts

  """
  insert data into the table: "assets"
  """
  insert_assets(
    """the rows to be inserted"""
    objects: [assets_insert_input!]!

    """on conflict condition"""
    on_conflict: assets_on_conflict
  ): assets_mutation_response

  """
  insert a single row into the table: "assets"
  """
  insert_assets_one(
    """the row to be inserted"""
    object: assets_insert_input!

    """on conflict condition"""
    on_conflict: assets_on_conflict
  ): assets

  """
  insert data into the table: "engineer_skills"
  """
  insert_engineer_skills(
    """the rows to be inserted"""
    objects: [engineer_skills_insert_input!]!
  ): engineer_skills_mutation_response

  """
  insert a single row into the table: "engineer_skills"
  """
  insert_engineer_skills_one(
    """the row to be inserted"""
    object: engineer_skills_insert_input!
  ): engineer_skills

  """
  insert data into the table: "engineer_visits"
  """
  insert_engineer_visits(
    """the rows to be inserted"""
    objects: [engineer_visits_insert_input!]!

    """on conflict condition"""
    on_conflict: engineer_visits_on_conflict
  ): engineer_visits_mutation_response

  """
  insert a single row into the table: "engineer_visits"
  """
  insert_engineer_visits_one(
    """the row to be inserted"""
    object: engineer_visits_insert_input!

    """on conflict condition"""
    on_conflict: engineer_visits_on_conflict
  ): engineer_visits

  """
  insert data into the table: "fault_log"
  """
  insert_fault_log(
    """the rows to be inserted"""
    objects: [fault_log_insert_input!]!

    """on conflict condition"""
    on_conflict: fault_log_on_conflict
  ): fault_log_mutation_response

  """
  insert a single row into the table: "fault_log"
  """
  insert_fault_log_one(
    """the row to be inserted"""
    object: fault_log_insert_input!

    """on conflict condition"""
    on_conflict: fault_log_on_conflict
  ): fault_log

  """
  insert data into the table: "fault_log_parts"
  """
  insert_fault_log_parts(
    """the rows to be inserted"""
    objects: [fault_log_parts_insert_input!]!
  ): fault_log_parts_mutation_response

  """
  insert a single row into the table: "fault_log_parts"
  """
  insert_fault_log_parts_one(
    """the row to be inserted"""
    object: fault_log_parts_insert_input!
  ): fault_log_parts

  """
  insert data into the table: "maintenance_contracts"
  """
  insert_maintenance_contracts(
    """the rows to be inserted"""
    objects: [maintenance_contracts_insert_input!]!

    """on conflict condition"""
    on_conflict: maintenance_contracts_on_conflict
  ): maintenance_contracts_mutation_response

  """
  insert a single row into the table: "maintenance_contracts"
  """
  insert_maintenance_contracts_one(
    """the row to be inserted"""
    object: maintenance_contracts_insert_input!

    """on conflict condition"""
    on_conflict: maintenance_contracts_on_conflict
  ): maintenance_contracts

  """
  insert data into the table: "maintenance_engineers"
  """
  insert_maintenance_engineers(
    """the rows to be inserted"""
    objects: [maintenance_engineers_insert_input!]!

    """on conflict condition"""
    on_conflict: maintenance_engineers_on_conflict
  ): maintenance_engineers_mutation_response

  """
  insert a single row into the table: "maintenance_engineers"
  """
  insert_maintenance_engineers_one(
    """the row to be inserted"""
    object: maintenance_engineers_insert_input!

    """on conflict condition"""
    on_conflict: maintenance_engineers_on_conflict
  ): maintenance_engineers

  """
  insert data into the table: "part_faults"
  """
  insert_part_faults(
    """the rows to be inserted"""
    objects: [part_faults_insert_input!]!

    """on conflict condition"""
    on_conflict: part_faults_on_conflict
  ): part_faults_mutation_response

  """
  insert a single row into the table: "part_faults"
  """
  insert_part_faults_one(
    """the row to be inserted"""
    object: part_faults_insert_input!

    """on conflict condition"""
    on_conflict: part_faults_on_conflict
  ): part_faults

  """
  insert data into the table: "parts"
  """
  insert_parts(
    """the rows to be inserted"""
    objects: [parts_insert_input!]!

    """on conflict condition"""
    on_conflict: parts_on_conflict
  ): parts_mutation_response

  """
  insert a single row into the table: "parts"
  """
  insert_parts_one(
    """the row to be inserted"""
    object: parts_insert_input!

    """on conflict condition"""
    on_conflict: parts_on_conflict
  ): parts

  """
  insert data into the table: "skills"
  """
  insert_skills(
    """the rows to be inserted"""
    objects: [skills_insert_input!]!

    """on conflict condition"""
    on_conflict: skills_on_conflict
  ): skills_mutation_response

  """
  insert a single row into the table: "skills"
  """
  insert_skills_one(
    """the row to be inserted"""
    object: skills_insert_input!

    """on conflict condition"""
    on_conflict: skills_on_conflict
  ): skills

  """
  insert data into the table: "skills_required_to_fix"
  """
  insert_skills_required_to_fix(
    """the rows to be inserted"""
    objects: [skills_required_to_fix_insert_input!]!
  ): skills_required_to_fix_mutation_response

  """
  insert a single row into the table: "skills_required_to_fix"
  """
  insert_skills_required_to_fix_one(
    """the row to be inserted"""
    object: skills_required_to_fix_insert_input!
  ): skills_required_to_fix

  """
  insert data into the table: "staff"
  """
  insert_staff(
    """the rows to be inserted"""
    objects: [staff_insert_input!]!

    """on conflict condition"""
    on_conflict: staff_on_conflict
  ): staff_mutation_response

  """
  insert a single row into the table: "staff"
  """
  insert_staff_one(
    """the row to be inserted"""
    object: staff_insert_input!

    """on conflict condition"""
    on_conflict: staff_on_conflict
  ): staff

  """
  insert data into the table: "third_party_companies"
  """
  insert_third_party_companies(
    """the rows to be inserted"""
    objects: [third_party_companies_insert_input!]!

    """on conflict condition"""
    on_conflict: third_party_companies_on_conflict
  ): third_party_companies_mutation_response

  """
  insert a single row into the table: "third_party_companies"
  """
  insert_third_party_companies_one(
    """the row to be inserted"""
    object: third_party_companies_insert_input!

    """on conflict condition"""
    on_conflict: third_party_companies_on_conflict
  ): third_party_companies

  """
  update data of the table: "asset_parts"
  """
  update_asset_parts(
    """increments the integer columns with given value of the filtered values"""
    _inc: asset_parts_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: asset_parts_set_input

    """filter the rows which have to be updated"""
    where: asset_parts_bool_exp!
  ): asset_parts_mutation_response

  """
  update data of the table: "assets"
  """
  update_assets(
    """increments the integer columns with given value of the filtered values"""
    _inc: assets_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: assets_set_input

    """filter the rows which have to be updated"""
    where: assets_bool_exp!
  ): assets_mutation_response

  """
  update single row of the table: "assets"
  """
  update_assets_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: assets_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: assets_set_input
    pk_columns: assets_pk_columns_input!
  ): assets

  """
  update data of the table: "engineer_skills"
  """
  update_engineer_skills(
    """increments the integer columns with given value of the filtered values"""
    _inc: engineer_skills_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: engineer_skills_set_input

    """filter the rows which have to be updated"""
    where: engineer_skills_bool_exp!
  ): engineer_skills_mutation_response

  """
  update data of the table: "engineer_visits"
  """
  update_engineer_visits(
    """increments the integer columns with given value of the filtered values"""
    _inc: engineer_visits_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: engineer_visits_set_input

    """filter the rows which have to be updated"""
    where: engineer_visits_bool_exp!
  ): engineer_visits_mutation_response

  """
  update single row of the table: "engineer_visits"
  """
  update_engineer_visits_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: engineer_visits_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: engineer_visits_set_input
    pk_columns: engineer_visits_pk_columns_input!
  ): engineer_visits

  """
  update data of the table: "fault_log"
  """
  update_fault_log(
    """increments the integer columns with given value of the filtered values"""
    _inc: fault_log_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: fault_log_set_input

    """filter the rows which have to be updated"""
    where: fault_log_bool_exp!
  ): fault_log_mutation_response

  """
  update single row of the table: "fault_log"
  """
  update_fault_log_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: fault_log_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: fault_log_set_input
    pk_columns: fault_log_pk_columns_input!
  ): fault_log

  """
  update data of the table: "fault_log_parts"
  """
  update_fault_log_parts(
    """increments the integer columns with given value of the filtered values"""
    _inc: fault_log_parts_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: fault_log_parts_set_input

    """filter the rows which have to be updated"""
    where: fault_log_parts_bool_exp!
  ): fault_log_parts_mutation_response

  """
  update data of the table: "maintenance_contracts"
  """
  update_maintenance_contracts(
    """increments the integer columns with given value of the filtered values"""
    _inc: maintenance_contracts_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: maintenance_contracts_set_input

    """filter the rows which have to be updated"""
    where: maintenance_contracts_bool_exp!
  ): maintenance_contracts_mutation_response

  """
  update single row of the table: "maintenance_contracts"
  """
  update_maintenance_contracts_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: maintenance_contracts_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: maintenance_contracts_set_input
    pk_columns: maintenance_contracts_pk_columns_input!
  ): maintenance_contracts

  """
  update data of the table: "maintenance_engineers"
  """
  update_maintenance_engineers(
    """increments the integer columns with given value of the filtered values"""
    _inc: maintenance_engineers_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: maintenance_engineers_set_input

    """filter the rows which have to be updated"""
    where: maintenance_engineers_bool_exp!
  ): maintenance_engineers_mutation_response

  """
  update single row of the table: "maintenance_engineers"
  """
  update_maintenance_engineers_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: maintenance_engineers_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: maintenance_engineers_set_input
    pk_columns: maintenance_engineers_pk_columns_input!
  ): maintenance_engineers

  """
  update data of the table: "part_faults"
  """
  update_part_faults(
    """increments the integer columns with given value of the filtered values"""
    _inc: part_faults_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: part_faults_set_input

    """filter the rows which have to be updated"""
    where: part_faults_bool_exp!
  ): part_faults_mutation_response

  """
  update single row of the table: "part_faults"
  """
  update_part_faults_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: part_faults_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: part_faults_set_input
    pk_columns: part_faults_pk_columns_input!
  ): part_faults

  """
  update data of the table: "parts"
  """
  update_parts(
    """increments the integer columns with given value of the filtered values"""
    _inc: parts_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: parts_set_input

    """filter the rows which have to be updated"""
    where: parts_bool_exp!
  ): parts_mutation_response

  """
  update single row of the table: "parts"
  """
  update_parts_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: parts_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: parts_set_input
    pk_columns: parts_pk_columns_input!
  ): parts

  """
  update data of the table: "skills"
  """
  update_skills(
    """increments the integer columns with given value of the filtered values"""
    _inc: skills_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: skills_set_input

    """filter the rows which have to be updated"""
    where: skills_bool_exp!
  ): skills_mutation_response

  """
  update single row of the table: "skills"
  """
  update_skills_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: skills_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: skills_set_input
    pk_columns: skills_pk_columns_input!
  ): skills

  """
  update data of the table: "skills_required_to_fix"
  """
  update_skills_required_to_fix(
    """increments the integer columns with given value of the filtered values"""
    _inc: skills_required_to_fix_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: skills_required_to_fix_set_input

    """filter the rows which have to be updated"""
    where: skills_required_to_fix_bool_exp!
  ): skills_required_to_fix_mutation_response

  """
  update data of the table: "staff"
  """
  update_staff(
    """increments the integer columns with given value of the filtered values"""
    _inc: staff_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: staff_set_input

    """filter the rows which have to be updated"""
    where: staff_bool_exp!
  ): staff_mutation_response

  """
  update single row of the table: "staff"
  """
  update_staff_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: staff_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: staff_set_input
    pk_columns: staff_pk_columns_input!
  ): staff

  """
  update data of the table: "third_party_companies"
  """
  update_third_party_companies(
    """increments the integer columns with given value of the filtered values"""
    _inc: third_party_companies_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: third_party_companies_set_input

    """filter the rows which have to be updated"""
    where: third_party_companies_bool_exp!
  ): third_party_companies_mutation_response

  """
  update single row of the table: "third_party_companies"
  """
  update_third_party_companies_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: third_party_companies_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: third_party_companies_set_input
    pk_columns: third_party_companies_pk_columns_input!
  ): third_party_companies
}

"""column ordering options"""
enum order_by {
  """in the ascending order, nulls last"""
  asc

  """in the ascending order, nulls first"""
  asc_nulls_first

  """in the ascending order, nulls last"""
  asc_nulls_last

  """in the descending order, nulls first"""
  desc

  """in the descending order, nulls first"""
  desc_nulls_first

  """in the descending order, nulls last"""
  desc_nulls_last
}

"""
columns and relationships of "part_faults"
"""
type part_faults {
  fault_description: String

  """An array relationship"""
  fault_log_parts(
    """distinct select on columns"""
    distinct_on: [fault_log_parts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [fault_log_parts_order_by!]

    """filter the rows returned"""
    where: fault_log_parts_bool_exp
  ): [fault_log_parts!]!

  """An aggregated array relationship"""
  fault_log_parts_aggregate(
    """distinct select on columns"""
    distinct_on: [fault_log_parts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [fault_log_parts_order_by!]

    """filter the rows returned"""
    where: fault_log_parts_bool_exp
  ): fault_log_parts_aggregate!
  fault_short_name: String
  other_fault_details: String

  """An object relationship"""
  part: parts
  part_fault_id: bigint!
  part_id: bigint

  """An array relationship"""
  skills_required_to_fixes(
    """distinct select on columns"""
    distinct_on: [skills_required_to_fix_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [skills_required_to_fix_order_by!]

    """filter the rows returned"""
    where: skills_required_to_fix_bool_exp
  ): [skills_required_to_fix!]!

  """An aggregated array relationship"""
  skills_required_to_fixes_aggregate(
    """distinct select on columns"""
    distinct_on: [skills_required_to_fix_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [skills_required_to_fix_order_by!]

    """filter the rows returned"""
    where: skills_required_to_fix_bool_exp
  ): skills_required_to_fix_aggregate!
}

"""
aggregated selection of "part_faults"
"""
type part_faults_aggregate {
  aggregate: part_faults_aggregate_fields
  nodes: [part_faults!]!
}

"""
aggregate fields of "part_faults"
"""
type part_faults_aggregate_fields {
  avg: part_faults_avg_fields
  count(columns: [part_faults_select_column!], distinct: Boolean): Int
  max: part_faults_max_fields
  min: part_faults_min_fields
  stddev: part_faults_stddev_fields
  stddev_pop: part_faults_stddev_pop_fields
  stddev_samp: part_faults_stddev_samp_fields
  sum: part_faults_sum_fields
  var_pop: part_faults_var_pop_fields
  var_samp: part_faults_var_samp_fields
  variance: part_faults_variance_fields
}

"""
order by aggregate values of table "part_faults"
"""
input part_faults_aggregate_order_by {
  avg: part_faults_avg_order_by
  count: order_by
  max: part_faults_max_order_by
  min: part_faults_min_order_by
  stddev: part_faults_stddev_order_by
  stddev_pop: part_faults_stddev_pop_order_by
  stddev_samp: part_faults_stddev_samp_order_by
  sum: part_faults_sum_order_by
  var_pop: part_faults_var_pop_order_by
  var_samp: part_faults_var_samp_order_by
  variance: part_faults_variance_order_by
}

"""
input type for inserting array relation for remote table "part_faults"
"""
input part_faults_arr_rel_insert_input {
  data: [part_faults_insert_input!]!
  on_conflict: part_faults_on_conflict
}

"""aggregate avg on columns"""
type part_faults_avg_fields {
  part_fault_id: Float
  part_id: Float
}

"""
order by avg() on columns of table "part_faults"
"""
input part_faults_avg_order_by {
  part_fault_id: order_by
  part_id: order_by
}

"""
Boolean expression to filter rows from the table "part_faults". All fields are combined with a logical 'AND'.
"""
input part_faults_bool_exp {
  _and: [part_faults_bool_exp]
  _not: part_faults_bool_exp
  _or: [part_faults_bool_exp]
  fault_description: String_comparison_exp
  fault_log_parts: fault_log_parts_bool_exp
  fault_short_name: String_comparison_exp
  other_fault_details: String_comparison_exp
  part: parts_bool_exp
  part_fault_id: bigint_comparison_exp
  part_id: bigint_comparison_exp
  skills_required_to_fixes: skills_required_to_fix_bool_exp
}

"""
unique or primary key constraints on table "part_faults"
"""
enum part_faults_constraint {
  """unique or primary key constraint"""
  idx_27086_part_faults_pkey
}

"""
input type for incrementing integer column in table "part_faults"
"""
input part_faults_inc_input {
  part_fault_id: bigint
  part_id: bigint
}

"""
input type for inserting data into table "part_faults"
"""
input part_faults_insert_input {
  fault_description: String
  fault_log_parts: fault_log_parts_arr_rel_insert_input
  fault_short_name: String
  other_fault_details: String
  part: parts_obj_rel_insert_input
  part_fault_id: bigint
  part_id: bigint
  skills_required_to_fixes: skills_required_to_fix_arr_rel_insert_input
}

"""aggregate max on columns"""
type part_faults_max_fields {
  fault_description: String
  fault_short_name: String
  other_fault_details: String
  part_fault_id: bigint
  part_id: bigint
}

"""
order by max() on columns of table "part_faults"
"""
input part_faults_max_order_by {
  fault_description: order_by
  fault_short_name: order_by
  other_fault_details: order_by
  part_fault_id: order_by
  part_id: order_by
}

"""aggregate min on columns"""
type part_faults_min_fields {
  fault_description: String
  fault_short_name: String
  other_fault_details: String
  part_fault_id: bigint
  part_id: bigint
}

"""
order by min() on columns of table "part_faults"
"""
input part_faults_min_order_by {
  fault_description: order_by
  fault_short_name: order_by
  other_fault_details: order_by
  part_fault_id: order_by
  part_id: order_by
}

"""
response of any mutation on the table "part_faults"
"""
type part_faults_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [part_faults!]!
}

"""
input type for inserting object relation for remote table "part_faults"
"""
input part_faults_obj_rel_insert_input {
  data: part_faults_insert_input!
  on_conflict: part_faults_on_conflict
}

"""
on conflict condition type for table "part_faults"
"""
input part_faults_on_conflict {
  constraint: part_faults_constraint!
  update_columns: [part_faults_update_column!]!
  where: part_faults_bool_exp
}

"""
ordering options when selecting data from "part_faults"
"""
input part_faults_order_by {
  fault_description: order_by
  fault_log_parts_aggregate: fault_log_parts_aggregate_order_by
  fault_short_name: order_by
  other_fault_details: order_by
  part: parts_order_by
  part_fault_id: order_by
  part_id: order_by
  skills_required_to_fixes_aggregate: skills_required_to_fix_aggregate_order_by
}

"""
primary key columns input for table: "part_faults"
"""
input part_faults_pk_columns_input {
  part_fault_id: bigint!
}

"""
select columns of table "part_faults"
"""
enum part_faults_select_column {
  """column name"""
  fault_description

  """column name"""
  fault_short_name

  """column name"""
  other_fault_details

  """column name"""
  part_fault_id

  """column name"""
  part_id
}

"""
input type for updating data in table "part_faults"
"""
input part_faults_set_input {
  fault_description: String
  fault_short_name: String
  other_fault_details: String
  part_fault_id: bigint
  part_id: bigint
}

"""aggregate stddev on columns"""
type part_faults_stddev_fields {
  part_fault_id: Float
  part_id: Float
}

"""
order by stddev() on columns of table "part_faults"
"""
input part_faults_stddev_order_by {
  part_fault_id: order_by
  part_id: order_by
}

"""aggregate stddev_pop on columns"""
type part_faults_stddev_pop_fields {
  part_fault_id: Float
  part_id: Float
}

"""
order by stddev_pop() on columns of table "part_faults"
"""
input part_faults_stddev_pop_order_by {
  part_fault_id: order_by
  part_id: order_by
}

"""aggregate stddev_samp on columns"""
type part_faults_stddev_samp_fields {
  part_fault_id: Float
  part_id: Float
}

"""
order by stddev_samp() on columns of table "part_faults"
"""
input part_faults_stddev_samp_order_by {
  part_fault_id: order_by
  part_id: order_by
}

"""aggregate sum on columns"""
type part_faults_sum_fields {
  part_fault_id: bigint
  part_id: bigint
}

"""
order by sum() on columns of table "part_faults"
"""
input part_faults_sum_order_by {
  part_fault_id: order_by
  part_id: order_by
}

"""
update columns of table "part_faults"
"""
enum part_faults_update_column {
  """column name"""
  fault_description

  """column name"""
  fault_short_name

  """column name"""
  other_fault_details

  """column name"""
  part_fault_id

  """column name"""
  part_id
}

"""aggregate var_pop on columns"""
type part_faults_var_pop_fields {
  part_fault_id: Float
  part_id: Float
}

"""
order by var_pop() on columns of table "part_faults"
"""
input part_faults_var_pop_order_by {
  part_fault_id: order_by
  part_id: order_by
}

"""aggregate var_samp on columns"""
type part_faults_var_samp_fields {
  part_fault_id: Float
  part_id: Float
}

"""
order by var_samp() on columns of table "part_faults"
"""
input part_faults_var_samp_order_by {
  part_fault_id: order_by
  part_id: order_by
}

"""aggregate variance on columns"""
type part_faults_variance_fields {
  part_fault_id: Float
  part_id: Float
}

"""
order by variance() on columns of table "part_faults"
"""
input part_faults_variance_order_by {
  part_fault_id: order_by
  part_id: order_by
}

"""
columns and relationships of "parts"
"""
type parts {
  """An array relationship"""
  asset_parts(
    """distinct select on columns"""
    distinct_on: [asset_parts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [asset_parts_order_by!]

    """filter the rows returned"""
    where: asset_parts_bool_exp
  ): [asset_parts!]!

  """An aggregated array relationship"""
  asset_parts_aggregate(
    """distinct select on columns"""
    distinct_on: [asset_parts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [asset_parts_order_by!]

    """filter the rows returned"""
    where: asset_parts_bool_exp
  ): asset_parts_aggregate!
  chargeable_amount: String
  chargeable_yn: String
  other_part_details: String

  """An array relationship"""
  part_faults(
    """distinct select on columns"""
    distinct_on: [part_faults_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [part_faults_order_by!]

    """filter the rows returned"""
    where: part_faults_bool_exp
  ): [part_faults!]!

  """An aggregated array relationship"""
  part_faults_aggregate(
    """distinct select on columns"""
    distinct_on: [part_faults_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [part_faults_order_by!]

    """filter the rows returned"""
    where: part_faults_bool_exp
  ): part_faults_aggregate!
  part_id: bigint!
  part_name: String
}

"""
aggregated selection of "parts"
"""
type parts_aggregate {
  aggregate: parts_aggregate_fields
  nodes: [parts!]!
}

"""
aggregate fields of "parts"
"""
type parts_aggregate_fields {
  avg: parts_avg_fields
  count(columns: [parts_select_column!], distinct: Boolean): Int
  max: parts_max_fields
  min: parts_min_fields
  stddev: parts_stddev_fields
  stddev_pop: parts_stddev_pop_fields
  stddev_samp: parts_stddev_samp_fields
  sum: parts_sum_fields
  var_pop: parts_var_pop_fields
  var_samp: parts_var_samp_fields
  variance: parts_variance_fields
}

"""
order by aggregate values of table "parts"
"""
input parts_aggregate_order_by {
  avg: parts_avg_order_by
  count: order_by
  max: parts_max_order_by
  min: parts_min_order_by
  stddev: parts_stddev_order_by
  stddev_pop: parts_stddev_pop_order_by
  stddev_samp: parts_stddev_samp_order_by
  sum: parts_sum_order_by
  var_pop: parts_var_pop_order_by
  var_samp: parts_var_samp_order_by
  variance: parts_variance_order_by
}

"""
input type for inserting array relation for remote table "parts"
"""
input parts_arr_rel_insert_input {
  data: [parts_insert_input!]!
  on_conflict: parts_on_conflict
}

"""aggregate avg on columns"""
type parts_avg_fields {
  part_id: Float
}

"""
order by avg() on columns of table "parts"
"""
input parts_avg_order_by {
  part_id: order_by
}

"""
Boolean expression to filter rows from the table "parts". All fields are combined with a logical 'AND'.
"""
input parts_bool_exp {
  _and: [parts_bool_exp]
  _not: parts_bool_exp
  _or: [parts_bool_exp]
  asset_parts: asset_parts_bool_exp
  chargeable_amount: String_comparison_exp
  chargeable_yn: String_comparison_exp
  other_part_details: String_comparison_exp
  part_faults: part_faults_bool_exp
  part_id: bigint_comparison_exp
  part_name: String_comparison_exp
}

"""
unique or primary key constraints on table "parts"
"""
enum parts_constraint {
  """unique or primary key constraint"""
  idx_27038_parts_pkey
}

"""
input type for incrementing integer column in table "parts"
"""
input parts_inc_input {
  part_id: bigint
}

"""
input type for inserting data into table "parts"
"""
input parts_insert_input {
  asset_parts: asset_parts_arr_rel_insert_input
  chargeable_amount: String
  chargeable_yn: String
  other_part_details: String
  part_faults: part_faults_arr_rel_insert_input
  part_id: bigint
  part_name: String
}

"""aggregate max on columns"""
type parts_max_fields {
  chargeable_amount: String
  chargeable_yn: String
  other_part_details: String
  part_id: bigint
  part_name: String
}

"""
order by max() on columns of table "parts"
"""
input parts_max_order_by {
  chargeable_amount: order_by
  chargeable_yn: order_by
  other_part_details: order_by
  part_id: order_by
  part_name: order_by
}

"""aggregate min on columns"""
type parts_min_fields {
  chargeable_amount: String
  chargeable_yn: String
  other_part_details: String
  part_id: bigint
  part_name: String
}

"""
order by min() on columns of table "parts"
"""
input parts_min_order_by {
  chargeable_amount: order_by
  chargeable_yn: order_by
  other_part_details: order_by
  part_id: order_by
  part_name: order_by
}

"""
response of any mutation on the table "parts"
"""
type parts_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [parts!]!
}

"""
input type for inserting object relation for remote table "parts"
"""
input parts_obj_rel_insert_input {
  data: parts_insert_input!
  on_conflict: parts_on_conflict
}

"""
on conflict condition type for table "parts"
"""
input parts_on_conflict {
  constraint: parts_constraint!
  update_columns: [parts_update_column!]!
  where: parts_bool_exp
}

"""
ordering options when selecting data from "parts"
"""
input parts_order_by {
  asset_parts_aggregate: asset_parts_aggregate_order_by
  chargeable_amount: order_by
  chargeable_yn: order_by
  other_part_details: order_by
  part_faults_aggregate: part_faults_aggregate_order_by
  part_id: order_by
  part_name: order_by
}

"""
primary key columns input for table: "parts"
"""
input parts_pk_columns_input {
  part_id: bigint!
}

"""
select columns of table "parts"
"""
enum parts_select_column {
  """column name"""
  chargeable_amount

  """column name"""
  chargeable_yn

  """column name"""
  other_part_details

  """column name"""
  part_id

  """column name"""
  part_name
}

"""
input type for updating data in table "parts"
"""
input parts_set_input {
  chargeable_amount: String
  chargeable_yn: String
  other_part_details: String
  part_id: bigint
  part_name: String
}

"""aggregate stddev on columns"""
type parts_stddev_fields {
  part_id: Float
}

"""
order by stddev() on columns of table "parts"
"""
input parts_stddev_order_by {
  part_id: order_by
}

"""aggregate stddev_pop on columns"""
type parts_stddev_pop_fields {
  part_id: Float
}

"""
order by stddev_pop() on columns of table "parts"
"""
input parts_stddev_pop_order_by {
  part_id: order_by
}

"""aggregate stddev_samp on columns"""
type parts_stddev_samp_fields {
  part_id: Float
}

"""
order by stddev_samp() on columns of table "parts"
"""
input parts_stddev_samp_order_by {
  part_id: order_by
}

"""aggregate sum on columns"""
type parts_sum_fields {
  part_id: bigint
}

"""
order by sum() on columns of table "parts"
"""
input parts_sum_order_by {
  part_id: order_by
}

"""
update columns of table "parts"
"""
enum parts_update_column {
  """column name"""
  chargeable_amount

  """column name"""
  chargeable_yn

  """column name"""
  other_part_details

  """column name"""
  part_id

  """column name"""
  part_name
}

"""aggregate var_pop on columns"""
type parts_var_pop_fields {
  part_id: Float
}

"""
order by var_pop() on columns of table "parts"
"""
input parts_var_pop_order_by {
  part_id: order_by
}

"""aggregate var_samp on columns"""
type parts_var_samp_fields {
  part_id: Float
}

"""
order by var_samp() on columns of table "parts"
"""
input parts_var_samp_order_by {
  part_id: order_by
}

"""aggregate variance on columns"""
type parts_variance_fields {
  part_id: Float
}

"""
order by variance() on columns of table "parts"
"""
input parts_variance_order_by {
  part_id: order_by
}

"""query root"""
type query_root {
  """
  fetch data from the table: "asset_parts"
  """
  asset_parts(
    """distinct select on columns"""
    distinct_on: [asset_parts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [asset_parts_order_by!]

    """filter the rows returned"""
    where: asset_parts_bool_exp
  ): [asset_parts!]!

  """
  fetch aggregated fields from the table: "asset_parts"
  """
  asset_parts_aggregate(
    """distinct select on columns"""
    distinct_on: [asset_parts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [asset_parts_order_by!]

    """filter the rows returned"""
    where: asset_parts_bool_exp
  ): asset_parts_aggregate!

  """
  fetch data from the table: "assets"
  """
  assets(
    """distinct select on columns"""
    distinct_on: [assets_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [assets_order_by!]

    """filter the rows returned"""
    where: assets_bool_exp
  ): [assets!]!

  """
  fetch aggregated fields from the table: "assets"
  """
  assets_aggregate(
    """distinct select on columns"""
    distinct_on: [assets_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [assets_order_by!]

    """filter the rows returned"""
    where: assets_bool_exp
  ): assets_aggregate!

  """fetch data from the table: "assets" using primary key columns"""
  assets_by_pk(asset_id: bigint!): assets

  """
  fetch data from the table: "engineer_skills"
  """
  engineer_skills(
    """distinct select on columns"""
    distinct_on: [engineer_skills_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [engineer_skills_order_by!]

    """filter the rows returned"""
    where: engineer_skills_bool_exp
  ): [engineer_skills!]!

  """
  fetch aggregated fields from the table: "engineer_skills"
  """
  engineer_skills_aggregate(
    """distinct select on columns"""
    distinct_on: [engineer_skills_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [engineer_skills_order_by!]

    """filter the rows returned"""
    where: engineer_skills_bool_exp
  ): engineer_skills_aggregate!

  """
  fetch data from the table: "engineer_visits"
  """
  engineer_visits(
    """distinct select on columns"""
    distinct_on: [engineer_visits_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [engineer_visits_order_by!]

    """filter the rows returned"""
    where: engineer_visits_bool_exp
  ): [engineer_visits!]!

  """
  fetch aggregated fields from the table: "engineer_visits"
  """
  engineer_visits_aggregate(
    """distinct select on columns"""
    distinct_on: [engineer_visits_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [engineer_visits_order_by!]

    """filter the rows returned"""
    where: engineer_visits_bool_exp
  ): engineer_visits_aggregate!

  """fetch data from the table: "engineer_visits" using primary key columns"""
  engineer_visits_by_pk(engineer_visit_id: bigint!): engineer_visits

  """
  fetch data from the table: "fault_log"
  """
  fault_log(
    """distinct select on columns"""
    distinct_on: [fault_log_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [fault_log_order_by!]

    """filter the rows returned"""
    where: fault_log_bool_exp
  ): [fault_log!]!

  """
  fetch aggregated fields from the table: "fault_log"
  """
  fault_log_aggregate(
    """distinct select on columns"""
    distinct_on: [fault_log_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [fault_log_order_by!]

    """filter the rows returned"""
    where: fault_log_bool_exp
  ): fault_log_aggregate!

  """fetch data from the table: "fault_log" using primary key columns"""
  fault_log_by_pk(fault_log_entry_id: bigint!): fault_log

  """
  fetch data from the table: "fault_log_parts"
  """
  fault_log_parts(
    """distinct select on columns"""
    distinct_on: [fault_log_parts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [fault_log_parts_order_by!]

    """filter the rows returned"""
    where: fault_log_parts_bool_exp
  ): [fault_log_parts!]!

  """
  fetch aggregated fields from the table: "fault_log_parts"
  """
  fault_log_parts_aggregate(
    """distinct select on columns"""
    distinct_on: [fault_log_parts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [fault_log_parts_order_by!]

    """filter the rows returned"""
    where: fault_log_parts_bool_exp
  ): fault_log_parts_aggregate!

  """
  fetch data from the table: "maintenance_contracts"
  """
  maintenance_contracts(
    """distinct select on columns"""
    distinct_on: [maintenance_contracts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [maintenance_contracts_order_by!]

    """filter the rows returned"""
    where: maintenance_contracts_bool_exp
  ): [maintenance_contracts!]!

  """
  fetch aggregated fields from the table: "maintenance_contracts"
  """
  maintenance_contracts_aggregate(
    """distinct select on columns"""
    distinct_on: [maintenance_contracts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [maintenance_contracts_order_by!]

    """filter the rows returned"""
    where: maintenance_contracts_bool_exp
  ): maintenance_contracts_aggregate!

  """
  fetch data from the table: "maintenance_contracts" using primary key columns
  """
  maintenance_contracts_by_pk(maintenance_contract_id: bigint!): maintenance_contracts

  """
  fetch data from the table: "maintenance_engineers"
  """
  maintenance_engineers(
    """distinct select on columns"""
    distinct_on: [maintenance_engineers_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [maintenance_engineers_order_by!]

    """filter the rows returned"""
    where: maintenance_engineers_bool_exp
  ): [maintenance_engineers!]!

  """
  fetch aggregated fields from the table: "maintenance_engineers"
  """
  maintenance_engineers_aggregate(
    """distinct select on columns"""
    distinct_on: [maintenance_engineers_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [maintenance_engineers_order_by!]

    """filter the rows returned"""
    where: maintenance_engineers_bool_exp
  ): maintenance_engineers_aggregate!

  """
  fetch data from the table: "maintenance_engineers" using primary key columns
  """
  maintenance_engineers_by_pk(engineer_id: bigint!): maintenance_engineers

  """
  fetch data from the table: "part_faults"
  """
  part_faults(
    """distinct select on columns"""
    distinct_on: [part_faults_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [part_faults_order_by!]

    """filter the rows returned"""
    where: part_faults_bool_exp
  ): [part_faults!]!

  """
  fetch aggregated fields from the table: "part_faults"
  """
  part_faults_aggregate(
    """distinct select on columns"""
    distinct_on: [part_faults_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [part_faults_order_by!]

    """filter the rows returned"""
    where: part_faults_bool_exp
  ): part_faults_aggregate!

  """fetch data from the table: "part_faults" using primary key columns"""
  part_faults_by_pk(part_fault_id: bigint!): part_faults

  """
  fetch data from the table: "parts"
  """
  parts(
    """distinct select on columns"""
    distinct_on: [parts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [parts_order_by!]

    """filter the rows returned"""
    where: parts_bool_exp
  ): [parts!]!

  """
  fetch aggregated fields from the table: "parts"
  """
  parts_aggregate(
    """distinct select on columns"""
    distinct_on: [parts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [parts_order_by!]

    """filter the rows returned"""
    where: parts_bool_exp
  ): parts_aggregate!

  """fetch data from the table: "parts" using primary key columns"""
  parts_by_pk(part_id: bigint!): parts

  """
  fetch data from the table: "skills"
  """
  skills(
    """distinct select on columns"""
    distinct_on: [skills_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [skills_order_by!]

    """filter the rows returned"""
    where: skills_bool_exp
  ): [skills!]!

  """
  fetch aggregated fields from the table: "skills"
  """
  skills_aggregate(
    """distinct select on columns"""
    distinct_on: [skills_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [skills_order_by!]

    """filter the rows returned"""
    where: skills_bool_exp
  ): skills_aggregate!

  """fetch data from the table: "skills" using primary key columns"""
  skills_by_pk(skill_id: bigint!): skills

  """
  fetch data from the table: "skills_required_to_fix"
  """
  skills_required_to_fix(
    """distinct select on columns"""
    distinct_on: [skills_required_to_fix_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [skills_required_to_fix_order_by!]

    """filter the rows returned"""
    where: skills_required_to_fix_bool_exp
  ): [skills_required_to_fix!]!

  """
  fetch aggregated fields from the table: "skills_required_to_fix"
  """
  skills_required_to_fix_aggregate(
    """distinct select on columns"""
    distinct_on: [skills_required_to_fix_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [skills_required_to_fix_order_by!]

    """filter the rows returned"""
    where: skills_required_to_fix_bool_exp
  ): skills_required_to_fix_aggregate!

  """
  fetch data from the table: "staff"
  """
  staff(
    """distinct select on columns"""
    distinct_on: [staff_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [staff_order_by!]

    """filter the rows returned"""
    where: staff_bool_exp
  ): [staff!]!

  """
  fetch aggregated fields from the table: "staff"
  """
  staff_aggregate(
    """distinct select on columns"""
    distinct_on: [staff_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [staff_order_by!]

    """filter the rows returned"""
    where: staff_bool_exp
  ): staff_aggregate!

  """fetch data from the table: "staff" using primary key columns"""
  staff_by_pk(staff_id: bigint!): staff

  """
  fetch data from the table: "third_party_companies"
  """
  third_party_companies(
    """distinct select on columns"""
    distinct_on: [third_party_companies_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [third_party_companies_order_by!]

    """filter the rows returned"""
    where: third_party_companies_bool_exp
  ): [third_party_companies!]!

  """
  fetch aggregated fields from the table: "third_party_companies"
  """
  third_party_companies_aggregate(
    """distinct select on columns"""
    distinct_on: [third_party_companies_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [third_party_companies_order_by!]

    """filter the rows returned"""
    where: third_party_companies_bool_exp
  ): third_party_companies_aggregate!

  """
  fetch data from the table: "third_party_companies" using primary key columns
  """
  third_party_companies_by_pk(company_id: bigint!): third_party_companies
}

"""
columns and relationships of "skills"
"""
type skills {
  """An array relationship"""
  engineer_skills(
    """distinct select on columns"""
    distinct_on: [engineer_skills_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [engineer_skills_order_by!]

    """filter the rows returned"""
    where: engineer_skills_bool_exp
  ): [engineer_skills!]!

  """An aggregated array relationship"""
  engineer_skills_aggregate(
    """distinct select on columns"""
    distinct_on: [engineer_skills_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [engineer_skills_order_by!]

    """filter the rows returned"""
    where: engineer_skills_bool_exp
  ): engineer_skills_aggregate!
  skill_code: String
  skill_description: String
  skill_id: bigint!

  """An array relationship"""
  skills_required_to_fixes(
    """distinct select on columns"""
    distinct_on: [skills_required_to_fix_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [skills_required_to_fix_order_by!]

    """filter the rows returned"""
    where: skills_required_to_fix_bool_exp
  ): [skills_required_to_fix!]!

  """An aggregated array relationship"""
  skills_required_to_fixes_aggregate(
    """distinct select on columns"""
    distinct_on: [skills_required_to_fix_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [skills_required_to_fix_order_by!]

    """filter the rows returned"""
    where: skills_required_to_fix_bool_exp
  ): skills_required_to_fix_aggregate!
}

"""
aggregated selection of "skills"
"""
type skills_aggregate {
  aggregate: skills_aggregate_fields
  nodes: [skills!]!
}

"""
aggregate fields of "skills"
"""
type skills_aggregate_fields {
  avg: skills_avg_fields
  count(columns: [skills_select_column!], distinct: Boolean): Int
  max: skills_max_fields
  min: skills_min_fields
  stddev: skills_stddev_fields
  stddev_pop: skills_stddev_pop_fields
  stddev_samp: skills_stddev_samp_fields
  sum: skills_sum_fields
  var_pop: skills_var_pop_fields
  var_samp: skills_var_samp_fields
  variance: skills_variance_fields
}

"""
order by aggregate values of table "skills"
"""
input skills_aggregate_order_by {
  avg: skills_avg_order_by
  count: order_by
  max: skills_max_order_by
  min: skills_min_order_by
  stddev: skills_stddev_order_by
  stddev_pop: skills_stddev_pop_order_by
  stddev_samp: skills_stddev_samp_order_by
  sum: skills_sum_order_by
  var_pop: skills_var_pop_order_by
  var_samp: skills_var_samp_order_by
  variance: skills_variance_order_by
}

"""
input type for inserting array relation for remote table "skills"
"""
input skills_arr_rel_insert_input {
  data: [skills_insert_input!]!
  on_conflict: skills_on_conflict
}

"""aggregate avg on columns"""
type skills_avg_fields {
  skill_id: Float
}

"""
order by avg() on columns of table "skills"
"""
input skills_avg_order_by {
  skill_id: order_by
}

"""
Boolean expression to filter rows from the table "skills". All fields are combined with a logical 'AND'.
"""
input skills_bool_exp {
  _and: [skills_bool_exp]
  _not: skills_bool_exp
  _or: [skills_bool_exp]
  engineer_skills: engineer_skills_bool_exp
  skill_code: String_comparison_exp
  skill_description: String_comparison_exp
  skill_id: bigint_comparison_exp
  skills_required_to_fixes: skills_required_to_fix_bool_exp
}

"""
unique or primary key constraints on table "skills"
"""
enum skills_constraint {
  """unique or primary key constraint"""
  idx_27044_skills_pkey
}

"""
input type for incrementing integer column in table "skills"
"""
input skills_inc_input {
  skill_id: bigint
}

"""
input type for inserting data into table "skills"
"""
input skills_insert_input {
  engineer_skills: engineer_skills_arr_rel_insert_input
  skill_code: String
  skill_description: String
  skill_id: bigint
  skills_required_to_fixes: skills_required_to_fix_arr_rel_insert_input
}

"""aggregate max on columns"""
type skills_max_fields {
  skill_code: String
  skill_description: String
  skill_id: bigint
}

"""
order by max() on columns of table "skills"
"""
input skills_max_order_by {
  skill_code: order_by
  skill_description: order_by
  skill_id: order_by
}

"""aggregate min on columns"""
type skills_min_fields {
  skill_code: String
  skill_description: String
  skill_id: bigint
}

"""
order by min() on columns of table "skills"
"""
input skills_min_order_by {
  skill_code: order_by
  skill_description: order_by
  skill_id: order_by
}

"""
response of any mutation on the table "skills"
"""
type skills_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [skills!]!
}

"""
input type for inserting object relation for remote table "skills"
"""
input skills_obj_rel_insert_input {
  data: skills_insert_input!
  on_conflict: skills_on_conflict
}

"""
on conflict condition type for table "skills"
"""
input skills_on_conflict {
  constraint: skills_constraint!
  update_columns: [skills_update_column!]!
  where: skills_bool_exp
}

"""
ordering options when selecting data from "skills"
"""
input skills_order_by {
  engineer_skills_aggregate: engineer_skills_aggregate_order_by
  skill_code: order_by
  skill_description: order_by
  skill_id: order_by
  skills_required_to_fixes_aggregate: skills_required_to_fix_aggregate_order_by
}

"""
primary key columns input for table: "skills"
"""
input skills_pk_columns_input {
  skill_id: bigint!
}

"""
columns and relationships of "skills_required_to_fix"
"""
type skills_required_to_fix {
  """An object relationship"""
  part_fault: part_faults
  part_fault_id: bigint

  """An object relationship"""
  skill: skills
  skill_id: bigint
}

"""
aggregated selection of "skills_required_to_fix"
"""
type skills_required_to_fix_aggregate {
  aggregate: skills_required_to_fix_aggregate_fields
  nodes: [skills_required_to_fix!]!
}

"""
aggregate fields of "skills_required_to_fix"
"""
type skills_required_to_fix_aggregate_fields {
  avg: skills_required_to_fix_avg_fields
  count(columns: [skills_required_to_fix_select_column!], distinct: Boolean): Int
  max: skills_required_to_fix_max_fields
  min: skills_required_to_fix_min_fields
  stddev: skills_required_to_fix_stddev_fields
  stddev_pop: skills_required_to_fix_stddev_pop_fields
  stddev_samp: skills_required_to_fix_stddev_samp_fields
  sum: skills_required_to_fix_sum_fields
  var_pop: skills_required_to_fix_var_pop_fields
  var_samp: skills_required_to_fix_var_samp_fields
  variance: skills_required_to_fix_variance_fields
}

"""
order by aggregate values of table "skills_required_to_fix"
"""
input skills_required_to_fix_aggregate_order_by {
  avg: skills_required_to_fix_avg_order_by
  count: order_by
  max: skills_required_to_fix_max_order_by
  min: skills_required_to_fix_min_order_by
  stddev: skills_required_to_fix_stddev_order_by
  stddev_pop: skills_required_to_fix_stddev_pop_order_by
  stddev_samp: skills_required_to_fix_stddev_samp_order_by
  sum: skills_required_to_fix_sum_order_by
  var_pop: skills_required_to_fix_var_pop_order_by
  var_samp: skills_required_to_fix_var_samp_order_by
  variance: skills_required_to_fix_variance_order_by
}

"""
input type for inserting array relation for remote table "skills_required_to_fix"
"""
input skills_required_to_fix_arr_rel_insert_input {
  data: [skills_required_to_fix_insert_input!]!
}

"""aggregate avg on columns"""
type skills_required_to_fix_avg_fields {
  part_fault_id: Float
  skill_id: Float
}

"""
order by avg() on columns of table "skills_required_to_fix"
"""
input skills_required_to_fix_avg_order_by {
  part_fault_id: order_by
  skill_id: order_by
}

"""
Boolean expression to filter rows from the table "skills_required_to_fix". All fields are combined with a logical 'AND'.
"""
input skills_required_to_fix_bool_exp {
  _and: [skills_required_to_fix_bool_exp]
  _not: skills_required_to_fix_bool_exp
  _or: [skills_required_to_fix_bool_exp]
  part_fault: part_faults_bool_exp
  part_fault_id: bigint_comparison_exp
  skill: skills_bool_exp
  skill_id: bigint_comparison_exp
}

"""
input type for incrementing integer column in table "skills_required_to_fix"
"""
input skills_required_to_fix_inc_input {
  part_fault_id: bigint
  skill_id: bigint
}

"""
input type for inserting data into table "skills_required_to_fix"
"""
input skills_required_to_fix_insert_input {
  part_fault: part_faults_obj_rel_insert_input
  part_fault_id: bigint
  skill: skills_obj_rel_insert_input
  skill_id: bigint
}

"""aggregate max on columns"""
type skills_required_to_fix_max_fields {
  part_fault_id: bigint
  skill_id: bigint
}

"""
order by max() on columns of table "skills_required_to_fix"
"""
input skills_required_to_fix_max_order_by {
  part_fault_id: order_by
  skill_id: order_by
}

"""aggregate min on columns"""
type skills_required_to_fix_min_fields {
  part_fault_id: bigint
  skill_id: bigint
}

"""
order by min() on columns of table "skills_required_to_fix"
"""
input skills_required_to_fix_min_order_by {
  part_fault_id: order_by
  skill_id: order_by
}

"""
response of any mutation on the table "skills_required_to_fix"
"""
type skills_required_to_fix_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [skills_required_to_fix!]!
}

"""
input type for inserting object relation for remote table "skills_required_to_fix"
"""
input skills_required_to_fix_obj_rel_insert_input {
  data: skills_required_to_fix_insert_input!
}

"""
ordering options when selecting data from "skills_required_to_fix"
"""
input skills_required_to_fix_order_by {
  part_fault: part_faults_order_by
  part_fault_id: order_by
  skill: skills_order_by
  skill_id: order_by
}

"""
select columns of table "skills_required_to_fix"
"""
enum skills_required_to_fix_select_column {
  """column name"""
  part_fault_id

  """column name"""
  skill_id
}

"""
input type for updating data in table "skills_required_to_fix"
"""
input skills_required_to_fix_set_input {
  part_fault_id: bigint
  skill_id: bigint
}

"""aggregate stddev on columns"""
type skills_required_to_fix_stddev_fields {
  part_fault_id: Float
  skill_id: Float
}

"""
order by stddev() on columns of table "skills_required_to_fix"
"""
input skills_required_to_fix_stddev_order_by {
  part_fault_id: order_by
  skill_id: order_by
}

"""aggregate stddev_pop on columns"""
type skills_required_to_fix_stddev_pop_fields {
  part_fault_id: Float
  skill_id: Float
}

"""
order by stddev_pop() on columns of table "skills_required_to_fix"
"""
input skills_required_to_fix_stddev_pop_order_by {
  part_fault_id: order_by
  skill_id: order_by
}

"""aggregate stddev_samp on columns"""
type skills_required_to_fix_stddev_samp_fields {
  part_fault_id: Float
  skill_id: Float
}

"""
order by stddev_samp() on columns of table "skills_required_to_fix"
"""
input skills_required_to_fix_stddev_samp_order_by {
  part_fault_id: order_by
  skill_id: order_by
}

"""aggregate sum on columns"""
type skills_required_to_fix_sum_fields {
  part_fault_id: bigint
  skill_id: bigint
}

"""
order by sum() on columns of table "skills_required_to_fix"
"""
input skills_required_to_fix_sum_order_by {
  part_fault_id: order_by
  skill_id: order_by
}

"""aggregate var_pop on columns"""
type skills_required_to_fix_var_pop_fields {
  part_fault_id: Float
  skill_id: Float
}

"""
order by var_pop() on columns of table "skills_required_to_fix"
"""
input skills_required_to_fix_var_pop_order_by {
  part_fault_id: order_by
  skill_id: order_by
}

"""aggregate var_samp on columns"""
type skills_required_to_fix_var_samp_fields {
  part_fault_id: Float
  skill_id: Float
}

"""
order by var_samp() on columns of table "skills_required_to_fix"
"""
input skills_required_to_fix_var_samp_order_by {
  part_fault_id: order_by
  skill_id: order_by
}

"""aggregate variance on columns"""
type skills_required_to_fix_variance_fields {
  part_fault_id: Float
  skill_id: Float
}

"""
order by variance() on columns of table "skills_required_to_fix"
"""
input skills_required_to_fix_variance_order_by {
  part_fault_id: order_by
  skill_id: order_by
}

"""
select columns of table "skills"
"""
enum skills_select_column {
  """column name"""
  skill_code

  """column name"""
  skill_description

  """column name"""
  skill_id
}

"""
input type for updating data in table "skills"
"""
input skills_set_input {
  skill_code: String
  skill_description: String
  skill_id: bigint
}

"""aggregate stddev on columns"""
type skills_stddev_fields {
  skill_id: Float
}

"""
order by stddev() on columns of table "skills"
"""
input skills_stddev_order_by {
  skill_id: order_by
}

"""aggregate stddev_pop on columns"""
type skills_stddev_pop_fields {
  skill_id: Float
}

"""
order by stddev_pop() on columns of table "skills"
"""
input skills_stddev_pop_order_by {
  skill_id: order_by
}

"""aggregate stddev_samp on columns"""
type skills_stddev_samp_fields {
  skill_id: Float
}

"""
order by stddev_samp() on columns of table "skills"
"""
input skills_stddev_samp_order_by {
  skill_id: order_by
}

"""aggregate sum on columns"""
type skills_sum_fields {
  skill_id: bigint
}

"""
order by sum() on columns of table "skills"
"""
input skills_sum_order_by {
  skill_id: order_by
}

"""
update columns of table "skills"
"""
enum skills_update_column {
  """column name"""
  skill_code

  """column name"""
  skill_description

  """column name"""
  skill_id
}

"""aggregate var_pop on columns"""
type skills_var_pop_fields {
  skill_id: Float
}

"""
order by var_pop() on columns of table "skills"
"""
input skills_var_pop_order_by {
  skill_id: order_by
}

"""aggregate var_samp on columns"""
type skills_var_samp_fields {
  skill_id: Float
}

"""
order by var_samp() on columns of table "skills"
"""
input skills_var_samp_order_by {
  skill_id: order_by
}

"""aggregate variance on columns"""
type skills_variance_fields {
  skill_id: Float
}

"""
order by variance() on columns of table "skills"
"""
input skills_variance_order_by {
  skill_id: order_by
}

"""
columns and relationships of "staff"
"""
type staff {
  """An array relationship"""
  engineer_visits(
    """distinct select on columns"""
    distinct_on: [engineer_visits_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [engineer_visits_order_by!]

    """filter the rows returned"""
    where: engineer_visits_bool_exp
  ): [engineer_visits!]!

  """An aggregated array relationship"""
  engineer_visits_aggregate(
    """distinct select on columns"""
    distinct_on: [engineer_visits_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [engineer_visits_order_by!]

    """filter the rows returned"""
    where: engineer_visits_bool_exp
  ): engineer_visits_aggregate!

  """An array relationship"""
  fault_logs(
    """distinct select on columns"""
    distinct_on: [fault_log_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [fault_log_order_by!]

    """filter the rows returned"""
    where: fault_log_bool_exp
  ): [fault_log!]!

  """An aggregated array relationship"""
  fault_logs_aggregate(
    """distinct select on columns"""
    distinct_on: [fault_log_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [fault_log_order_by!]

    """filter the rows returned"""
    where: fault_log_bool_exp
  ): fault_log_aggregate!
  gender: String
  other_staff_details: String
  staff_id: bigint!
  staff_name: String
}

"""
aggregated selection of "staff"
"""
type staff_aggregate {
  aggregate: staff_aggregate_fields
  nodes: [staff!]!
}

"""
aggregate fields of "staff"
"""
type staff_aggregate_fields {
  avg: staff_avg_fields
  count(columns: [staff_select_column!], distinct: Boolean): Int
  max: staff_max_fields
  min: staff_min_fields
  stddev: staff_stddev_fields
  stddev_pop: staff_stddev_pop_fields
  stddev_samp: staff_stddev_samp_fields
  sum: staff_sum_fields
  var_pop: staff_var_pop_fields
  var_samp: staff_var_samp_fields
  variance: staff_variance_fields
}

"""
order by aggregate values of table "staff"
"""
input staff_aggregate_order_by {
  avg: staff_avg_order_by
  count: order_by
  max: staff_max_order_by
  min: staff_min_order_by
  stddev: staff_stddev_order_by
  stddev_pop: staff_stddev_pop_order_by
  stddev_samp: staff_stddev_samp_order_by
  sum: staff_sum_order_by
  var_pop: staff_var_pop_order_by
  var_samp: staff_var_samp_order_by
  variance: staff_variance_order_by
}

"""
input type for inserting array relation for remote table "staff"
"""
input staff_arr_rel_insert_input {
  data: [staff_insert_input!]!
  on_conflict: staff_on_conflict
}

"""aggregate avg on columns"""
type staff_avg_fields {
  staff_id: Float
}

"""
order by avg() on columns of table "staff"
"""
input staff_avg_order_by {
  staff_id: order_by
}

"""
Boolean expression to filter rows from the table "staff". All fields are combined with a logical 'AND'.
"""
input staff_bool_exp {
  _and: [staff_bool_exp]
  _not: staff_bool_exp
  _or: [staff_bool_exp]
  engineer_visits: engineer_visits_bool_exp
  fault_logs: fault_log_bool_exp
  gender: String_comparison_exp
  other_staff_details: String_comparison_exp
  staff_id: bigint_comparison_exp
  staff_name: String_comparison_exp
}

"""
unique or primary key constraints on table "staff"
"""
enum staff_constraint {
  """unique or primary key constraint"""
  idx_27050_staff_pkey
}

"""
input type for incrementing integer column in table "staff"
"""
input staff_inc_input {
  staff_id: bigint
}

"""
input type for inserting data into table "staff"
"""
input staff_insert_input {
  engineer_visits: engineer_visits_arr_rel_insert_input
  fault_logs: fault_log_arr_rel_insert_input
  gender: String
  other_staff_details: String
  staff_id: bigint
  staff_name: String
}

"""aggregate max on columns"""
type staff_max_fields {
  gender: String
  other_staff_details: String
  staff_id: bigint
  staff_name: String
}

"""
order by max() on columns of table "staff"
"""
input staff_max_order_by {
  gender: order_by
  other_staff_details: order_by
  staff_id: order_by
  staff_name: order_by
}

"""aggregate min on columns"""
type staff_min_fields {
  gender: String
  other_staff_details: String
  staff_id: bigint
  staff_name: String
}

"""
order by min() on columns of table "staff"
"""
input staff_min_order_by {
  gender: order_by
  other_staff_details: order_by
  staff_id: order_by
  staff_name: order_by
}

"""
response of any mutation on the table "staff"
"""
type staff_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [staff!]!
}

"""
input type for inserting object relation for remote table "staff"
"""
input staff_obj_rel_insert_input {
  data: staff_insert_input!
  on_conflict: staff_on_conflict
}

"""
on conflict condition type for table "staff"
"""
input staff_on_conflict {
  constraint: staff_constraint!
  update_columns: [staff_update_column!]!
  where: staff_bool_exp
}

"""
ordering options when selecting data from "staff"
"""
input staff_order_by {
  engineer_visits_aggregate: engineer_visits_aggregate_order_by
  fault_logs_aggregate: fault_log_aggregate_order_by
  gender: order_by
  other_staff_details: order_by
  staff_id: order_by
  staff_name: order_by
}

"""
primary key columns input for table: "staff"
"""
input staff_pk_columns_input {
  staff_id: bigint!
}

"""
select columns of table "staff"
"""
enum staff_select_column {
  """column name"""
  gender

  """column name"""
  other_staff_details

  """column name"""
  staff_id

  """column name"""
  staff_name
}

"""
input type for updating data in table "staff"
"""
input staff_set_input {
  gender: String
  other_staff_details: String
  staff_id: bigint
  staff_name: String
}

"""aggregate stddev on columns"""
type staff_stddev_fields {
  staff_id: Float
}

"""
order by stddev() on columns of table "staff"
"""
input staff_stddev_order_by {
  staff_id: order_by
}

"""aggregate stddev_pop on columns"""
type staff_stddev_pop_fields {
  staff_id: Float
}

"""
order by stddev_pop() on columns of table "staff"
"""
input staff_stddev_pop_order_by {
  staff_id: order_by
}

"""aggregate stddev_samp on columns"""
type staff_stddev_samp_fields {
  staff_id: Float
}

"""
order by stddev_samp() on columns of table "staff"
"""
input staff_stddev_samp_order_by {
  staff_id: order_by
}

"""aggregate sum on columns"""
type staff_sum_fields {
  staff_id: bigint
}

"""
order by sum() on columns of table "staff"
"""
input staff_sum_order_by {
  staff_id: order_by
}

"""
update columns of table "staff"
"""
enum staff_update_column {
  """column name"""
  gender

  """column name"""
  other_staff_details

  """column name"""
  staff_id

  """column name"""
  staff_name
}

"""aggregate var_pop on columns"""
type staff_var_pop_fields {
  staff_id: Float
}

"""
order by var_pop() on columns of table "staff"
"""
input staff_var_pop_order_by {
  staff_id: order_by
}

"""aggregate var_samp on columns"""
type staff_var_samp_fields {
  staff_id: Float
}

"""
order by var_samp() on columns of table "staff"
"""
input staff_var_samp_order_by {
  staff_id: order_by
}

"""aggregate variance on columns"""
type staff_variance_fields {
  staff_id: Float
}

"""
order by variance() on columns of table "staff"
"""
input staff_variance_order_by {
  staff_id: order_by
}

"""
expression to compare columns of type String. All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String
  _ilike: String
  _in: [String!]
  _is_null: Boolean
  _like: String
  _lt: String
  _lte: String
  _neq: String
  _nilike: String
  _nin: [String!]
  _nlike: String
  _nsimilar: String
  _similar: String
}

"""subscription root"""
type subscription_root {
  """
  fetch data from the table: "asset_parts"
  """
  asset_parts(
    """distinct select on columns"""
    distinct_on: [asset_parts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [asset_parts_order_by!]

    """filter the rows returned"""
    where: asset_parts_bool_exp
  ): [asset_parts!]!

  """
  fetch aggregated fields from the table: "asset_parts"
  """
  asset_parts_aggregate(
    """distinct select on columns"""
    distinct_on: [asset_parts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [asset_parts_order_by!]

    """filter the rows returned"""
    where: asset_parts_bool_exp
  ): asset_parts_aggregate!

  """
  fetch data from the table: "assets"
  """
  assets(
    """distinct select on columns"""
    distinct_on: [assets_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [assets_order_by!]

    """filter the rows returned"""
    where: assets_bool_exp
  ): [assets!]!

  """
  fetch aggregated fields from the table: "assets"
  """
  assets_aggregate(
    """distinct select on columns"""
    distinct_on: [assets_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [assets_order_by!]

    """filter the rows returned"""
    where: assets_bool_exp
  ): assets_aggregate!

  """fetch data from the table: "assets" using primary key columns"""
  assets_by_pk(asset_id: bigint!): assets

  """
  fetch data from the table: "engineer_skills"
  """
  engineer_skills(
    """distinct select on columns"""
    distinct_on: [engineer_skills_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [engineer_skills_order_by!]

    """filter the rows returned"""
    where: engineer_skills_bool_exp
  ): [engineer_skills!]!

  """
  fetch aggregated fields from the table: "engineer_skills"
  """
  engineer_skills_aggregate(
    """distinct select on columns"""
    distinct_on: [engineer_skills_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [engineer_skills_order_by!]

    """filter the rows returned"""
    where: engineer_skills_bool_exp
  ): engineer_skills_aggregate!

  """
  fetch data from the table: "engineer_visits"
  """
  engineer_visits(
    """distinct select on columns"""
    distinct_on: [engineer_visits_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [engineer_visits_order_by!]

    """filter the rows returned"""
    where: engineer_visits_bool_exp
  ): [engineer_visits!]!

  """
  fetch aggregated fields from the table: "engineer_visits"
  """
  engineer_visits_aggregate(
    """distinct select on columns"""
    distinct_on: [engineer_visits_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [engineer_visits_order_by!]

    """filter the rows returned"""
    where: engineer_visits_bool_exp
  ): engineer_visits_aggregate!

  """fetch data from the table: "engineer_visits" using primary key columns"""
  engineer_visits_by_pk(engineer_visit_id: bigint!): engineer_visits

  """
  fetch data from the table: "fault_log"
  """
  fault_log(
    """distinct select on columns"""
    distinct_on: [fault_log_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [fault_log_order_by!]

    """filter the rows returned"""
    where: fault_log_bool_exp
  ): [fault_log!]!

  """
  fetch aggregated fields from the table: "fault_log"
  """
  fault_log_aggregate(
    """distinct select on columns"""
    distinct_on: [fault_log_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [fault_log_order_by!]

    """filter the rows returned"""
    where: fault_log_bool_exp
  ): fault_log_aggregate!

  """fetch data from the table: "fault_log" using primary key columns"""
  fault_log_by_pk(fault_log_entry_id: bigint!): fault_log

  """
  fetch data from the table: "fault_log_parts"
  """
  fault_log_parts(
    """distinct select on columns"""
    distinct_on: [fault_log_parts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [fault_log_parts_order_by!]

    """filter the rows returned"""
    where: fault_log_parts_bool_exp
  ): [fault_log_parts!]!

  """
  fetch aggregated fields from the table: "fault_log_parts"
  """
  fault_log_parts_aggregate(
    """distinct select on columns"""
    distinct_on: [fault_log_parts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [fault_log_parts_order_by!]

    """filter the rows returned"""
    where: fault_log_parts_bool_exp
  ): fault_log_parts_aggregate!

  """
  fetch data from the table: "maintenance_contracts"
  """
  maintenance_contracts(
    """distinct select on columns"""
    distinct_on: [maintenance_contracts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [maintenance_contracts_order_by!]

    """filter the rows returned"""
    where: maintenance_contracts_bool_exp
  ): [maintenance_contracts!]!

  """
  fetch aggregated fields from the table: "maintenance_contracts"
  """
  maintenance_contracts_aggregate(
    """distinct select on columns"""
    distinct_on: [maintenance_contracts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [maintenance_contracts_order_by!]

    """filter the rows returned"""
    where: maintenance_contracts_bool_exp
  ): maintenance_contracts_aggregate!

  """
  fetch data from the table: "maintenance_contracts" using primary key columns
  """
  maintenance_contracts_by_pk(maintenance_contract_id: bigint!): maintenance_contracts

  """
  fetch data from the table: "maintenance_engineers"
  """
  maintenance_engineers(
    """distinct select on columns"""
    distinct_on: [maintenance_engineers_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [maintenance_engineers_order_by!]

    """filter the rows returned"""
    where: maintenance_engineers_bool_exp
  ): [maintenance_engineers!]!

  """
  fetch aggregated fields from the table: "maintenance_engineers"
  """
  maintenance_engineers_aggregate(
    """distinct select on columns"""
    distinct_on: [maintenance_engineers_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [maintenance_engineers_order_by!]

    """filter the rows returned"""
    where: maintenance_engineers_bool_exp
  ): maintenance_engineers_aggregate!

  """
  fetch data from the table: "maintenance_engineers" using primary key columns
  """
  maintenance_engineers_by_pk(engineer_id: bigint!): maintenance_engineers

  """
  fetch data from the table: "part_faults"
  """
  part_faults(
    """distinct select on columns"""
    distinct_on: [part_faults_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [part_faults_order_by!]

    """filter the rows returned"""
    where: part_faults_bool_exp
  ): [part_faults!]!

  """
  fetch aggregated fields from the table: "part_faults"
  """
  part_faults_aggregate(
    """distinct select on columns"""
    distinct_on: [part_faults_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [part_faults_order_by!]

    """filter the rows returned"""
    where: part_faults_bool_exp
  ): part_faults_aggregate!

  """fetch data from the table: "part_faults" using primary key columns"""
  part_faults_by_pk(part_fault_id: bigint!): part_faults

  """
  fetch data from the table: "parts"
  """
  parts(
    """distinct select on columns"""
    distinct_on: [parts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [parts_order_by!]

    """filter the rows returned"""
    where: parts_bool_exp
  ): [parts!]!

  """
  fetch aggregated fields from the table: "parts"
  """
  parts_aggregate(
    """distinct select on columns"""
    distinct_on: [parts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [parts_order_by!]

    """filter the rows returned"""
    where: parts_bool_exp
  ): parts_aggregate!

  """fetch data from the table: "parts" using primary key columns"""
  parts_by_pk(part_id: bigint!): parts

  """
  fetch data from the table: "skills"
  """
  skills(
    """distinct select on columns"""
    distinct_on: [skills_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [skills_order_by!]

    """filter the rows returned"""
    where: skills_bool_exp
  ): [skills!]!

  """
  fetch aggregated fields from the table: "skills"
  """
  skills_aggregate(
    """distinct select on columns"""
    distinct_on: [skills_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [skills_order_by!]

    """filter the rows returned"""
    where: skills_bool_exp
  ): skills_aggregate!

  """fetch data from the table: "skills" using primary key columns"""
  skills_by_pk(skill_id: bigint!): skills

  """
  fetch data from the table: "skills_required_to_fix"
  """
  skills_required_to_fix(
    """distinct select on columns"""
    distinct_on: [skills_required_to_fix_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [skills_required_to_fix_order_by!]

    """filter the rows returned"""
    where: skills_required_to_fix_bool_exp
  ): [skills_required_to_fix!]!

  """
  fetch aggregated fields from the table: "skills_required_to_fix"
  """
  skills_required_to_fix_aggregate(
    """distinct select on columns"""
    distinct_on: [skills_required_to_fix_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [skills_required_to_fix_order_by!]

    """filter the rows returned"""
    where: skills_required_to_fix_bool_exp
  ): skills_required_to_fix_aggregate!

  """
  fetch data from the table: "staff"
  """
  staff(
    """distinct select on columns"""
    distinct_on: [staff_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [staff_order_by!]

    """filter the rows returned"""
    where: staff_bool_exp
  ): [staff!]!

  """
  fetch aggregated fields from the table: "staff"
  """
  staff_aggregate(
    """distinct select on columns"""
    distinct_on: [staff_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [staff_order_by!]

    """filter the rows returned"""
    where: staff_bool_exp
  ): staff_aggregate!

  """fetch data from the table: "staff" using primary key columns"""
  staff_by_pk(staff_id: bigint!): staff

  """
  fetch data from the table: "third_party_companies"
  """
  third_party_companies(
    """distinct select on columns"""
    distinct_on: [third_party_companies_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [third_party_companies_order_by!]

    """filter the rows returned"""
    where: third_party_companies_bool_exp
  ): [third_party_companies!]!

  """
  fetch aggregated fields from the table: "third_party_companies"
  """
  third_party_companies_aggregate(
    """distinct select on columns"""
    distinct_on: [third_party_companies_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [third_party_companies_order_by!]

    """filter the rows returned"""
    where: third_party_companies_bool_exp
  ): third_party_companies_aggregate!

  """
  fetch data from the table: "third_party_companies" using primary key columns
  """
  third_party_companies_by_pk(company_id: bigint!): third_party_companies
}

"""
columns and relationships of "third_party_companies"
"""
type third_party_companies {
  """An array relationship"""
  assets(
    """distinct select on columns"""
    distinct_on: [assets_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [assets_order_by!]

    """filter the rows returned"""
    where: assets_bool_exp
  ): [assets!]!

  """An aggregated array relationship"""
  assets_aggregate(
    """distinct select on columns"""
    distinct_on: [assets_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [assets_order_by!]

    """filter the rows returned"""
    where: assets_bool_exp
  ): assets_aggregate!
  company_address: String
  company_id: bigint!
  company_name: String
  company_type: String

  """An array relationship"""
  maintenance_contracts(
    """distinct select on columns"""
    distinct_on: [maintenance_contracts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [maintenance_contracts_order_by!]

    """filter the rows returned"""
    where: maintenance_contracts_bool_exp
  ): [maintenance_contracts!]!

  """An aggregated array relationship"""
  maintenance_contracts_aggregate(
    """distinct select on columns"""
    distinct_on: [maintenance_contracts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [maintenance_contracts_order_by!]

    """filter the rows returned"""
    where: maintenance_contracts_bool_exp
  ): maintenance_contracts_aggregate!

  """An array relationship"""
  maintenance_engineers(
    """distinct select on columns"""
    distinct_on: [maintenance_engineers_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [maintenance_engineers_order_by!]

    """filter the rows returned"""
    where: maintenance_engineers_bool_exp
  ): [maintenance_engineers!]!

  """An aggregated array relationship"""
  maintenance_engineers_aggregate(
    """distinct select on columns"""
    distinct_on: [maintenance_engineers_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [maintenance_engineers_order_by!]

    """filter the rows returned"""
    where: maintenance_engineers_bool_exp
  ): maintenance_engineers_aggregate!
  other_company_details: String
}

"""
aggregated selection of "third_party_companies"
"""
type third_party_companies_aggregate {
  aggregate: third_party_companies_aggregate_fields
  nodes: [third_party_companies!]!
}

"""
aggregate fields of "third_party_companies"
"""
type third_party_companies_aggregate_fields {
  avg: third_party_companies_avg_fields
  count(columns: [third_party_companies_select_column!], distinct: Boolean): Int
  max: third_party_companies_max_fields
  min: third_party_companies_min_fields
  stddev: third_party_companies_stddev_fields
  stddev_pop: third_party_companies_stddev_pop_fields
  stddev_samp: third_party_companies_stddev_samp_fields
  sum: third_party_companies_sum_fields
  var_pop: third_party_companies_var_pop_fields
  var_samp: third_party_companies_var_samp_fields
  variance: third_party_companies_variance_fields
}

"""
order by aggregate values of table "third_party_companies"
"""
input third_party_companies_aggregate_order_by {
  avg: third_party_companies_avg_order_by
  count: order_by
  max: third_party_companies_max_order_by
  min: third_party_companies_min_order_by
  stddev: third_party_companies_stddev_order_by
  stddev_pop: third_party_companies_stddev_pop_order_by
  stddev_samp: third_party_companies_stddev_samp_order_by
  sum: third_party_companies_sum_order_by
  var_pop: third_party_companies_var_pop_order_by
  var_samp: third_party_companies_var_samp_order_by
  variance: third_party_companies_variance_order_by
}

"""
input type for inserting array relation for remote table "third_party_companies"
"""
input third_party_companies_arr_rel_insert_input {
  data: [third_party_companies_insert_input!]!
  on_conflict: third_party_companies_on_conflict
}

"""aggregate avg on columns"""
type third_party_companies_avg_fields {
  company_id: Float
}

"""
order by avg() on columns of table "third_party_companies"
"""
input third_party_companies_avg_order_by {
  company_id: order_by
}

"""
Boolean expression to filter rows from the table "third_party_companies". All fields are combined with a logical 'AND'.
"""
input third_party_companies_bool_exp {
  _and: [third_party_companies_bool_exp]
  _not: third_party_companies_bool_exp
  _or: [third_party_companies_bool_exp]
  assets: assets_bool_exp
  company_address: String_comparison_exp
  company_id: bigint_comparison_exp
  company_name: String_comparison_exp
  company_type: String_comparison_exp
  maintenance_contracts: maintenance_contracts_bool_exp
  maintenance_engineers: maintenance_engineers_bool_exp
  other_company_details: String_comparison_exp
}

"""
unique or primary key constraints on table "third_party_companies"
"""
enum third_party_companies_constraint {
  """unique or primary key constraint"""
  idx_27026_third_party_companies_pkey
}

"""
input type for incrementing integer column in table "third_party_companies"
"""
input third_party_companies_inc_input {
  company_id: bigint
}

"""
input type for inserting data into table "third_party_companies"
"""
input third_party_companies_insert_input {
  assets: assets_arr_rel_insert_input
  company_address: String
  company_id: bigint
  company_name: String
  company_type: String
  maintenance_contracts: maintenance_contracts_arr_rel_insert_input
  maintenance_engineers: maintenance_engineers_arr_rel_insert_input
  other_company_details: String
}

"""aggregate max on columns"""
type third_party_companies_max_fields {
  company_address: String
  company_id: bigint
  company_name: String
  company_type: String
  other_company_details: String
}

"""
order by max() on columns of table "third_party_companies"
"""
input third_party_companies_max_order_by {
  company_address: order_by
  company_id: order_by
  company_name: order_by
  company_type: order_by
  other_company_details: order_by
}

"""aggregate min on columns"""
type third_party_companies_min_fields {
  company_address: String
  company_id: bigint
  company_name: String
  company_type: String
  other_company_details: String
}

"""
order by min() on columns of table "third_party_companies"
"""
input third_party_companies_min_order_by {
  company_address: order_by
  company_id: order_by
  company_name: order_by
  company_type: order_by
  other_company_details: order_by
}

"""
response of any mutation on the table "third_party_companies"
"""
type third_party_companies_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [third_party_companies!]!
}

"""
input type for inserting object relation for remote table "third_party_companies"
"""
input third_party_companies_obj_rel_insert_input {
  data: third_party_companies_insert_input!
  on_conflict: third_party_companies_on_conflict
}

"""
on conflict condition type for table "third_party_companies"
"""
input third_party_companies_on_conflict {
  constraint: third_party_companies_constraint!
  update_columns: [third_party_companies_update_column!]!
  where: third_party_companies_bool_exp
}

"""
ordering options when selecting data from "third_party_companies"
"""
input third_party_companies_order_by {
  assets_aggregate: assets_aggregate_order_by
  company_address: order_by
  company_id: order_by
  company_name: order_by
  company_type: order_by
  maintenance_contracts_aggregate: maintenance_contracts_aggregate_order_by
  maintenance_engineers_aggregate: maintenance_engineers_aggregate_order_by
  other_company_details: order_by
}

"""
primary key columns input for table: "third_party_companies"
"""
input third_party_companies_pk_columns_input {
  company_id: bigint!
}

"""
select columns of table "third_party_companies"
"""
enum third_party_companies_select_column {
  """column name"""
  company_address

  """column name"""
  company_id

  """column name"""
  company_name

  """column name"""
  company_type

  """column name"""
  other_company_details
}

"""
input type for updating data in table "third_party_companies"
"""
input third_party_companies_set_input {
  company_address: String
  company_id: bigint
  company_name: String
  company_type: String
  other_company_details: String
}

"""aggregate stddev on columns"""
type third_party_companies_stddev_fields {
  company_id: Float
}

"""
order by stddev() on columns of table "third_party_companies"
"""
input third_party_companies_stddev_order_by {
  company_id: order_by
}

"""aggregate stddev_pop on columns"""
type third_party_companies_stddev_pop_fields {
  company_id: Float
}

"""
order by stddev_pop() on columns of table "third_party_companies"
"""
input third_party_companies_stddev_pop_order_by {
  company_id: order_by
}

"""aggregate stddev_samp on columns"""
type third_party_companies_stddev_samp_fields {
  company_id: Float
}

"""
order by stddev_samp() on columns of table "third_party_companies"
"""
input third_party_companies_stddev_samp_order_by {
  company_id: order_by
}

"""aggregate sum on columns"""
type third_party_companies_sum_fields {
  company_id: bigint
}

"""
order by sum() on columns of table "third_party_companies"
"""
input third_party_companies_sum_order_by {
  company_id: order_by
}

"""
update columns of table "third_party_companies"
"""
enum third_party_companies_update_column {
  """column name"""
  company_address

  """column name"""
  company_id

  """column name"""
  company_name

  """column name"""
  company_type

  """column name"""
  other_company_details
}

"""aggregate var_pop on columns"""
type third_party_companies_var_pop_fields {
  company_id: Float
}

"""
order by var_pop() on columns of table "third_party_companies"
"""
input third_party_companies_var_pop_order_by {
  company_id: order_by
}

"""aggregate var_samp on columns"""
type third_party_companies_var_samp_fields {
  company_id: Float
}

"""
order by var_samp() on columns of table "third_party_companies"
"""
input third_party_companies_var_samp_order_by {
  company_id: order_by
}

"""aggregate variance on columns"""
type third_party_companies_variance_fields {
  company_id: Float
}

"""
order by variance() on columns of table "third_party_companies"
"""
input third_party_companies_variance_order_by {
  company_id: order_by
}

scalar timestamptz

"""
expression to compare columns of type timestamptz. All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}
