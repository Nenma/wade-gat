schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""
Direct the client to resolve this field locally, either from the cache or local resolvers.
"""
directive @client(
  """
  When true, the client will never use the cache for this value. See
  https://www.apollographql.com/docs/react/essentials/local-state/#forcing-resolvers-with-clientalways-true
  """
  always: Boolean
) on FIELD | FRAGMENT_DEFINITION | INLINE_FRAGMENT

"""
Export this locally resolved field as a variable to be used in the remainder of this query. See
https://www.apollographql.com/docs/react/essentials/local-state/#using-client-fields-as-variables
"""
directive @export(
  """The variable name to export this field as."""
  as: String!
) on FIELD

"""
Specify a custom store key for this result. See
https://www.apollographql.com/docs/react/advanced/caching/#the-connection-directive
"""
directive @connection(
  """Specify the store key."""
  key: String!

  """
  An array of query argument names to include in the generated custom store key.
  """
  filter: [String!]
) on FIELD

scalar bigint

"""
expression to compare columns of type bigint. All fields are combined with logical 'AND'.
"""
input bigint_comparison_exp {
  _eq: bigint
  _gt: bigint
  _gte: bigint
  _in: [bigint!]
  _is_null: Boolean
  _lt: bigint
  _lte: bigint
  _neq: bigint
  _nin: [bigint!]
}

"""
columns and relationships of "customer_event_notes"
"""
type customer_event_notes {
  """An object relationship"""
  customer_event: customer_events
  customer_event_id: bigint
  customer_event_note_id: bigint!
  date_moved_in: timestamptz
  property_id: bigint
  resident_id: bigint
  service_type_code: String
}

"""
aggregated selection of "customer_event_notes"
"""
type customer_event_notes_aggregate {
  aggregate: customer_event_notes_aggregate_fields
  nodes: [customer_event_notes!]!
}

"""
aggregate fields of "customer_event_notes"
"""
type customer_event_notes_aggregate_fields {
  avg: customer_event_notes_avg_fields
  count(columns: [customer_event_notes_select_column!], distinct: Boolean): Int
  max: customer_event_notes_max_fields
  min: customer_event_notes_min_fields
  stddev: customer_event_notes_stddev_fields
  stddev_pop: customer_event_notes_stddev_pop_fields
  stddev_samp: customer_event_notes_stddev_samp_fields
  sum: customer_event_notes_sum_fields
  var_pop: customer_event_notes_var_pop_fields
  var_samp: customer_event_notes_var_samp_fields
  variance: customer_event_notes_variance_fields
}

"""
order by aggregate values of table "customer_event_notes"
"""
input customer_event_notes_aggregate_order_by {
  avg: customer_event_notes_avg_order_by
  count: order_by
  max: customer_event_notes_max_order_by
  min: customer_event_notes_min_order_by
  stddev: customer_event_notes_stddev_order_by
  stddev_pop: customer_event_notes_stddev_pop_order_by
  stddev_samp: customer_event_notes_stddev_samp_order_by
  sum: customer_event_notes_sum_order_by
  var_pop: customer_event_notes_var_pop_order_by
  var_samp: customer_event_notes_var_samp_order_by
  variance: customer_event_notes_variance_order_by
}

"""
input type for inserting array relation for remote table "customer_event_notes"
"""
input customer_event_notes_arr_rel_insert_input {
  data: [customer_event_notes_insert_input!]!
  on_conflict: customer_event_notes_on_conflict
}

"""aggregate avg on columns"""
type customer_event_notes_avg_fields {
  customer_event_id: Float
  customer_event_note_id: Float
  property_id: Float
  resident_id: Float
}

"""
order by avg() on columns of table "customer_event_notes"
"""
input customer_event_notes_avg_order_by {
  customer_event_id: order_by
  customer_event_note_id: order_by
  property_id: order_by
  resident_id: order_by
}

"""
Boolean expression to filter rows from the table "customer_event_notes". All fields are combined with a logical 'AND'.
"""
input customer_event_notes_bool_exp {
  _and: [customer_event_notes_bool_exp]
  _not: customer_event_notes_bool_exp
  _or: [customer_event_notes_bool_exp]
  customer_event: customer_events_bool_exp
  customer_event_id: bigint_comparison_exp
  customer_event_note_id: bigint_comparison_exp
  date_moved_in: timestamptz_comparison_exp
  property_id: bigint_comparison_exp
  resident_id: bigint_comparison_exp
  service_type_code: String_comparison_exp
}

"""
unique or primary key constraints on table "customer_event_notes"
"""
enum customer_event_notes_constraint {
  """unique or primary key constraint"""
  idx_18690_customer_event_notes_pkey
}

"""
input type for incrementing integer column in table "customer_event_notes"
"""
input customer_event_notes_inc_input {
  customer_event_id: bigint
  customer_event_note_id: bigint
  property_id: bigint
  resident_id: bigint
}

"""
input type for inserting data into table "customer_event_notes"
"""
input customer_event_notes_insert_input {
  customer_event: customer_events_obj_rel_insert_input
  customer_event_id: bigint
  customer_event_note_id: bigint
  date_moved_in: timestamptz
  property_id: bigint
  resident_id: bigint
  service_type_code: String
}

"""aggregate max on columns"""
type customer_event_notes_max_fields {
  customer_event_id: bigint
  customer_event_note_id: bigint
  date_moved_in: timestamptz
  property_id: bigint
  resident_id: bigint
  service_type_code: String
}

"""
order by max() on columns of table "customer_event_notes"
"""
input customer_event_notes_max_order_by {
  customer_event_id: order_by
  customer_event_note_id: order_by
  date_moved_in: order_by
  property_id: order_by
  resident_id: order_by
  service_type_code: order_by
}

"""aggregate min on columns"""
type customer_event_notes_min_fields {
  customer_event_id: bigint
  customer_event_note_id: bigint
  date_moved_in: timestamptz
  property_id: bigint
  resident_id: bigint
  service_type_code: String
}

"""
order by min() on columns of table "customer_event_notes"
"""
input customer_event_notes_min_order_by {
  customer_event_id: order_by
  customer_event_note_id: order_by
  date_moved_in: order_by
  property_id: order_by
  resident_id: order_by
  service_type_code: order_by
}

"""
response of any mutation on the table "customer_event_notes"
"""
type customer_event_notes_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [customer_event_notes!]!
}

"""
input type for inserting object relation for remote table "customer_event_notes"
"""
input customer_event_notes_obj_rel_insert_input {
  data: customer_event_notes_insert_input!
  on_conflict: customer_event_notes_on_conflict
}

"""
on conflict condition type for table "customer_event_notes"
"""
input customer_event_notes_on_conflict {
  constraint: customer_event_notes_constraint!
  update_columns: [customer_event_notes_update_column!]!
  where: customer_event_notes_bool_exp
}

"""
ordering options when selecting data from "customer_event_notes"
"""
input customer_event_notes_order_by {
  customer_event: customer_events_order_by
  customer_event_id: order_by
  customer_event_note_id: order_by
  date_moved_in: order_by
  property_id: order_by
  resident_id: order_by
  service_type_code: order_by
}

"""
primary key columns input for table: "customer_event_notes"
"""
input customer_event_notes_pk_columns_input {
  customer_event_note_id: bigint!
}

"""
select columns of table "customer_event_notes"
"""
enum customer_event_notes_select_column {
  """column name"""
  customer_event_id

  """column name"""
  customer_event_note_id

  """column name"""
  date_moved_in

  """column name"""
  property_id

  """column name"""
  resident_id

  """column name"""
  service_type_code
}

"""
input type for updating data in table "customer_event_notes"
"""
input customer_event_notes_set_input {
  customer_event_id: bigint
  customer_event_note_id: bigint
  date_moved_in: timestamptz
  property_id: bigint
  resident_id: bigint
  service_type_code: String
}

"""aggregate stddev on columns"""
type customer_event_notes_stddev_fields {
  customer_event_id: Float
  customer_event_note_id: Float
  property_id: Float
  resident_id: Float
}

"""
order by stddev() on columns of table "customer_event_notes"
"""
input customer_event_notes_stddev_order_by {
  customer_event_id: order_by
  customer_event_note_id: order_by
  property_id: order_by
  resident_id: order_by
}

"""aggregate stddev_pop on columns"""
type customer_event_notes_stddev_pop_fields {
  customer_event_id: Float
  customer_event_note_id: Float
  property_id: Float
  resident_id: Float
}

"""
order by stddev_pop() on columns of table "customer_event_notes"
"""
input customer_event_notes_stddev_pop_order_by {
  customer_event_id: order_by
  customer_event_note_id: order_by
  property_id: order_by
  resident_id: order_by
}

"""aggregate stddev_samp on columns"""
type customer_event_notes_stddev_samp_fields {
  customer_event_id: Float
  customer_event_note_id: Float
  property_id: Float
  resident_id: Float
}

"""
order by stddev_samp() on columns of table "customer_event_notes"
"""
input customer_event_notes_stddev_samp_order_by {
  customer_event_id: order_by
  customer_event_note_id: order_by
  property_id: order_by
  resident_id: order_by
}

"""aggregate sum on columns"""
type customer_event_notes_sum_fields {
  customer_event_id: bigint
  customer_event_note_id: bigint
  property_id: bigint
  resident_id: bigint
}

"""
order by sum() on columns of table "customer_event_notes"
"""
input customer_event_notes_sum_order_by {
  customer_event_id: order_by
  customer_event_note_id: order_by
  property_id: order_by
  resident_id: order_by
}

"""
update columns of table "customer_event_notes"
"""
enum customer_event_notes_update_column {
  """column name"""
  customer_event_id

  """column name"""
  customer_event_note_id

  """column name"""
  date_moved_in

  """column name"""
  property_id

  """column name"""
  resident_id

  """column name"""
  service_type_code
}

"""aggregate var_pop on columns"""
type customer_event_notes_var_pop_fields {
  customer_event_id: Float
  customer_event_note_id: Float
  property_id: Float
  resident_id: Float
}

"""
order by var_pop() on columns of table "customer_event_notes"
"""
input customer_event_notes_var_pop_order_by {
  customer_event_id: order_by
  customer_event_note_id: order_by
  property_id: order_by
  resident_id: order_by
}

"""aggregate var_samp on columns"""
type customer_event_notes_var_samp_fields {
  customer_event_id: Float
  customer_event_note_id: Float
  property_id: Float
  resident_id: Float
}

"""
order by var_samp() on columns of table "customer_event_notes"
"""
input customer_event_notes_var_samp_order_by {
  customer_event_id: order_by
  customer_event_note_id: order_by
  property_id: order_by
  resident_id: order_by
}

"""aggregate variance on columns"""
type customer_event_notes_variance_fields {
  customer_event_id: Float
  customer_event_note_id: Float
  property_id: Float
  resident_id: Float
}

"""
order by variance() on columns of table "customer_event_notes"
"""
input customer_event_notes_variance_order_by {
  customer_event_id: order_by
  customer_event_note_id: order_by
  property_id: order_by
  resident_id: order_by
}

"""
columns and relationships of "customer_events"
"""
type customer_events {
  """An object relationship"""
  customer: customers
  customer_event_id: bigint!

  """An array relationship"""
  customer_event_notes(
    """distinct select on columns"""
    distinct_on: [customer_event_notes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [customer_event_notes_order_by!]

    """filter the rows returned"""
    where: customer_event_notes_bool_exp
  ): [customer_event_notes!]!

  """An aggregated array relationship"""
  customer_event_notes_aggregate(
    """distinct select on columns"""
    distinct_on: [customer_event_notes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [customer_event_notes_order_by!]

    """filter the rows returned"""
    where: customer_event_notes_bool_exp
  ): customer_event_notes_aggregate!
  customer_id: bigint
  date_moved_in: timestamptz

  """An object relationship"""
  property: properties
  property_id: bigint

  """An object relationship"""
  resident: residents
  resident_id: bigint

  """An object relationship"""
  thing: things
  thing_id: bigint
}

"""
aggregated selection of "customer_events"
"""
type customer_events_aggregate {
  aggregate: customer_events_aggregate_fields
  nodes: [customer_events!]!
}

"""
aggregate fields of "customer_events"
"""
type customer_events_aggregate_fields {
  avg: customer_events_avg_fields
  count(columns: [customer_events_select_column!], distinct: Boolean): Int
  max: customer_events_max_fields
  min: customer_events_min_fields
  stddev: customer_events_stddev_fields
  stddev_pop: customer_events_stddev_pop_fields
  stddev_samp: customer_events_stddev_samp_fields
  sum: customer_events_sum_fields
  var_pop: customer_events_var_pop_fields
  var_samp: customer_events_var_samp_fields
  variance: customer_events_variance_fields
}

"""
order by aggregate values of table "customer_events"
"""
input customer_events_aggregate_order_by {
  avg: customer_events_avg_order_by
  count: order_by
  max: customer_events_max_order_by
  min: customer_events_min_order_by
  stddev: customer_events_stddev_order_by
  stddev_pop: customer_events_stddev_pop_order_by
  stddev_samp: customer_events_stddev_samp_order_by
  sum: customer_events_sum_order_by
  var_pop: customer_events_var_pop_order_by
  var_samp: customer_events_var_samp_order_by
  variance: customer_events_variance_order_by
}

"""
input type for inserting array relation for remote table "customer_events"
"""
input customer_events_arr_rel_insert_input {
  data: [customer_events_insert_input!]!
  on_conflict: customer_events_on_conflict
}

"""aggregate avg on columns"""
type customer_events_avg_fields {
  customer_event_id: Float
  customer_id: Float
  property_id: Float
  resident_id: Float
  thing_id: Float
}

"""
order by avg() on columns of table "customer_events"
"""
input customer_events_avg_order_by {
  customer_event_id: order_by
  customer_id: order_by
  property_id: order_by
  resident_id: order_by
  thing_id: order_by
}

"""
Boolean expression to filter rows from the table "customer_events". All fields are combined with a logical 'AND'.
"""
input customer_events_bool_exp {
  _and: [customer_events_bool_exp]
  _not: customer_events_bool_exp
  _or: [customer_events_bool_exp]
  customer: customers_bool_exp
  customer_event_id: bigint_comparison_exp
  customer_event_notes: customer_event_notes_bool_exp
  customer_id: bigint_comparison_exp
  date_moved_in: timestamptz_comparison_exp
  property: properties_bool_exp
  property_id: bigint_comparison_exp
  resident: residents_bool_exp
  resident_id: bigint_comparison_exp
  thing: things_bool_exp
  thing_id: bigint_comparison_exp
}

"""
unique or primary key constraints on table "customer_events"
"""
enum customer_events_constraint {
  """unique or primary key constraint"""
  idx_18687_customer_events_pkey
}

"""
input type for incrementing integer column in table "customer_events"
"""
input customer_events_inc_input {
  customer_event_id: bigint
  customer_id: bigint
  property_id: bigint
  resident_id: bigint
  thing_id: bigint
}

"""
input type for inserting data into table "customer_events"
"""
input customer_events_insert_input {
  customer: customers_obj_rel_insert_input
  customer_event_id: bigint
  customer_event_notes: customer_event_notes_arr_rel_insert_input
  customer_id: bigint
  date_moved_in: timestamptz
  property: properties_obj_rel_insert_input
  property_id: bigint
  resident: residents_obj_rel_insert_input
  resident_id: bigint
  thing: things_obj_rel_insert_input
  thing_id: bigint
}

"""aggregate max on columns"""
type customer_events_max_fields {
  customer_event_id: bigint
  customer_id: bigint
  date_moved_in: timestamptz
  property_id: bigint
  resident_id: bigint
  thing_id: bigint
}

"""
order by max() on columns of table "customer_events"
"""
input customer_events_max_order_by {
  customer_event_id: order_by
  customer_id: order_by
  date_moved_in: order_by
  property_id: order_by
  resident_id: order_by
  thing_id: order_by
}

"""aggregate min on columns"""
type customer_events_min_fields {
  customer_event_id: bigint
  customer_id: bigint
  date_moved_in: timestamptz
  property_id: bigint
  resident_id: bigint
  thing_id: bigint
}

"""
order by min() on columns of table "customer_events"
"""
input customer_events_min_order_by {
  customer_event_id: order_by
  customer_id: order_by
  date_moved_in: order_by
  property_id: order_by
  resident_id: order_by
  thing_id: order_by
}

"""
response of any mutation on the table "customer_events"
"""
type customer_events_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [customer_events!]!
}

"""
input type for inserting object relation for remote table "customer_events"
"""
input customer_events_obj_rel_insert_input {
  data: customer_events_insert_input!
  on_conflict: customer_events_on_conflict
}

"""
on conflict condition type for table "customer_events"
"""
input customer_events_on_conflict {
  constraint: customer_events_constraint!
  update_columns: [customer_events_update_column!]!
  where: customer_events_bool_exp
}

"""
ordering options when selecting data from "customer_events"
"""
input customer_events_order_by {
  customer: customers_order_by
  customer_event_id: order_by
  customer_event_notes_aggregate: customer_event_notes_aggregate_order_by
  customer_id: order_by
  date_moved_in: order_by
  property: properties_order_by
  property_id: order_by
  resident: residents_order_by
  resident_id: order_by
  thing: things_order_by
  thing_id: order_by
}

"""
primary key columns input for table: "customer_events"
"""
input customer_events_pk_columns_input {
  customer_event_id: bigint!
}

"""
select columns of table "customer_events"
"""
enum customer_events_select_column {
  """column name"""
  customer_event_id

  """column name"""
  customer_id

  """column name"""
  date_moved_in

  """column name"""
  property_id

  """column name"""
  resident_id

  """column name"""
  thing_id
}

"""
input type for updating data in table "customer_events"
"""
input customer_events_set_input {
  customer_event_id: bigint
  customer_id: bigint
  date_moved_in: timestamptz
  property_id: bigint
  resident_id: bigint
  thing_id: bigint
}

"""aggregate stddev on columns"""
type customer_events_stddev_fields {
  customer_event_id: Float
  customer_id: Float
  property_id: Float
  resident_id: Float
  thing_id: Float
}

"""
order by stddev() on columns of table "customer_events"
"""
input customer_events_stddev_order_by {
  customer_event_id: order_by
  customer_id: order_by
  property_id: order_by
  resident_id: order_by
  thing_id: order_by
}

"""aggregate stddev_pop on columns"""
type customer_events_stddev_pop_fields {
  customer_event_id: Float
  customer_id: Float
  property_id: Float
  resident_id: Float
  thing_id: Float
}

"""
order by stddev_pop() on columns of table "customer_events"
"""
input customer_events_stddev_pop_order_by {
  customer_event_id: order_by
  customer_id: order_by
  property_id: order_by
  resident_id: order_by
  thing_id: order_by
}

"""aggregate stddev_samp on columns"""
type customer_events_stddev_samp_fields {
  customer_event_id: Float
  customer_id: Float
  property_id: Float
  resident_id: Float
  thing_id: Float
}

"""
order by stddev_samp() on columns of table "customer_events"
"""
input customer_events_stddev_samp_order_by {
  customer_event_id: order_by
  customer_id: order_by
  property_id: order_by
  resident_id: order_by
  thing_id: order_by
}

"""aggregate sum on columns"""
type customer_events_sum_fields {
  customer_event_id: bigint
  customer_id: bigint
  property_id: bigint
  resident_id: bigint
  thing_id: bigint
}

"""
order by sum() on columns of table "customer_events"
"""
input customer_events_sum_order_by {
  customer_event_id: order_by
  customer_id: order_by
  property_id: order_by
  resident_id: order_by
  thing_id: order_by
}

"""
update columns of table "customer_events"
"""
enum customer_events_update_column {
  """column name"""
  customer_event_id

  """column name"""
  customer_id

  """column name"""
  date_moved_in

  """column name"""
  property_id

  """column name"""
  resident_id

  """column name"""
  thing_id
}

"""aggregate var_pop on columns"""
type customer_events_var_pop_fields {
  customer_event_id: Float
  customer_id: Float
  property_id: Float
  resident_id: Float
  thing_id: Float
}

"""
order by var_pop() on columns of table "customer_events"
"""
input customer_events_var_pop_order_by {
  customer_event_id: order_by
  customer_id: order_by
  property_id: order_by
  resident_id: order_by
  thing_id: order_by
}

"""aggregate var_samp on columns"""
type customer_events_var_samp_fields {
  customer_event_id: Float
  customer_id: Float
  property_id: Float
  resident_id: Float
  thing_id: Float
}

"""
order by var_samp() on columns of table "customer_events"
"""
input customer_events_var_samp_order_by {
  customer_event_id: order_by
  customer_id: order_by
  property_id: order_by
  resident_id: order_by
  thing_id: order_by
}

"""aggregate variance on columns"""
type customer_events_variance_fields {
  customer_event_id: Float
  customer_id: Float
  property_id: Float
  resident_id: Float
  thing_id: Float
}

"""
order by variance() on columns of table "customer_events"
"""
input customer_events_variance_order_by {
  customer_event_id: order_by
  customer_id: order_by
  property_id: order_by
  resident_id: order_by
  thing_id: order_by
}

"""
columns and relationships of "customers"
"""
type customers {
  customer_details: String

  """An array relationship"""
  customer_events(
    """distinct select on columns"""
    distinct_on: [customer_events_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [customer_events_order_by!]

    """filter the rows returned"""
    where: customer_events_bool_exp
  ): [customer_events!]!

  """An aggregated array relationship"""
  customer_events_aggregate(
    """distinct select on columns"""
    distinct_on: [customer_events_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [customer_events_order_by!]

    """filter the rows returned"""
    where: customer_events_bool_exp
  ): customer_events_aggregate!
  customer_id: bigint!
}

"""
aggregated selection of "customers"
"""
type customers_aggregate {
  aggregate: customers_aggregate_fields
  nodes: [customers!]!
}

"""
aggregate fields of "customers"
"""
type customers_aggregate_fields {
  avg: customers_avg_fields
  count(columns: [customers_select_column!], distinct: Boolean): Int
  max: customers_max_fields
  min: customers_min_fields
  stddev: customers_stddev_fields
  stddev_pop: customers_stddev_pop_fields
  stddev_samp: customers_stddev_samp_fields
  sum: customers_sum_fields
  var_pop: customers_var_pop_fields
  var_samp: customers_var_samp_fields
  variance: customers_variance_fields
}

"""
order by aggregate values of table "customers"
"""
input customers_aggregate_order_by {
  avg: customers_avg_order_by
  count: order_by
  max: customers_max_order_by
  min: customers_min_order_by
  stddev: customers_stddev_order_by
  stddev_pop: customers_stddev_pop_order_by
  stddev_samp: customers_stddev_samp_order_by
  sum: customers_sum_order_by
  var_pop: customers_var_pop_order_by
  var_samp: customers_var_samp_order_by
  variance: customers_variance_order_by
}

"""
input type for inserting array relation for remote table "customers"
"""
input customers_arr_rel_insert_input {
  data: [customers_insert_input!]!
  on_conflict: customers_on_conflict
}

"""aggregate avg on columns"""
type customers_avg_fields {
  customer_id: Float
}

"""
order by avg() on columns of table "customers"
"""
input customers_avg_order_by {
  customer_id: order_by
}

"""
Boolean expression to filter rows from the table "customers". All fields are combined with a logical 'AND'.
"""
input customers_bool_exp {
  _and: [customers_bool_exp]
  _not: customers_bool_exp
  _or: [customers_bool_exp]
  customer_details: String_comparison_exp
  customer_events: customer_events_bool_exp
  customer_id: bigint_comparison_exp
}

"""
unique or primary key constraints on table "customers"
"""
enum customers_constraint {
  """unique or primary key constraint"""
  idx_18645_customers_pkey
}

"""
input type for incrementing integer column in table "customers"
"""
input customers_inc_input {
  customer_id: bigint
}

"""
input type for inserting data into table "customers"
"""
input customers_insert_input {
  customer_details: String
  customer_events: customer_events_arr_rel_insert_input
  customer_id: bigint
}

"""aggregate max on columns"""
type customers_max_fields {
  customer_details: String
  customer_id: bigint
}

"""
order by max() on columns of table "customers"
"""
input customers_max_order_by {
  customer_details: order_by
  customer_id: order_by
}

"""aggregate min on columns"""
type customers_min_fields {
  customer_details: String
  customer_id: bigint
}

"""
order by min() on columns of table "customers"
"""
input customers_min_order_by {
  customer_details: order_by
  customer_id: order_by
}

"""
response of any mutation on the table "customers"
"""
type customers_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [customers!]!
}

"""
input type for inserting object relation for remote table "customers"
"""
input customers_obj_rel_insert_input {
  data: customers_insert_input!
  on_conflict: customers_on_conflict
}

"""
on conflict condition type for table "customers"
"""
input customers_on_conflict {
  constraint: customers_constraint!
  update_columns: [customers_update_column!]!
  where: customers_bool_exp
}

"""
ordering options when selecting data from "customers"
"""
input customers_order_by {
  customer_details: order_by
  customer_events_aggregate: customer_events_aggregate_order_by
  customer_id: order_by
}

"""
primary key columns input for table: "customers"
"""
input customers_pk_columns_input {
  customer_id: bigint!
}

"""
select columns of table "customers"
"""
enum customers_select_column {
  """column name"""
  customer_details

  """column name"""
  customer_id
}

"""
input type for updating data in table "customers"
"""
input customers_set_input {
  customer_details: String
  customer_id: bigint
}

"""aggregate stddev on columns"""
type customers_stddev_fields {
  customer_id: Float
}

"""
order by stddev() on columns of table "customers"
"""
input customers_stddev_order_by {
  customer_id: order_by
}

"""aggregate stddev_pop on columns"""
type customers_stddev_pop_fields {
  customer_id: Float
}

"""
order by stddev_pop() on columns of table "customers"
"""
input customers_stddev_pop_order_by {
  customer_id: order_by
}

"""aggregate stddev_samp on columns"""
type customers_stddev_samp_fields {
  customer_id: Float
}

"""
order by stddev_samp() on columns of table "customers"
"""
input customers_stddev_samp_order_by {
  customer_id: order_by
}

"""aggregate sum on columns"""
type customers_sum_fields {
  customer_id: bigint
}

"""
order by sum() on columns of table "customers"
"""
input customers_sum_order_by {
  customer_id: order_by
}

"""
update columns of table "customers"
"""
enum customers_update_column {
  """column name"""
  customer_details

  """column name"""
  customer_id
}

"""aggregate var_pop on columns"""
type customers_var_pop_fields {
  customer_id: Float
}

"""
order by var_pop() on columns of table "customers"
"""
input customers_var_pop_order_by {
  customer_id: order_by
}

"""aggregate var_samp on columns"""
type customers_var_samp_fields {
  customer_id: Float
}

"""
order by var_samp() on columns of table "customers"
"""
input customers_var_samp_order_by {
  customer_id: order_by
}

"""aggregate variance on columns"""
type customers_variance_fields {
  customer_id: Float
}

"""
order by variance() on columns of table "customers"
"""
input customers_variance_order_by {
  customer_id: order_by
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "customer_event_notes"
  """
  delete_customer_event_notes(
    """filter the rows which have to be deleted"""
    where: customer_event_notes_bool_exp!
  ): customer_event_notes_mutation_response

  """
  delete single row from the table: "customer_event_notes"
  """
  delete_customer_event_notes_by_pk(customer_event_note_id: bigint!): customer_event_notes

  """
  delete data from the table: "customer_events"
  """
  delete_customer_events(
    """filter the rows which have to be deleted"""
    where: customer_events_bool_exp!
  ): customer_events_mutation_response

  """
  delete single row from the table: "customer_events"
  """
  delete_customer_events_by_pk(customer_event_id: bigint!): customer_events

  """
  delete data from the table: "customers"
  """
  delete_customers(
    """filter the rows which have to be deleted"""
    where: customers_bool_exp!
  ): customers_mutation_response

  """
  delete single row from the table: "customers"
  """
  delete_customers_by_pk(customer_id: bigint!): customers

  """
  delete data from the table: "organizations"
  """
  delete_organizations(
    """filter the rows which have to be deleted"""
    where: organizations_bool_exp!
  ): organizations_mutation_response

  """
  delete single row from the table: "organizations"
  """
  delete_organizations_by_pk(organization_id: bigint!): organizations

  """
  delete data from the table: "properties"
  """
  delete_properties(
    """filter the rows which have to be deleted"""
    where: properties_bool_exp!
  ): properties_mutation_response

  """
  delete single row from the table: "properties"
  """
  delete_properties_by_pk(property_id: bigint!): properties

  """
  delete data from the table: "residents"
  """
  delete_residents(
    """filter the rows which have to be deleted"""
    where: residents_bool_exp!
  ): residents_mutation_response

  """
  delete single row from the table: "residents"
  """
  delete_residents_by_pk(date_moved_in: timestamptz!, property_id: bigint!, resident_id: bigint!): residents

  """
  delete data from the table: "residents_services"
  """
  delete_residents_services(
    """filter the rows which have to be deleted"""
    where: residents_services_bool_exp!
  ): residents_services_mutation_response

  """
  delete single row from the table: "residents_services"
  """
  delete_residents_services_by_pk(resident_id: bigint!, service_id: bigint!): residents_services

  """
  delete data from the table: "services"
  """
  delete_services(
    """filter the rows which have to be deleted"""
    where: services_bool_exp!
  ): services_mutation_response

  """
  delete single row from the table: "services"
  """
  delete_services_by_pk(service_id: bigint!): services

  """
  delete data from the table: "things"
  """
  delete_things(
    """filter the rows which have to be deleted"""
    where: things_bool_exp!
  ): things_mutation_response

  """
  delete single row from the table: "things"
  """
  delete_things_by_pk(thing_id: bigint!): things

  """
  delete data from the table: "timed_locations_of_things"
  """
  delete_timed_locations_of_things(
    """filter the rows which have to be deleted"""
    where: timed_locations_of_things_bool_exp!
  ): timed_locations_of_things_mutation_response

  """
  delete data from the table: "timed_status_of_things"
  """
  delete_timed_status_of_things(
    """filter the rows which have to be deleted"""
    where: timed_status_of_things_bool_exp!
  ): timed_status_of_things_mutation_response

  """
  insert data into the table: "customer_event_notes"
  """
  insert_customer_event_notes(
    """the rows to be inserted"""
    objects: [customer_event_notes_insert_input!]!

    """on conflict condition"""
    on_conflict: customer_event_notes_on_conflict
  ): customer_event_notes_mutation_response

  """
  insert a single row into the table: "customer_event_notes"
  """
  insert_customer_event_notes_one(
    """the row to be inserted"""
    object: customer_event_notes_insert_input!

    """on conflict condition"""
    on_conflict: customer_event_notes_on_conflict
  ): customer_event_notes

  """
  insert data into the table: "customer_events"
  """
  insert_customer_events(
    """the rows to be inserted"""
    objects: [customer_events_insert_input!]!

    """on conflict condition"""
    on_conflict: customer_events_on_conflict
  ): customer_events_mutation_response

  """
  insert a single row into the table: "customer_events"
  """
  insert_customer_events_one(
    """the row to be inserted"""
    object: customer_events_insert_input!

    """on conflict condition"""
    on_conflict: customer_events_on_conflict
  ): customer_events

  """
  insert data into the table: "customers"
  """
  insert_customers(
    """the rows to be inserted"""
    objects: [customers_insert_input!]!

    """on conflict condition"""
    on_conflict: customers_on_conflict
  ): customers_mutation_response

  """
  insert a single row into the table: "customers"
  """
  insert_customers_one(
    """the row to be inserted"""
    object: customers_insert_input!

    """on conflict condition"""
    on_conflict: customers_on_conflict
  ): customers

  """
  insert data into the table: "organizations"
  """
  insert_organizations(
    """the rows to be inserted"""
    objects: [organizations_insert_input!]!

    """on conflict condition"""
    on_conflict: organizations_on_conflict
  ): organizations_mutation_response

  """
  insert a single row into the table: "organizations"
  """
  insert_organizations_one(
    """the row to be inserted"""
    object: organizations_insert_input!

    """on conflict condition"""
    on_conflict: organizations_on_conflict
  ): organizations

  """
  insert data into the table: "properties"
  """
  insert_properties(
    """the rows to be inserted"""
    objects: [properties_insert_input!]!

    """on conflict condition"""
    on_conflict: properties_on_conflict
  ): properties_mutation_response

  """
  insert a single row into the table: "properties"
  """
  insert_properties_one(
    """the row to be inserted"""
    object: properties_insert_input!

    """on conflict condition"""
    on_conflict: properties_on_conflict
  ): properties

  """
  insert data into the table: "residents"
  """
  insert_residents(
    """the rows to be inserted"""
    objects: [residents_insert_input!]!

    """on conflict condition"""
    on_conflict: residents_on_conflict
  ): residents_mutation_response

  """
  insert a single row into the table: "residents"
  """
  insert_residents_one(
    """the row to be inserted"""
    object: residents_insert_input!

    """on conflict condition"""
    on_conflict: residents_on_conflict
  ): residents

  """
  insert data into the table: "residents_services"
  """
  insert_residents_services(
    """the rows to be inserted"""
    objects: [residents_services_insert_input!]!

    """on conflict condition"""
    on_conflict: residents_services_on_conflict
  ): residents_services_mutation_response

  """
  insert a single row into the table: "residents_services"
  """
  insert_residents_services_one(
    """the row to be inserted"""
    object: residents_services_insert_input!

    """on conflict condition"""
    on_conflict: residents_services_on_conflict
  ): residents_services

  """
  insert data into the table: "services"
  """
  insert_services(
    """the rows to be inserted"""
    objects: [services_insert_input!]!

    """on conflict condition"""
    on_conflict: services_on_conflict
  ): services_mutation_response

  """
  insert a single row into the table: "services"
  """
  insert_services_one(
    """the row to be inserted"""
    object: services_insert_input!

    """on conflict condition"""
    on_conflict: services_on_conflict
  ): services

  """
  insert data into the table: "things"
  """
  insert_things(
    """the rows to be inserted"""
    objects: [things_insert_input!]!

    """on conflict condition"""
    on_conflict: things_on_conflict
  ): things_mutation_response

  """
  insert a single row into the table: "things"
  """
  insert_things_one(
    """the row to be inserted"""
    object: things_insert_input!

    """on conflict condition"""
    on_conflict: things_on_conflict
  ): things

  """
  insert data into the table: "timed_locations_of_things"
  """
  insert_timed_locations_of_things(
    """the rows to be inserted"""
    objects: [timed_locations_of_things_insert_input!]!

    """on conflict condition"""
    on_conflict: timed_locations_of_things_on_conflict
  ): timed_locations_of_things_mutation_response

  """
  insert a single row into the table: "timed_locations_of_things"
  """
  insert_timed_locations_of_things_one(
    """the row to be inserted"""
    object: timed_locations_of_things_insert_input!

    """on conflict condition"""
    on_conflict: timed_locations_of_things_on_conflict
  ): timed_locations_of_things

  """
  insert data into the table: "timed_status_of_things"
  """
  insert_timed_status_of_things(
    """the rows to be inserted"""
    objects: [timed_status_of_things_insert_input!]!

    """on conflict condition"""
    on_conflict: timed_status_of_things_on_conflict
  ): timed_status_of_things_mutation_response

  """
  insert a single row into the table: "timed_status_of_things"
  """
  insert_timed_status_of_things_one(
    """the row to be inserted"""
    object: timed_status_of_things_insert_input!

    """on conflict condition"""
    on_conflict: timed_status_of_things_on_conflict
  ): timed_status_of_things

  """
  update data of the table: "customer_event_notes"
  """
  update_customer_event_notes(
    """increments the integer columns with given value of the filtered values"""
    _inc: customer_event_notes_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: customer_event_notes_set_input

    """filter the rows which have to be updated"""
    where: customer_event_notes_bool_exp!
  ): customer_event_notes_mutation_response

  """
  update single row of the table: "customer_event_notes"
  """
  update_customer_event_notes_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: customer_event_notes_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: customer_event_notes_set_input
    pk_columns: customer_event_notes_pk_columns_input!
  ): customer_event_notes

  """
  update data of the table: "customer_events"
  """
  update_customer_events(
    """increments the integer columns with given value of the filtered values"""
    _inc: customer_events_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: customer_events_set_input

    """filter the rows which have to be updated"""
    where: customer_events_bool_exp!
  ): customer_events_mutation_response

  """
  update single row of the table: "customer_events"
  """
  update_customer_events_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: customer_events_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: customer_events_set_input
    pk_columns: customer_events_pk_columns_input!
  ): customer_events

  """
  update data of the table: "customers"
  """
  update_customers(
    """increments the integer columns with given value of the filtered values"""
    _inc: customers_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: customers_set_input

    """filter the rows which have to be updated"""
    where: customers_bool_exp!
  ): customers_mutation_response

  """
  update single row of the table: "customers"
  """
  update_customers_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: customers_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: customers_set_input
    pk_columns: customers_pk_columns_input!
  ): customers

  """
  update data of the table: "organizations"
  """
  update_organizations(
    """increments the integer columns with given value of the filtered values"""
    _inc: organizations_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: organizations_set_input

    """filter the rows which have to be updated"""
    where: organizations_bool_exp!
  ): organizations_mutation_response

  """
  update single row of the table: "organizations"
  """
  update_organizations_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: organizations_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: organizations_set_input
    pk_columns: organizations_pk_columns_input!
  ): organizations

  """
  update data of the table: "properties"
  """
  update_properties(
    """increments the integer columns with given value of the filtered values"""
    _inc: properties_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: properties_set_input

    """filter the rows which have to be updated"""
    where: properties_bool_exp!
  ): properties_mutation_response

  """
  update single row of the table: "properties"
  """
  update_properties_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: properties_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: properties_set_input
    pk_columns: properties_pk_columns_input!
  ): properties

  """
  update data of the table: "residents"
  """
  update_residents(
    """increments the integer columns with given value of the filtered values"""
    _inc: residents_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: residents_set_input

    """filter the rows which have to be updated"""
    where: residents_bool_exp!
  ): residents_mutation_response

  """
  update single row of the table: "residents"
  """
  update_residents_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: residents_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: residents_set_input
    pk_columns: residents_pk_columns_input!
  ): residents

  """
  update data of the table: "residents_services"
  """
  update_residents_services(
    """increments the integer columns with given value of the filtered values"""
    _inc: residents_services_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: residents_services_set_input

    """filter the rows which have to be updated"""
    where: residents_services_bool_exp!
  ): residents_services_mutation_response

  """
  update single row of the table: "residents_services"
  """
  update_residents_services_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: residents_services_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: residents_services_set_input
    pk_columns: residents_services_pk_columns_input!
  ): residents_services

  """
  update data of the table: "services"
  """
  update_services(
    """increments the integer columns with given value of the filtered values"""
    _inc: services_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: services_set_input

    """filter the rows which have to be updated"""
    where: services_bool_exp!
  ): services_mutation_response

  """
  update single row of the table: "services"
  """
  update_services_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: services_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: services_set_input
    pk_columns: services_pk_columns_input!
  ): services

  """
  update data of the table: "things"
  """
  update_things(
    """increments the integer columns with given value of the filtered values"""
    _inc: things_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: things_set_input

    """filter the rows which have to be updated"""
    where: things_bool_exp!
  ): things_mutation_response

  """
  update single row of the table: "things"
  """
  update_things_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: things_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: things_set_input
    pk_columns: things_pk_columns_input!
  ): things

  """
  update data of the table: "timed_locations_of_things"
  """
  update_timed_locations_of_things(
    """increments the integer columns with given value of the filtered values"""
    _inc: timed_locations_of_things_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: timed_locations_of_things_set_input

    """filter the rows which have to be updated"""
    where: timed_locations_of_things_bool_exp!
  ): timed_locations_of_things_mutation_response

  """
  update data of the table: "timed_status_of_things"
  """
  update_timed_status_of_things(
    """increments the integer columns with given value of the filtered values"""
    _inc: timed_status_of_things_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: timed_status_of_things_set_input

    """filter the rows which have to be updated"""
    where: timed_status_of_things_bool_exp!
  ): timed_status_of_things_mutation_response
}

"""column ordering options"""
enum order_by {
  """in the ascending order, nulls last"""
  asc

  """in the ascending order, nulls first"""
  asc_nulls_first

  """in the ascending order, nulls last"""
  asc_nulls_last

  """in the descending order, nulls first"""
  desc

  """in the descending order, nulls first"""
  desc_nulls_first

  """in the descending order, nulls last"""
  desc_nulls_last
}

"""
columns and relationships of "organizations"
"""
type organizations {
  organization_details: String
  organization_id: bigint!

  """An object relationship"""
  parent_organization: organizations
  parent_organization_id: bigint

  """An array relationship"""
  services(
    """distinct select on columns"""
    distinct_on: [services_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [services_order_by!]

    """filter the rows returned"""
    where: services_bool_exp
  ): [services!]!

  """An aggregated array relationship"""
  services_aggregate(
    """distinct select on columns"""
    distinct_on: [services_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [services_order_by!]

    """filter the rows returned"""
    where: services_bool_exp
  ): services_aggregate!

  """An array relationship"""
  things(
    """distinct select on columns"""
    distinct_on: [things_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [things_order_by!]

    """filter the rows returned"""
    where: things_bool_exp
  ): [things!]!

  """An aggregated array relationship"""
  things_aggregate(
    """distinct select on columns"""
    distinct_on: [things_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [things_order_by!]

    """filter the rows returned"""
    where: things_bool_exp
  ): things_aggregate!
}

"""
aggregated selection of "organizations"
"""
type organizations_aggregate {
  aggregate: organizations_aggregate_fields
  nodes: [organizations!]!
}

"""
aggregate fields of "organizations"
"""
type organizations_aggregate_fields {
  avg: organizations_avg_fields
  count(columns: [organizations_select_column!], distinct: Boolean): Int
  max: organizations_max_fields
  min: organizations_min_fields
  stddev: organizations_stddev_fields
  stddev_pop: organizations_stddev_pop_fields
  stddev_samp: organizations_stddev_samp_fields
  sum: organizations_sum_fields
  var_pop: organizations_var_pop_fields
  var_samp: organizations_var_samp_fields
  variance: organizations_variance_fields
}

"""
order by aggregate values of table "organizations"
"""
input organizations_aggregate_order_by {
  avg: organizations_avg_order_by
  count: order_by
  max: organizations_max_order_by
  min: organizations_min_order_by
  stddev: organizations_stddev_order_by
  stddev_pop: organizations_stddev_pop_order_by
  stddev_samp: organizations_stddev_samp_order_by
  sum: organizations_sum_order_by
  var_pop: organizations_var_pop_order_by
  var_samp: organizations_var_samp_order_by
  variance: organizations_variance_order_by
}

"""
input type for inserting array relation for remote table "organizations"
"""
input organizations_arr_rel_insert_input {
  data: [organizations_insert_input!]!
  on_conflict: organizations_on_conflict
}

"""aggregate avg on columns"""
type organizations_avg_fields {
  organization_id: Float
  parent_organization_id: Float
}

"""
order by avg() on columns of table "organizations"
"""
input organizations_avg_order_by {
  organization_id: order_by
  parent_organization_id: order_by
}

"""
Boolean expression to filter rows from the table "organizations". All fields are combined with a logical 'AND'.
"""
input organizations_bool_exp {
  _and: [organizations_bool_exp]
  _not: organizations_bool_exp
  _or: [organizations_bool_exp]
  organization_details: String_comparison_exp
  organization_id: bigint_comparison_exp
  parent_organization: organizations_bool_exp
  parent_organization_id: bigint_comparison_exp
  services: services_bool_exp
  things: things_bool_exp
}

"""
unique or primary key constraints on table "organizations"
"""
enum organizations_constraint {
  """unique or primary key constraint"""
  idx_18663_organizations_pkey
}

"""
input type for incrementing integer column in table "organizations"
"""
input organizations_inc_input {
  organization_id: bigint
  parent_organization_id: bigint
}

"""
input type for inserting data into table "organizations"
"""
input organizations_insert_input {
  organization_details: String
  organization_id: bigint
  parent_organization: organizations_obj_rel_insert_input
  parent_organization_id: bigint
  services: services_arr_rel_insert_input
  things: things_arr_rel_insert_input
}

"""aggregate max on columns"""
type organizations_max_fields {
  organization_details: String
  organization_id: bigint
  parent_organization_id: bigint
}

"""
order by max() on columns of table "organizations"
"""
input organizations_max_order_by {
  organization_details: order_by
  organization_id: order_by
  parent_organization_id: order_by
}

"""aggregate min on columns"""
type organizations_min_fields {
  organization_details: String
  organization_id: bigint
  parent_organization_id: bigint
}

"""
order by min() on columns of table "organizations"
"""
input organizations_min_order_by {
  organization_details: order_by
  organization_id: order_by
  parent_organization_id: order_by
}

"""
response of any mutation on the table "organizations"
"""
type organizations_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [organizations!]!
}

"""
input type for inserting object relation for remote table "organizations"
"""
input organizations_obj_rel_insert_input {
  data: organizations_insert_input!
  on_conflict: organizations_on_conflict
}

"""
on conflict condition type for table "organizations"
"""
input organizations_on_conflict {
  constraint: organizations_constraint!
  update_columns: [organizations_update_column!]!
  where: organizations_bool_exp
}

"""
ordering options when selecting data from "organizations"
"""
input organizations_order_by {
  organization_details: order_by
  organization_id: order_by
  parent_organization: organizations_order_by
  parent_organization_id: order_by
  services_aggregate: services_aggregate_order_by
  things_aggregate: things_aggregate_order_by
}

"""
primary key columns input for table: "organizations"
"""
input organizations_pk_columns_input {
  organization_id: bigint!
}

"""
select columns of table "organizations"
"""
enum organizations_select_column {
  """column name"""
  organization_details

  """column name"""
  organization_id

  """column name"""
  parent_organization_id
}

"""
input type for updating data in table "organizations"
"""
input organizations_set_input {
  organization_details: String
  organization_id: bigint
  parent_organization_id: bigint
}

"""aggregate stddev on columns"""
type organizations_stddev_fields {
  organization_id: Float
  parent_organization_id: Float
}

"""
order by stddev() on columns of table "organizations"
"""
input organizations_stddev_order_by {
  organization_id: order_by
  parent_organization_id: order_by
}

"""aggregate stddev_pop on columns"""
type organizations_stddev_pop_fields {
  organization_id: Float
  parent_organization_id: Float
}

"""
order by stddev_pop() on columns of table "organizations"
"""
input organizations_stddev_pop_order_by {
  organization_id: order_by
  parent_organization_id: order_by
}

"""aggregate stddev_samp on columns"""
type organizations_stddev_samp_fields {
  organization_id: Float
  parent_organization_id: Float
}

"""
order by stddev_samp() on columns of table "organizations"
"""
input organizations_stddev_samp_order_by {
  organization_id: order_by
  parent_organization_id: order_by
}

"""aggregate sum on columns"""
type organizations_sum_fields {
  organization_id: bigint
  parent_organization_id: bigint
}

"""
order by sum() on columns of table "organizations"
"""
input organizations_sum_order_by {
  organization_id: order_by
  parent_organization_id: order_by
}

"""
update columns of table "organizations"
"""
enum organizations_update_column {
  """column name"""
  organization_details

  """column name"""
  organization_id

  """column name"""
  parent_organization_id
}

"""aggregate var_pop on columns"""
type organizations_var_pop_fields {
  organization_id: Float
  parent_organization_id: Float
}

"""
order by var_pop() on columns of table "organizations"
"""
input organizations_var_pop_order_by {
  organization_id: order_by
  parent_organization_id: order_by
}

"""aggregate var_samp on columns"""
type organizations_var_samp_fields {
  organization_id: Float
  parent_organization_id: Float
}

"""
order by var_samp() on columns of table "organizations"
"""
input organizations_var_samp_order_by {
  organization_id: order_by
  parent_organization_id: order_by
}

"""aggregate variance on columns"""
type organizations_variance_fields {
  organization_id: Float
  parent_organization_id: Float
}

"""
order by variance() on columns of table "organizations"
"""
input organizations_variance_order_by {
  organization_id: order_by
  parent_organization_id: order_by
}

"""
columns and relationships of "properties"
"""
type properties {
  """An array relationship"""
  customer_events(
    """distinct select on columns"""
    distinct_on: [customer_events_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [customer_events_order_by!]

    """filter the rows returned"""
    where: customer_events_bool_exp
  ): [customer_events!]!

  """An aggregated array relationship"""
  customer_events_aggregate(
    """distinct select on columns"""
    distinct_on: [customer_events_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [customer_events_order_by!]

    """filter the rows returned"""
    where: customer_events_bool_exp
  ): customer_events_aggregate!
  other_details: String
  property_address: String
  property_id: bigint!
  property_type_code: String

  """An array relationship"""
  residents(
    """distinct select on columns"""
    distinct_on: [residents_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [residents_order_by!]

    """filter the rows returned"""
    where: residents_bool_exp
  ): [residents!]!

  """An aggregated array relationship"""
  residents_aggregate(
    """distinct select on columns"""
    distinct_on: [residents_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [residents_order_by!]

    """filter the rows returned"""
    where: residents_bool_exp
  ): residents_aggregate!

  """An array relationship"""
  residents_services(
    """distinct select on columns"""
    distinct_on: [residents_services_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [residents_services_order_by!]

    """filter the rows returned"""
    where: residents_services_bool_exp
  ): [residents_services!]!

  """An aggregated array relationship"""
  residents_services_aggregate(
    """distinct select on columns"""
    distinct_on: [residents_services_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [residents_services_order_by!]

    """filter the rows returned"""
    where: residents_services_bool_exp
  ): residents_services_aggregate!
}

"""
aggregated selection of "properties"
"""
type properties_aggregate {
  aggregate: properties_aggregate_fields
  nodes: [properties!]!
}

"""
aggregate fields of "properties"
"""
type properties_aggregate_fields {
  avg: properties_avg_fields
  count(columns: [properties_select_column!], distinct: Boolean): Int
  max: properties_max_fields
  min: properties_min_fields
  stddev: properties_stddev_fields
  stddev_pop: properties_stddev_pop_fields
  stddev_samp: properties_stddev_samp_fields
  sum: properties_sum_fields
  var_pop: properties_var_pop_fields
  var_samp: properties_var_samp_fields
  variance: properties_variance_fields
}

"""
order by aggregate values of table "properties"
"""
input properties_aggregate_order_by {
  avg: properties_avg_order_by
  count: order_by
  max: properties_max_order_by
  min: properties_min_order_by
  stddev: properties_stddev_order_by
  stddev_pop: properties_stddev_pop_order_by
  stddev_samp: properties_stddev_samp_order_by
  sum: properties_sum_order_by
  var_pop: properties_var_pop_order_by
  var_samp: properties_var_samp_order_by
  variance: properties_variance_order_by
}

"""
input type for inserting array relation for remote table "properties"
"""
input properties_arr_rel_insert_input {
  data: [properties_insert_input!]!
  on_conflict: properties_on_conflict
}

"""aggregate avg on columns"""
type properties_avg_fields {
  property_id: Float
}

"""
order by avg() on columns of table "properties"
"""
input properties_avg_order_by {
  property_id: order_by
}

"""
Boolean expression to filter rows from the table "properties". All fields are combined with a logical 'AND'.
"""
input properties_bool_exp {
  _and: [properties_bool_exp]
  _not: properties_bool_exp
  _or: [properties_bool_exp]
  customer_events: customer_events_bool_exp
  other_details: String_comparison_exp
  property_address: String_comparison_exp
  property_id: bigint_comparison_exp
  property_type_code: String_comparison_exp
  residents: residents_bool_exp
  residents_services: residents_services_bool_exp
}

"""
unique or primary key constraints on table "properties"
"""
enum properties_constraint {
  """unique or primary key constraint"""
  idx_18651_properties_pkey
}

"""
input type for incrementing integer column in table "properties"
"""
input properties_inc_input {
  property_id: bigint
}

"""
input type for inserting data into table "properties"
"""
input properties_insert_input {
  customer_events: customer_events_arr_rel_insert_input
  other_details: String
  property_address: String
  property_id: bigint
  property_type_code: String
  residents: residents_arr_rel_insert_input
  residents_services: residents_services_arr_rel_insert_input
}

"""aggregate max on columns"""
type properties_max_fields {
  other_details: String
  property_address: String
  property_id: bigint
  property_type_code: String
}

"""
order by max() on columns of table "properties"
"""
input properties_max_order_by {
  other_details: order_by
  property_address: order_by
  property_id: order_by
  property_type_code: order_by
}

"""aggregate min on columns"""
type properties_min_fields {
  other_details: String
  property_address: String
  property_id: bigint
  property_type_code: String
}

"""
order by min() on columns of table "properties"
"""
input properties_min_order_by {
  other_details: order_by
  property_address: order_by
  property_id: order_by
  property_type_code: order_by
}

"""
response of any mutation on the table "properties"
"""
type properties_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [properties!]!
}

"""
input type for inserting object relation for remote table "properties"
"""
input properties_obj_rel_insert_input {
  data: properties_insert_input!
  on_conflict: properties_on_conflict
}

"""
on conflict condition type for table "properties"
"""
input properties_on_conflict {
  constraint: properties_constraint!
  update_columns: [properties_update_column!]!
  where: properties_bool_exp
}

"""
ordering options when selecting data from "properties"
"""
input properties_order_by {
  customer_events_aggregate: customer_events_aggregate_order_by
  other_details: order_by
  property_address: order_by
  property_id: order_by
  property_type_code: order_by
  residents_aggregate: residents_aggregate_order_by
  residents_services_aggregate: residents_services_aggregate_order_by
}

"""
primary key columns input for table: "properties"
"""
input properties_pk_columns_input {
  property_id: bigint!
}

"""
select columns of table "properties"
"""
enum properties_select_column {
  """column name"""
  other_details

  """column name"""
  property_address

  """column name"""
  property_id

  """column name"""
  property_type_code
}

"""
input type for updating data in table "properties"
"""
input properties_set_input {
  other_details: String
  property_address: String
  property_id: bigint
  property_type_code: String
}

"""aggregate stddev on columns"""
type properties_stddev_fields {
  property_id: Float
}

"""
order by stddev() on columns of table "properties"
"""
input properties_stddev_order_by {
  property_id: order_by
}

"""aggregate stddev_pop on columns"""
type properties_stddev_pop_fields {
  property_id: Float
}

"""
order by stddev_pop() on columns of table "properties"
"""
input properties_stddev_pop_order_by {
  property_id: order_by
}

"""aggregate stddev_samp on columns"""
type properties_stddev_samp_fields {
  property_id: Float
}

"""
order by stddev_samp() on columns of table "properties"
"""
input properties_stddev_samp_order_by {
  property_id: order_by
}

"""aggregate sum on columns"""
type properties_sum_fields {
  property_id: bigint
}

"""
order by sum() on columns of table "properties"
"""
input properties_sum_order_by {
  property_id: order_by
}

"""
update columns of table "properties"
"""
enum properties_update_column {
  """column name"""
  other_details

  """column name"""
  property_address

  """column name"""
  property_id

  """column name"""
  property_type_code
}

"""aggregate var_pop on columns"""
type properties_var_pop_fields {
  property_id: Float
}

"""
order by var_pop() on columns of table "properties"
"""
input properties_var_pop_order_by {
  property_id: order_by
}

"""aggregate var_samp on columns"""
type properties_var_samp_fields {
  property_id: Float
}

"""
order by var_samp() on columns of table "properties"
"""
input properties_var_samp_order_by {
  property_id: order_by
}

"""aggregate variance on columns"""
type properties_variance_fields {
  property_id: Float
}

"""
order by variance() on columns of table "properties"
"""
input properties_variance_order_by {
  property_id: order_by
}

"""query root"""
type query_root {
  """
  fetch data from the table: "customer_event_notes"
  """
  customer_event_notes(
    """distinct select on columns"""
    distinct_on: [customer_event_notes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [customer_event_notes_order_by!]

    """filter the rows returned"""
    where: customer_event_notes_bool_exp
  ): [customer_event_notes!]!

  """
  fetch aggregated fields from the table: "customer_event_notes"
  """
  customer_event_notes_aggregate(
    """distinct select on columns"""
    distinct_on: [customer_event_notes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [customer_event_notes_order_by!]

    """filter the rows returned"""
    where: customer_event_notes_bool_exp
  ): customer_event_notes_aggregate!

  """
  fetch data from the table: "customer_event_notes" using primary key columns
  """
  customer_event_notes_by_pk(customer_event_note_id: bigint!): customer_event_notes

  """
  fetch data from the table: "customer_events"
  """
  customer_events(
    """distinct select on columns"""
    distinct_on: [customer_events_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [customer_events_order_by!]

    """filter the rows returned"""
    where: customer_events_bool_exp
  ): [customer_events!]!

  """
  fetch aggregated fields from the table: "customer_events"
  """
  customer_events_aggregate(
    """distinct select on columns"""
    distinct_on: [customer_events_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [customer_events_order_by!]

    """filter the rows returned"""
    where: customer_events_bool_exp
  ): customer_events_aggregate!

  """fetch data from the table: "customer_events" using primary key columns"""
  customer_events_by_pk(customer_event_id: bigint!): customer_events

  """
  fetch data from the table: "customers"
  """
  customers(
    """distinct select on columns"""
    distinct_on: [customers_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [customers_order_by!]

    """filter the rows returned"""
    where: customers_bool_exp
  ): [customers!]!

  """
  fetch aggregated fields from the table: "customers"
  """
  customers_aggregate(
    """distinct select on columns"""
    distinct_on: [customers_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [customers_order_by!]

    """filter the rows returned"""
    where: customers_bool_exp
  ): customers_aggregate!

  """fetch data from the table: "customers" using primary key columns"""
  customers_by_pk(customer_id: bigint!): customers

  """
  fetch data from the table: "organizations"
  """
  organizations(
    """distinct select on columns"""
    distinct_on: [organizations_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [organizations_order_by!]

    """filter the rows returned"""
    where: organizations_bool_exp
  ): [organizations!]!

  """
  fetch aggregated fields from the table: "organizations"
  """
  organizations_aggregate(
    """distinct select on columns"""
    distinct_on: [organizations_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [organizations_order_by!]

    """filter the rows returned"""
    where: organizations_bool_exp
  ): organizations_aggregate!

  """fetch data from the table: "organizations" using primary key columns"""
  organizations_by_pk(organization_id: bigint!): organizations

  """
  fetch data from the table: "properties"
  """
  properties(
    """distinct select on columns"""
    distinct_on: [properties_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [properties_order_by!]

    """filter the rows returned"""
    where: properties_bool_exp
  ): [properties!]!

  """
  fetch aggregated fields from the table: "properties"
  """
  properties_aggregate(
    """distinct select on columns"""
    distinct_on: [properties_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [properties_order_by!]

    """filter the rows returned"""
    where: properties_bool_exp
  ): properties_aggregate!

  """fetch data from the table: "properties" using primary key columns"""
  properties_by_pk(property_id: bigint!): properties

  """
  fetch data from the table: "residents"
  """
  residents(
    """distinct select on columns"""
    distinct_on: [residents_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [residents_order_by!]

    """filter the rows returned"""
    where: residents_bool_exp
  ): [residents!]!

  """
  fetch aggregated fields from the table: "residents"
  """
  residents_aggregate(
    """distinct select on columns"""
    distinct_on: [residents_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [residents_order_by!]

    """filter the rows returned"""
    where: residents_bool_exp
  ): residents_aggregate!

  """fetch data from the table: "residents" using primary key columns"""
  residents_by_pk(date_moved_in: timestamptz!, property_id: bigint!, resident_id: bigint!): residents

  """
  fetch data from the table: "residents_services"
  """
  residents_services(
    """distinct select on columns"""
    distinct_on: [residents_services_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [residents_services_order_by!]

    """filter the rows returned"""
    where: residents_services_bool_exp
  ): [residents_services!]!

  """
  fetch aggregated fields from the table: "residents_services"
  """
  residents_services_aggregate(
    """distinct select on columns"""
    distinct_on: [residents_services_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [residents_services_order_by!]

    """filter the rows returned"""
    where: residents_services_bool_exp
  ): residents_services_aggregate!

  """
  fetch data from the table: "residents_services" using primary key columns
  """
  residents_services_by_pk(resident_id: bigint!, service_id: bigint!): residents_services

  """
  fetch data from the table: "services"
  """
  services(
    """distinct select on columns"""
    distinct_on: [services_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [services_order_by!]

    """filter the rows returned"""
    where: services_bool_exp
  ): [services!]!

  """
  fetch aggregated fields from the table: "services"
  """
  services_aggregate(
    """distinct select on columns"""
    distinct_on: [services_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [services_order_by!]

    """filter the rows returned"""
    where: services_bool_exp
  ): services_aggregate!

  """fetch data from the table: "services" using primary key columns"""
  services_by_pk(service_id: bigint!): services

  """
  fetch data from the table: "things"
  """
  things(
    """distinct select on columns"""
    distinct_on: [things_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [things_order_by!]

    """filter the rows returned"""
    where: things_bool_exp
  ): [things!]!

  """
  fetch aggregated fields from the table: "things"
  """
  things_aggregate(
    """distinct select on columns"""
    distinct_on: [things_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [things_order_by!]

    """filter the rows returned"""
    where: things_bool_exp
  ): things_aggregate!

  """fetch data from the table: "things" using primary key columns"""
  things_by_pk(thing_id: bigint!): things

  """
  fetch data from the table: "timed_locations_of_things"
  """
  timed_locations_of_things(
    """distinct select on columns"""
    distinct_on: [timed_locations_of_things_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [timed_locations_of_things_order_by!]

    """filter the rows returned"""
    where: timed_locations_of_things_bool_exp
  ): [timed_locations_of_things!]!

  """
  fetch aggregated fields from the table: "timed_locations_of_things"
  """
  timed_locations_of_things_aggregate(
    """distinct select on columns"""
    distinct_on: [timed_locations_of_things_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [timed_locations_of_things_order_by!]

    """filter the rows returned"""
    where: timed_locations_of_things_bool_exp
  ): timed_locations_of_things_aggregate!

  """
  fetch data from the table: "timed_status_of_things"
  """
  timed_status_of_things(
    """distinct select on columns"""
    distinct_on: [timed_status_of_things_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [timed_status_of_things_order_by!]

    """filter the rows returned"""
    where: timed_status_of_things_bool_exp
  ): [timed_status_of_things!]!

  """
  fetch aggregated fields from the table: "timed_status_of_things"
  """
  timed_status_of_things_aggregate(
    """distinct select on columns"""
    distinct_on: [timed_status_of_things_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [timed_status_of_things_order_by!]

    """filter the rows returned"""
    where: timed_status_of_things_bool_exp
  ): timed_status_of_things_aggregate!
}

"""
columns and relationships of "residents"
"""
type residents {
  """An array relationship"""
  customer_events(
    """distinct select on columns"""
    distinct_on: [customer_events_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [customer_events_order_by!]

    """filter the rows returned"""
    where: customer_events_bool_exp
  ): [customer_events!]!

  """An aggregated array relationship"""
  customer_events_aggregate(
    """distinct select on columns"""
    distinct_on: [customer_events_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [customer_events_order_by!]

    """filter the rows returned"""
    where: customer_events_bool_exp
  ): customer_events_aggregate!
  date_moved_in: timestamptz!
  date_moved_out: timestamptz
  other_details: String

  """An object relationship"""
  property: properties!
  property_id: bigint!
  resident_id: bigint!

  """An array relationship"""
  residents_services(
    """distinct select on columns"""
    distinct_on: [residents_services_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [residents_services_order_by!]

    """filter the rows returned"""
    where: residents_services_bool_exp
  ): [residents_services!]!

  """An aggregated array relationship"""
  residents_services_aggregate(
    """distinct select on columns"""
    distinct_on: [residents_services_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [residents_services_order_by!]

    """filter the rows returned"""
    where: residents_services_bool_exp
  ): residents_services_aggregate!
}

"""
aggregated selection of "residents"
"""
type residents_aggregate {
  aggregate: residents_aggregate_fields
  nodes: [residents!]!
}

"""
aggregate fields of "residents"
"""
type residents_aggregate_fields {
  avg: residents_avg_fields
  count(columns: [residents_select_column!], distinct: Boolean): Int
  max: residents_max_fields
  min: residents_min_fields
  stddev: residents_stddev_fields
  stddev_pop: residents_stddev_pop_fields
  stddev_samp: residents_stddev_samp_fields
  sum: residents_sum_fields
  var_pop: residents_var_pop_fields
  var_samp: residents_var_samp_fields
  variance: residents_variance_fields
}

"""
order by aggregate values of table "residents"
"""
input residents_aggregate_order_by {
  avg: residents_avg_order_by
  count: order_by
  max: residents_max_order_by
  min: residents_min_order_by
  stddev: residents_stddev_order_by
  stddev_pop: residents_stddev_pop_order_by
  stddev_samp: residents_stddev_samp_order_by
  sum: residents_sum_order_by
  var_pop: residents_var_pop_order_by
  var_samp: residents_var_samp_order_by
  variance: residents_variance_order_by
}

"""
input type for inserting array relation for remote table "residents"
"""
input residents_arr_rel_insert_input {
  data: [residents_insert_input!]!
  on_conflict: residents_on_conflict
}

"""aggregate avg on columns"""
type residents_avg_fields {
  property_id: Float
  resident_id: Float
}

"""
order by avg() on columns of table "residents"
"""
input residents_avg_order_by {
  property_id: order_by
  resident_id: order_by
}

"""
Boolean expression to filter rows from the table "residents". All fields are combined with a logical 'AND'.
"""
input residents_bool_exp {
  _and: [residents_bool_exp]
  _not: residents_bool_exp
  _or: [residents_bool_exp]
  customer_events: customer_events_bool_exp
  date_moved_in: timestamptz_comparison_exp
  date_moved_out: timestamptz_comparison_exp
  other_details: String_comparison_exp
  property: properties_bool_exp
  property_id: bigint_comparison_exp
  resident_id: bigint_comparison_exp
  residents_services: residents_services_bool_exp
}

"""
unique or primary key constraints on table "residents"
"""
enum residents_constraint {
  """unique or primary key constraint"""
  idx_18657_sqlite_autoindex_residents_1
}

"""
input type for incrementing integer column in table "residents"
"""
input residents_inc_input {
  property_id: bigint
  resident_id: bigint
}

"""
input type for inserting data into table "residents"
"""
input residents_insert_input {
  customer_events: customer_events_arr_rel_insert_input
  date_moved_in: timestamptz
  date_moved_out: timestamptz
  other_details: String
  property: properties_obj_rel_insert_input
  property_id: bigint
  resident_id: bigint
  residents_services: residents_services_arr_rel_insert_input
}

"""aggregate max on columns"""
type residents_max_fields {
  date_moved_in: timestamptz
  date_moved_out: timestamptz
  other_details: String
  property_id: bigint
  resident_id: bigint
}

"""
order by max() on columns of table "residents"
"""
input residents_max_order_by {
  date_moved_in: order_by
  date_moved_out: order_by
  other_details: order_by
  property_id: order_by
  resident_id: order_by
}

"""aggregate min on columns"""
type residents_min_fields {
  date_moved_in: timestamptz
  date_moved_out: timestamptz
  other_details: String
  property_id: bigint
  resident_id: bigint
}

"""
order by min() on columns of table "residents"
"""
input residents_min_order_by {
  date_moved_in: order_by
  date_moved_out: order_by
  other_details: order_by
  property_id: order_by
  resident_id: order_by
}

"""
response of any mutation on the table "residents"
"""
type residents_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [residents!]!
}

"""
input type for inserting object relation for remote table "residents"
"""
input residents_obj_rel_insert_input {
  data: residents_insert_input!
  on_conflict: residents_on_conflict
}

"""
on conflict condition type for table "residents"
"""
input residents_on_conflict {
  constraint: residents_constraint!
  update_columns: [residents_update_column!]!
  where: residents_bool_exp
}

"""
ordering options when selecting data from "residents"
"""
input residents_order_by {
  customer_events_aggregate: customer_events_aggregate_order_by
  date_moved_in: order_by
  date_moved_out: order_by
  other_details: order_by
  property: properties_order_by
  property_id: order_by
  resident_id: order_by
  residents_services_aggregate: residents_services_aggregate_order_by
}

"""
primary key columns input for table: "residents"
"""
input residents_pk_columns_input {
  date_moved_in: timestamptz!
  property_id: bigint!
  resident_id: bigint!
}

"""
select columns of table "residents"
"""
enum residents_select_column {
  """column name"""
  date_moved_in

  """column name"""
  date_moved_out

  """column name"""
  other_details

  """column name"""
  property_id

  """column name"""
  resident_id
}

"""
columns and relationships of "residents_services"
"""
type residents_services {
  date_moved_in: timestamptz
  date_provided: timestamptz
  date_requested: timestamptz
  other_details: String

  """An object relationship"""
  property: properties
  property_id: bigint

  """An object relationship"""
  resident: residents
  resident_id: bigint!

  """An object relationship"""
  service: services!
  service_id: bigint!
}

"""
aggregated selection of "residents_services"
"""
type residents_services_aggregate {
  aggregate: residents_services_aggregate_fields
  nodes: [residents_services!]!
}

"""
aggregate fields of "residents_services"
"""
type residents_services_aggregate_fields {
  avg: residents_services_avg_fields
  count(columns: [residents_services_select_column!], distinct: Boolean): Int
  max: residents_services_max_fields
  min: residents_services_min_fields
  stddev: residents_services_stddev_fields
  stddev_pop: residents_services_stddev_pop_fields
  stddev_samp: residents_services_stddev_samp_fields
  sum: residents_services_sum_fields
  var_pop: residents_services_var_pop_fields
  var_samp: residents_services_var_samp_fields
  variance: residents_services_variance_fields
}

"""
order by aggregate values of table "residents_services"
"""
input residents_services_aggregate_order_by {
  avg: residents_services_avg_order_by
  count: order_by
  max: residents_services_max_order_by
  min: residents_services_min_order_by
  stddev: residents_services_stddev_order_by
  stddev_pop: residents_services_stddev_pop_order_by
  stddev_samp: residents_services_stddev_samp_order_by
  sum: residents_services_sum_order_by
  var_pop: residents_services_var_pop_order_by
  var_samp: residents_services_var_samp_order_by
  variance: residents_services_variance_order_by
}

"""
input type for inserting array relation for remote table "residents_services"
"""
input residents_services_arr_rel_insert_input {
  data: [residents_services_insert_input!]!
  on_conflict: residents_services_on_conflict
}

"""aggregate avg on columns"""
type residents_services_avg_fields {
  property_id: Float
  resident_id: Float
  service_id: Float
}

"""
order by avg() on columns of table "residents_services"
"""
input residents_services_avg_order_by {
  property_id: order_by
  resident_id: order_by
  service_id: order_by
}

"""
Boolean expression to filter rows from the table "residents_services". All fields are combined with a logical 'AND'.
"""
input residents_services_bool_exp {
  _and: [residents_services_bool_exp]
  _not: residents_services_bool_exp
  _or: [residents_services_bool_exp]
  date_moved_in: timestamptz_comparison_exp
  date_provided: timestamptz_comparison_exp
  date_requested: timestamptz_comparison_exp
  other_details: String_comparison_exp
  property: properties_bool_exp
  property_id: bigint_comparison_exp
  resident: residents_bool_exp
  resident_id: bigint_comparison_exp
  service: services_bool_exp
  service_id: bigint_comparison_exp
}

"""
unique or primary key constraints on table "residents_services"
"""
enum residents_services_constraint {
  """unique or primary key constraint"""
  idx_18675_sqlite_autoindex_residents_services_1
}

"""
input type for incrementing integer column in table "residents_services"
"""
input residents_services_inc_input {
  property_id: bigint
  resident_id: bigint
  service_id: bigint
}

"""
input type for inserting data into table "residents_services"
"""
input residents_services_insert_input {
  date_moved_in: timestamptz
  date_provided: timestamptz
  date_requested: timestamptz
  other_details: String
  property: properties_obj_rel_insert_input
  property_id: bigint
  resident: residents_obj_rel_insert_input
  resident_id: bigint
  service: services_obj_rel_insert_input
  service_id: bigint
}

"""aggregate max on columns"""
type residents_services_max_fields {
  date_moved_in: timestamptz
  date_provided: timestamptz
  date_requested: timestamptz
  other_details: String
  property_id: bigint
  resident_id: bigint
  service_id: bigint
}

"""
order by max() on columns of table "residents_services"
"""
input residents_services_max_order_by {
  date_moved_in: order_by
  date_provided: order_by
  date_requested: order_by
  other_details: order_by
  property_id: order_by
  resident_id: order_by
  service_id: order_by
}

"""aggregate min on columns"""
type residents_services_min_fields {
  date_moved_in: timestamptz
  date_provided: timestamptz
  date_requested: timestamptz
  other_details: String
  property_id: bigint
  resident_id: bigint
  service_id: bigint
}

"""
order by min() on columns of table "residents_services"
"""
input residents_services_min_order_by {
  date_moved_in: order_by
  date_provided: order_by
  date_requested: order_by
  other_details: order_by
  property_id: order_by
  resident_id: order_by
  service_id: order_by
}

"""
response of any mutation on the table "residents_services"
"""
type residents_services_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [residents_services!]!
}

"""
input type for inserting object relation for remote table "residents_services"
"""
input residents_services_obj_rel_insert_input {
  data: residents_services_insert_input!
  on_conflict: residents_services_on_conflict
}

"""
on conflict condition type for table "residents_services"
"""
input residents_services_on_conflict {
  constraint: residents_services_constraint!
  update_columns: [residents_services_update_column!]!
  where: residents_services_bool_exp
}

"""
ordering options when selecting data from "residents_services"
"""
input residents_services_order_by {
  date_moved_in: order_by
  date_provided: order_by
  date_requested: order_by
  other_details: order_by
  property: properties_order_by
  property_id: order_by
  resident: residents_order_by
  resident_id: order_by
  service: services_order_by
  service_id: order_by
}

"""
primary key columns input for table: "residents_services"
"""
input residents_services_pk_columns_input {
  resident_id: bigint!
  service_id: bigint!
}

"""
select columns of table "residents_services"
"""
enum residents_services_select_column {
  """column name"""
  date_moved_in

  """column name"""
  date_provided

  """column name"""
  date_requested

  """column name"""
  other_details

  """column name"""
  property_id

  """column name"""
  resident_id

  """column name"""
  service_id
}

"""
input type for updating data in table "residents_services"
"""
input residents_services_set_input {
  date_moved_in: timestamptz
  date_provided: timestamptz
  date_requested: timestamptz
  other_details: String
  property_id: bigint
  resident_id: bigint
  service_id: bigint
}

"""aggregate stddev on columns"""
type residents_services_stddev_fields {
  property_id: Float
  resident_id: Float
  service_id: Float
}

"""
order by stddev() on columns of table "residents_services"
"""
input residents_services_stddev_order_by {
  property_id: order_by
  resident_id: order_by
  service_id: order_by
}

"""aggregate stddev_pop on columns"""
type residents_services_stddev_pop_fields {
  property_id: Float
  resident_id: Float
  service_id: Float
}

"""
order by stddev_pop() on columns of table "residents_services"
"""
input residents_services_stddev_pop_order_by {
  property_id: order_by
  resident_id: order_by
  service_id: order_by
}

"""aggregate stddev_samp on columns"""
type residents_services_stddev_samp_fields {
  property_id: Float
  resident_id: Float
  service_id: Float
}

"""
order by stddev_samp() on columns of table "residents_services"
"""
input residents_services_stddev_samp_order_by {
  property_id: order_by
  resident_id: order_by
  service_id: order_by
}

"""aggregate sum on columns"""
type residents_services_sum_fields {
  property_id: bigint
  resident_id: bigint
  service_id: bigint
}

"""
order by sum() on columns of table "residents_services"
"""
input residents_services_sum_order_by {
  property_id: order_by
  resident_id: order_by
  service_id: order_by
}

"""
update columns of table "residents_services"
"""
enum residents_services_update_column {
  """column name"""
  date_moved_in

  """column name"""
  date_provided

  """column name"""
  date_requested

  """column name"""
  other_details

  """column name"""
  property_id

  """column name"""
  resident_id

  """column name"""
  service_id
}

"""aggregate var_pop on columns"""
type residents_services_var_pop_fields {
  property_id: Float
  resident_id: Float
  service_id: Float
}

"""
order by var_pop() on columns of table "residents_services"
"""
input residents_services_var_pop_order_by {
  property_id: order_by
  resident_id: order_by
  service_id: order_by
}

"""aggregate var_samp on columns"""
type residents_services_var_samp_fields {
  property_id: Float
  resident_id: Float
  service_id: Float
}

"""
order by var_samp() on columns of table "residents_services"
"""
input residents_services_var_samp_order_by {
  property_id: order_by
  resident_id: order_by
  service_id: order_by
}

"""aggregate variance on columns"""
type residents_services_variance_fields {
  property_id: Float
  resident_id: Float
  service_id: Float
}

"""
order by variance() on columns of table "residents_services"
"""
input residents_services_variance_order_by {
  property_id: order_by
  resident_id: order_by
  service_id: order_by
}

"""
input type for updating data in table "residents"
"""
input residents_set_input {
  date_moved_in: timestamptz
  date_moved_out: timestamptz
  other_details: String
  property_id: bigint
  resident_id: bigint
}

"""aggregate stddev on columns"""
type residents_stddev_fields {
  property_id: Float
  resident_id: Float
}

"""
order by stddev() on columns of table "residents"
"""
input residents_stddev_order_by {
  property_id: order_by
  resident_id: order_by
}

"""aggregate stddev_pop on columns"""
type residents_stddev_pop_fields {
  property_id: Float
  resident_id: Float
}

"""
order by stddev_pop() on columns of table "residents"
"""
input residents_stddev_pop_order_by {
  property_id: order_by
  resident_id: order_by
}

"""aggregate stddev_samp on columns"""
type residents_stddev_samp_fields {
  property_id: Float
  resident_id: Float
}

"""
order by stddev_samp() on columns of table "residents"
"""
input residents_stddev_samp_order_by {
  property_id: order_by
  resident_id: order_by
}

"""aggregate sum on columns"""
type residents_sum_fields {
  property_id: bigint
  resident_id: bigint
}

"""
order by sum() on columns of table "residents"
"""
input residents_sum_order_by {
  property_id: order_by
  resident_id: order_by
}

"""
update columns of table "residents"
"""
enum residents_update_column {
  """column name"""
  date_moved_in

  """column name"""
  date_moved_out

  """column name"""
  other_details

  """column name"""
  property_id

  """column name"""
  resident_id
}

"""aggregate var_pop on columns"""
type residents_var_pop_fields {
  property_id: Float
  resident_id: Float
}

"""
order by var_pop() on columns of table "residents"
"""
input residents_var_pop_order_by {
  property_id: order_by
  resident_id: order_by
}

"""aggregate var_samp on columns"""
type residents_var_samp_fields {
  property_id: Float
  resident_id: Float
}

"""
order by var_samp() on columns of table "residents"
"""
input residents_var_samp_order_by {
  property_id: order_by
  resident_id: order_by
}

"""aggregate variance on columns"""
type residents_variance_fields {
  property_id: Float
  resident_id: Float
}

"""
order by variance() on columns of table "residents"
"""
input residents_variance_order_by {
  property_id: order_by
  resident_id: order_by
}

"""
columns and relationships of "services"
"""
type services {
  """An object relationship"""
  organization: organizations
  organization_id: bigint

  """An array relationship"""
  residents_services(
    """distinct select on columns"""
    distinct_on: [residents_services_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [residents_services_order_by!]

    """filter the rows returned"""
    where: residents_services_bool_exp
  ): [residents_services!]!

  """An aggregated array relationship"""
  residents_services_aggregate(
    """distinct select on columns"""
    distinct_on: [residents_services_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [residents_services_order_by!]

    """filter the rows returned"""
    where: residents_services_bool_exp
  ): residents_services_aggregate!
  service_details: String
  service_id: bigint!
  service_type_code: String
}

"""
aggregated selection of "services"
"""
type services_aggregate {
  aggregate: services_aggregate_fields
  nodes: [services!]!
}

"""
aggregate fields of "services"
"""
type services_aggregate_fields {
  avg: services_avg_fields
  count(columns: [services_select_column!], distinct: Boolean): Int
  max: services_max_fields
  min: services_min_fields
  stddev: services_stddev_fields
  stddev_pop: services_stddev_pop_fields
  stddev_samp: services_stddev_samp_fields
  sum: services_sum_fields
  var_pop: services_var_pop_fields
  var_samp: services_var_samp_fields
  variance: services_variance_fields
}

"""
order by aggregate values of table "services"
"""
input services_aggregate_order_by {
  avg: services_avg_order_by
  count: order_by
  max: services_max_order_by
  min: services_min_order_by
  stddev: services_stddev_order_by
  stddev_pop: services_stddev_pop_order_by
  stddev_samp: services_stddev_samp_order_by
  sum: services_sum_order_by
  var_pop: services_var_pop_order_by
  var_samp: services_var_samp_order_by
  variance: services_variance_order_by
}

"""
input type for inserting array relation for remote table "services"
"""
input services_arr_rel_insert_input {
  data: [services_insert_input!]!
  on_conflict: services_on_conflict
}

"""aggregate avg on columns"""
type services_avg_fields {
  organization_id: Float
  service_id: Float
}

"""
order by avg() on columns of table "services"
"""
input services_avg_order_by {
  organization_id: order_by
  service_id: order_by
}

"""
Boolean expression to filter rows from the table "services". All fields are combined with a logical 'AND'.
"""
input services_bool_exp {
  _and: [services_bool_exp]
  _not: services_bool_exp
  _or: [services_bool_exp]
  organization: organizations_bool_exp
  organization_id: bigint_comparison_exp
  residents_services: residents_services_bool_exp
  service_details: String_comparison_exp
  service_id: bigint_comparison_exp
  service_type_code: String_comparison_exp
}

"""
unique or primary key constraints on table "services"
"""
enum services_constraint {
  """unique or primary key constraint"""
  idx_18669_services_pkey
}

"""
input type for incrementing integer column in table "services"
"""
input services_inc_input {
  organization_id: bigint
  service_id: bigint
}

"""
input type for inserting data into table "services"
"""
input services_insert_input {
  organization: organizations_obj_rel_insert_input
  organization_id: bigint
  residents_services: residents_services_arr_rel_insert_input
  service_details: String
  service_id: bigint
  service_type_code: String
}

"""aggregate max on columns"""
type services_max_fields {
  organization_id: bigint
  service_details: String
  service_id: bigint
  service_type_code: String
}

"""
order by max() on columns of table "services"
"""
input services_max_order_by {
  organization_id: order_by
  service_details: order_by
  service_id: order_by
  service_type_code: order_by
}

"""aggregate min on columns"""
type services_min_fields {
  organization_id: bigint
  service_details: String
  service_id: bigint
  service_type_code: String
}

"""
order by min() on columns of table "services"
"""
input services_min_order_by {
  organization_id: order_by
  service_details: order_by
  service_id: order_by
  service_type_code: order_by
}

"""
response of any mutation on the table "services"
"""
type services_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [services!]!
}

"""
input type for inserting object relation for remote table "services"
"""
input services_obj_rel_insert_input {
  data: services_insert_input!
  on_conflict: services_on_conflict
}

"""
on conflict condition type for table "services"
"""
input services_on_conflict {
  constraint: services_constraint!
  update_columns: [services_update_column!]!
  where: services_bool_exp
}

"""
ordering options when selecting data from "services"
"""
input services_order_by {
  organization: organizations_order_by
  organization_id: order_by
  residents_services_aggregate: residents_services_aggregate_order_by
  service_details: order_by
  service_id: order_by
  service_type_code: order_by
}

"""
primary key columns input for table: "services"
"""
input services_pk_columns_input {
  service_id: bigint!
}

"""
select columns of table "services"
"""
enum services_select_column {
  """column name"""
  organization_id

  """column name"""
  service_details

  """column name"""
  service_id

  """column name"""
  service_type_code
}

"""
input type for updating data in table "services"
"""
input services_set_input {
  organization_id: bigint
  service_details: String
  service_id: bigint
  service_type_code: String
}

"""aggregate stddev on columns"""
type services_stddev_fields {
  organization_id: Float
  service_id: Float
}

"""
order by stddev() on columns of table "services"
"""
input services_stddev_order_by {
  organization_id: order_by
  service_id: order_by
}

"""aggregate stddev_pop on columns"""
type services_stddev_pop_fields {
  organization_id: Float
  service_id: Float
}

"""
order by stddev_pop() on columns of table "services"
"""
input services_stddev_pop_order_by {
  organization_id: order_by
  service_id: order_by
}

"""aggregate stddev_samp on columns"""
type services_stddev_samp_fields {
  organization_id: Float
  service_id: Float
}

"""
order by stddev_samp() on columns of table "services"
"""
input services_stddev_samp_order_by {
  organization_id: order_by
  service_id: order_by
}

"""aggregate sum on columns"""
type services_sum_fields {
  organization_id: bigint
  service_id: bigint
}

"""
order by sum() on columns of table "services"
"""
input services_sum_order_by {
  organization_id: order_by
  service_id: order_by
}

"""
update columns of table "services"
"""
enum services_update_column {
  """column name"""
  organization_id

  """column name"""
  service_details

  """column name"""
  service_id

  """column name"""
  service_type_code
}

"""aggregate var_pop on columns"""
type services_var_pop_fields {
  organization_id: Float
  service_id: Float
}

"""
order by var_pop() on columns of table "services"
"""
input services_var_pop_order_by {
  organization_id: order_by
  service_id: order_by
}

"""aggregate var_samp on columns"""
type services_var_samp_fields {
  organization_id: Float
  service_id: Float
}

"""
order by var_samp() on columns of table "services"
"""
input services_var_samp_order_by {
  organization_id: order_by
  service_id: order_by
}

"""aggregate variance on columns"""
type services_variance_fields {
  organization_id: Float
  service_id: Float
}

"""
order by variance() on columns of table "services"
"""
input services_variance_order_by {
  organization_id: order_by
  service_id: order_by
}

"""
expression to compare columns of type String. All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String
  _ilike: String
  _in: [String!]
  _is_null: Boolean
  _like: String
  _lt: String
  _lte: String
  _neq: String
  _nilike: String
  _nin: [String!]
  _nlike: String
  _nsimilar: String
  _similar: String
}

"""subscription root"""
type subscription_root {
  """
  fetch data from the table: "customer_event_notes"
  """
  customer_event_notes(
    """distinct select on columns"""
    distinct_on: [customer_event_notes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [customer_event_notes_order_by!]

    """filter the rows returned"""
    where: customer_event_notes_bool_exp
  ): [customer_event_notes!]!

  """
  fetch aggregated fields from the table: "customer_event_notes"
  """
  customer_event_notes_aggregate(
    """distinct select on columns"""
    distinct_on: [customer_event_notes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [customer_event_notes_order_by!]

    """filter the rows returned"""
    where: customer_event_notes_bool_exp
  ): customer_event_notes_aggregate!

  """
  fetch data from the table: "customer_event_notes" using primary key columns
  """
  customer_event_notes_by_pk(customer_event_note_id: bigint!): customer_event_notes

  """
  fetch data from the table: "customer_events"
  """
  customer_events(
    """distinct select on columns"""
    distinct_on: [customer_events_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [customer_events_order_by!]

    """filter the rows returned"""
    where: customer_events_bool_exp
  ): [customer_events!]!

  """
  fetch aggregated fields from the table: "customer_events"
  """
  customer_events_aggregate(
    """distinct select on columns"""
    distinct_on: [customer_events_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [customer_events_order_by!]

    """filter the rows returned"""
    where: customer_events_bool_exp
  ): customer_events_aggregate!

  """fetch data from the table: "customer_events" using primary key columns"""
  customer_events_by_pk(customer_event_id: bigint!): customer_events

  """
  fetch data from the table: "customers"
  """
  customers(
    """distinct select on columns"""
    distinct_on: [customers_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [customers_order_by!]

    """filter the rows returned"""
    where: customers_bool_exp
  ): [customers!]!

  """
  fetch aggregated fields from the table: "customers"
  """
  customers_aggregate(
    """distinct select on columns"""
    distinct_on: [customers_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [customers_order_by!]

    """filter the rows returned"""
    where: customers_bool_exp
  ): customers_aggregate!

  """fetch data from the table: "customers" using primary key columns"""
  customers_by_pk(customer_id: bigint!): customers

  """
  fetch data from the table: "organizations"
  """
  organizations(
    """distinct select on columns"""
    distinct_on: [organizations_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [organizations_order_by!]

    """filter the rows returned"""
    where: organizations_bool_exp
  ): [organizations!]!

  """
  fetch aggregated fields from the table: "organizations"
  """
  organizations_aggregate(
    """distinct select on columns"""
    distinct_on: [organizations_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [organizations_order_by!]

    """filter the rows returned"""
    where: organizations_bool_exp
  ): organizations_aggregate!

  """fetch data from the table: "organizations" using primary key columns"""
  organizations_by_pk(organization_id: bigint!): organizations

  """
  fetch data from the table: "properties"
  """
  properties(
    """distinct select on columns"""
    distinct_on: [properties_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [properties_order_by!]

    """filter the rows returned"""
    where: properties_bool_exp
  ): [properties!]!

  """
  fetch aggregated fields from the table: "properties"
  """
  properties_aggregate(
    """distinct select on columns"""
    distinct_on: [properties_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [properties_order_by!]

    """filter the rows returned"""
    where: properties_bool_exp
  ): properties_aggregate!

  """fetch data from the table: "properties" using primary key columns"""
  properties_by_pk(property_id: bigint!): properties

  """
  fetch data from the table: "residents"
  """
  residents(
    """distinct select on columns"""
    distinct_on: [residents_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [residents_order_by!]

    """filter the rows returned"""
    where: residents_bool_exp
  ): [residents!]!

  """
  fetch aggregated fields from the table: "residents"
  """
  residents_aggregate(
    """distinct select on columns"""
    distinct_on: [residents_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [residents_order_by!]

    """filter the rows returned"""
    where: residents_bool_exp
  ): residents_aggregate!

  """fetch data from the table: "residents" using primary key columns"""
  residents_by_pk(date_moved_in: timestamptz!, property_id: bigint!, resident_id: bigint!): residents

  """
  fetch data from the table: "residents_services"
  """
  residents_services(
    """distinct select on columns"""
    distinct_on: [residents_services_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [residents_services_order_by!]

    """filter the rows returned"""
    where: residents_services_bool_exp
  ): [residents_services!]!

  """
  fetch aggregated fields from the table: "residents_services"
  """
  residents_services_aggregate(
    """distinct select on columns"""
    distinct_on: [residents_services_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [residents_services_order_by!]

    """filter the rows returned"""
    where: residents_services_bool_exp
  ): residents_services_aggregate!

  """
  fetch data from the table: "residents_services" using primary key columns
  """
  residents_services_by_pk(resident_id: bigint!, service_id: bigint!): residents_services

  """
  fetch data from the table: "services"
  """
  services(
    """distinct select on columns"""
    distinct_on: [services_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [services_order_by!]

    """filter the rows returned"""
    where: services_bool_exp
  ): [services!]!

  """
  fetch aggregated fields from the table: "services"
  """
  services_aggregate(
    """distinct select on columns"""
    distinct_on: [services_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [services_order_by!]

    """filter the rows returned"""
    where: services_bool_exp
  ): services_aggregate!

  """fetch data from the table: "services" using primary key columns"""
  services_by_pk(service_id: bigint!): services

  """
  fetch data from the table: "things"
  """
  things(
    """distinct select on columns"""
    distinct_on: [things_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [things_order_by!]

    """filter the rows returned"""
    where: things_bool_exp
  ): [things!]!

  """
  fetch aggregated fields from the table: "things"
  """
  things_aggregate(
    """distinct select on columns"""
    distinct_on: [things_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [things_order_by!]

    """filter the rows returned"""
    where: things_bool_exp
  ): things_aggregate!

  """fetch data from the table: "things" using primary key columns"""
  things_by_pk(thing_id: bigint!): things

  """
  fetch data from the table: "timed_locations_of_things"
  """
  timed_locations_of_things(
    """distinct select on columns"""
    distinct_on: [timed_locations_of_things_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [timed_locations_of_things_order_by!]

    """filter the rows returned"""
    where: timed_locations_of_things_bool_exp
  ): [timed_locations_of_things!]!

  """
  fetch aggregated fields from the table: "timed_locations_of_things"
  """
  timed_locations_of_things_aggregate(
    """distinct select on columns"""
    distinct_on: [timed_locations_of_things_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [timed_locations_of_things_order_by!]

    """filter the rows returned"""
    where: timed_locations_of_things_bool_exp
  ): timed_locations_of_things_aggregate!

  """
  fetch data from the table: "timed_status_of_things"
  """
  timed_status_of_things(
    """distinct select on columns"""
    distinct_on: [timed_status_of_things_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [timed_status_of_things_order_by!]

    """filter the rows returned"""
    where: timed_status_of_things_bool_exp
  ): [timed_status_of_things!]!

  """
  fetch aggregated fields from the table: "timed_status_of_things"
  """
  timed_status_of_things_aggregate(
    """distinct select on columns"""
    distinct_on: [timed_status_of_things_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [timed_status_of_things_order_by!]

    """filter the rows returned"""
    where: timed_status_of_things_bool_exp
  ): timed_status_of_things_aggregate!
}

"""
columns and relationships of "things"
"""
type things {
  """An array relationship"""
  customer_events(
    """distinct select on columns"""
    distinct_on: [customer_events_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [customer_events_order_by!]

    """filter the rows returned"""
    where: customer_events_bool_exp
  ): [customer_events!]!

  """An aggregated array relationship"""
  customer_events_aggregate(
    """distinct select on columns"""
    distinct_on: [customer_events_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [customer_events_order_by!]

    """filter the rows returned"""
    where: customer_events_bool_exp
  ): customer_events_aggregate!

  """An object relationship"""
  organization: organizations
  organization_id: bigint
  service_details: String
  service_type_code: String
  thing_id: bigint!

  """An array relationship"""
  timed_locations_of_things(
    """distinct select on columns"""
    distinct_on: [timed_locations_of_things_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [timed_locations_of_things_order_by!]

    """filter the rows returned"""
    where: timed_locations_of_things_bool_exp
  ): [timed_locations_of_things!]!

  """An aggregated array relationship"""
  timed_locations_of_things_aggregate(
    """distinct select on columns"""
    distinct_on: [timed_locations_of_things_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [timed_locations_of_things_order_by!]

    """filter the rows returned"""
    where: timed_locations_of_things_bool_exp
  ): timed_locations_of_things_aggregate!

  """An array relationship"""
  timed_status_of_things(
    """distinct select on columns"""
    distinct_on: [timed_status_of_things_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [timed_status_of_things_order_by!]

    """filter the rows returned"""
    where: timed_status_of_things_bool_exp
  ): [timed_status_of_things!]!

  """An aggregated array relationship"""
  timed_status_of_things_aggregate(
    """distinct select on columns"""
    distinct_on: [timed_status_of_things_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [timed_status_of_things_order_by!]

    """filter the rows returned"""
    where: timed_status_of_things_bool_exp
  ): timed_status_of_things_aggregate!
  type_of_thing_code: String
}

"""
aggregated selection of "things"
"""
type things_aggregate {
  aggregate: things_aggregate_fields
  nodes: [things!]!
}

"""
aggregate fields of "things"
"""
type things_aggregate_fields {
  avg: things_avg_fields
  count(columns: [things_select_column!], distinct: Boolean): Int
  max: things_max_fields
  min: things_min_fields
  stddev: things_stddev_fields
  stddev_pop: things_stddev_pop_fields
  stddev_samp: things_stddev_samp_fields
  sum: things_sum_fields
  var_pop: things_var_pop_fields
  var_samp: things_var_samp_fields
  variance: things_variance_fields
}

"""
order by aggregate values of table "things"
"""
input things_aggregate_order_by {
  avg: things_avg_order_by
  count: order_by
  max: things_max_order_by
  min: things_min_order_by
  stddev: things_stddev_order_by
  stddev_pop: things_stddev_pop_order_by
  stddev_samp: things_stddev_samp_order_by
  sum: things_sum_order_by
  var_pop: things_var_pop_order_by
  var_samp: things_var_samp_order_by
  variance: things_variance_order_by
}

"""
input type for inserting array relation for remote table "things"
"""
input things_arr_rel_insert_input {
  data: [things_insert_input!]!
  on_conflict: things_on_conflict
}

"""aggregate avg on columns"""
type things_avg_fields {
  organization_id: Float
  thing_id: Float
}

"""
order by avg() on columns of table "things"
"""
input things_avg_order_by {
  organization_id: order_by
  thing_id: order_by
}

"""
Boolean expression to filter rows from the table "things". All fields are combined with a logical 'AND'.
"""
input things_bool_exp {
  _and: [things_bool_exp]
  _not: things_bool_exp
  _or: [things_bool_exp]
  customer_events: customer_events_bool_exp
  organization: organizations_bool_exp
  organization_id: bigint_comparison_exp
  service_details: String_comparison_exp
  service_type_code: String_comparison_exp
  thing_id: bigint_comparison_exp
  timed_locations_of_things: timed_locations_of_things_bool_exp
  timed_status_of_things: timed_status_of_things_bool_exp
  type_of_thing_code: String_comparison_exp
}

"""
unique or primary key constraints on table "things"
"""
enum things_constraint {
  """unique or primary key constraint"""
  idx_18681_things_pkey
}

"""
input type for incrementing integer column in table "things"
"""
input things_inc_input {
  organization_id: bigint
  thing_id: bigint
}

"""
input type for inserting data into table "things"
"""
input things_insert_input {
  customer_events: customer_events_arr_rel_insert_input
  organization: organizations_obj_rel_insert_input
  organization_id: bigint
  service_details: String
  service_type_code: String
  thing_id: bigint
  timed_locations_of_things: timed_locations_of_things_arr_rel_insert_input
  timed_status_of_things: timed_status_of_things_arr_rel_insert_input
  type_of_thing_code: String
}

"""aggregate max on columns"""
type things_max_fields {
  organization_id: bigint
  service_details: String
  service_type_code: String
  thing_id: bigint
  type_of_thing_code: String
}

"""
order by max() on columns of table "things"
"""
input things_max_order_by {
  organization_id: order_by
  service_details: order_by
  service_type_code: order_by
  thing_id: order_by
  type_of_thing_code: order_by
}

"""aggregate min on columns"""
type things_min_fields {
  organization_id: bigint
  service_details: String
  service_type_code: String
  thing_id: bigint
  type_of_thing_code: String
}

"""
order by min() on columns of table "things"
"""
input things_min_order_by {
  organization_id: order_by
  service_details: order_by
  service_type_code: order_by
  thing_id: order_by
  type_of_thing_code: order_by
}

"""
response of any mutation on the table "things"
"""
type things_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [things!]!
}

"""
input type for inserting object relation for remote table "things"
"""
input things_obj_rel_insert_input {
  data: things_insert_input!
  on_conflict: things_on_conflict
}

"""
on conflict condition type for table "things"
"""
input things_on_conflict {
  constraint: things_constraint!
  update_columns: [things_update_column!]!
  where: things_bool_exp
}

"""
ordering options when selecting data from "things"
"""
input things_order_by {
  customer_events_aggregate: customer_events_aggregate_order_by
  organization: organizations_order_by
  organization_id: order_by
  service_details: order_by
  service_type_code: order_by
  thing_id: order_by
  timed_locations_of_things_aggregate: timed_locations_of_things_aggregate_order_by
  timed_status_of_things_aggregate: timed_status_of_things_aggregate_order_by
  type_of_thing_code: order_by
}

"""
primary key columns input for table: "things"
"""
input things_pk_columns_input {
  thing_id: bigint!
}

"""
select columns of table "things"
"""
enum things_select_column {
  """column name"""
  organization_id

  """column name"""
  service_details

  """column name"""
  service_type_code

  """column name"""
  thing_id

  """column name"""
  type_of_thing_code
}

"""
input type for updating data in table "things"
"""
input things_set_input {
  organization_id: bigint
  service_details: String
  service_type_code: String
  thing_id: bigint
  type_of_thing_code: String
}

"""aggregate stddev on columns"""
type things_stddev_fields {
  organization_id: Float
  thing_id: Float
}

"""
order by stddev() on columns of table "things"
"""
input things_stddev_order_by {
  organization_id: order_by
  thing_id: order_by
}

"""aggregate stddev_pop on columns"""
type things_stddev_pop_fields {
  organization_id: Float
  thing_id: Float
}

"""
order by stddev_pop() on columns of table "things"
"""
input things_stddev_pop_order_by {
  organization_id: order_by
  thing_id: order_by
}

"""aggregate stddev_samp on columns"""
type things_stddev_samp_fields {
  organization_id: Float
  thing_id: Float
}

"""
order by stddev_samp() on columns of table "things"
"""
input things_stddev_samp_order_by {
  organization_id: order_by
  thing_id: order_by
}

"""aggregate sum on columns"""
type things_sum_fields {
  organization_id: bigint
  thing_id: bigint
}

"""
order by sum() on columns of table "things"
"""
input things_sum_order_by {
  organization_id: order_by
  thing_id: order_by
}

"""
update columns of table "things"
"""
enum things_update_column {
  """column name"""
  organization_id

  """column name"""
  service_details

  """column name"""
  service_type_code

  """column name"""
  thing_id

  """column name"""
  type_of_thing_code
}

"""aggregate var_pop on columns"""
type things_var_pop_fields {
  organization_id: Float
  thing_id: Float
}

"""
order by var_pop() on columns of table "things"
"""
input things_var_pop_order_by {
  organization_id: order_by
  thing_id: order_by
}

"""aggregate var_samp on columns"""
type things_var_samp_fields {
  organization_id: Float
  thing_id: Float
}

"""
order by var_samp() on columns of table "things"
"""
input things_var_samp_order_by {
  organization_id: order_by
  thing_id: order_by
}

"""aggregate variance on columns"""
type things_variance_fields {
  organization_id: Float
  thing_id: Float
}

"""
order by variance() on columns of table "things"
"""
input things_variance_order_by {
  organization_id: order_by
  thing_id: order_by
}

"""
columns and relationships of "timed_locations_of_things"
"""
type timed_locations_of_things {
  date_and_time: timestamptz
  location_code: String

  """An object relationship"""
  thing: things
  thing_id: bigint
}

"""
aggregated selection of "timed_locations_of_things"
"""
type timed_locations_of_things_aggregate {
  aggregate: timed_locations_of_things_aggregate_fields
  nodes: [timed_locations_of_things!]!
}

"""
aggregate fields of "timed_locations_of_things"
"""
type timed_locations_of_things_aggregate_fields {
  avg: timed_locations_of_things_avg_fields
  count(columns: [timed_locations_of_things_select_column!], distinct: Boolean): Int
  max: timed_locations_of_things_max_fields
  min: timed_locations_of_things_min_fields
  stddev: timed_locations_of_things_stddev_fields
  stddev_pop: timed_locations_of_things_stddev_pop_fields
  stddev_samp: timed_locations_of_things_stddev_samp_fields
  sum: timed_locations_of_things_sum_fields
  var_pop: timed_locations_of_things_var_pop_fields
  var_samp: timed_locations_of_things_var_samp_fields
  variance: timed_locations_of_things_variance_fields
}

"""
order by aggregate values of table "timed_locations_of_things"
"""
input timed_locations_of_things_aggregate_order_by {
  avg: timed_locations_of_things_avg_order_by
  count: order_by
  max: timed_locations_of_things_max_order_by
  min: timed_locations_of_things_min_order_by
  stddev: timed_locations_of_things_stddev_order_by
  stddev_pop: timed_locations_of_things_stddev_pop_order_by
  stddev_samp: timed_locations_of_things_stddev_samp_order_by
  sum: timed_locations_of_things_sum_order_by
  var_pop: timed_locations_of_things_var_pop_order_by
  var_samp: timed_locations_of_things_var_samp_order_by
  variance: timed_locations_of_things_variance_order_by
}

"""
input type for inserting array relation for remote table "timed_locations_of_things"
"""
input timed_locations_of_things_arr_rel_insert_input {
  data: [timed_locations_of_things_insert_input!]!
  on_conflict: timed_locations_of_things_on_conflict
}

"""aggregate avg on columns"""
type timed_locations_of_things_avg_fields {
  thing_id: Float
}

"""
order by avg() on columns of table "timed_locations_of_things"
"""
input timed_locations_of_things_avg_order_by {
  thing_id: order_by
}

"""
Boolean expression to filter rows from the table "timed_locations_of_things". All fields are combined with a logical 'AND'.
"""
input timed_locations_of_things_bool_exp {
  _and: [timed_locations_of_things_bool_exp]
  _not: timed_locations_of_things_bool_exp
  _or: [timed_locations_of_things_bool_exp]
  date_and_time: timestamptz_comparison_exp
  location_code: String_comparison_exp
  thing: things_bool_exp
  thing_id: bigint_comparison_exp
}

"""
unique or primary key constraints on table "timed_locations_of_things"
"""
enum timed_locations_of_things_constraint {
  """unique or primary key constraint"""
  idx_18702_sqlite_autoindex_timed_locations_of_things_1
}

"""
input type for incrementing integer column in table "timed_locations_of_things"
"""
input timed_locations_of_things_inc_input {
  thing_id: bigint
}

"""
input type for inserting data into table "timed_locations_of_things"
"""
input timed_locations_of_things_insert_input {
  date_and_time: timestamptz
  location_code: String
  thing: things_obj_rel_insert_input
  thing_id: bigint
}

"""aggregate max on columns"""
type timed_locations_of_things_max_fields {
  date_and_time: timestamptz
  location_code: String
  thing_id: bigint
}

"""
order by max() on columns of table "timed_locations_of_things"
"""
input timed_locations_of_things_max_order_by {
  date_and_time: order_by
  location_code: order_by
  thing_id: order_by
}

"""aggregate min on columns"""
type timed_locations_of_things_min_fields {
  date_and_time: timestamptz
  location_code: String
  thing_id: bigint
}

"""
order by min() on columns of table "timed_locations_of_things"
"""
input timed_locations_of_things_min_order_by {
  date_and_time: order_by
  location_code: order_by
  thing_id: order_by
}

"""
response of any mutation on the table "timed_locations_of_things"
"""
type timed_locations_of_things_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [timed_locations_of_things!]!
}

"""
input type for inserting object relation for remote table "timed_locations_of_things"
"""
input timed_locations_of_things_obj_rel_insert_input {
  data: timed_locations_of_things_insert_input!
  on_conflict: timed_locations_of_things_on_conflict
}

"""
on conflict condition type for table "timed_locations_of_things"
"""
input timed_locations_of_things_on_conflict {
  constraint: timed_locations_of_things_constraint!
  update_columns: [timed_locations_of_things_update_column!]!
  where: timed_locations_of_things_bool_exp
}

"""
ordering options when selecting data from "timed_locations_of_things"
"""
input timed_locations_of_things_order_by {
  date_and_time: order_by
  location_code: order_by
  thing: things_order_by
  thing_id: order_by
}

"""
select columns of table "timed_locations_of_things"
"""
enum timed_locations_of_things_select_column {
  """column name"""
  date_and_time

  """column name"""
  location_code

  """column name"""
  thing_id
}

"""
input type for updating data in table "timed_locations_of_things"
"""
input timed_locations_of_things_set_input {
  date_and_time: timestamptz
  location_code: String
  thing_id: bigint
}

"""aggregate stddev on columns"""
type timed_locations_of_things_stddev_fields {
  thing_id: Float
}

"""
order by stddev() on columns of table "timed_locations_of_things"
"""
input timed_locations_of_things_stddev_order_by {
  thing_id: order_by
}

"""aggregate stddev_pop on columns"""
type timed_locations_of_things_stddev_pop_fields {
  thing_id: Float
}

"""
order by stddev_pop() on columns of table "timed_locations_of_things"
"""
input timed_locations_of_things_stddev_pop_order_by {
  thing_id: order_by
}

"""aggregate stddev_samp on columns"""
type timed_locations_of_things_stddev_samp_fields {
  thing_id: Float
}

"""
order by stddev_samp() on columns of table "timed_locations_of_things"
"""
input timed_locations_of_things_stddev_samp_order_by {
  thing_id: order_by
}

"""aggregate sum on columns"""
type timed_locations_of_things_sum_fields {
  thing_id: bigint
}

"""
order by sum() on columns of table "timed_locations_of_things"
"""
input timed_locations_of_things_sum_order_by {
  thing_id: order_by
}

"""
update columns of table "timed_locations_of_things"
"""
enum timed_locations_of_things_update_column {
  """column name"""
  date_and_time

  """column name"""
  location_code

  """column name"""
  thing_id
}

"""aggregate var_pop on columns"""
type timed_locations_of_things_var_pop_fields {
  thing_id: Float
}

"""
order by var_pop() on columns of table "timed_locations_of_things"
"""
input timed_locations_of_things_var_pop_order_by {
  thing_id: order_by
}

"""aggregate var_samp on columns"""
type timed_locations_of_things_var_samp_fields {
  thing_id: Float
}

"""
order by var_samp() on columns of table "timed_locations_of_things"
"""
input timed_locations_of_things_var_samp_order_by {
  thing_id: order_by
}

"""aggregate variance on columns"""
type timed_locations_of_things_variance_fields {
  thing_id: Float
}

"""
order by variance() on columns of table "timed_locations_of_things"
"""
input timed_locations_of_things_variance_order_by {
  thing_id: order_by
}

"""
columns and relationships of "timed_status_of_things"
"""
type timed_status_of_things {
  date_and_date: timestamptz
  status_of_thing_code: String

  """An object relationship"""
  thing: things
  thing_id: bigint
}

"""
aggregated selection of "timed_status_of_things"
"""
type timed_status_of_things_aggregate {
  aggregate: timed_status_of_things_aggregate_fields
  nodes: [timed_status_of_things!]!
}

"""
aggregate fields of "timed_status_of_things"
"""
type timed_status_of_things_aggregate_fields {
  avg: timed_status_of_things_avg_fields
  count(columns: [timed_status_of_things_select_column!], distinct: Boolean): Int
  max: timed_status_of_things_max_fields
  min: timed_status_of_things_min_fields
  stddev: timed_status_of_things_stddev_fields
  stddev_pop: timed_status_of_things_stddev_pop_fields
  stddev_samp: timed_status_of_things_stddev_samp_fields
  sum: timed_status_of_things_sum_fields
  var_pop: timed_status_of_things_var_pop_fields
  var_samp: timed_status_of_things_var_samp_fields
  variance: timed_status_of_things_variance_fields
}

"""
order by aggregate values of table "timed_status_of_things"
"""
input timed_status_of_things_aggregate_order_by {
  avg: timed_status_of_things_avg_order_by
  count: order_by
  max: timed_status_of_things_max_order_by
  min: timed_status_of_things_min_order_by
  stddev: timed_status_of_things_stddev_order_by
  stddev_pop: timed_status_of_things_stddev_pop_order_by
  stddev_samp: timed_status_of_things_stddev_samp_order_by
  sum: timed_status_of_things_sum_order_by
  var_pop: timed_status_of_things_var_pop_order_by
  var_samp: timed_status_of_things_var_samp_order_by
  variance: timed_status_of_things_variance_order_by
}

"""
input type for inserting array relation for remote table "timed_status_of_things"
"""
input timed_status_of_things_arr_rel_insert_input {
  data: [timed_status_of_things_insert_input!]!
  on_conflict: timed_status_of_things_on_conflict
}

"""aggregate avg on columns"""
type timed_status_of_things_avg_fields {
  thing_id: Float
}

"""
order by avg() on columns of table "timed_status_of_things"
"""
input timed_status_of_things_avg_order_by {
  thing_id: order_by
}

"""
Boolean expression to filter rows from the table "timed_status_of_things". All fields are combined with a logical 'AND'.
"""
input timed_status_of_things_bool_exp {
  _and: [timed_status_of_things_bool_exp]
  _not: timed_status_of_things_bool_exp
  _or: [timed_status_of_things_bool_exp]
  date_and_date: timestamptz_comparison_exp
  status_of_thing_code: String_comparison_exp
  thing: things_bool_exp
  thing_id: bigint_comparison_exp
}

"""
unique or primary key constraints on table "timed_status_of_things"
"""
enum timed_status_of_things_constraint {
  """unique or primary key constraint"""
  idx_18696_sqlite_autoindex_timed_status_of_things_1
}

"""
input type for incrementing integer column in table "timed_status_of_things"
"""
input timed_status_of_things_inc_input {
  thing_id: bigint
}

"""
input type for inserting data into table "timed_status_of_things"
"""
input timed_status_of_things_insert_input {
  date_and_date: timestamptz
  status_of_thing_code: String
  thing: things_obj_rel_insert_input
  thing_id: bigint
}

"""aggregate max on columns"""
type timed_status_of_things_max_fields {
  date_and_date: timestamptz
  status_of_thing_code: String
  thing_id: bigint
}

"""
order by max() on columns of table "timed_status_of_things"
"""
input timed_status_of_things_max_order_by {
  date_and_date: order_by
  status_of_thing_code: order_by
  thing_id: order_by
}

"""aggregate min on columns"""
type timed_status_of_things_min_fields {
  date_and_date: timestamptz
  status_of_thing_code: String
  thing_id: bigint
}

"""
order by min() on columns of table "timed_status_of_things"
"""
input timed_status_of_things_min_order_by {
  date_and_date: order_by
  status_of_thing_code: order_by
  thing_id: order_by
}

"""
response of any mutation on the table "timed_status_of_things"
"""
type timed_status_of_things_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [timed_status_of_things!]!
}

"""
input type for inserting object relation for remote table "timed_status_of_things"
"""
input timed_status_of_things_obj_rel_insert_input {
  data: timed_status_of_things_insert_input!
  on_conflict: timed_status_of_things_on_conflict
}

"""
on conflict condition type for table "timed_status_of_things"
"""
input timed_status_of_things_on_conflict {
  constraint: timed_status_of_things_constraint!
  update_columns: [timed_status_of_things_update_column!]!
  where: timed_status_of_things_bool_exp
}

"""
ordering options when selecting data from "timed_status_of_things"
"""
input timed_status_of_things_order_by {
  date_and_date: order_by
  status_of_thing_code: order_by
  thing: things_order_by
  thing_id: order_by
}

"""
select columns of table "timed_status_of_things"
"""
enum timed_status_of_things_select_column {
  """column name"""
  date_and_date

  """column name"""
  status_of_thing_code

  """column name"""
  thing_id
}

"""
input type for updating data in table "timed_status_of_things"
"""
input timed_status_of_things_set_input {
  date_and_date: timestamptz
  status_of_thing_code: String
  thing_id: bigint
}

"""aggregate stddev on columns"""
type timed_status_of_things_stddev_fields {
  thing_id: Float
}

"""
order by stddev() on columns of table "timed_status_of_things"
"""
input timed_status_of_things_stddev_order_by {
  thing_id: order_by
}

"""aggregate stddev_pop on columns"""
type timed_status_of_things_stddev_pop_fields {
  thing_id: Float
}

"""
order by stddev_pop() on columns of table "timed_status_of_things"
"""
input timed_status_of_things_stddev_pop_order_by {
  thing_id: order_by
}

"""aggregate stddev_samp on columns"""
type timed_status_of_things_stddev_samp_fields {
  thing_id: Float
}

"""
order by stddev_samp() on columns of table "timed_status_of_things"
"""
input timed_status_of_things_stddev_samp_order_by {
  thing_id: order_by
}

"""aggregate sum on columns"""
type timed_status_of_things_sum_fields {
  thing_id: bigint
}

"""
order by sum() on columns of table "timed_status_of_things"
"""
input timed_status_of_things_sum_order_by {
  thing_id: order_by
}

"""
update columns of table "timed_status_of_things"
"""
enum timed_status_of_things_update_column {
  """column name"""
  date_and_date

  """column name"""
  status_of_thing_code

  """column name"""
  thing_id
}

"""aggregate var_pop on columns"""
type timed_status_of_things_var_pop_fields {
  thing_id: Float
}

"""
order by var_pop() on columns of table "timed_status_of_things"
"""
input timed_status_of_things_var_pop_order_by {
  thing_id: order_by
}

"""aggregate var_samp on columns"""
type timed_status_of_things_var_samp_fields {
  thing_id: Float
}

"""
order by var_samp() on columns of table "timed_status_of_things"
"""
input timed_status_of_things_var_samp_order_by {
  thing_id: order_by
}

"""aggregate variance on columns"""
type timed_status_of_things_variance_fields {
  thing_id: Float
}

"""
order by variance() on columns of table "timed_status_of_things"
"""
input timed_status_of_things_variance_order_by {
  thing_id: order_by
}

scalar timestamptz

"""
expression to compare columns of type timestamptz. All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}
