schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""
Direct the client to resolve this field locally, either from the cache or local resolvers.
"""
directive @client(
  """
  When true, the client will never use the cache for this value. See
  https://www.apollographql.com/docs/react/essentials/local-state/#forcing-resolvers-with-clientalways-true
  """
  always: Boolean
) on FIELD | FRAGMENT_DEFINITION | INLINE_FRAGMENT

"""
Export this locally resolved field as a variable to be used in the remainder of this query. See
https://www.apollographql.com/docs/react/essentials/local-state/#using-client-fields-as-variables
"""
directive @export(
  """The variable name to export this field as."""
  as: String!
) on FIELD

"""
Specify a custom store key for this result. See
https://www.apollographql.com/docs/react/advanced/caching/#the-connection-directive
"""
directive @connection(
  """Specify the store key."""
  key: String!

  """
  An array of query argument names to include in the generated custom store key.
  """
  filter: [String!]
) on FIELD

scalar bigint

"""
expression to compare columns of type bigint. All fields are combined with logical 'AND'.
"""
input bigint_comparison_exp {
  _eq: bigint
  _gt: bigint
  _gte: bigint
  _in: [bigint!]
  _is_null: Boolean
  _lt: bigint
  _lte: bigint
  _neq: bigint
  _nin: [bigint!]
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "other_available_features"
  """
  delete_other_available_features(
    """filter the rows which have to be deleted"""
    where: other_available_features_bool_exp!
  ): other_available_features_mutation_response

  """
  delete single row from the table: "other_available_features"
  """
  delete_other_available_features_by_pk(feature_id: bigint!): other_available_features

  """
  delete data from the table: "other_property_features"
  """
  delete_other_property_features(
    """filter the rows which have to be deleted"""
    where: other_property_features_bool_exp!
  ): other_property_features_mutation_response

  """
  delete data from the table: "properties"
  """
  delete_properties(
    """filter the rows which have to be deleted"""
    where: properties_bool_exp!
  ): properties_mutation_response

  """
  delete single row from the table: "properties"
  """
  delete_properties_by_pk(property_id: bigint!): properties

  """
  delete data from the table: "ref_feature_types"
  """
  delete_ref_feature_types(
    """filter the rows which have to be deleted"""
    where: ref_feature_types_bool_exp!
  ): ref_feature_types_mutation_response

  """
  delete single row from the table: "ref_feature_types"
  """
  delete_ref_feature_types_by_pk(feature_type_code: String!): ref_feature_types

  """
  delete data from the table: "ref_property_types"
  """
  delete_ref_property_types(
    """filter the rows which have to be deleted"""
    where: ref_property_types_bool_exp!
  ): ref_property_types_mutation_response

  """
  delete single row from the table: "ref_property_types"
  """
  delete_ref_property_types_by_pk(property_type_code: String!): ref_property_types

  """
  insert data into the table: "other_available_features"
  """
  insert_other_available_features(
    """the rows to be inserted"""
    objects: [other_available_features_insert_input!]!

    """on conflict condition"""
    on_conflict: other_available_features_on_conflict
  ): other_available_features_mutation_response

  """
  insert a single row into the table: "other_available_features"
  """
  insert_other_available_features_one(
    """the row to be inserted"""
    object: other_available_features_insert_input!

    """on conflict condition"""
    on_conflict: other_available_features_on_conflict
  ): other_available_features

  """
  insert data into the table: "other_property_features"
  """
  insert_other_property_features(
    """the rows to be inserted"""
    objects: [other_property_features_insert_input!]!
  ): other_property_features_mutation_response

  """
  insert a single row into the table: "other_property_features"
  """
  insert_other_property_features_one(
    """the row to be inserted"""
    object: other_property_features_insert_input!
  ): other_property_features

  """
  insert data into the table: "properties"
  """
  insert_properties(
    """the rows to be inserted"""
    objects: [properties_insert_input!]!

    """on conflict condition"""
    on_conflict: properties_on_conflict
  ): properties_mutation_response

  """
  insert a single row into the table: "properties"
  """
  insert_properties_one(
    """the row to be inserted"""
    object: properties_insert_input!

    """on conflict condition"""
    on_conflict: properties_on_conflict
  ): properties

  """
  insert data into the table: "ref_feature_types"
  """
  insert_ref_feature_types(
    """the rows to be inserted"""
    objects: [ref_feature_types_insert_input!]!

    """on conflict condition"""
    on_conflict: ref_feature_types_on_conflict
  ): ref_feature_types_mutation_response

  """
  insert a single row into the table: "ref_feature_types"
  """
  insert_ref_feature_types_one(
    """the row to be inserted"""
    object: ref_feature_types_insert_input!

    """on conflict condition"""
    on_conflict: ref_feature_types_on_conflict
  ): ref_feature_types

  """
  insert data into the table: "ref_property_types"
  """
  insert_ref_property_types(
    """the rows to be inserted"""
    objects: [ref_property_types_insert_input!]!

    """on conflict condition"""
    on_conflict: ref_property_types_on_conflict
  ): ref_property_types_mutation_response

  """
  insert a single row into the table: "ref_property_types"
  """
  insert_ref_property_types_one(
    """the row to be inserted"""
    object: ref_property_types_insert_input!

    """on conflict condition"""
    on_conflict: ref_property_types_on_conflict
  ): ref_property_types

  """
  update data of the table: "other_available_features"
  """
  update_other_available_features(
    """increments the integer columns with given value of the filtered values"""
    _inc: other_available_features_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: other_available_features_set_input

    """filter the rows which have to be updated"""
    where: other_available_features_bool_exp!
  ): other_available_features_mutation_response

  """
  update single row of the table: "other_available_features"
  """
  update_other_available_features_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: other_available_features_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: other_available_features_set_input
    pk_columns: other_available_features_pk_columns_input!
  ): other_available_features

  """
  update data of the table: "other_property_features"
  """
  update_other_property_features(
    """increments the integer columns with given value of the filtered values"""
    _inc: other_property_features_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: other_property_features_set_input

    """filter the rows which have to be updated"""
    where: other_property_features_bool_exp!
  ): other_property_features_mutation_response

  """
  update data of the table: "properties"
  """
  update_properties(
    """increments the integer columns with given value of the filtered values"""
    _inc: properties_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: properties_set_input

    """filter the rows which have to be updated"""
    where: properties_bool_exp!
  ): properties_mutation_response

  """
  update single row of the table: "properties"
  """
  update_properties_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: properties_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: properties_set_input
    pk_columns: properties_pk_columns_input!
  ): properties

  """
  update data of the table: "ref_feature_types"
  """
  update_ref_feature_types(
    """sets the columns of the filtered rows to the given values"""
    _set: ref_feature_types_set_input

    """filter the rows which have to be updated"""
    where: ref_feature_types_bool_exp!
  ): ref_feature_types_mutation_response

  """
  update single row of the table: "ref_feature_types"
  """
  update_ref_feature_types_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: ref_feature_types_set_input
    pk_columns: ref_feature_types_pk_columns_input!
  ): ref_feature_types

  """
  update data of the table: "ref_property_types"
  """
  update_ref_property_types(
    """sets the columns of the filtered rows to the given values"""
    _set: ref_property_types_set_input

    """filter the rows which have to be updated"""
    where: ref_property_types_bool_exp!
  ): ref_property_types_mutation_response

  """
  update single row of the table: "ref_property_types"
  """
  update_ref_property_types_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: ref_property_types_set_input
    pk_columns: ref_property_types_pk_columns_input!
  ): ref_property_types
}

scalar numeric

"""
expression to compare columns of type numeric. All fields are combined with logical 'AND'.
"""
input numeric_comparison_exp {
  _eq: numeric
  _gt: numeric
  _gte: numeric
  _in: [numeric!]
  _is_null: Boolean
  _lt: numeric
  _lte: numeric
  _neq: numeric
  _nin: [numeric!]
}

"""column ordering options"""
enum order_by {
  """in the ascending order, nulls last"""
  asc

  """in the ascending order, nulls first"""
  asc_nulls_first

  """in the ascending order, nulls last"""
  asc_nulls_last

  """in the descending order, nulls first"""
  desc

  """in the descending order, nulls first"""
  desc_nulls_first

  """in the descending order, nulls last"""
  desc_nulls_last
}

"""
columns and relationships of "other_available_features"
"""
type other_available_features {
  feature_description: String
  feature_id: bigint!
  feature_name: String
  feature_type_code: String

  """An array relationship"""
  other_property_features(
    """distinct select on columns"""
    distinct_on: [other_property_features_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [other_property_features_order_by!]

    """filter the rows returned"""
    where: other_property_features_bool_exp
  ): [other_property_features!]!

  """An aggregated array relationship"""
  other_property_features_aggregate(
    """distinct select on columns"""
    distinct_on: [other_property_features_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [other_property_features_order_by!]

    """filter the rows returned"""
    where: other_property_features_bool_exp
  ): other_property_features_aggregate!

  """An object relationship"""
  ref_feature_type: ref_feature_types
}

"""
aggregated selection of "other_available_features"
"""
type other_available_features_aggregate {
  aggregate: other_available_features_aggregate_fields
  nodes: [other_available_features!]!
}

"""
aggregate fields of "other_available_features"
"""
type other_available_features_aggregate_fields {
  avg: other_available_features_avg_fields
  count(columns: [other_available_features_select_column!], distinct: Boolean): Int
  max: other_available_features_max_fields
  min: other_available_features_min_fields
  stddev: other_available_features_stddev_fields
  stddev_pop: other_available_features_stddev_pop_fields
  stddev_samp: other_available_features_stddev_samp_fields
  sum: other_available_features_sum_fields
  var_pop: other_available_features_var_pop_fields
  var_samp: other_available_features_var_samp_fields
  variance: other_available_features_variance_fields
}

"""
order by aggregate values of table "other_available_features"
"""
input other_available_features_aggregate_order_by {
  avg: other_available_features_avg_order_by
  count: order_by
  max: other_available_features_max_order_by
  min: other_available_features_min_order_by
  stddev: other_available_features_stddev_order_by
  stddev_pop: other_available_features_stddev_pop_order_by
  stddev_samp: other_available_features_stddev_samp_order_by
  sum: other_available_features_sum_order_by
  var_pop: other_available_features_var_pop_order_by
  var_samp: other_available_features_var_samp_order_by
  variance: other_available_features_variance_order_by
}

"""
input type for inserting array relation for remote table "other_available_features"
"""
input other_available_features_arr_rel_insert_input {
  data: [other_available_features_insert_input!]!
  on_conflict: other_available_features_on_conflict
}

"""aggregate avg on columns"""
type other_available_features_avg_fields {
  feature_id: Float
}

"""
order by avg() on columns of table "other_available_features"
"""
input other_available_features_avg_order_by {
  feature_id: order_by
}

"""
Boolean expression to filter rows from the table "other_available_features". All fields are combined with a logical 'AND'.
"""
input other_available_features_bool_exp {
  _and: [other_available_features_bool_exp]
  _not: other_available_features_bool_exp
  _or: [other_available_features_bool_exp]
  feature_description: String_comparison_exp
  feature_id: bigint_comparison_exp
  feature_name: String_comparison_exp
  feature_type_code: String_comparison_exp
  other_property_features: other_property_features_bool_exp
  ref_feature_type: ref_feature_types_bool_exp
}

"""
unique or primary key constraints on table "other_available_features"
"""
enum other_available_features_constraint {
  """unique or primary key constraint"""
  idx_26207_other_available_features_pkey
}

"""
input type for incrementing integer column in table "other_available_features"
"""
input other_available_features_inc_input {
  feature_id: bigint
}

"""
input type for inserting data into table "other_available_features"
"""
input other_available_features_insert_input {
  feature_description: String
  feature_id: bigint
  feature_name: String
  feature_type_code: String
  other_property_features: other_property_features_arr_rel_insert_input
  ref_feature_type: ref_feature_types_obj_rel_insert_input
}

"""aggregate max on columns"""
type other_available_features_max_fields {
  feature_description: String
  feature_id: bigint
  feature_name: String
  feature_type_code: String
}

"""
order by max() on columns of table "other_available_features"
"""
input other_available_features_max_order_by {
  feature_description: order_by
  feature_id: order_by
  feature_name: order_by
  feature_type_code: order_by
}

"""aggregate min on columns"""
type other_available_features_min_fields {
  feature_description: String
  feature_id: bigint
  feature_name: String
  feature_type_code: String
}

"""
order by min() on columns of table "other_available_features"
"""
input other_available_features_min_order_by {
  feature_description: order_by
  feature_id: order_by
  feature_name: order_by
  feature_type_code: order_by
}

"""
response of any mutation on the table "other_available_features"
"""
type other_available_features_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [other_available_features!]!
}

"""
input type for inserting object relation for remote table "other_available_features"
"""
input other_available_features_obj_rel_insert_input {
  data: other_available_features_insert_input!
  on_conflict: other_available_features_on_conflict
}

"""
on conflict condition type for table "other_available_features"
"""
input other_available_features_on_conflict {
  constraint: other_available_features_constraint!
  update_columns: [other_available_features_update_column!]!
  where: other_available_features_bool_exp
}

"""
ordering options when selecting data from "other_available_features"
"""
input other_available_features_order_by {
  feature_description: order_by
  feature_id: order_by
  feature_name: order_by
  feature_type_code: order_by
  other_property_features_aggregate: other_property_features_aggregate_order_by
  ref_feature_type: ref_feature_types_order_by
}

"""
primary key columns input for table: "other_available_features"
"""
input other_available_features_pk_columns_input {
  feature_id: bigint!
}

"""
select columns of table "other_available_features"
"""
enum other_available_features_select_column {
  """column name"""
  feature_description

  """column name"""
  feature_id

  """column name"""
  feature_name

  """column name"""
  feature_type_code
}

"""
input type for updating data in table "other_available_features"
"""
input other_available_features_set_input {
  feature_description: String
  feature_id: bigint
  feature_name: String
  feature_type_code: String
}

"""aggregate stddev on columns"""
type other_available_features_stddev_fields {
  feature_id: Float
}

"""
order by stddev() on columns of table "other_available_features"
"""
input other_available_features_stddev_order_by {
  feature_id: order_by
}

"""aggregate stddev_pop on columns"""
type other_available_features_stddev_pop_fields {
  feature_id: Float
}

"""
order by stddev_pop() on columns of table "other_available_features"
"""
input other_available_features_stddev_pop_order_by {
  feature_id: order_by
}

"""aggregate stddev_samp on columns"""
type other_available_features_stddev_samp_fields {
  feature_id: Float
}

"""
order by stddev_samp() on columns of table "other_available_features"
"""
input other_available_features_stddev_samp_order_by {
  feature_id: order_by
}

"""aggregate sum on columns"""
type other_available_features_sum_fields {
  feature_id: bigint
}

"""
order by sum() on columns of table "other_available_features"
"""
input other_available_features_sum_order_by {
  feature_id: order_by
}

"""
update columns of table "other_available_features"
"""
enum other_available_features_update_column {
  """column name"""
  feature_description

  """column name"""
  feature_id

  """column name"""
  feature_name

  """column name"""
  feature_type_code
}

"""aggregate var_pop on columns"""
type other_available_features_var_pop_fields {
  feature_id: Float
}

"""
order by var_pop() on columns of table "other_available_features"
"""
input other_available_features_var_pop_order_by {
  feature_id: order_by
}

"""aggregate var_samp on columns"""
type other_available_features_var_samp_fields {
  feature_id: Float
}

"""
order by var_samp() on columns of table "other_available_features"
"""
input other_available_features_var_samp_order_by {
  feature_id: order_by
}

"""aggregate variance on columns"""
type other_available_features_variance_fields {
  feature_id: Float
}

"""
order by variance() on columns of table "other_available_features"
"""
input other_available_features_variance_order_by {
  feature_id: order_by
}

"""
columns and relationships of "other_property_features"
"""
type other_property_features {
  feature_id: bigint

  """An object relationship"""
  other_available_feature: other_available_features

  """An object relationship"""
  property: properties
  property_feature_description: String
  property_id: bigint
}

"""
aggregated selection of "other_property_features"
"""
type other_property_features_aggregate {
  aggregate: other_property_features_aggregate_fields
  nodes: [other_property_features!]!
}

"""
aggregate fields of "other_property_features"
"""
type other_property_features_aggregate_fields {
  avg: other_property_features_avg_fields
  count(columns: [other_property_features_select_column!], distinct: Boolean): Int
  max: other_property_features_max_fields
  min: other_property_features_min_fields
  stddev: other_property_features_stddev_fields
  stddev_pop: other_property_features_stddev_pop_fields
  stddev_samp: other_property_features_stddev_samp_fields
  sum: other_property_features_sum_fields
  var_pop: other_property_features_var_pop_fields
  var_samp: other_property_features_var_samp_fields
  variance: other_property_features_variance_fields
}

"""
order by aggregate values of table "other_property_features"
"""
input other_property_features_aggregate_order_by {
  avg: other_property_features_avg_order_by
  count: order_by
  max: other_property_features_max_order_by
  min: other_property_features_min_order_by
  stddev: other_property_features_stddev_order_by
  stddev_pop: other_property_features_stddev_pop_order_by
  stddev_samp: other_property_features_stddev_samp_order_by
  sum: other_property_features_sum_order_by
  var_pop: other_property_features_var_pop_order_by
  var_samp: other_property_features_var_samp_order_by
  variance: other_property_features_variance_order_by
}

"""
input type for inserting array relation for remote table "other_property_features"
"""
input other_property_features_arr_rel_insert_input {
  data: [other_property_features_insert_input!]!
}

"""aggregate avg on columns"""
type other_property_features_avg_fields {
  feature_id: Float
  property_id: Float
}

"""
order by avg() on columns of table "other_property_features"
"""
input other_property_features_avg_order_by {
  feature_id: order_by
  property_id: order_by
}

"""
Boolean expression to filter rows from the table "other_property_features". All fields are combined with a logical 'AND'.
"""
input other_property_features_bool_exp {
  _and: [other_property_features_bool_exp]
  _not: other_property_features_bool_exp
  _or: [other_property_features_bool_exp]
  feature_id: bigint_comparison_exp
  other_available_feature: other_available_features_bool_exp
  property: properties_bool_exp
  property_feature_description: String_comparison_exp
  property_id: bigint_comparison_exp
}

"""
input type for incrementing integer column in table "other_property_features"
"""
input other_property_features_inc_input {
  feature_id: bigint
  property_id: bigint
}

"""
input type for inserting data into table "other_property_features"
"""
input other_property_features_insert_input {
  feature_id: bigint
  other_available_feature: other_available_features_obj_rel_insert_input
  property: properties_obj_rel_insert_input
  property_feature_description: String
  property_id: bigint
}

"""aggregate max on columns"""
type other_property_features_max_fields {
  feature_id: bigint
  property_feature_description: String
  property_id: bigint
}

"""
order by max() on columns of table "other_property_features"
"""
input other_property_features_max_order_by {
  feature_id: order_by
  property_feature_description: order_by
  property_id: order_by
}

"""aggregate min on columns"""
type other_property_features_min_fields {
  feature_id: bigint
  property_feature_description: String
  property_id: bigint
}

"""
order by min() on columns of table "other_property_features"
"""
input other_property_features_min_order_by {
  feature_id: order_by
  property_feature_description: order_by
  property_id: order_by
}

"""
response of any mutation on the table "other_property_features"
"""
type other_property_features_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [other_property_features!]!
}

"""
input type for inserting object relation for remote table "other_property_features"
"""
input other_property_features_obj_rel_insert_input {
  data: other_property_features_insert_input!
}

"""
ordering options when selecting data from "other_property_features"
"""
input other_property_features_order_by {
  feature_id: order_by
  other_available_feature: other_available_features_order_by
  property: properties_order_by
  property_feature_description: order_by
  property_id: order_by
}

"""
select columns of table "other_property_features"
"""
enum other_property_features_select_column {
  """column name"""
  feature_id

  """column name"""
  property_feature_description

  """column name"""
  property_id
}

"""
input type for updating data in table "other_property_features"
"""
input other_property_features_set_input {
  feature_id: bigint
  property_feature_description: String
  property_id: bigint
}

"""aggregate stddev on columns"""
type other_property_features_stddev_fields {
  feature_id: Float
  property_id: Float
}

"""
order by stddev() on columns of table "other_property_features"
"""
input other_property_features_stddev_order_by {
  feature_id: order_by
  property_id: order_by
}

"""aggregate stddev_pop on columns"""
type other_property_features_stddev_pop_fields {
  feature_id: Float
  property_id: Float
}

"""
order by stddev_pop() on columns of table "other_property_features"
"""
input other_property_features_stddev_pop_order_by {
  feature_id: order_by
  property_id: order_by
}

"""aggregate stddev_samp on columns"""
type other_property_features_stddev_samp_fields {
  feature_id: Float
  property_id: Float
}

"""
order by stddev_samp() on columns of table "other_property_features"
"""
input other_property_features_stddev_samp_order_by {
  feature_id: order_by
  property_id: order_by
}

"""aggregate sum on columns"""
type other_property_features_sum_fields {
  feature_id: bigint
  property_id: bigint
}

"""
order by sum() on columns of table "other_property_features"
"""
input other_property_features_sum_order_by {
  feature_id: order_by
  property_id: order_by
}

"""aggregate var_pop on columns"""
type other_property_features_var_pop_fields {
  feature_id: Float
  property_id: Float
}

"""
order by var_pop() on columns of table "other_property_features"
"""
input other_property_features_var_pop_order_by {
  feature_id: order_by
  property_id: order_by
}

"""aggregate var_samp on columns"""
type other_property_features_var_samp_fields {
  feature_id: Float
  property_id: Float
}

"""
order by var_samp() on columns of table "other_property_features"
"""
input other_property_features_var_samp_order_by {
  feature_id: order_by
  property_id: order_by
}

"""aggregate variance on columns"""
type other_property_features_variance_fields {
  feature_id: Float
  property_id: Float
}

"""
order by variance() on columns of table "other_property_features"
"""
input other_property_features_variance_order_by {
  feature_id: order_by
  property_id: order_by
}

"""
columns and relationships of "properties"
"""
type properties {
  agreed_selling_price: numeric
  apt_feature_1: String
  apt_feature_2: String
  apt_feature_3: String
  buyer_offered_price: numeric
  date_on_market: timestamptz
  date_sold: timestamptz
  fld_feature_1: String
  fld_feature_2: String
  fld_feature_3: String
  hse_feature_1: String
  hse_feature_2: String
  hse_feature_3: String
  oth_feature_1: String
  oth_feature_2: String
  oth_feature_3: String
  other_property_details: String

  """An array relationship"""
  other_property_features(
    """distinct select on columns"""
    distinct_on: [other_property_features_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [other_property_features_order_by!]

    """filter the rows returned"""
    where: other_property_features_bool_exp
  ): [other_property_features!]!

  """An aggregated array relationship"""
  other_property_features_aggregate(
    """distinct select on columns"""
    distinct_on: [other_property_features_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [other_property_features_order_by!]

    """filter the rows returned"""
    where: other_property_features_bool_exp
  ): other_property_features_aggregate!
  property_address: String
  property_id: bigint!
  property_name: String
  property_type_code: String

  """An object relationship"""
  ref_property_type: ref_property_types
  room_count: bigint
  shp_feature_1: String
  shp_feature_2: String
  shp_feature_3: String
  vendor_requested_price: numeric
}

"""
aggregated selection of "properties"
"""
type properties_aggregate {
  aggregate: properties_aggregate_fields
  nodes: [properties!]!
}

"""
aggregate fields of "properties"
"""
type properties_aggregate_fields {
  avg: properties_avg_fields
  count(columns: [properties_select_column!], distinct: Boolean): Int
  max: properties_max_fields
  min: properties_min_fields
  stddev: properties_stddev_fields
  stddev_pop: properties_stddev_pop_fields
  stddev_samp: properties_stddev_samp_fields
  sum: properties_sum_fields
  var_pop: properties_var_pop_fields
  var_samp: properties_var_samp_fields
  variance: properties_variance_fields
}

"""
order by aggregate values of table "properties"
"""
input properties_aggregate_order_by {
  avg: properties_avg_order_by
  count: order_by
  max: properties_max_order_by
  min: properties_min_order_by
  stddev: properties_stddev_order_by
  stddev_pop: properties_stddev_pop_order_by
  stddev_samp: properties_stddev_samp_order_by
  sum: properties_sum_order_by
  var_pop: properties_var_pop_order_by
  var_samp: properties_var_samp_order_by
  variance: properties_variance_order_by
}

"""
input type for inserting array relation for remote table "properties"
"""
input properties_arr_rel_insert_input {
  data: [properties_insert_input!]!
  on_conflict: properties_on_conflict
}

"""aggregate avg on columns"""
type properties_avg_fields {
  agreed_selling_price: Float
  buyer_offered_price: Float
  property_id: Float
  room_count: Float
  vendor_requested_price: Float
}

"""
order by avg() on columns of table "properties"
"""
input properties_avg_order_by {
  agreed_selling_price: order_by
  buyer_offered_price: order_by
  property_id: order_by
  room_count: order_by
  vendor_requested_price: order_by
}

"""
Boolean expression to filter rows from the table "properties". All fields are combined with a logical 'AND'.
"""
input properties_bool_exp {
  _and: [properties_bool_exp]
  _not: properties_bool_exp
  _or: [properties_bool_exp]
  agreed_selling_price: numeric_comparison_exp
  apt_feature_1: String_comparison_exp
  apt_feature_2: String_comparison_exp
  apt_feature_3: String_comparison_exp
  buyer_offered_price: numeric_comparison_exp
  date_on_market: timestamptz_comparison_exp
  date_sold: timestamptz_comparison_exp
  fld_feature_1: String_comparison_exp
  fld_feature_2: String_comparison_exp
  fld_feature_3: String_comparison_exp
  hse_feature_1: String_comparison_exp
  hse_feature_2: String_comparison_exp
  hse_feature_3: String_comparison_exp
  oth_feature_1: String_comparison_exp
  oth_feature_2: String_comparison_exp
  oth_feature_3: String_comparison_exp
  other_property_details: String_comparison_exp
  other_property_features: other_property_features_bool_exp
  property_address: String_comparison_exp
  property_id: bigint_comparison_exp
  property_name: String_comparison_exp
  property_type_code: String_comparison_exp
  ref_property_type: ref_property_types_bool_exp
  room_count: bigint_comparison_exp
  shp_feature_1: String_comparison_exp
  shp_feature_2: String_comparison_exp
  shp_feature_3: String_comparison_exp
  vendor_requested_price: numeric_comparison_exp
}

"""
unique or primary key constraints on table "properties"
"""
enum properties_constraint {
  """unique or primary key constraint"""
  idx_26213_properties_pkey
}

"""
input type for incrementing integer column in table "properties"
"""
input properties_inc_input {
  agreed_selling_price: numeric
  buyer_offered_price: numeric
  property_id: bigint
  room_count: bigint
  vendor_requested_price: numeric
}

"""
input type for inserting data into table "properties"
"""
input properties_insert_input {
  agreed_selling_price: numeric
  apt_feature_1: String
  apt_feature_2: String
  apt_feature_3: String
  buyer_offered_price: numeric
  date_on_market: timestamptz
  date_sold: timestamptz
  fld_feature_1: String
  fld_feature_2: String
  fld_feature_3: String
  hse_feature_1: String
  hse_feature_2: String
  hse_feature_3: String
  oth_feature_1: String
  oth_feature_2: String
  oth_feature_3: String
  other_property_details: String
  other_property_features: other_property_features_arr_rel_insert_input
  property_address: String
  property_id: bigint
  property_name: String
  property_type_code: String
  ref_property_type: ref_property_types_obj_rel_insert_input
  room_count: bigint
  shp_feature_1: String
  shp_feature_2: String
  shp_feature_3: String
  vendor_requested_price: numeric
}

"""aggregate max on columns"""
type properties_max_fields {
  agreed_selling_price: numeric
  apt_feature_1: String
  apt_feature_2: String
  apt_feature_3: String
  buyer_offered_price: numeric
  date_on_market: timestamptz
  date_sold: timestamptz
  fld_feature_1: String
  fld_feature_2: String
  fld_feature_3: String
  hse_feature_1: String
  hse_feature_2: String
  hse_feature_3: String
  oth_feature_1: String
  oth_feature_2: String
  oth_feature_3: String
  other_property_details: String
  property_address: String
  property_id: bigint
  property_name: String
  property_type_code: String
  room_count: bigint
  shp_feature_1: String
  shp_feature_2: String
  shp_feature_3: String
  vendor_requested_price: numeric
}

"""
order by max() on columns of table "properties"
"""
input properties_max_order_by {
  agreed_selling_price: order_by
  apt_feature_1: order_by
  apt_feature_2: order_by
  apt_feature_3: order_by
  buyer_offered_price: order_by
  date_on_market: order_by
  date_sold: order_by
  fld_feature_1: order_by
  fld_feature_2: order_by
  fld_feature_3: order_by
  hse_feature_1: order_by
  hse_feature_2: order_by
  hse_feature_3: order_by
  oth_feature_1: order_by
  oth_feature_2: order_by
  oth_feature_3: order_by
  other_property_details: order_by
  property_address: order_by
  property_id: order_by
  property_name: order_by
  property_type_code: order_by
  room_count: order_by
  shp_feature_1: order_by
  shp_feature_2: order_by
  shp_feature_3: order_by
  vendor_requested_price: order_by
}

"""aggregate min on columns"""
type properties_min_fields {
  agreed_selling_price: numeric
  apt_feature_1: String
  apt_feature_2: String
  apt_feature_3: String
  buyer_offered_price: numeric
  date_on_market: timestamptz
  date_sold: timestamptz
  fld_feature_1: String
  fld_feature_2: String
  fld_feature_3: String
  hse_feature_1: String
  hse_feature_2: String
  hse_feature_3: String
  oth_feature_1: String
  oth_feature_2: String
  oth_feature_3: String
  other_property_details: String
  property_address: String
  property_id: bigint
  property_name: String
  property_type_code: String
  room_count: bigint
  shp_feature_1: String
  shp_feature_2: String
  shp_feature_3: String
  vendor_requested_price: numeric
}

"""
order by min() on columns of table "properties"
"""
input properties_min_order_by {
  agreed_selling_price: order_by
  apt_feature_1: order_by
  apt_feature_2: order_by
  apt_feature_3: order_by
  buyer_offered_price: order_by
  date_on_market: order_by
  date_sold: order_by
  fld_feature_1: order_by
  fld_feature_2: order_by
  fld_feature_3: order_by
  hse_feature_1: order_by
  hse_feature_2: order_by
  hse_feature_3: order_by
  oth_feature_1: order_by
  oth_feature_2: order_by
  oth_feature_3: order_by
  other_property_details: order_by
  property_address: order_by
  property_id: order_by
  property_name: order_by
  property_type_code: order_by
  room_count: order_by
  shp_feature_1: order_by
  shp_feature_2: order_by
  shp_feature_3: order_by
  vendor_requested_price: order_by
}

"""
response of any mutation on the table "properties"
"""
type properties_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [properties!]!
}

"""
input type for inserting object relation for remote table "properties"
"""
input properties_obj_rel_insert_input {
  data: properties_insert_input!
  on_conflict: properties_on_conflict
}

"""
on conflict condition type for table "properties"
"""
input properties_on_conflict {
  constraint: properties_constraint!
  update_columns: [properties_update_column!]!
  where: properties_bool_exp
}

"""
ordering options when selecting data from "properties"
"""
input properties_order_by {
  agreed_selling_price: order_by
  apt_feature_1: order_by
  apt_feature_2: order_by
  apt_feature_3: order_by
  buyer_offered_price: order_by
  date_on_market: order_by
  date_sold: order_by
  fld_feature_1: order_by
  fld_feature_2: order_by
  fld_feature_3: order_by
  hse_feature_1: order_by
  hse_feature_2: order_by
  hse_feature_3: order_by
  oth_feature_1: order_by
  oth_feature_2: order_by
  oth_feature_3: order_by
  other_property_details: order_by
  other_property_features_aggregate: other_property_features_aggregate_order_by
  property_address: order_by
  property_id: order_by
  property_name: order_by
  property_type_code: order_by
  ref_property_type: ref_property_types_order_by
  room_count: order_by
  shp_feature_1: order_by
  shp_feature_2: order_by
  shp_feature_3: order_by
  vendor_requested_price: order_by
}

"""
primary key columns input for table: "properties"
"""
input properties_pk_columns_input {
  property_id: bigint!
}

"""
select columns of table "properties"
"""
enum properties_select_column {
  """column name"""
  agreed_selling_price

  """column name"""
  apt_feature_1

  """column name"""
  apt_feature_2

  """column name"""
  apt_feature_3

  """column name"""
  buyer_offered_price

  """column name"""
  date_on_market

  """column name"""
  date_sold

  """column name"""
  fld_feature_1

  """column name"""
  fld_feature_2

  """column name"""
  fld_feature_3

  """column name"""
  hse_feature_1

  """column name"""
  hse_feature_2

  """column name"""
  hse_feature_3

  """column name"""
  oth_feature_1

  """column name"""
  oth_feature_2

  """column name"""
  oth_feature_3

  """column name"""
  other_property_details

  """column name"""
  property_address

  """column name"""
  property_id

  """column name"""
  property_name

  """column name"""
  property_type_code

  """column name"""
  room_count

  """column name"""
  shp_feature_1

  """column name"""
  shp_feature_2

  """column name"""
  shp_feature_3

  """column name"""
  vendor_requested_price
}

"""
input type for updating data in table "properties"
"""
input properties_set_input {
  agreed_selling_price: numeric
  apt_feature_1: String
  apt_feature_2: String
  apt_feature_3: String
  buyer_offered_price: numeric
  date_on_market: timestamptz
  date_sold: timestamptz
  fld_feature_1: String
  fld_feature_2: String
  fld_feature_3: String
  hse_feature_1: String
  hse_feature_2: String
  hse_feature_3: String
  oth_feature_1: String
  oth_feature_2: String
  oth_feature_3: String
  other_property_details: String
  property_address: String
  property_id: bigint
  property_name: String
  property_type_code: String
  room_count: bigint
  shp_feature_1: String
  shp_feature_2: String
  shp_feature_3: String
  vendor_requested_price: numeric
}

"""aggregate stddev on columns"""
type properties_stddev_fields {
  agreed_selling_price: Float
  buyer_offered_price: Float
  property_id: Float
  room_count: Float
  vendor_requested_price: Float
}

"""
order by stddev() on columns of table "properties"
"""
input properties_stddev_order_by {
  agreed_selling_price: order_by
  buyer_offered_price: order_by
  property_id: order_by
  room_count: order_by
  vendor_requested_price: order_by
}

"""aggregate stddev_pop on columns"""
type properties_stddev_pop_fields {
  agreed_selling_price: Float
  buyer_offered_price: Float
  property_id: Float
  room_count: Float
  vendor_requested_price: Float
}

"""
order by stddev_pop() on columns of table "properties"
"""
input properties_stddev_pop_order_by {
  agreed_selling_price: order_by
  buyer_offered_price: order_by
  property_id: order_by
  room_count: order_by
  vendor_requested_price: order_by
}

"""aggregate stddev_samp on columns"""
type properties_stddev_samp_fields {
  agreed_selling_price: Float
  buyer_offered_price: Float
  property_id: Float
  room_count: Float
  vendor_requested_price: Float
}

"""
order by stddev_samp() on columns of table "properties"
"""
input properties_stddev_samp_order_by {
  agreed_selling_price: order_by
  buyer_offered_price: order_by
  property_id: order_by
  room_count: order_by
  vendor_requested_price: order_by
}

"""aggregate sum on columns"""
type properties_sum_fields {
  agreed_selling_price: numeric
  buyer_offered_price: numeric
  property_id: bigint
  room_count: bigint
  vendor_requested_price: numeric
}

"""
order by sum() on columns of table "properties"
"""
input properties_sum_order_by {
  agreed_selling_price: order_by
  buyer_offered_price: order_by
  property_id: order_by
  room_count: order_by
  vendor_requested_price: order_by
}

"""
update columns of table "properties"
"""
enum properties_update_column {
  """column name"""
  agreed_selling_price

  """column name"""
  apt_feature_1

  """column name"""
  apt_feature_2

  """column name"""
  apt_feature_3

  """column name"""
  buyer_offered_price

  """column name"""
  date_on_market

  """column name"""
  date_sold

  """column name"""
  fld_feature_1

  """column name"""
  fld_feature_2

  """column name"""
  fld_feature_3

  """column name"""
  hse_feature_1

  """column name"""
  hse_feature_2

  """column name"""
  hse_feature_3

  """column name"""
  oth_feature_1

  """column name"""
  oth_feature_2

  """column name"""
  oth_feature_3

  """column name"""
  other_property_details

  """column name"""
  property_address

  """column name"""
  property_id

  """column name"""
  property_name

  """column name"""
  property_type_code

  """column name"""
  room_count

  """column name"""
  shp_feature_1

  """column name"""
  shp_feature_2

  """column name"""
  shp_feature_3

  """column name"""
  vendor_requested_price
}

"""aggregate var_pop on columns"""
type properties_var_pop_fields {
  agreed_selling_price: Float
  buyer_offered_price: Float
  property_id: Float
  room_count: Float
  vendor_requested_price: Float
}

"""
order by var_pop() on columns of table "properties"
"""
input properties_var_pop_order_by {
  agreed_selling_price: order_by
  buyer_offered_price: order_by
  property_id: order_by
  room_count: order_by
  vendor_requested_price: order_by
}

"""aggregate var_samp on columns"""
type properties_var_samp_fields {
  agreed_selling_price: Float
  buyer_offered_price: Float
  property_id: Float
  room_count: Float
  vendor_requested_price: Float
}

"""
order by var_samp() on columns of table "properties"
"""
input properties_var_samp_order_by {
  agreed_selling_price: order_by
  buyer_offered_price: order_by
  property_id: order_by
  room_count: order_by
  vendor_requested_price: order_by
}

"""aggregate variance on columns"""
type properties_variance_fields {
  agreed_selling_price: Float
  buyer_offered_price: Float
  property_id: Float
  room_count: Float
  vendor_requested_price: Float
}

"""
order by variance() on columns of table "properties"
"""
input properties_variance_order_by {
  agreed_selling_price: order_by
  buyer_offered_price: order_by
  property_id: order_by
  room_count: order_by
  vendor_requested_price: order_by
}

"""query root"""
type query_root {
  """
  fetch data from the table: "other_available_features"
  """
  other_available_features(
    """distinct select on columns"""
    distinct_on: [other_available_features_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [other_available_features_order_by!]

    """filter the rows returned"""
    where: other_available_features_bool_exp
  ): [other_available_features!]!

  """
  fetch aggregated fields from the table: "other_available_features"
  """
  other_available_features_aggregate(
    """distinct select on columns"""
    distinct_on: [other_available_features_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [other_available_features_order_by!]

    """filter the rows returned"""
    where: other_available_features_bool_exp
  ): other_available_features_aggregate!

  """
  fetch data from the table: "other_available_features" using primary key columns
  """
  other_available_features_by_pk(feature_id: bigint!): other_available_features

  """
  fetch data from the table: "other_property_features"
  """
  other_property_features(
    """distinct select on columns"""
    distinct_on: [other_property_features_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [other_property_features_order_by!]

    """filter the rows returned"""
    where: other_property_features_bool_exp
  ): [other_property_features!]!

  """
  fetch aggregated fields from the table: "other_property_features"
  """
  other_property_features_aggregate(
    """distinct select on columns"""
    distinct_on: [other_property_features_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [other_property_features_order_by!]

    """filter the rows returned"""
    where: other_property_features_bool_exp
  ): other_property_features_aggregate!

  """
  fetch data from the table: "properties"
  """
  properties(
    """distinct select on columns"""
    distinct_on: [properties_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [properties_order_by!]

    """filter the rows returned"""
    where: properties_bool_exp
  ): [properties!]!

  """
  fetch aggregated fields from the table: "properties"
  """
  properties_aggregate(
    """distinct select on columns"""
    distinct_on: [properties_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [properties_order_by!]

    """filter the rows returned"""
    where: properties_bool_exp
  ): properties_aggregate!

  """fetch data from the table: "properties" using primary key columns"""
  properties_by_pk(property_id: bigint!): properties

  """
  fetch data from the table: "ref_feature_types"
  """
  ref_feature_types(
    """distinct select on columns"""
    distinct_on: [ref_feature_types_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [ref_feature_types_order_by!]

    """filter the rows returned"""
    where: ref_feature_types_bool_exp
  ): [ref_feature_types!]!

  """
  fetch aggregated fields from the table: "ref_feature_types"
  """
  ref_feature_types_aggregate(
    """distinct select on columns"""
    distinct_on: [ref_feature_types_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [ref_feature_types_order_by!]

    """filter the rows returned"""
    where: ref_feature_types_bool_exp
  ): ref_feature_types_aggregate!

  """
  fetch data from the table: "ref_feature_types" using primary key columns
  """
  ref_feature_types_by_pk(feature_type_code: String!): ref_feature_types

  """
  fetch data from the table: "ref_property_types"
  """
  ref_property_types(
    """distinct select on columns"""
    distinct_on: [ref_property_types_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [ref_property_types_order_by!]

    """filter the rows returned"""
    where: ref_property_types_bool_exp
  ): [ref_property_types!]!

  """
  fetch aggregated fields from the table: "ref_property_types"
  """
  ref_property_types_aggregate(
    """distinct select on columns"""
    distinct_on: [ref_property_types_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [ref_property_types_order_by!]

    """filter the rows returned"""
    where: ref_property_types_bool_exp
  ): ref_property_types_aggregate!

  """
  fetch data from the table: "ref_property_types" using primary key columns
  """
  ref_property_types_by_pk(property_type_code: String!): ref_property_types
}

"""
columns and relationships of "ref_feature_types"
"""
type ref_feature_types {
  feature_type_code: String!
  feature_type_name: String

  """An array relationship"""
  other_available_features(
    """distinct select on columns"""
    distinct_on: [other_available_features_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [other_available_features_order_by!]

    """filter the rows returned"""
    where: other_available_features_bool_exp
  ): [other_available_features!]!

  """An aggregated array relationship"""
  other_available_features_aggregate(
    """distinct select on columns"""
    distinct_on: [other_available_features_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [other_available_features_order_by!]

    """filter the rows returned"""
    where: other_available_features_bool_exp
  ): other_available_features_aggregate!
}

"""
aggregated selection of "ref_feature_types"
"""
type ref_feature_types_aggregate {
  aggregate: ref_feature_types_aggregate_fields
  nodes: [ref_feature_types!]!
}

"""
aggregate fields of "ref_feature_types"
"""
type ref_feature_types_aggregate_fields {
  count(columns: [ref_feature_types_select_column!], distinct: Boolean): Int
  max: ref_feature_types_max_fields
  min: ref_feature_types_min_fields
}

"""
order by aggregate values of table "ref_feature_types"
"""
input ref_feature_types_aggregate_order_by {
  count: order_by
  max: ref_feature_types_max_order_by
  min: ref_feature_types_min_order_by
}

"""
input type for inserting array relation for remote table "ref_feature_types"
"""
input ref_feature_types_arr_rel_insert_input {
  data: [ref_feature_types_insert_input!]!
  on_conflict: ref_feature_types_on_conflict
}

"""
Boolean expression to filter rows from the table "ref_feature_types". All fields are combined with a logical 'AND'.
"""
input ref_feature_types_bool_exp {
  _and: [ref_feature_types_bool_exp]
  _not: ref_feature_types_bool_exp
  _or: [ref_feature_types_bool_exp]
  feature_type_code: String_comparison_exp
  feature_type_name: String_comparison_exp
  other_available_features: other_available_features_bool_exp
}

"""
unique or primary key constraints on table "ref_feature_types"
"""
enum ref_feature_types_constraint {
  """unique or primary key constraint"""
  idx_26195_sqlite_autoindex_ref_feature_types_1
}

"""
input type for inserting data into table "ref_feature_types"
"""
input ref_feature_types_insert_input {
  feature_type_code: String
  feature_type_name: String
  other_available_features: other_available_features_arr_rel_insert_input
}

"""aggregate max on columns"""
type ref_feature_types_max_fields {
  feature_type_code: String
  feature_type_name: String
}

"""
order by max() on columns of table "ref_feature_types"
"""
input ref_feature_types_max_order_by {
  feature_type_code: order_by
  feature_type_name: order_by
}

"""aggregate min on columns"""
type ref_feature_types_min_fields {
  feature_type_code: String
  feature_type_name: String
}

"""
order by min() on columns of table "ref_feature_types"
"""
input ref_feature_types_min_order_by {
  feature_type_code: order_by
  feature_type_name: order_by
}

"""
response of any mutation on the table "ref_feature_types"
"""
type ref_feature_types_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [ref_feature_types!]!
}

"""
input type for inserting object relation for remote table "ref_feature_types"
"""
input ref_feature_types_obj_rel_insert_input {
  data: ref_feature_types_insert_input!
  on_conflict: ref_feature_types_on_conflict
}

"""
on conflict condition type for table "ref_feature_types"
"""
input ref_feature_types_on_conflict {
  constraint: ref_feature_types_constraint!
  update_columns: [ref_feature_types_update_column!]!
  where: ref_feature_types_bool_exp
}

"""
ordering options when selecting data from "ref_feature_types"
"""
input ref_feature_types_order_by {
  feature_type_code: order_by
  feature_type_name: order_by
  other_available_features_aggregate: other_available_features_aggregate_order_by
}

"""
primary key columns input for table: "ref_feature_types"
"""
input ref_feature_types_pk_columns_input {
  feature_type_code: String!
}

"""
select columns of table "ref_feature_types"
"""
enum ref_feature_types_select_column {
  """column name"""
  feature_type_code

  """column name"""
  feature_type_name
}

"""
input type for updating data in table "ref_feature_types"
"""
input ref_feature_types_set_input {
  feature_type_code: String
  feature_type_name: String
}

"""
update columns of table "ref_feature_types"
"""
enum ref_feature_types_update_column {
  """column name"""
  feature_type_code

  """column name"""
  feature_type_name
}

"""
columns and relationships of "ref_property_types"
"""
type ref_property_types {
  """An array relationship"""
  properties(
    """distinct select on columns"""
    distinct_on: [properties_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [properties_order_by!]

    """filter the rows returned"""
    where: properties_bool_exp
  ): [properties!]!

  """An aggregated array relationship"""
  properties_aggregate(
    """distinct select on columns"""
    distinct_on: [properties_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [properties_order_by!]

    """filter the rows returned"""
    where: properties_bool_exp
  ): properties_aggregate!
  property_type_code: String!
  property_type_description: String
}

"""
aggregated selection of "ref_property_types"
"""
type ref_property_types_aggregate {
  aggregate: ref_property_types_aggregate_fields
  nodes: [ref_property_types!]!
}

"""
aggregate fields of "ref_property_types"
"""
type ref_property_types_aggregate_fields {
  count(columns: [ref_property_types_select_column!], distinct: Boolean): Int
  max: ref_property_types_max_fields
  min: ref_property_types_min_fields
}

"""
order by aggregate values of table "ref_property_types"
"""
input ref_property_types_aggregate_order_by {
  count: order_by
  max: ref_property_types_max_order_by
  min: ref_property_types_min_order_by
}

"""
input type for inserting array relation for remote table "ref_property_types"
"""
input ref_property_types_arr_rel_insert_input {
  data: [ref_property_types_insert_input!]!
  on_conflict: ref_property_types_on_conflict
}

"""
Boolean expression to filter rows from the table "ref_property_types". All fields are combined with a logical 'AND'.
"""
input ref_property_types_bool_exp {
  _and: [ref_property_types_bool_exp]
  _not: ref_property_types_bool_exp
  _or: [ref_property_types_bool_exp]
  properties: properties_bool_exp
  property_type_code: String_comparison_exp
  property_type_description: String_comparison_exp
}

"""
unique or primary key constraints on table "ref_property_types"
"""
enum ref_property_types_constraint {
  """unique or primary key constraint"""
  idx_26201_sqlite_autoindex_ref_property_types_1
}

"""
input type for inserting data into table "ref_property_types"
"""
input ref_property_types_insert_input {
  properties: properties_arr_rel_insert_input
  property_type_code: String
  property_type_description: String
}

"""aggregate max on columns"""
type ref_property_types_max_fields {
  property_type_code: String
  property_type_description: String
}

"""
order by max() on columns of table "ref_property_types"
"""
input ref_property_types_max_order_by {
  property_type_code: order_by
  property_type_description: order_by
}

"""aggregate min on columns"""
type ref_property_types_min_fields {
  property_type_code: String
  property_type_description: String
}

"""
order by min() on columns of table "ref_property_types"
"""
input ref_property_types_min_order_by {
  property_type_code: order_by
  property_type_description: order_by
}

"""
response of any mutation on the table "ref_property_types"
"""
type ref_property_types_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [ref_property_types!]!
}

"""
input type for inserting object relation for remote table "ref_property_types"
"""
input ref_property_types_obj_rel_insert_input {
  data: ref_property_types_insert_input!
  on_conflict: ref_property_types_on_conflict
}

"""
on conflict condition type for table "ref_property_types"
"""
input ref_property_types_on_conflict {
  constraint: ref_property_types_constraint!
  update_columns: [ref_property_types_update_column!]!
  where: ref_property_types_bool_exp
}

"""
ordering options when selecting data from "ref_property_types"
"""
input ref_property_types_order_by {
  properties_aggregate: properties_aggregate_order_by
  property_type_code: order_by
  property_type_description: order_by
}

"""
primary key columns input for table: "ref_property_types"
"""
input ref_property_types_pk_columns_input {
  property_type_code: String!
}

"""
select columns of table "ref_property_types"
"""
enum ref_property_types_select_column {
  """column name"""
  property_type_code

  """column name"""
  property_type_description
}

"""
input type for updating data in table "ref_property_types"
"""
input ref_property_types_set_input {
  property_type_code: String
  property_type_description: String
}

"""
update columns of table "ref_property_types"
"""
enum ref_property_types_update_column {
  """column name"""
  property_type_code

  """column name"""
  property_type_description
}

"""
expression to compare columns of type String. All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String
  _ilike: String
  _in: [String!]
  _is_null: Boolean
  _like: String
  _lt: String
  _lte: String
  _neq: String
  _nilike: String
  _nin: [String!]
  _nlike: String
  _nsimilar: String
  _similar: String
}

"""subscription root"""
type subscription_root {
  """
  fetch data from the table: "other_available_features"
  """
  other_available_features(
    """distinct select on columns"""
    distinct_on: [other_available_features_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [other_available_features_order_by!]

    """filter the rows returned"""
    where: other_available_features_bool_exp
  ): [other_available_features!]!

  """
  fetch aggregated fields from the table: "other_available_features"
  """
  other_available_features_aggregate(
    """distinct select on columns"""
    distinct_on: [other_available_features_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [other_available_features_order_by!]

    """filter the rows returned"""
    where: other_available_features_bool_exp
  ): other_available_features_aggregate!

  """
  fetch data from the table: "other_available_features" using primary key columns
  """
  other_available_features_by_pk(feature_id: bigint!): other_available_features

  """
  fetch data from the table: "other_property_features"
  """
  other_property_features(
    """distinct select on columns"""
    distinct_on: [other_property_features_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [other_property_features_order_by!]

    """filter the rows returned"""
    where: other_property_features_bool_exp
  ): [other_property_features!]!

  """
  fetch aggregated fields from the table: "other_property_features"
  """
  other_property_features_aggregate(
    """distinct select on columns"""
    distinct_on: [other_property_features_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [other_property_features_order_by!]

    """filter the rows returned"""
    where: other_property_features_bool_exp
  ): other_property_features_aggregate!

  """
  fetch data from the table: "properties"
  """
  properties(
    """distinct select on columns"""
    distinct_on: [properties_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [properties_order_by!]

    """filter the rows returned"""
    where: properties_bool_exp
  ): [properties!]!

  """
  fetch aggregated fields from the table: "properties"
  """
  properties_aggregate(
    """distinct select on columns"""
    distinct_on: [properties_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [properties_order_by!]

    """filter the rows returned"""
    where: properties_bool_exp
  ): properties_aggregate!

  """fetch data from the table: "properties" using primary key columns"""
  properties_by_pk(property_id: bigint!): properties

  """
  fetch data from the table: "ref_feature_types"
  """
  ref_feature_types(
    """distinct select on columns"""
    distinct_on: [ref_feature_types_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [ref_feature_types_order_by!]

    """filter the rows returned"""
    where: ref_feature_types_bool_exp
  ): [ref_feature_types!]!

  """
  fetch aggregated fields from the table: "ref_feature_types"
  """
  ref_feature_types_aggregate(
    """distinct select on columns"""
    distinct_on: [ref_feature_types_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [ref_feature_types_order_by!]

    """filter the rows returned"""
    where: ref_feature_types_bool_exp
  ): ref_feature_types_aggregate!

  """
  fetch data from the table: "ref_feature_types" using primary key columns
  """
  ref_feature_types_by_pk(feature_type_code: String!): ref_feature_types

  """
  fetch data from the table: "ref_property_types"
  """
  ref_property_types(
    """distinct select on columns"""
    distinct_on: [ref_property_types_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [ref_property_types_order_by!]

    """filter the rows returned"""
    where: ref_property_types_bool_exp
  ): [ref_property_types!]!

  """
  fetch aggregated fields from the table: "ref_property_types"
  """
  ref_property_types_aggregate(
    """distinct select on columns"""
    distinct_on: [ref_property_types_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [ref_property_types_order_by!]

    """filter the rows returned"""
    where: ref_property_types_bool_exp
  ): ref_property_types_aggregate!

  """
  fetch data from the table: "ref_property_types" using primary key columns
  """
  ref_property_types_by_pk(property_type_code: String!): ref_property_types
}

scalar timestamptz

"""
expression to compare columns of type timestamptz. All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}
