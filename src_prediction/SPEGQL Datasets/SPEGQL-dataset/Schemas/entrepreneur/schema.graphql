schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""
Direct the client to resolve this field locally, either from the cache or local resolvers.
"""
directive @client(
  """
  When true, the client will never use the cache for this value. See
  https://www.apollographql.com/docs/react/essentials/local-state/#forcing-resolvers-with-clientalways-true
  """
  always: Boolean
) on FIELD | FRAGMENT_DEFINITION | INLINE_FRAGMENT

"""
Export this locally resolved field as a variable to be used in the remainder of this query. See
https://www.apollographql.com/docs/react/essentials/local-state/#using-client-fields-as-variables
"""
directive @export(
  """The variable name to export this field as."""
  as: String!
) on FIELD

"""
Specify a custom store key for this result. See
https://www.apollographql.com/docs/react/advanced/caching/#the-connection-directive
"""
directive @connection(
  """Specify the store key."""
  key: String!

  """
  An array of query argument names to include in the generated custom store key.
  """
  filter: [String!]
) on FIELD

"""
columns and relationships of "entrepreneur"
"""
type entrepreneur {
  company: String
  entrepreneur_id: Int
  investor: String
  money_requested: Float
  people_id: Int

  """An object relationship"""
  person: people
}

"""
aggregated selection of "entrepreneur"
"""
type entrepreneur_aggregate {
  aggregate: entrepreneur_aggregate_fields
  nodes: [entrepreneur!]!
}

"""
aggregate fields of "entrepreneur"
"""
type entrepreneur_aggregate_fields {
  avg: entrepreneur_avg_fields
  count(columns: [entrepreneur_select_column!], distinct: Boolean): Int
  max: entrepreneur_max_fields
  min: entrepreneur_min_fields
  stddev: entrepreneur_stddev_fields
  stddev_pop: entrepreneur_stddev_pop_fields
  stddev_samp: entrepreneur_stddev_samp_fields
  sum: entrepreneur_sum_fields
  var_pop: entrepreneur_var_pop_fields
  var_samp: entrepreneur_var_samp_fields
  variance: entrepreneur_variance_fields
}

"""
order by aggregate values of table "entrepreneur"
"""
input entrepreneur_aggregate_order_by {
  avg: entrepreneur_avg_order_by
  count: order_by
  max: entrepreneur_max_order_by
  min: entrepreneur_min_order_by
  stddev: entrepreneur_stddev_order_by
  stddev_pop: entrepreneur_stddev_pop_order_by
  stddev_samp: entrepreneur_stddev_samp_order_by
  sum: entrepreneur_sum_order_by
  var_pop: entrepreneur_var_pop_order_by
  var_samp: entrepreneur_var_samp_order_by
  variance: entrepreneur_variance_order_by
}

"""
input type for inserting array relation for remote table "entrepreneur"
"""
input entrepreneur_arr_rel_insert_input {
  data: [entrepreneur_insert_input!]!
  on_conflict: entrepreneur_on_conflict
}

"""aggregate avg on columns"""
type entrepreneur_avg_fields {
  entrepreneur_id: Float
  money_requested: Float
  people_id: Float
}

"""
order by avg() on columns of table "entrepreneur"
"""
input entrepreneur_avg_order_by {
  entrepreneur_id: order_by
  money_requested: order_by
  people_id: order_by
}

"""
Boolean expression to filter rows from the table "entrepreneur". All fields are combined with a logical 'AND'.
"""
input entrepreneur_bool_exp {
  _and: [entrepreneur_bool_exp]
  _not: entrepreneur_bool_exp
  _or: [entrepreneur_bool_exp]
  company: String_comparison_exp
  entrepreneur_id: Int_comparison_exp
  investor: String_comparison_exp
  money_requested: Float_comparison_exp
  people_id: Int_comparison_exp
  person: people_bool_exp
}

"""
unique or primary key constraints on table "entrepreneur"
"""
enum entrepreneur_constraint {
  """unique or primary key constraint"""
  idx_24721_sqlite_autoindex_entrepreneur_1
}

"""
input type for incrementing integer column in table "entrepreneur"
"""
input entrepreneur_inc_input {
  entrepreneur_id: Int
  money_requested: Float
  people_id: Int
}

"""
input type for inserting data into table "entrepreneur"
"""
input entrepreneur_insert_input {
  company: String
  entrepreneur_id: Int
  investor: String
  money_requested: Float
  people_id: Int
  person: people_obj_rel_insert_input
}

"""aggregate max on columns"""
type entrepreneur_max_fields {
  company: String
  entrepreneur_id: Int
  investor: String
  money_requested: Float
  people_id: Int
}

"""
order by max() on columns of table "entrepreneur"
"""
input entrepreneur_max_order_by {
  company: order_by
  entrepreneur_id: order_by
  investor: order_by
  money_requested: order_by
  people_id: order_by
}

"""aggregate min on columns"""
type entrepreneur_min_fields {
  company: String
  entrepreneur_id: Int
  investor: String
  money_requested: Float
  people_id: Int
}

"""
order by min() on columns of table "entrepreneur"
"""
input entrepreneur_min_order_by {
  company: order_by
  entrepreneur_id: order_by
  investor: order_by
  money_requested: order_by
  people_id: order_by
}

"""
response of any mutation on the table "entrepreneur"
"""
type entrepreneur_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [entrepreneur!]!
}

"""
input type for inserting object relation for remote table "entrepreneur"
"""
input entrepreneur_obj_rel_insert_input {
  data: entrepreneur_insert_input!
  on_conflict: entrepreneur_on_conflict
}

"""
on conflict condition type for table "entrepreneur"
"""
input entrepreneur_on_conflict {
  constraint: entrepreneur_constraint!
  update_columns: [entrepreneur_update_column!]!
  where: entrepreneur_bool_exp
}

"""
ordering options when selecting data from "entrepreneur"
"""
input entrepreneur_order_by {
  company: order_by
  entrepreneur_id: order_by
  investor: order_by
  money_requested: order_by
  people_id: order_by
  person: people_order_by
}

"""
select columns of table "entrepreneur"
"""
enum entrepreneur_select_column {
  """column name"""
  company

  """column name"""
  entrepreneur_id

  """column name"""
  investor

  """column name"""
  money_requested

  """column name"""
  people_id
}

"""
input type for updating data in table "entrepreneur"
"""
input entrepreneur_set_input {
  company: String
  entrepreneur_id: Int
  investor: String
  money_requested: Float
  people_id: Int
}

"""aggregate stddev on columns"""
type entrepreneur_stddev_fields {
  entrepreneur_id: Float
  money_requested: Float
  people_id: Float
}

"""
order by stddev() on columns of table "entrepreneur"
"""
input entrepreneur_stddev_order_by {
  entrepreneur_id: order_by
  money_requested: order_by
  people_id: order_by
}

"""aggregate stddev_pop on columns"""
type entrepreneur_stddev_pop_fields {
  entrepreneur_id: Float
  money_requested: Float
  people_id: Float
}

"""
order by stddev_pop() on columns of table "entrepreneur"
"""
input entrepreneur_stddev_pop_order_by {
  entrepreneur_id: order_by
  money_requested: order_by
  people_id: order_by
}

"""aggregate stddev_samp on columns"""
type entrepreneur_stddev_samp_fields {
  entrepreneur_id: Float
  money_requested: Float
  people_id: Float
}

"""
order by stddev_samp() on columns of table "entrepreneur"
"""
input entrepreneur_stddev_samp_order_by {
  entrepreneur_id: order_by
  money_requested: order_by
  people_id: order_by
}

"""aggregate sum on columns"""
type entrepreneur_sum_fields {
  entrepreneur_id: Int
  money_requested: Float
  people_id: Int
}

"""
order by sum() on columns of table "entrepreneur"
"""
input entrepreneur_sum_order_by {
  entrepreneur_id: order_by
  money_requested: order_by
  people_id: order_by
}

"""
update columns of table "entrepreneur"
"""
enum entrepreneur_update_column {
  """column name"""
  company

  """column name"""
  entrepreneur_id

  """column name"""
  investor

  """column name"""
  money_requested

  """column name"""
  people_id
}

"""aggregate var_pop on columns"""
type entrepreneur_var_pop_fields {
  entrepreneur_id: Float
  money_requested: Float
  people_id: Float
}

"""
order by var_pop() on columns of table "entrepreneur"
"""
input entrepreneur_var_pop_order_by {
  entrepreneur_id: order_by
  money_requested: order_by
  people_id: order_by
}

"""aggregate var_samp on columns"""
type entrepreneur_var_samp_fields {
  entrepreneur_id: Float
  money_requested: Float
  people_id: Float
}

"""
order by var_samp() on columns of table "entrepreneur"
"""
input entrepreneur_var_samp_order_by {
  entrepreneur_id: order_by
  money_requested: order_by
  people_id: order_by
}

"""aggregate variance on columns"""
type entrepreneur_variance_fields {
  entrepreneur_id: Float
  money_requested: Float
  people_id: Float
}

"""
order by variance() on columns of table "entrepreneur"
"""
input entrepreneur_variance_order_by {
  entrepreneur_id: order_by
  money_requested: order_by
  people_id: order_by
}

"""
expression to compare columns of type Float. All fields are combined with logical 'AND'.
"""
input Float_comparison_exp {
  _eq: Float
  _gt: Float
  _gte: Float
  _in: [Float!]
  _is_null: Boolean
  _lt: Float
  _lte: Float
  _neq: Float
  _nin: [Float!]
}

"""
expression to compare columns of type Int. All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "entrepreneur"
  """
  delete_entrepreneur(
    """filter the rows which have to be deleted"""
    where: entrepreneur_bool_exp!
  ): entrepreneur_mutation_response

  """
  delete data from the table: "people"
  """
  delete_people(
    """filter the rows which have to be deleted"""
    where: people_bool_exp!
  ): people_mutation_response

  """
  insert data into the table: "entrepreneur"
  """
  insert_entrepreneur(
    """the rows to be inserted"""
    objects: [entrepreneur_insert_input!]!

    """on conflict condition"""
    on_conflict: entrepreneur_on_conflict
  ): entrepreneur_mutation_response

  """
  insert a single row into the table: "entrepreneur"
  """
  insert_entrepreneur_one(
    """the row to be inserted"""
    object: entrepreneur_insert_input!

    """on conflict condition"""
    on_conflict: entrepreneur_on_conflict
  ): entrepreneur

  """
  insert data into the table: "people"
  """
  insert_people(
    """the rows to be inserted"""
    objects: [people_insert_input!]!

    """on conflict condition"""
    on_conflict: people_on_conflict
  ): people_mutation_response

  """
  insert a single row into the table: "people"
  """
  insert_people_one(
    """the row to be inserted"""
    object: people_insert_input!

    """on conflict condition"""
    on_conflict: people_on_conflict
  ): people

  """
  update data of the table: "entrepreneur"
  """
  update_entrepreneur(
    """increments the integer columns with given value of the filtered values"""
    _inc: entrepreneur_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: entrepreneur_set_input

    """filter the rows which have to be updated"""
    where: entrepreneur_bool_exp!
  ): entrepreneur_mutation_response

  """
  update data of the table: "people"
  """
  update_people(
    """increments the integer columns with given value of the filtered values"""
    _inc: people_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: people_set_input

    """filter the rows which have to be updated"""
    where: people_bool_exp!
  ): people_mutation_response
}

"""column ordering options"""
enum order_by {
  """in the ascending order, nulls last"""
  asc

  """in the ascending order, nulls first"""
  asc_nulls_first

  """in the ascending order, nulls last"""
  asc_nulls_last

  """in the descending order, nulls first"""
  desc

  """in the descending order, nulls first"""
  desc_nulls_first

  """in the descending order, nulls last"""
  desc_nulls_last
}

"""
columns and relationships of "people"
"""
type people {
  date_of_birth: String

  """An object relationship"""
  entrepreneur: entrepreneur
  height: Float
  name: String
  people_id: Int
  weight: Float
}

"""
aggregated selection of "people"
"""
type people_aggregate {
  aggregate: people_aggregate_fields
  nodes: [people!]!
}

"""
aggregate fields of "people"
"""
type people_aggregate_fields {
  avg: people_avg_fields
  count(columns: [people_select_column!], distinct: Boolean): Int
  max: people_max_fields
  min: people_min_fields
  stddev: people_stddev_fields
  stddev_pop: people_stddev_pop_fields
  stddev_samp: people_stddev_samp_fields
  sum: people_sum_fields
  var_pop: people_var_pop_fields
  var_samp: people_var_samp_fields
  variance: people_variance_fields
}

"""
order by aggregate values of table "people"
"""
input people_aggregate_order_by {
  avg: people_avg_order_by
  count: order_by
  max: people_max_order_by
  min: people_min_order_by
  stddev: people_stddev_order_by
  stddev_pop: people_stddev_pop_order_by
  stddev_samp: people_stddev_samp_order_by
  sum: people_sum_order_by
  var_pop: people_var_pop_order_by
  var_samp: people_var_samp_order_by
  variance: people_variance_order_by
}

"""
input type for inserting array relation for remote table "people"
"""
input people_arr_rel_insert_input {
  data: [people_insert_input!]!
  on_conflict: people_on_conflict
}

"""aggregate avg on columns"""
type people_avg_fields {
  height: Float
  people_id: Float
  weight: Float
}

"""
order by avg() on columns of table "people"
"""
input people_avg_order_by {
  height: order_by
  people_id: order_by
  weight: order_by
}

"""
Boolean expression to filter rows from the table "people". All fields are combined with a logical 'AND'.
"""
input people_bool_exp {
  _and: [people_bool_exp]
  _not: people_bool_exp
  _or: [people_bool_exp]
  date_of_birth: String_comparison_exp
  entrepreneur: entrepreneur_bool_exp
  height: Float_comparison_exp
  name: String_comparison_exp
  people_id: Int_comparison_exp
  weight: Float_comparison_exp
}

"""
unique or primary key constraints on table "people"
"""
enum people_constraint {
  """unique or primary key constraint"""
  idx_24727_sqlite_autoindex_people_1
}

"""
input type for incrementing integer column in table "people"
"""
input people_inc_input {
  height: Float
  people_id: Int
  weight: Float
}

"""
input type for inserting data into table "people"
"""
input people_insert_input {
  date_of_birth: String
  entrepreneur: entrepreneur_obj_rel_insert_input
  height: Float
  name: String
  people_id: Int
  weight: Float
}

"""aggregate max on columns"""
type people_max_fields {
  date_of_birth: String
  height: Float
  name: String
  people_id: Int
  weight: Float
}

"""
order by max() on columns of table "people"
"""
input people_max_order_by {
  date_of_birth: order_by
  height: order_by
  name: order_by
  people_id: order_by
  weight: order_by
}

"""aggregate min on columns"""
type people_min_fields {
  date_of_birth: String
  height: Float
  name: String
  people_id: Int
  weight: Float
}

"""
order by min() on columns of table "people"
"""
input people_min_order_by {
  date_of_birth: order_by
  height: order_by
  name: order_by
  people_id: order_by
  weight: order_by
}

"""
response of any mutation on the table "people"
"""
type people_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [people!]!
}

"""
input type for inserting object relation for remote table "people"
"""
input people_obj_rel_insert_input {
  data: people_insert_input!
  on_conflict: people_on_conflict
}

"""
on conflict condition type for table "people"
"""
input people_on_conflict {
  constraint: people_constraint!
  update_columns: [people_update_column!]!
  where: people_bool_exp
}

"""
ordering options when selecting data from "people"
"""
input people_order_by {
  date_of_birth: order_by
  entrepreneur: entrepreneur_order_by
  height: order_by
  name: order_by
  people_id: order_by
  weight: order_by
}

"""
select columns of table "people"
"""
enum people_select_column {
  """column name"""
  date_of_birth

  """column name"""
  height

  """column name"""
  name

  """column name"""
  people_id

  """column name"""
  weight
}

"""
input type for updating data in table "people"
"""
input people_set_input {
  date_of_birth: String
  height: Float
  name: String
  people_id: Int
  weight: Float
}

"""aggregate stddev on columns"""
type people_stddev_fields {
  height: Float
  people_id: Float
  weight: Float
}

"""
order by stddev() on columns of table "people"
"""
input people_stddev_order_by {
  height: order_by
  people_id: order_by
  weight: order_by
}

"""aggregate stddev_pop on columns"""
type people_stddev_pop_fields {
  height: Float
  people_id: Float
  weight: Float
}

"""
order by stddev_pop() on columns of table "people"
"""
input people_stddev_pop_order_by {
  height: order_by
  people_id: order_by
  weight: order_by
}

"""aggregate stddev_samp on columns"""
type people_stddev_samp_fields {
  height: Float
  people_id: Float
  weight: Float
}

"""
order by stddev_samp() on columns of table "people"
"""
input people_stddev_samp_order_by {
  height: order_by
  people_id: order_by
  weight: order_by
}

"""aggregate sum on columns"""
type people_sum_fields {
  height: Float
  people_id: Int
  weight: Float
}

"""
order by sum() on columns of table "people"
"""
input people_sum_order_by {
  height: order_by
  people_id: order_by
  weight: order_by
}

"""
update columns of table "people"
"""
enum people_update_column {
  """column name"""
  date_of_birth

  """column name"""
  height

  """column name"""
  name

  """column name"""
  people_id

  """column name"""
  weight
}

"""aggregate var_pop on columns"""
type people_var_pop_fields {
  height: Float
  people_id: Float
  weight: Float
}

"""
order by var_pop() on columns of table "people"
"""
input people_var_pop_order_by {
  height: order_by
  people_id: order_by
  weight: order_by
}

"""aggregate var_samp on columns"""
type people_var_samp_fields {
  height: Float
  people_id: Float
  weight: Float
}

"""
order by var_samp() on columns of table "people"
"""
input people_var_samp_order_by {
  height: order_by
  people_id: order_by
  weight: order_by
}

"""aggregate variance on columns"""
type people_variance_fields {
  height: Float
  people_id: Float
  weight: Float
}

"""
order by variance() on columns of table "people"
"""
input people_variance_order_by {
  height: order_by
  people_id: order_by
  weight: order_by
}

"""query root"""
type query_root {
  """
  fetch data from the table: "entrepreneur"
  """
  entrepreneur(
    """distinct select on columns"""
    distinct_on: [entrepreneur_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [entrepreneur_order_by!]

    """filter the rows returned"""
    where: entrepreneur_bool_exp
  ): [entrepreneur!]!

  """
  fetch aggregated fields from the table: "entrepreneur"
  """
  entrepreneur_aggregate(
    """distinct select on columns"""
    distinct_on: [entrepreneur_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [entrepreneur_order_by!]

    """filter the rows returned"""
    where: entrepreneur_bool_exp
  ): entrepreneur_aggregate!

  """
  fetch data from the table: "people"
  """
  people(
    """distinct select on columns"""
    distinct_on: [people_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [people_order_by!]

    """filter the rows returned"""
    where: people_bool_exp
  ): [people!]!

  """
  fetch aggregated fields from the table: "people"
  """
  people_aggregate(
    """distinct select on columns"""
    distinct_on: [people_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [people_order_by!]

    """filter the rows returned"""
    where: people_bool_exp
  ): people_aggregate!
}

"""
expression to compare columns of type String. All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String
  _ilike: String
  _in: [String!]
  _is_null: Boolean
  _like: String
  _lt: String
  _lte: String
  _neq: String
  _nilike: String
  _nin: [String!]
  _nlike: String
  _nsimilar: String
  _similar: String
}

"""subscription root"""
type subscription_root {
  """
  fetch data from the table: "entrepreneur"
  """
  entrepreneur(
    """distinct select on columns"""
    distinct_on: [entrepreneur_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [entrepreneur_order_by!]

    """filter the rows returned"""
    where: entrepreneur_bool_exp
  ): [entrepreneur!]!

  """
  fetch aggregated fields from the table: "entrepreneur"
  """
  entrepreneur_aggregate(
    """distinct select on columns"""
    distinct_on: [entrepreneur_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [entrepreneur_order_by!]

    """filter the rows returned"""
    where: entrepreneur_bool_exp
  ): entrepreneur_aggregate!

  """
  fetch data from the table: "people"
  """
  people(
    """distinct select on columns"""
    distinct_on: [people_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [people_order_by!]

    """filter the rows returned"""
    where: people_bool_exp
  ): [people!]!

  """
  fetch aggregated fields from the table: "people"
  """
  people_aggregate(
    """distinct select on columns"""
    distinct_on: [people_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [people_order_by!]

    """filter the rows returned"""
    where: people_bool_exp
  ): people_aggregate!
}
