schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""
Direct the client to resolve this field locally, either from the cache or local resolvers.
"""
directive @client(
  """
  When true, the client will never use the cache for this value. See
  https://www.apollographql.com/docs/react/essentials/local-state/#forcing-resolvers-with-clientalways-true
  """
  always: Boolean
) on FIELD | FRAGMENT_DEFINITION | INLINE_FRAGMENT

"""
Export this locally resolved field as a variable to be used in the remainder of this query. See
https://www.apollographql.com/docs/react/essentials/local-state/#using-client-fields-as-variables
"""
directive @export(
  """The variable name to export this field as."""
  as: String!
) on FIELD

"""
Specify a custom store key for this result. See
https://www.apollographql.com/docs/react/advanced/caching/#the-connection-directive
"""
directive @connection(
  """Specify the store key."""
  key: String!

  """
  An array of query argument names to include in the generated custom store key.
  """
  filter: [String!]
) on FIELD

scalar bigint

"""
expression to compare columns of type bigint. All fields are combined with logical 'AND'.
"""
input bigint_comparison_exp {
  _eq: bigint
  _gt: bigint
  _gte: bigint
  _in: [bigint!]
  _is_null: Boolean
  _lt: bigint
  _lte: bigint
  _neq: bigint
  _nin: [bigint!]
}

"""
expression to compare columns of type Float. All fields are combined with logical 'AND'.
"""
input Float_comparison_exp {
  _eq: Float
  _gt: Float
  _gte: Float
  _in: [Float!]
  _is_null: Boolean
  _lt: Float
  _lte: Float
  _neq: Float
  _nin: [Float!]
}

"""
columns and relationships of "has_pet"
"""
type has_pet {
  """An object relationship"""
  pet: pets
  petid: bigint

  """An object relationship"""
  student: student
  stuid: bigint
}

"""
aggregated selection of "has_pet"
"""
type has_pet_aggregate {
  aggregate: has_pet_aggregate_fields
  nodes: [has_pet!]!
}

"""
aggregate fields of "has_pet"
"""
type has_pet_aggregate_fields {
  avg: has_pet_avg_fields
  count(columns: [has_pet_select_column!], distinct: Boolean): Int
  max: has_pet_max_fields
  min: has_pet_min_fields
  stddev: has_pet_stddev_fields
  stddev_pop: has_pet_stddev_pop_fields
  stddev_samp: has_pet_stddev_samp_fields
  sum: has_pet_sum_fields
  var_pop: has_pet_var_pop_fields
  var_samp: has_pet_var_samp_fields
  variance: has_pet_variance_fields
}

"""
order by aggregate values of table "has_pet"
"""
input has_pet_aggregate_order_by {
  avg: has_pet_avg_order_by
  count: order_by
  max: has_pet_max_order_by
  min: has_pet_min_order_by
  stddev: has_pet_stddev_order_by
  stddev_pop: has_pet_stddev_pop_order_by
  stddev_samp: has_pet_stddev_samp_order_by
  sum: has_pet_sum_order_by
  var_pop: has_pet_var_pop_order_by
  var_samp: has_pet_var_samp_order_by
  variance: has_pet_variance_order_by
}

"""
input type for inserting array relation for remote table "has_pet"
"""
input has_pet_arr_rel_insert_input {
  data: [has_pet_insert_input!]!
}

"""aggregate avg on columns"""
type has_pet_avg_fields {
  petid: Float
  stuid: Float
}

"""
order by avg() on columns of table "has_pet"
"""
input has_pet_avg_order_by {
  petid: order_by
  stuid: order_by
}

"""
Boolean expression to filter rows from the table "has_pet". All fields are combined with a logical 'AND'.
"""
input has_pet_bool_exp {
  _and: [has_pet_bool_exp]
  _not: has_pet_bool_exp
  _or: [has_pet_bool_exp]
  pet: pets_bool_exp
  petid: bigint_comparison_exp
  student: student_bool_exp
  stuid: bigint_comparison_exp
}

"""
input type for incrementing integer column in table "has_pet"
"""
input has_pet_inc_input {
  petid: bigint
  stuid: bigint
}

"""
input type for inserting data into table "has_pet"
"""
input has_pet_insert_input {
  pet: pets_obj_rel_insert_input
  petid: bigint
  student: student_obj_rel_insert_input
  stuid: bigint
}

"""aggregate max on columns"""
type has_pet_max_fields {
  petid: bigint
  stuid: bigint
}

"""
order by max() on columns of table "has_pet"
"""
input has_pet_max_order_by {
  petid: order_by
  stuid: order_by
}

"""aggregate min on columns"""
type has_pet_min_fields {
  petid: bigint
  stuid: bigint
}

"""
order by min() on columns of table "has_pet"
"""
input has_pet_min_order_by {
  petid: order_by
  stuid: order_by
}

"""
response of any mutation on the table "has_pet"
"""
type has_pet_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [has_pet!]!
}

"""
input type for inserting object relation for remote table "has_pet"
"""
input has_pet_obj_rel_insert_input {
  data: has_pet_insert_input!
}

"""
ordering options when selecting data from "has_pet"
"""
input has_pet_order_by {
  pet: pets_order_by
  petid: order_by
  student: student_order_by
  stuid: order_by
}

"""
select columns of table "has_pet"
"""
enum has_pet_select_column {
  """column name"""
  petid

  """column name"""
  stuid
}

"""
input type for updating data in table "has_pet"
"""
input has_pet_set_input {
  petid: bigint
  stuid: bigint
}

"""aggregate stddev on columns"""
type has_pet_stddev_fields {
  petid: Float
  stuid: Float
}

"""
order by stddev() on columns of table "has_pet"
"""
input has_pet_stddev_order_by {
  petid: order_by
  stuid: order_by
}

"""aggregate stddev_pop on columns"""
type has_pet_stddev_pop_fields {
  petid: Float
  stuid: Float
}

"""
order by stddev_pop() on columns of table "has_pet"
"""
input has_pet_stddev_pop_order_by {
  petid: order_by
  stuid: order_by
}

"""aggregate stddev_samp on columns"""
type has_pet_stddev_samp_fields {
  petid: Float
  stuid: Float
}

"""
order by stddev_samp() on columns of table "has_pet"
"""
input has_pet_stddev_samp_order_by {
  petid: order_by
  stuid: order_by
}

"""aggregate sum on columns"""
type has_pet_sum_fields {
  petid: bigint
  stuid: bigint
}

"""
order by sum() on columns of table "has_pet"
"""
input has_pet_sum_order_by {
  petid: order_by
  stuid: order_by
}

"""aggregate var_pop on columns"""
type has_pet_var_pop_fields {
  petid: Float
  stuid: Float
}

"""
order by var_pop() on columns of table "has_pet"
"""
input has_pet_var_pop_order_by {
  petid: order_by
  stuid: order_by
}

"""aggregate var_samp on columns"""
type has_pet_var_samp_fields {
  petid: Float
  stuid: Float
}

"""
order by var_samp() on columns of table "has_pet"
"""
input has_pet_var_samp_order_by {
  petid: order_by
  stuid: order_by
}

"""aggregate variance on columns"""
type has_pet_variance_fields {
  petid: Float
  stuid: Float
}

"""
order by variance() on columns of table "has_pet"
"""
input has_pet_variance_order_by {
  petid: order_by
  stuid: order_by
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "has_pet"
  """
  delete_has_pet(
    """filter the rows which have to be deleted"""
    where: has_pet_bool_exp!
  ): has_pet_mutation_response

  """
  delete data from the table: "pets"
  """
  delete_pets(
    """filter the rows which have to be deleted"""
    where: pets_bool_exp!
  ): pets_mutation_response

  """
  delete single row from the table: "pets"
  """
  delete_pets_by_pk(petid: bigint!): pets

  """
  delete data from the table: "student"
  """
  delete_student(
    """filter the rows which have to be deleted"""
    where: student_bool_exp!
  ): student_mutation_response

  """
  delete single row from the table: "student"
  """
  delete_student_by_pk(stuid: bigint!): student

  """
  insert data into the table: "has_pet"
  """
  insert_has_pet(
    """the rows to be inserted"""
    objects: [has_pet_insert_input!]!
  ): has_pet_mutation_response

  """
  insert a single row into the table: "has_pet"
  """
  insert_has_pet_one(
    """the row to be inserted"""
    object: has_pet_insert_input!
  ): has_pet

  """
  insert data into the table: "pets"
  """
  insert_pets(
    """the rows to be inserted"""
    objects: [pets_insert_input!]!

    """on conflict condition"""
    on_conflict: pets_on_conflict
  ): pets_mutation_response

  """
  insert a single row into the table: "pets"
  """
  insert_pets_one(
    """the row to be inserted"""
    object: pets_insert_input!

    """on conflict condition"""
    on_conflict: pets_on_conflict
  ): pets

  """
  insert data into the table: "student"
  """
  insert_student(
    """the rows to be inserted"""
    objects: [student_insert_input!]!

    """on conflict condition"""
    on_conflict: student_on_conflict
  ): student_mutation_response

  """
  insert a single row into the table: "student"
  """
  insert_student_one(
    """the row to be inserted"""
    object: student_insert_input!

    """on conflict condition"""
    on_conflict: student_on_conflict
  ): student

  """
  update data of the table: "has_pet"
  """
  update_has_pet(
    """increments the integer columns with given value of the filtered values"""
    _inc: has_pet_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: has_pet_set_input

    """filter the rows which have to be updated"""
    where: has_pet_bool_exp!
  ): has_pet_mutation_response

  """
  update data of the table: "pets"
  """
  update_pets(
    """increments the integer columns with given value of the filtered values"""
    _inc: pets_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: pets_set_input

    """filter the rows which have to be updated"""
    where: pets_bool_exp!
  ): pets_mutation_response

  """
  update single row of the table: "pets"
  """
  update_pets_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: pets_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: pets_set_input
    pk_columns: pets_pk_columns_input!
  ): pets

  """
  update data of the table: "student"
  """
  update_student(
    """increments the integer columns with given value of the filtered values"""
    _inc: student_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: student_set_input

    """filter the rows which have to be updated"""
    where: student_bool_exp!
  ): student_mutation_response

  """
  update single row of the table: "student"
  """
  update_student_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: student_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: student_set_input
    pk_columns: student_pk_columns_input!
  ): student
}

"""column ordering options"""
enum order_by {
  """in the ascending order, nulls last"""
  asc

  """in the ascending order, nulls first"""
  asc_nulls_first

  """in the ascending order, nulls last"""
  asc_nulls_last

  """in the descending order, nulls first"""
  desc

  """in the descending order, nulls first"""
  desc_nulls_first

  """in the descending order, nulls last"""
  desc_nulls_last
}

"""
columns and relationships of "pets"
"""
type pets {
  """An array relationship"""
  has_pets(
    """distinct select on columns"""
    distinct_on: [has_pet_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [has_pet_order_by!]

    """filter the rows returned"""
    where: has_pet_bool_exp
  ): [has_pet!]!

  """An aggregated array relationship"""
  has_pets_aggregate(
    """distinct select on columns"""
    distinct_on: [has_pet_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [has_pet_order_by!]

    """filter the rows returned"""
    where: has_pet_bool_exp
  ): has_pet_aggregate!
  pet_age: bigint
  petid: bigint!
  pettype: String
  weight: Float
}

"""
aggregated selection of "pets"
"""
type pets_aggregate {
  aggregate: pets_aggregate_fields
  nodes: [pets!]!
}

"""
aggregate fields of "pets"
"""
type pets_aggregate_fields {
  avg: pets_avg_fields
  count(columns: [pets_select_column!], distinct: Boolean): Int
  max: pets_max_fields
  min: pets_min_fields
  stddev: pets_stddev_fields
  stddev_pop: pets_stddev_pop_fields
  stddev_samp: pets_stddev_samp_fields
  sum: pets_sum_fields
  var_pop: pets_var_pop_fields
  var_samp: pets_var_samp_fields
  variance: pets_variance_fields
}

"""
order by aggregate values of table "pets"
"""
input pets_aggregate_order_by {
  avg: pets_avg_order_by
  count: order_by
  max: pets_max_order_by
  min: pets_min_order_by
  stddev: pets_stddev_order_by
  stddev_pop: pets_stddev_pop_order_by
  stddev_samp: pets_stddev_samp_order_by
  sum: pets_sum_order_by
  var_pop: pets_var_pop_order_by
  var_samp: pets_var_samp_order_by
  variance: pets_variance_order_by
}

"""
input type for inserting array relation for remote table "pets"
"""
input pets_arr_rel_insert_input {
  data: [pets_insert_input!]!
  on_conflict: pets_on_conflict
}

"""aggregate avg on columns"""
type pets_avg_fields {
  pet_age: Float
  petid: Float
  weight: Float
}

"""
order by avg() on columns of table "pets"
"""
input pets_avg_order_by {
  pet_age: order_by
  petid: order_by
  weight: order_by
}

"""
Boolean expression to filter rows from the table "pets". All fields are combined with a logical 'AND'.
"""
input pets_bool_exp {
  _and: [pets_bool_exp]
  _not: pets_bool_exp
  _or: [pets_bool_exp]
  has_pets: has_pet_bool_exp
  pet_age: bigint_comparison_exp
  petid: bigint_comparison_exp
  pettype: String_comparison_exp
  weight: Float_comparison_exp
}

"""
unique or primary key constraints on table "pets"
"""
enum pets_constraint {
  """unique or primary key constraint"""
  idx_19274_pets_pkey
}

"""
input type for incrementing integer column in table "pets"
"""
input pets_inc_input {
  pet_age: bigint
  petid: bigint
  weight: Float
}

"""
input type for inserting data into table "pets"
"""
input pets_insert_input {
  has_pets: has_pet_arr_rel_insert_input
  pet_age: bigint
  petid: bigint
  pettype: String
  weight: Float
}

"""aggregate max on columns"""
type pets_max_fields {
  pet_age: bigint
  petid: bigint
  pettype: String
  weight: Float
}

"""
order by max() on columns of table "pets"
"""
input pets_max_order_by {
  pet_age: order_by
  petid: order_by
  pettype: order_by
  weight: order_by
}

"""aggregate min on columns"""
type pets_min_fields {
  pet_age: bigint
  petid: bigint
  pettype: String
  weight: Float
}

"""
order by min() on columns of table "pets"
"""
input pets_min_order_by {
  pet_age: order_by
  petid: order_by
  pettype: order_by
  weight: order_by
}

"""
response of any mutation on the table "pets"
"""
type pets_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [pets!]!
}

"""
input type for inserting object relation for remote table "pets"
"""
input pets_obj_rel_insert_input {
  data: pets_insert_input!
  on_conflict: pets_on_conflict
}

"""
on conflict condition type for table "pets"
"""
input pets_on_conflict {
  constraint: pets_constraint!
  update_columns: [pets_update_column!]!
  where: pets_bool_exp
}

"""
ordering options when selecting data from "pets"
"""
input pets_order_by {
  has_pets_aggregate: has_pet_aggregate_order_by
  pet_age: order_by
  petid: order_by
  pettype: order_by
  weight: order_by
}

"""
primary key columns input for table: "pets"
"""
input pets_pk_columns_input {
  petid: bigint!
}

"""
select columns of table "pets"
"""
enum pets_select_column {
  """column name"""
  pet_age

  """column name"""
  petid

  """column name"""
  pettype

  """column name"""
  weight
}

"""
input type for updating data in table "pets"
"""
input pets_set_input {
  pet_age: bigint
  petid: bigint
  pettype: String
  weight: Float
}

"""aggregate stddev on columns"""
type pets_stddev_fields {
  pet_age: Float
  petid: Float
  weight: Float
}

"""
order by stddev() on columns of table "pets"
"""
input pets_stddev_order_by {
  pet_age: order_by
  petid: order_by
  weight: order_by
}

"""aggregate stddev_pop on columns"""
type pets_stddev_pop_fields {
  pet_age: Float
  petid: Float
  weight: Float
}

"""
order by stddev_pop() on columns of table "pets"
"""
input pets_stddev_pop_order_by {
  pet_age: order_by
  petid: order_by
  weight: order_by
}

"""aggregate stddev_samp on columns"""
type pets_stddev_samp_fields {
  pet_age: Float
  petid: Float
  weight: Float
}

"""
order by stddev_samp() on columns of table "pets"
"""
input pets_stddev_samp_order_by {
  pet_age: order_by
  petid: order_by
  weight: order_by
}

"""aggregate sum on columns"""
type pets_sum_fields {
  pet_age: bigint
  petid: bigint
  weight: Float
}

"""
order by sum() on columns of table "pets"
"""
input pets_sum_order_by {
  pet_age: order_by
  petid: order_by
  weight: order_by
}

"""
update columns of table "pets"
"""
enum pets_update_column {
  """column name"""
  pet_age

  """column name"""
  petid

  """column name"""
  pettype

  """column name"""
  weight
}

"""aggregate var_pop on columns"""
type pets_var_pop_fields {
  pet_age: Float
  petid: Float
  weight: Float
}

"""
order by var_pop() on columns of table "pets"
"""
input pets_var_pop_order_by {
  pet_age: order_by
  petid: order_by
  weight: order_by
}

"""aggregate var_samp on columns"""
type pets_var_samp_fields {
  pet_age: Float
  petid: Float
  weight: Float
}

"""
order by var_samp() on columns of table "pets"
"""
input pets_var_samp_order_by {
  pet_age: order_by
  petid: order_by
  weight: order_by
}

"""aggregate variance on columns"""
type pets_variance_fields {
  pet_age: Float
  petid: Float
  weight: Float
}

"""
order by variance() on columns of table "pets"
"""
input pets_variance_order_by {
  pet_age: order_by
  petid: order_by
  weight: order_by
}

"""query root"""
type query_root {
  """
  fetch data from the table: "has_pet"
  """
  has_pet(
    """distinct select on columns"""
    distinct_on: [has_pet_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [has_pet_order_by!]

    """filter the rows returned"""
    where: has_pet_bool_exp
  ): [has_pet!]!

  """
  fetch aggregated fields from the table: "has_pet"
  """
  has_pet_aggregate(
    """distinct select on columns"""
    distinct_on: [has_pet_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [has_pet_order_by!]

    """filter the rows returned"""
    where: has_pet_bool_exp
  ): has_pet_aggregate!

  """
  fetch data from the table: "pets"
  """
  pets(
    """distinct select on columns"""
    distinct_on: [pets_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [pets_order_by!]

    """filter the rows returned"""
    where: pets_bool_exp
  ): [pets!]!

  """
  fetch aggregated fields from the table: "pets"
  """
  pets_aggregate(
    """distinct select on columns"""
    distinct_on: [pets_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [pets_order_by!]

    """filter the rows returned"""
    where: pets_bool_exp
  ): pets_aggregate!

  """fetch data from the table: "pets" using primary key columns"""
  pets_by_pk(petid: bigint!): pets

  """
  fetch data from the table: "student"
  """
  student(
    """distinct select on columns"""
    distinct_on: [student_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [student_order_by!]

    """filter the rows returned"""
    where: student_bool_exp
  ): [student!]!

  """
  fetch aggregated fields from the table: "student"
  """
  student_aggregate(
    """distinct select on columns"""
    distinct_on: [student_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [student_order_by!]

    """filter the rows returned"""
    where: student_bool_exp
  ): student_aggregate!

  """fetch data from the table: "student" using primary key columns"""
  student_by_pk(stuid: bigint!): student
}

"""
expression to compare columns of type String. All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String
  _ilike: String
  _in: [String!]
  _is_null: Boolean
  _like: String
  _lt: String
  _lte: String
  _neq: String
  _nilike: String
  _nin: [String!]
  _nlike: String
  _nsimilar: String
  _similar: String
}

"""
columns and relationships of "student"
"""
type student {
  advisor: bigint
  age: bigint
  city_code: String
  fname: String

  """An array relationship"""
  has_pets(
    """distinct select on columns"""
    distinct_on: [has_pet_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [has_pet_order_by!]

    """filter the rows returned"""
    where: has_pet_bool_exp
  ): [has_pet!]!

  """An aggregated array relationship"""
  has_pets_aggregate(
    """distinct select on columns"""
    distinct_on: [has_pet_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [has_pet_order_by!]

    """filter the rows returned"""
    where: has_pet_bool_exp
  ): has_pet_aggregate!
  lname: String
  major: bigint
  sex: String
  stuid: bigint!
}

"""
aggregated selection of "student"
"""
type student_aggregate {
  aggregate: student_aggregate_fields
  nodes: [student!]!
}

"""
aggregate fields of "student"
"""
type student_aggregate_fields {
  avg: student_avg_fields
  count(columns: [student_select_column!], distinct: Boolean): Int
  max: student_max_fields
  min: student_min_fields
  stddev: student_stddev_fields
  stddev_pop: student_stddev_pop_fields
  stddev_samp: student_stddev_samp_fields
  sum: student_sum_fields
  var_pop: student_var_pop_fields
  var_samp: student_var_samp_fields
  variance: student_variance_fields
}

"""
order by aggregate values of table "student"
"""
input student_aggregate_order_by {
  avg: student_avg_order_by
  count: order_by
  max: student_max_order_by
  min: student_min_order_by
  stddev: student_stddev_order_by
  stddev_pop: student_stddev_pop_order_by
  stddev_samp: student_stddev_samp_order_by
  sum: student_sum_order_by
  var_pop: student_var_pop_order_by
  var_samp: student_var_samp_order_by
  variance: student_variance_order_by
}

"""
input type for inserting array relation for remote table "student"
"""
input student_arr_rel_insert_input {
  data: [student_insert_input!]!
  on_conflict: student_on_conflict
}

"""aggregate avg on columns"""
type student_avg_fields {
  advisor: Float
  age: Float
  major: Float
  stuid: Float
}

"""
order by avg() on columns of table "student"
"""
input student_avg_order_by {
  advisor: order_by
  age: order_by
  major: order_by
  stuid: order_by
}

"""
Boolean expression to filter rows from the table "student". All fields are combined with a logical 'AND'.
"""
input student_bool_exp {
  _and: [student_bool_exp]
  _not: student_bool_exp
  _or: [student_bool_exp]
  advisor: bigint_comparison_exp
  age: bigint_comparison_exp
  city_code: String_comparison_exp
  fname: String_comparison_exp
  has_pets: has_pet_bool_exp
  lname: String_comparison_exp
  major: bigint_comparison_exp
  sex: String_comparison_exp
  stuid: bigint_comparison_exp
}

"""
unique or primary key constraints on table "student"
"""
enum student_constraint {
  """unique or primary key constraint"""
  idx_19265_student_pkey
}

"""
input type for incrementing integer column in table "student"
"""
input student_inc_input {
  advisor: bigint
  age: bigint
  major: bigint
  stuid: bigint
}

"""
input type for inserting data into table "student"
"""
input student_insert_input {
  advisor: bigint
  age: bigint
  city_code: String
  fname: String
  has_pets: has_pet_arr_rel_insert_input
  lname: String
  major: bigint
  sex: String
  stuid: bigint
}

"""aggregate max on columns"""
type student_max_fields {
  advisor: bigint
  age: bigint
  city_code: String
  fname: String
  lname: String
  major: bigint
  sex: String
  stuid: bigint
}

"""
order by max() on columns of table "student"
"""
input student_max_order_by {
  advisor: order_by
  age: order_by
  city_code: order_by
  fname: order_by
  lname: order_by
  major: order_by
  sex: order_by
  stuid: order_by
}

"""aggregate min on columns"""
type student_min_fields {
  advisor: bigint
  age: bigint
  city_code: String
  fname: String
  lname: String
  major: bigint
  sex: String
  stuid: bigint
}

"""
order by min() on columns of table "student"
"""
input student_min_order_by {
  advisor: order_by
  age: order_by
  city_code: order_by
  fname: order_by
  lname: order_by
  major: order_by
  sex: order_by
  stuid: order_by
}

"""
response of any mutation on the table "student"
"""
type student_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [student!]!
}

"""
input type for inserting object relation for remote table "student"
"""
input student_obj_rel_insert_input {
  data: student_insert_input!
  on_conflict: student_on_conflict
}

"""
on conflict condition type for table "student"
"""
input student_on_conflict {
  constraint: student_constraint!
  update_columns: [student_update_column!]!
  where: student_bool_exp
}

"""
ordering options when selecting data from "student"
"""
input student_order_by {
  advisor: order_by
  age: order_by
  city_code: order_by
  fname: order_by
  has_pets_aggregate: has_pet_aggregate_order_by
  lname: order_by
  major: order_by
  sex: order_by
  stuid: order_by
}

"""
primary key columns input for table: "student"
"""
input student_pk_columns_input {
  stuid: bigint!
}

"""
select columns of table "student"
"""
enum student_select_column {
  """column name"""
  advisor

  """column name"""
  age

  """column name"""
  city_code

  """column name"""
  fname

  """column name"""
  lname

  """column name"""
  major

  """column name"""
  sex

  """column name"""
  stuid
}

"""
input type for updating data in table "student"
"""
input student_set_input {
  advisor: bigint
  age: bigint
  city_code: String
  fname: String
  lname: String
  major: bigint
  sex: String
  stuid: bigint
}

"""aggregate stddev on columns"""
type student_stddev_fields {
  advisor: Float
  age: Float
  major: Float
  stuid: Float
}

"""
order by stddev() on columns of table "student"
"""
input student_stddev_order_by {
  advisor: order_by
  age: order_by
  major: order_by
  stuid: order_by
}

"""aggregate stddev_pop on columns"""
type student_stddev_pop_fields {
  advisor: Float
  age: Float
  major: Float
  stuid: Float
}

"""
order by stddev_pop() on columns of table "student"
"""
input student_stddev_pop_order_by {
  advisor: order_by
  age: order_by
  major: order_by
  stuid: order_by
}

"""aggregate stddev_samp on columns"""
type student_stddev_samp_fields {
  advisor: Float
  age: Float
  major: Float
  stuid: Float
}

"""
order by stddev_samp() on columns of table "student"
"""
input student_stddev_samp_order_by {
  advisor: order_by
  age: order_by
  major: order_by
  stuid: order_by
}

"""aggregate sum on columns"""
type student_sum_fields {
  advisor: bigint
  age: bigint
  major: bigint
  stuid: bigint
}

"""
order by sum() on columns of table "student"
"""
input student_sum_order_by {
  advisor: order_by
  age: order_by
  major: order_by
  stuid: order_by
}

"""
update columns of table "student"
"""
enum student_update_column {
  """column name"""
  advisor

  """column name"""
  age

  """column name"""
  city_code

  """column name"""
  fname

  """column name"""
  lname

  """column name"""
  major

  """column name"""
  sex

  """column name"""
  stuid
}

"""aggregate var_pop on columns"""
type student_var_pop_fields {
  advisor: Float
  age: Float
  major: Float
  stuid: Float
}

"""
order by var_pop() on columns of table "student"
"""
input student_var_pop_order_by {
  advisor: order_by
  age: order_by
  major: order_by
  stuid: order_by
}

"""aggregate var_samp on columns"""
type student_var_samp_fields {
  advisor: Float
  age: Float
  major: Float
  stuid: Float
}

"""
order by var_samp() on columns of table "student"
"""
input student_var_samp_order_by {
  advisor: order_by
  age: order_by
  major: order_by
  stuid: order_by
}

"""aggregate variance on columns"""
type student_variance_fields {
  advisor: Float
  age: Float
  major: Float
  stuid: Float
}

"""
order by variance() on columns of table "student"
"""
input student_variance_order_by {
  advisor: order_by
  age: order_by
  major: order_by
  stuid: order_by
}

"""subscription root"""
type subscription_root {
  """
  fetch data from the table: "has_pet"
  """
  has_pet(
    """distinct select on columns"""
    distinct_on: [has_pet_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [has_pet_order_by!]

    """filter the rows returned"""
    where: has_pet_bool_exp
  ): [has_pet!]!

  """
  fetch aggregated fields from the table: "has_pet"
  """
  has_pet_aggregate(
    """distinct select on columns"""
    distinct_on: [has_pet_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [has_pet_order_by!]

    """filter the rows returned"""
    where: has_pet_bool_exp
  ): has_pet_aggregate!

  """
  fetch data from the table: "pets"
  """
  pets(
    """distinct select on columns"""
    distinct_on: [pets_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [pets_order_by!]

    """filter the rows returned"""
    where: pets_bool_exp
  ): [pets!]!

  """
  fetch aggregated fields from the table: "pets"
  """
  pets_aggregate(
    """distinct select on columns"""
    distinct_on: [pets_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [pets_order_by!]

    """filter the rows returned"""
    where: pets_bool_exp
  ): pets_aggregate!

  """fetch data from the table: "pets" using primary key columns"""
  pets_by_pk(petid: bigint!): pets

  """
  fetch data from the table: "student"
  """
  student(
    """distinct select on columns"""
    distinct_on: [student_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [student_order_by!]

    """filter the rows returned"""
    where: student_bool_exp
  ): [student!]!

  """
  fetch aggregated fields from the table: "student"
  """
  student_aggregate(
    """distinct select on columns"""
    distinct_on: [student_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [student_order_by!]

    """filter the rows returned"""
    where: student_bool_exp
  ): student_aggregate!

  """fetch data from the table: "student" using primary key columns"""
  student_by_pk(stuid: bigint!): student
}
