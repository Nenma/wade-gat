schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""
Direct the client to resolve this field locally, either from the cache or local resolvers.
"""
directive @client(
  """
  When true, the client will never use the cache for this value. See
  https://www.apollographql.com/docs/react/essentials/local-state/#forcing-resolvers-with-clientalways-true
  """
  always: Boolean
) on FIELD | FRAGMENT_DEFINITION | INLINE_FRAGMENT

"""
Export this locally resolved field as a variable to be used in the remainder of this query. See
https://www.apollographql.com/docs/react/essentials/local-state/#using-client-fields-as-variables
"""
directive @export(
  """The variable name to export this field as."""
  as: String!
) on FIELD

"""
Specify a custom store key for this result. See
https://www.apollographql.com/docs/react/advanced/caching/#the-connection-directive
"""
directive @connection(
  """Specify the store key."""
  key: String!

  """
  An array of query argument names to include in the generated custom store key.
  """
  filter: [String!]
) on FIELD

scalar bigint

"""
expression to compare columns of type bigint. All fields are combined with logical 'AND'.
"""
input bigint_comparison_exp {
  _eq: bigint
  _gt: bigint
  _gte: bigint
  _in: [bigint!]
  _is_null: Boolean
  _lt: bigint
  _lte: bigint
  _neq: bigint
  _nin: [bigint!]
}

scalar float8

"""
expression to compare columns of type float8. All fields are combined with logical 'AND'.
"""
input float8_comparison_exp {
  _eq: float8
  _gt: float8
  _gte: float8
  _in: [float8!]
  _is_null: Boolean
  _lt: float8
  _lte: float8
  _neq: float8
  _nin: [float8!]
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "restaurant"
  """
  delete_restaurant(
    """filter the rows which have to be deleted"""
    where: restaurant_bool_exp!
  ): restaurant_mutation_response

  """
  delete single row from the table: "restaurant"
  """
  delete_restaurant_by_pk(resid: bigint!): restaurant

  """
  delete data from the table: "restaurant_type"
  """
  delete_restaurant_type(
    """filter the rows which have to be deleted"""
    where: restaurant_type_bool_exp!
  ): restaurant_type_mutation_response

  """
  delete single row from the table: "restaurant_type"
  """
  delete_restaurant_type_by_pk(restypeid: bigint!): restaurant_type

  """
  delete data from the table: "student"
  """
  delete_student(
    """filter the rows which have to be deleted"""
    where: student_bool_exp!
  ): student_mutation_response

  """
  delete single row from the table: "student"
  """
  delete_student_by_pk(stuid: bigint!): student

  """
  delete data from the table: "type_of_restaurant"
  """
  delete_type_of_restaurant(
    """filter the rows which have to be deleted"""
    where: type_of_restaurant_bool_exp!
  ): type_of_restaurant_mutation_response

  """
  delete data from the table: "visits_restaurant"
  """
  delete_visits_restaurant(
    """filter the rows which have to be deleted"""
    where: visits_restaurant_bool_exp!
  ): visits_restaurant_mutation_response

  """
  insert data into the table: "restaurant"
  """
  insert_restaurant(
    """the rows to be inserted"""
    objects: [restaurant_insert_input!]!

    """on conflict condition"""
    on_conflict: restaurant_on_conflict
  ): restaurant_mutation_response

  """
  insert a single row into the table: "restaurant"
  """
  insert_restaurant_one(
    """the row to be inserted"""
    object: restaurant_insert_input!

    """on conflict condition"""
    on_conflict: restaurant_on_conflict
  ): restaurant

  """
  insert data into the table: "restaurant_type"
  """
  insert_restaurant_type(
    """the rows to be inserted"""
    objects: [restaurant_type_insert_input!]!

    """on conflict condition"""
    on_conflict: restaurant_type_on_conflict
  ): restaurant_type_mutation_response

  """
  insert a single row into the table: "restaurant_type"
  """
  insert_restaurant_type_one(
    """the row to be inserted"""
    object: restaurant_type_insert_input!

    """on conflict condition"""
    on_conflict: restaurant_type_on_conflict
  ): restaurant_type

  """
  insert data into the table: "student"
  """
  insert_student(
    """the rows to be inserted"""
    objects: [student_insert_input!]!

    """on conflict condition"""
    on_conflict: student_on_conflict
  ): student_mutation_response

  """
  insert a single row into the table: "student"
  """
  insert_student_one(
    """the row to be inserted"""
    object: student_insert_input!

    """on conflict condition"""
    on_conflict: student_on_conflict
  ): student

  """
  insert data into the table: "type_of_restaurant"
  """
  insert_type_of_restaurant(
    """the rows to be inserted"""
    objects: [type_of_restaurant_insert_input!]!
  ): type_of_restaurant_mutation_response

  """
  insert a single row into the table: "type_of_restaurant"
  """
  insert_type_of_restaurant_one(
    """the row to be inserted"""
    object: type_of_restaurant_insert_input!
  ): type_of_restaurant

  """
  insert data into the table: "visits_restaurant"
  """
  insert_visits_restaurant(
    """the rows to be inserted"""
    objects: [visits_restaurant_insert_input!]!
  ): visits_restaurant_mutation_response

  """
  insert a single row into the table: "visits_restaurant"
  """
  insert_visits_restaurant_one(
    """the row to be inserted"""
    object: visits_restaurant_insert_input!
  ): visits_restaurant

  """
  update data of the table: "restaurant"
  """
  update_restaurant(
    """increments the integer columns with given value of the filtered values"""
    _inc: restaurant_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: restaurant_set_input

    """filter the rows which have to be updated"""
    where: restaurant_bool_exp!
  ): restaurant_mutation_response

  """
  update single row of the table: "restaurant"
  """
  update_restaurant_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: restaurant_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: restaurant_set_input
    pk_columns: restaurant_pk_columns_input!
  ): restaurant

  """
  update data of the table: "restaurant_type"
  """
  update_restaurant_type(
    """increments the integer columns with given value of the filtered values"""
    _inc: restaurant_type_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: restaurant_type_set_input

    """filter the rows which have to be updated"""
    where: restaurant_type_bool_exp!
  ): restaurant_type_mutation_response

  """
  update single row of the table: "restaurant_type"
  """
  update_restaurant_type_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: restaurant_type_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: restaurant_type_set_input
    pk_columns: restaurant_type_pk_columns_input!
  ): restaurant_type

  """
  update data of the table: "student"
  """
  update_student(
    """increments the integer columns with given value of the filtered values"""
    _inc: student_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: student_set_input

    """filter the rows which have to be updated"""
    where: student_bool_exp!
  ): student_mutation_response

  """
  update single row of the table: "student"
  """
  update_student_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: student_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: student_set_input
    pk_columns: student_pk_columns_input!
  ): student

  """
  update data of the table: "type_of_restaurant"
  """
  update_type_of_restaurant(
    """increments the integer columns with given value of the filtered values"""
    _inc: type_of_restaurant_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: type_of_restaurant_set_input

    """filter the rows which have to be updated"""
    where: type_of_restaurant_bool_exp!
  ): type_of_restaurant_mutation_response

  """
  update data of the table: "visits_restaurant"
  """
  update_visits_restaurant(
    """increments the integer columns with given value of the filtered values"""
    _inc: visits_restaurant_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: visits_restaurant_set_input

    """filter the rows which have to be updated"""
    where: visits_restaurant_bool_exp!
  ): visits_restaurant_mutation_response
}

"""column ordering options"""
enum order_by {
  """in the ascending order, nulls last"""
  asc

  """in the ascending order, nulls first"""
  asc_nulls_first

  """in the ascending order, nulls last"""
  asc_nulls_last

  """in the descending order, nulls first"""
  desc

  """in the descending order, nulls first"""
  desc_nulls_first

  """in the descending order, nulls last"""
  desc_nulls_last
}

"""query root"""
type query_root {
  """
  fetch data from the table: "restaurant"
  """
  restaurant(
    """distinct select on columns"""
    distinct_on: [restaurant_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [restaurant_order_by!]

    """filter the rows returned"""
    where: restaurant_bool_exp
  ): [restaurant!]!

  """
  fetch aggregated fields from the table: "restaurant"
  """
  restaurant_aggregate(
    """distinct select on columns"""
    distinct_on: [restaurant_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [restaurant_order_by!]

    """filter the rows returned"""
    where: restaurant_bool_exp
  ): restaurant_aggregate!

  """fetch data from the table: "restaurant" using primary key columns"""
  restaurant_by_pk(resid: bigint!): restaurant

  """
  fetch data from the table: "restaurant_type"
  """
  restaurant_type(
    """distinct select on columns"""
    distinct_on: [restaurant_type_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [restaurant_type_order_by!]

    """filter the rows returned"""
    where: restaurant_type_bool_exp
  ): [restaurant_type!]!

  """
  fetch aggregated fields from the table: "restaurant_type"
  """
  restaurant_type_aggregate(
    """distinct select on columns"""
    distinct_on: [restaurant_type_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [restaurant_type_order_by!]

    """filter the rows returned"""
    where: restaurant_type_bool_exp
  ): restaurant_type_aggregate!

  """fetch data from the table: "restaurant_type" using primary key columns"""
  restaurant_type_by_pk(restypeid: bigint!): restaurant_type

  """
  fetch data from the table: "student"
  """
  student(
    """distinct select on columns"""
    distinct_on: [student_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [student_order_by!]

    """filter the rows returned"""
    where: student_bool_exp
  ): [student!]!

  """
  fetch aggregated fields from the table: "student"
  """
  student_aggregate(
    """distinct select on columns"""
    distinct_on: [student_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [student_order_by!]

    """filter the rows returned"""
    where: student_bool_exp
  ): student_aggregate!

  """fetch data from the table: "student" using primary key columns"""
  student_by_pk(stuid: bigint!): student

  """
  fetch data from the table: "type_of_restaurant"
  """
  type_of_restaurant(
    """distinct select on columns"""
    distinct_on: [type_of_restaurant_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [type_of_restaurant_order_by!]

    """filter the rows returned"""
    where: type_of_restaurant_bool_exp
  ): [type_of_restaurant!]!

  """
  fetch aggregated fields from the table: "type_of_restaurant"
  """
  type_of_restaurant_aggregate(
    """distinct select on columns"""
    distinct_on: [type_of_restaurant_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [type_of_restaurant_order_by!]

    """filter the rows returned"""
    where: type_of_restaurant_bool_exp
  ): type_of_restaurant_aggregate!

  """
  fetch data from the table: "visits_restaurant"
  """
  visits_restaurant(
    """distinct select on columns"""
    distinct_on: [visits_restaurant_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [visits_restaurant_order_by!]

    """filter the rows returned"""
    where: visits_restaurant_bool_exp
  ): [visits_restaurant!]!

  """
  fetch aggregated fields from the table: "visits_restaurant"
  """
  visits_restaurant_aggregate(
    """distinct select on columns"""
    distinct_on: [visits_restaurant_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [visits_restaurant_order_by!]

    """filter the rows returned"""
    where: visits_restaurant_bool_exp
  ): visits_restaurant_aggregate!
}

"""
columns and relationships of "restaurant"
"""
type restaurant {
  address: String
  rating: bigint
  resid: bigint!
  resname: String

  """An array relationship"""
  type_of_restaurants(
    """distinct select on columns"""
    distinct_on: [type_of_restaurant_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [type_of_restaurant_order_by!]

    """filter the rows returned"""
    where: type_of_restaurant_bool_exp
  ): [type_of_restaurant!]!

  """An aggregated array relationship"""
  type_of_restaurants_aggregate(
    """distinct select on columns"""
    distinct_on: [type_of_restaurant_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [type_of_restaurant_order_by!]

    """filter the rows returned"""
    where: type_of_restaurant_bool_exp
  ): type_of_restaurant_aggregate!

  """An array relationship"""
  visits_restaurants(
    """distinct select on columns"""
    distinct_on: [visits_restaurant_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [visits_restaurant_order_by!]

    """filter the rows returned"""
    where: visits_restaurant_bool_exp
  ): [visits_restaurant!]!

  """An aggregated array relationship"""
  visits_restaurants_aggregate(
    """distinct select on columns"""
    distinct_on: [visits_restaurant_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [visits_restaurant_order_by!]

    """filter the rows returned"""
    where: visits_restaurant_bool_exp
  ): visits_restaurant_aggregate!
}

"""
aggregated selection of "restaurant"
"""
type restaurant_aggregate {
  aggregate: restaurant_aggregate_fields
  nodes: [restaurant!]!
}

"""
aggregate fields of "restaurant"
"""
type restaurant_aggregate_fields {
  avg: restaurant_avg_fields
  count(columns: [restaurant_select_column!], distinct: Boolean): Int
  max: restaurant_max_fields
  min: restaurant_min_fields
  stddev: restaurant_stddev_fields
  stddev_pop: restaurant_stddev_pop_fields
  stddev_samp: restaurant_stddev_samp_fields
  sum: restaurant_sum_fields
  var_pop: restaurant_var_pop_fields
  var_samp: restaurant_var_samp_fields
  variance: restaurant_variance_fields
}

"""
order by aggregate values of table "restaurant"
"""
input restaurant_aggregate_order_by {
  avg: restaurant_avg_order_by
  count: order_by
  max: restaurant_max_order_by
  min: restaurant_min_order_by
  stddev: restaurant_stddev_order_by
  stddev_pop: restaurant_stddev_pop_order_by
  stddev_samp: restaurant_stddev_samp_order_by
  sum: restaurant_sum_order_by
  var_pop: restaurant_var_pop_order_by
  var_samp: restaurant_var_samp_order_by
  variance: restaurant_variance_order_by
}

"""
input type for inserting array relation for remote table "restaurant"
"""
input restaurant_arr_rel_insert_input {
  data: [restaurant_insert_input!]!
  on_conflict: restaurant_on_conflict
}

"""aggregate avg on columns"""
type restaurant_avg_fields {
  rating: Float
  resid: Float
}

"""
order by avg() on columns of table "restaurant"
"""
input restaurant_avg_order_by {
  rating: order_by
  resid: order_by
}

"""
Boolean expression to filter rows from the table "restaurant". All fields are combined with a logical 'AND'.
"""
input restaurant_bool_exp {
  _and: [restaurant_bool_exp]
  _not: restaurant_bool_exp
  _or: [restaurant_bool_exp]
  address: String_comparison_exp
  rating: bigint_comparison_exp
  resid: bigint_comparison_exp
  resname: String_comparison_exp
  type_of_restaurants: type_of_restaurant_bool_exp
  visits_restaurants: visits_restaurant_bool_exp
}

"""
unique or primary key constraints on table "restaurant"
"""
enum restaurant_constraint {
  """unique or primary key constraint"""
  idx_26683_restaurant_pkey
}

"""
input type for incrementing integer column in table "restaurant"
"""
input restaurant_inc_input {
  rating: bigint
  resid: bigint
}

"""
input type for inserting data into table "restaurant"
"""
input restaurant_insert_input {
  address: String
  rating: bigint
  resid: bigint
  resname: String
  type_of_restaurants: type_of_restaurant_arr_rel_insert_input
  visits_restaurants: visits_restaurant_arr_rel_insert_input
}

"""aggregate max on columns"""
type restaurant_max_fields {
  address: String
  rating: bigint
  resid: bigint
  resname: String
}

"""
order by max() on columns of table "restaurant"
"""
input restaurant_max_order_by {
  address: order_by
  rating: order_by
  resid: order_by
  resname: order_by
}

"""aggregate min on columns"""
type restaurant_min_fields {
  address: String
  rating: bigint
  resid: bigint
  resname: String
}

"""
order by min() on columns of table "restaurant"
"""
input restaurant_min_order_by {
  address: order_by
  rating: order_by
  resid: order_by
  resname: order_by
}

"""
response of any mutation on the table "restaurant"
"""
type restaurant_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [restaurant!]!
}

"""
input type for inserting object relation for remote table "restaurant"
"""
input restaurant_obj_rel_insert_input {
  data: restaurant_insert_input!
  on_conflict: restaurant_on_conflict
}

"""
on conflict condition type for table "restaurant"
"""
input restaurant_on_conflict {
  constraint: restaurant_constraint!
  update_columns: [restaurant_update_column!]!
  where: restaurant_bool_exp
}

"""
ordering options when selecting data from "restaurant"
"""
input restaurant_order_by {
  address: order_by
  rating: order_by
  resid: order_by
  resname: order_by
  type_of_restaurants_aggregate: type_of_restaurant_aggregate_order_by
  visits_restaurants_aggregate: visits_restaurant_aggregate_order_by
}

"""
primary key columns input for table: "restaurant"
"""
input restaurant_pk_columns_input {
  resid: bigint!
}

"""
select columns of table "restaurant"
"""
enum restaurant_select_column {
  """column name"""
  address

  """column name"""
  rating

  """column name"""
  resid

  """column name"""
  resname
}

"""
input type for updating data in table "restaurant"
"""
input restaurant_set_input {
  address: String
  rating: bigint
  resid: bigint
  resname: String
}

"""aggregate stddev on columns"""
type restaurant_stddev_fields {
  rating: Float
  resid: Float
}

"""
order by stddev() on columns of table "restaurant"
"""
input restaurant_stddev_order_by {
  rating: order_by
  resid: order_by
}

"""aggregate stddev_pop on columns"""
type restaurant_stddev_pop_fields {
  rating: Float
  resid: Float
}

"""
order by stddev_pop() on columns of table "restaurant"
"""
input restaurant_stddev_pop_order_by {
  rating: order_by
  resid: order_by
}

"""aggregate stddev_samp on columns"""
type restaurant_stddev_samp_fields {
  rating: Float
  resid: Float
}

"""
order by stddev_samp() on columns of table "restaurant"
"""
input restaurant_stddev_samp_order_by {
  rating: order_by
  resid: order_by
}

"""aggregate sum on columns"""
type restaurant_sum_fields {
  rating: bigint
  resid: bigint
}

"""
order by sum() on columns of table "restaurant"
"""
input restaurant_sum_order_by {
  rating: order_by
  resid: order_by
}

"""
columns and relationships of "restaurant_type"
"""
type restaurant_type {
  restypedescription: String
  restypeid: bigint!
  restypename: String

  """An array relationship"""
  type_of_restaurants(
    """distinct select on columns"""
    distinct_on: [type_of_restaurant_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [type_of_restaurant_order_by!]

    """filter the rows returned"""
    where: type_of_restaurant_bool_exp
  ): [type_of_restaurant!]!

  """An aggregated array relationship"""
  type_of_restaurants_aggregate(
    """distinct select on columns"""
    distinct_on: [type_of_restaurant_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [type_of_restaurant_order_by!]

    """filter the rows returned"""
    where: type_of_restaurant_bool_exp
  ): type_of_restaurant_aggregate!
}

"""
aggregated selection of "restaurant_type"
"""
type restaurant_type_aggregate {
  aggregate: restaurant_type_aggregate_fields
  nodes: [restaurant_type!]!
}

"""
aggregate fields of "restaurant_type"
"""
type restaurant_type_aggregate_fields {
  avg: restaurant_type_avg_fields
  count(columns: [restaurant_type_select_column!], distinct: Boolean): Int
  max: restaurant_type_max_fields
  min: restaurant_type_min_fields
  stddev: restaurant_type_stddev_fields
  stddev_pop: restaurant_type_stddev_pop_fields
  stddev_samp: restaurant_type_stddev_samp_fields
  sum: restaurant_type_sum_fields
  var_pop: restaurant_type_var_pop_fields
  var_samp: restaurant_type_var_samp_fields
  variance: restaurant_type_variance_fields
}

"""
order by aggregate values of table "restaurant_type"
"""
input restaurant_type_aggregate_order_by {
  avg: restaurant_type_avg_order_by
  count: order_by
  max: restaurant_type_max_order_by
  min: restaurant_type_min_order_by
  stddev: restaurant_type_stddev_order_by
  stddev_pop: restaurant_type_stddev_pop_order_by
  stddev_samp: restaurant_type_stddev_samp_order_by
  sum: restaurant_type_sum_order_by
  var_pop: restaurant_type_var_pop_order_by
  var_samp: restaurant_type_var_samp_order_by
  variance: restaurant_type_variance_order_by
}

"""
input type for inserting array relation for remote table "restaurant_type"
"""
input restaurant_type_arr_rel_insert_input {
  data: [restaurant_type_insert_input!]!
  on_conflict: restaurant_type_on_conflict
}

"""aggregate avg on columns"""
type restaurant_type_avg_fields {
  restypeid: Float
}

"""
order by avg() on columns of table "restaurant_type"
"""
input restaurant_type_avg_order_by {
  restypeid: order_by
}

"""
Boolean expression to filter rows from the table "restaurant_type". All fields are combined with a logical 'AND'.
"""
input restaurant_type_bool_exp {
  _and: [restaurant_type_bool_exp]
  _not: restaurant_type_bool_exp
  _or: [restaurant_type_bool_exp]
  restypedescription: String_comparison_exp
  restypeid: bigint_comparison_exp
  restypename: String_comparison_exp
  type_of_restaurants: type_of_restaurant_bool_exp
}

"""
unique or primary key constraints on table "restaurant_type"
"""
enum restaurant_type_constraint {
  """unique or primary key constraint"""
  idx_26692_restaurant_type_pkey
}

"""
input type for incrementing integer column in table "restaurant_type"
"""
input restaurant_type_inc_input {
  restypeid: bigint
}

"""
input type for inserting data into table "restaurant_type"
"""
input restaurant_type_insert_input {
  restypedescription: String
  restypeid: bigint
  restypename: String
  type_of_restaurants: type_of_restaurant_arr_rel_insert_input
}

"""aggregate max on columns"""
type restaurant_type_max_fields {
  restypedescription: String
  restypeid: bigint
  restypename: String
}

"""
order by max() on columns of table "restaurant_type"
"""
input restaurant_type_max_order_by {
  restypedescription: order_by
  restypeid: order_by
  restypename: order_by
}

"""aggregate min on columns"""
type restaurant_type_min_fields {
  restypedescription: String
  restypeid: bigint
  restypename: String
}

"""
order by min() on columns of table "restaurant_type"
"""
input restaurant_type_min_order_by {
  restypedescription: order_by
  restypeid: order_by
  restypename: order_by
}

"""
response of any mutation on the table "restaurant_type"
"""
type restaurant_type_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [restaurant_type!]!
}

"""
input type for inserting object relation for remote table "restaurant_type"
"""
input restaurant_type_obj_rel_insert_input {
  data: restaurant_type_insert_input!
  on_conflict: restaurant_type_on_conflict
}

"""
on conflict condition type for table "restaurant_type"
"""
input restaurant_type_on_conflict {
  constraint: restaurant_type_constraint!
  update_columns: [restaurant_type_update_column!]!
  where: restaurant_type_bool_exp
}

"""
ordering options when selecting data from "restaurant_type"
"""
input restaurant_type_order_by {
  restypedescription: order_by
  restypeid: order_by
  restypename: order_by
  type_of_restaurants_aggregate: type_of_restaurant_aggregate_order_by
}

"""
primary key columns input for table: "restaurant_type"
"""
input restaurant_type_pk_columns_input {
  restypeid: bigint!
}

"""
select columns of table "restaurant_type"
"""
enum restaurant_type_select_column {
  """column name"""
  restypedescription

  """column name"""
  restypeid

  """column name"""
  restypename
}

"""
input type for updating data in table "restaurant_type"
"""
input restaurant_type_set_input {
  restypedescription: String
  restypeid: bigint
  restypename: String
}

"""aggregate stddev on columns"""
type restaurant_type_stddev_fields {
  restypeid: Float
}

"""
order by stddev() on columns of table "restaurant_type"
"""
input restaurant_type_stddev_order_by {
  restypeid: order_by
}

"""aggregate stddev_pop on columns"""
type restaurant_type_stddev_pop_fields {
  restypeid: Float
}

"""
order by stddev_pop() on columns of table "restaurant_type"
"""
input restaurant_type_stddev_pop_order_by {
  restypeid: order_by
}

"""aggregate stddev_samp on columns"""
type restaurant_type_stddev_samp_fields {
  restypeid: Float
}

"""
order by stddev_samp() on columns of table "restaurant_type"
"""
input restaurant_type_stddev_samp_order_by {
  restypeid: order_by
}

"""aggregate sum on columns"""
type restaurant_type_sum_fields {
  restypeid: bigint
}

"""
order by sum() on columns of table "restaurant_type"
"""
input restaurant_type_sum_order_by {
  restypeid: order_by
}

"""
update columns of table "restaurant_type"
"""
enum restaurant_type_update_column {
  """column name"""
  restypedescription

  """column name"""
  restypeid

  """column name"""
  restypename
}

"""aggregate var_pop on columns"""
type restaurant_type_var_pop_fields {
  restypeid: Float
}

"""
order by var_pop() on columns of table "restaurant_type"
"""
input restaurant_type_var_pop_order_by {
  restypeid: order_by
}

"""aggregate var_samp on columns"""
type restaurant_type_var_samp_fields {
  restypeid: Float
}

"""
order by var_samp() on columns of table "restaurant_type"
"""
input restaurant_type_var_samp_order_by {
  restypeid: order_by
}

"""aggregate variance on columns"""
type restaurant_type_variance_fields {
  restypeid: Float
}

"""
order by variance() on columns of table "restaurant_type"
"""
input restaurant_type_variance_order_by {
  restypeid: order_by
}

"""
update columns of table "restaurant"
"""
enum restaurant_update_column {
  """column name"""
  address

  """column name"""
  rating

  """column name"""
  resid

  """column name"""
  resname
}

"""aggregate var_pop on columns"""
type restaurant_var_pop_fields {
  rating: Float
  resid: Float
}

"""
order by var_pop() on columns of table "restaurant"
"""
input restaurant_var_pop_order_by {
  rating: order_by
  resid: order_by
}

"""aggregate var_samp on columns"""
type restaurant_var_samp_fields {
  rating: Float
  resid: Float
}

"""
order by var_samp() on columns of table "restaurant"
"""
input restaurant_var_samp_order_by {
  rating: order_by
  resid: order_by
}

"""aggregate variance on columns"""
type restaurant_variance_fields {
  rating: Float
  resid: Float
}

"""
order by variance() on columns of table "restaurant"
"""
input restaurant_variance_order_by {
  rating: order_by
  resid: order_by
}

"""
expression to compare columns of type String. All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String
  _ilike: String
  _in: [String!]
  _is_null: Boolean
  _like: String
  _lt: String
  _lte: String
  _neq: String
  _nilike: String
  _nin: [String!]
  _nlike: String
  _nsimilar: String
  _similar: String
}

"""
columns and relationships of "student"
"""
type student {
  advisor: bigint
  age: bigint
  city_code: String
  fname: String
  lname: String
  major: bigint
  sex: String
  stuid: bigint!

  """An array relationship"""
  visits_restaurants(
    """distinct select on columns"""
    distinct_on: [visits_restaurant_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [visits_restaurant_order_by!]

    """filter the rows returned"""
    where: visits_restaurant_bool_exp
  ): [visits_restaurant!]!

  """An aggregated array relationship"""
  visits_restaurants_aggregate(
    """distinct select on columns"""
    distinct_on: [visits_restaurant_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [visits_restaurant_order_by!]

    """filter the rows returned"""
    where: visits_restaurant_bool_exp
  ): visits_restaurant_aggregate!
}

"""
aggregated selection of "student"
"""
type student_aggregate {
  aggregate: student_aggregate_fields
  nodes: [student!]!
}

"""
aggregate fields of "student"
"""
type student_aggregate_fields {
  avg: student_avg_fields
  count(columns: [student_select_column!], distinct: Boolean): Int
  max: student_max_fields
  min: student_min_fields
  stddev: student_stddev_fields
  stddev_pop: student_stddev_pop_fields
  stddev_samp: student_stddev_samp_fields
  sum: student_sum_fields
  var_pop: student_var_pop_fields
  var_samp: student_var_samp_fields
  variance: student_variance_fields
}

"""
order by aggregate values of table "student"
"""
input student_aggregate_order_by {
  avg: student_avg_order_by
  count: order_by
  max: student_max_order_by
  min: student_min_order_by
  stddev: student_stddev_order_by
  stddev_pop: student_stddev_pop_order_by
  stddev_samp: student_stddev_samp_order_by
  sum: student_sum_order_by
  var_pop: student_var_pop_order_by
  var_samp: student_var_samp_order_by
  variance: student_variance_order_by
}

"""
input type for inserting array relation for remote table "student"
"""
input student_arr_rel_insert_input {
  data: [student_insert_input!]!
  on_conflict: student_on_conflict
}

"""aggregate avg on columns"""
type student_avg_fields {
  advisor: Float
  age: Float
  major: Float
  stuid: Float
}

"""
order by avg() on columns of table "student"
"""
input student_avg_order_by {
  advisor: order_by
  age: order_by
  major: order_by
  stuid: order_by
}

"""
Boolean expression to filter rows from the table "student". All fields are combined with a logical 'AND'.
"""
input student_bool_exp {
  _and: [student_bool_exp]
  _not: student_bool_exp
  _or: [student_bool_exp]
  advisor: bigint_comparison_exp
  age: bigint_comparison_exp
  city_code: String_comparison_exp
  fname: String_comparison_exp
  lname: String_comparison_exp
  major: bigint_comparison_exp
  sex: String_comparison_exp
  stuid: bigint_comparison_exp
  visits_restaurants: visits_restaurant_bool_exp
}

"""
unique or primary key constraints on table "student"
"""
enum student_constraint {
  """unique or primary key constraint"""
  idx_26677_student_pkey
}

"""
input type for incrementing integer column in table "student"
"""
input student_inc_input {
  advisor: bigint
  age: bigint
  major: bigint
  stuid: bigint
}

"""
input type for inserting data into table "student"
"""
input student_insert_input {
  advisor: bigint
  age: bigint
  city_code: String
  fname: String
  lname: String
  major: bigint
  sex: String
  stuid: bigint
  visits_restaurants: visits_restaurant_arr_rel_insert_input
}

"""aggregate max on columns"""
type student_max_fields {
  advisor: bigint
  age: bigint
  city_code: String
  fname: String
  lname: String
  major: bigint
  sex: String
  stuid: bigint
}

"""
order by max() on columns of table "student"
"""
input student_max_order_by {
  advisor: order_by
  age: order_by
  city_code: order_by
  fname: order_by
  lname: order_by
  major: order_by
  sex: order_by
  stuid: order_by
}

"""aggregate min on columns"""
type student_min_fields {
  advisor: bigint
  age: bigint
  city_code: String
  fname: String
  lname: String
  major: bigint
  sex: String
  stuid: bigint
}

"""
order by min() on columns of table "student"
"""
input student_min_order_by {
  advisor: order_by
  age: order_by
  city_code: order_by
  fname: order_by
  lname: order_by
  major: order_by
  sex: order_by
  stuid: order_by
}

"""
response of any mutation on the table "student"
"""
type student_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [student!]!
}

"""
input type for inserting object relation for remote table "student"
"""
input student_obj_rel_insert_input {
  data: student_insert_input!
  on_conflict: student_on_conflict
}

"""
on conflict condition type for table "student"
"""
input student_on_conflict {
  constraint: student_constraint!
  update_columns: [student_update_column!]!
  where: student_bool_exp
}

"""
ordering options when selecting data from "student"
"""
input student_order_by {
  advisor: order_by
  age: order_by
  city_code: order_by
  fname: order_by
  lname: order_by
  major: order_by
  sex: order_by
  stuid: order_by
  visits_restaurants_aggregate: visits_restaurant_aggregate_order_by
}

"""
primary key columns input for table: "student"
"""
input student_pk_columns_input {
  stuid: bigint!
}

"""
select columns of table "student"
"""
enum student_select_column {
  """column name"""
  advisor

  """column name"""
  age

  """column name"""
  city_code

  """column name"""
  fname

  """column name"""
  lname

  """column name"""
  major

  """column name"""
  sex

  """column name"""
  stuid
}

"""
input type for updating data in table "student"
"""
input student_set_input {
  advisor: bigint
  age: bigint
  city_code: String
  fname: String
  lname: String
  major: bigint
  sex: String
  stuid: bigint
}

"""aggregate stddev on columns"""
type student_stddev_fields {
  advisor: Float
  age: Float
  major: Float
  stuid: Float
}

"""
order by stddev() on columns of table "student"
"""
input student_stddev_order_by {
  advisor: order_by
  age: order_by
  major: order_by
  stuid: order_by
}

"""aggregate stddev_pop on columns"""
type student_stddev_pop_fields {
  advisor: Float
  age: Float
  major: Float
  stuid: Float
}

"""
order by stddev_pop() on columns of table "student"
"""
input student_stddev_pop_order_by {
  advisor: order_by
  age: order_by
  major: order_by
  stuid: order_by
}

"""aggregate stddev_samp on columns"""
type student_stddev_samp_fields {
  advisor: Float
  age: Float
  major: Float
  stuid: Float
}

"""
order by stddev_samp() on columns of table "student"
"""
input student_stddev_samp_order_by {
  advisor: order_by
  age: order_by
  major: order_by
  stuid: order_by
}

"""aggregate sum on columns"""
type student_sum_fields {
  advisor: bigint
  age: bigint
  major: bigint
  stuid: bigint
}

"""
order by sum() on columns of table "student"
"""
input student_sum_order_by {
  advisor: order_by
  age: order_by
  major: order_by
  stuid: order_by
}

"""
update columns of table "student"
"""
enum student_update_column {
  """column name"""
  advisor

  """column name"""
  age

  """column name"""
  city_code

  """column name"""
  fname

  """column name"""
  lname

  """column name"""
  major

  """column name"""
  sex

  """column name"""
  stuid
}

"""aggregate var_pop on columns"""
type student_var_pop_fields {
  advisor: Float
  age: Float
  major: Float
  stuid: Float
}

"""
order by var_pop() on columns of table "student"
"""
input student_var_pop_order_by {
  advisor: order_by
  age: order_by
  major: order_by
  stuid: order_by
}

"""aggregate var_samp on columns"""
type student_var_samp_fields {
  advisor: Float
  age: Float
  major: Float
  stuid: Float
}

"""
order by var_samp() on columns of table "student"
"""
input student_var_samp_order_by {
  advisor: order_by
  age: order_by
  major: order_by
  stuid: order_by
}

"""aggregate variance on columns"""
type student_variance_fields {
  advisor: Float
  age: Float
  major: Float
  stuid: Float
}

"""
order by variance() on columns of table "student"
"""
input student_variance_order_by {
  advisor: order_by
  age: order_by
  major: order_by
  stuid: order_by
}

"""subscription root"""
type subscription_root {
  """
  fetch data from the table: "restaurant"
  """
  restaurant(
    """distinct select on columns"""
    distinct_on: [restaurant_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [restaurant_order_by!]

    """filter the rows returned"""
    where: restaurant_bool_exp
  ): [restaurant!]!

  """
  fetch aggregated fields from the table: "restaurant"
  """
  restaurant_aggregate(
    """distinct select on columns"""
    distinct_on: [restaurant_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [restaurant_order_by!]

    """filter the rows returned"""
    where: restaurant_bool_exp
  ): restaurant_aggregate!

  """fetch data from the table: "restaurant" using primary key columns"""
  restaurant_by_pk(resid: bigint!): restaurant

  """
  fetch data from the table: "restaurant_type"
  """
  restaurant_type(
    """distinct select on columns"""
    distinct_on: [restaurant_type_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [restaurant_type_order_by!]

    """filter the rows returned"""
    where: restaurant_type_bool_exp
  ): [restaurant_type!]!

  """
  fetch aggregated fields from the table: "restaurant_type"
  """
  restaurant_type_aggregate(
    """distinct select on columns"""
    distinct_on: [restaurant_type_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [restaurant_type_order_by!]

    """filter the rows returned"""
    where: restaurant_type_bool_exp
  ): restaurant_type_aggregate!

  """fetch data from the table: "restaurant_type" using primary key columns"""
  restaurant_type_by_pk(restypeid: bigint!): restaurant_type

  """
  fetch data from the table: "student"
  """
  student(
    """distinct select on columns"""
    distinct_on: [student_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [student_order_by!]

    """filter the rows returned"""
    where: student_bool_exp
  ): [student!]!

  """
  fetch aggregated fields from the table: "student"
  """
  student_aggregate(
    """distinct select on columns"""
    distinct_on: [student_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [student_order_by!]

    """filter the rows returned"""
    where: student_bool_exp
  ): student_aggregate!

  """fetch data from the table: "student" using primary key columns"""
  student_by_pk(stuid: bigint!): student

  """
  fetch data from the table: "type_of_restaurant"
  """
  type_of_restaurant(
    """distinct select on columns"""
    distinct_on: [type_of_restaurant_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [type_of_restaurant_order_by!]

    """filter the rows returned"""
    where: type_of_restaurant_bool_exp
  ): [type_of_restaurant!]!

  """
  fetch aggregated fields from the table: "type_of_restaurant"
  """
  type_of_restaurant_aggregate(
    """distinct select on columns"""
    distinct_on: [type_of_restaurant_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [type_of_restaurant_order_by!]

    """filter the rows returned"""
    where: type_of_restaurant_bool_exp
  ): type_of_restaurant_aggregate!

  """
  fetch data from the table: "visits_restaurant"
  """
  visits_restaurant(
    """distinct select on columns"""
    distinct_on: [visits_restaurant_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [visits_restaurant_order_by!]

    """filter the rows returned"""
    where: visits_restaurant_bool_exp
  ): [visits_restaurant!]!

  """
  fetch aggregated fields from the table: "visits_restaurant"
  """
  visits_restaurant_aggregate(
    """distinct select on columns"""
    distinct_on: [visits_restaurant_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [visits_restaurant_order_by!]

    """filter the rows returned"""
    where: visits_restaurant_bool_exp
  ): visits_restaurant_aggregate!
}

scalar timestamp

"""
expression to compare columns of type timestamp. All fields are combined with logical 'AND'.
"""
input timestamp_comparison_exp {
  _eq: timestamp
  _gt: timestamp
  _gte: timestamp
  _in: [timestamp!]
  _is_null: Boolean
  _lt: timestamp
  _lte: timestamp
  _neq: timestamp
  _nin: [timestamp!]
}

"""
columns and relationships of "type_of_restaurant"
"""
type type_of_restaurant {
  resid: bigint

  """An object relationship"""
  restaurant: restaurant

  """An object relationship"""
  restaurant_type: restaurant_type
  restypeid: bigint
}

"""
aggregated selection of "type_of_restaurant"
"""
type type_of_restaurant_aggregate {
  aggregate: type_of_restaurant_aggregate_fields
  nodes: [type_of_restaurant!]!
}

"""
aggregate fields of "type_of_restaurant"
"""
type type_of_restaurant_aggregate_fields {
  avg: type_of_restaurant_avg_fields
  count(columns: [type_of_restaurant_select_column!], distinct: Boolean): Int
  max: type_of_restaurant_max_fields
  min: type_of_restaurant_min_fields
  stddev: type_of_restaurant_stddev_fields
  stddev_pop: type_of_restaurant_stddev_pop_fields
  stddev_samp: type_of_restaurant_stddev_samp_fields
  sum: type_of_restaurant_sum_fields
  var_pop: type_of_restaurant_var_pop_fields
  var_samp: type_of_restaurant_var_samp_fields
  variance: type_of_restaurant_variance_fields
}

"""
order by aggregate values of table "type_of_restaurant"
"""
input type_of_restaurant_aggregate_order_by {
  avg: type_of_restaurant_avg_order_by
  count: order_by
  max: type_of_restaurant_max_order_by
  min: type_of_restaurant_min_order_by
  stddev: type_of_restaurant_stddev_order_by
  stddev_pop: type_of_restaurant_stddev_pop_order_by
  stddev_samp: type_of_restaurant_stddev_samp_order_by
  sum: type_of_restaurant_sum_order_by
  var_pop: type_of_restaurant_var_pop_order_by
  var_samp: type_of_restaurant_var_samp_order_by
  variance: type_of_restaurant_variance_order_by
}

"""
input type for inserting array relation for remote table "type_of_restaurant"
"""
input type_of_restaurant_arr_rel_insert_input {
  data: [type_of_restaurant_insert_input!]!
}

"""aggregate avg on columns"""
type type_of_restaurant_avg_fields {
  resid: Float
  restypeid: Float
}

"""
order by avg() on columns of table "type_of_restaurant"
"""
input type_of_restaurant_avg_order_by {
  resid: order_by
  restypeid: order_by
}

"""
Boolean expression to filter rows from the table "type_of_restaurant". All fields are combined with a logical 'AND'.
"""
input type_of_restaurant_bool_exp {
  _and: [type_of_restaurant_bool_exp]
  _not: type_of_restaurant_bool_exp
  _or: [type_of_restaurant_bool_exp]
  resid: bigint_comparison_exp
  restaurant: restaurant_bool_exp
  restaurant_type: restaurant_type_bool_exp
  restypeid: bigint_comparison_exp
}

"""
input type for incrementing integer column in table "type_of_restaurant"
"""
input type_of_restaurant_inc_input {
  resid: bigint
  restypeid: bigint
}

"""
input type for inserting data into table "type_of_restaurant"
"""
input type_of_restaurant_insert_input {
  resid: bigint
  restaurant: restaurant_obj_rel_insert_input
  restaurant_type: restaurant_type_obj_rel_insert_input
  restypeid: bigint
}

"""aggregate max on columns"""
type type_of_restaurant_max_fields {
  resid: bigint
  restypeid: bigint
}

"""
order by max() on columns of table "type_of_restaurant"
"""
input type_of_restaurant_max_order_by {
  resid: order_by
  restypeid: order_by
}

"""aggregate min on columns"""
type type_of_restaurant_min_fields {
  resid: bigint
  restypeid: bigint
}

"""
order by min() on columns of table "type_of_restaurant"
"""
input type_of_restaurant_min_order_by {
  resid: order_by
  restypeid: order_by
}

"""
response of any mutation on the table "type_of_restaurant"
"""
type type_of_restaurant_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [type_of_restaurant!]!
}

"""
input type for inserting object relation for remote table "type_of_restaurant"
"""
input type_of_restaurant_obj_rel_insert_input {
  data: type_of_restaurant_insert_input!
}

"""
ordering options when selecting data from "type_of_restaurant"
"""
input type_of_restaurant_order_by {
  resid: order_by
  restaurant: restaurant_order_by
  restaurant_type: restaurant_type_order_by
  restypeid: order_by
}

"""
select columns of table "type_of_restaurant"
"""
enum type_of_restaurant_select_column {
  """column name"""
  resid

  """column name"""
  restypeid
}

"""
input type for updating data in table "type_of_restaurant"
"""
input type_of_restaurant_set_input {
  resid: bigint
  restypeid: bigint
}

"""aggregate stddev on columns"""
type type_of_restaurant_stddev_fields {
  resid: Float
  restypeid: Float
}

"""
order by stddev() on columns of table "type_of_restaurant"
"""
input type_of_restaurant_stddev_order_by {
  resid: order_by
  restypeid: order_by
}

"""aggregate stddev_pop on columns"""
type type_of_restaurant_stddev_pop_fields {
  resid: Float
  restypeid: Float
}

"""
order by stddev_pop() on columns of table "type_of_restaurant"
"""
input type_of_restaurant_stddev_pop_order_by {
  resid: order_by
  restypeid: order_by
}

"""aggregate stddev_samp on columns"""
type type_of_restaurant_stddev_samp_fields {
  resid: Float
  restypeid: Float
}

"""
order by stddev_samp() on columns of table "type_of_restaurant"
"""
input type_of_restaurant_stddev_samp_order_by {
  resid: order_by
  restypeid: order_by
}

"""aggregate sum on columns"""
type type_of_restaurant_sum_fields {
  resid: bigint
  restypeid: bigint
}

"""
order by sum() on columns of table "type_of_restaurant"
"""
input type_of_restaurant_sum_order_by {
  resid: order_by
  restypeid: order_by
}

"""aggregate var_pop on columns"""
type type_of_restaurant_var_pop_fields {
  resid: Float
  restypeid: Float
}

"""
order by var_pop() on columns of table "type_of_restaurant"
"""
input type_of_restaurant_var_pop_order_by {
  resid: order_by
  restypeid: order_by
}

"""aggregate var_samp on columns"""
type type_of_restaurant_var_samp_fields {
  resid: Float
  restypeid: Float
}

"""
order by var_samp() on columns of table "type_of_restaurant"
"""
input type_of_restaurant_var_samp_order_by {
  resid: order_by
  restypeid: order_by
}

"""aggregate variance on columns"""
type type_of_restaurant_variance_fields {
  resid: Float
  restypeid: Float
}

"""
order by variance() on columns of table "type_of_restaurant"
"""
input type_of_restaurant_variance_order_by {
  resid: order_by
  restypeid: order_by
}

"""
columns and relationships of "visits_restaurant"
"""
type visits_restaurant {
  resid: bigint

  """An object relationship"""
  restaurant: restaurant
  spent: float8

  """An object relationship"""
  student: student
  stuid: bigint
  time: timestamp
}

"""
aggregated selection of "visits_restaurant"
"""
type visits_restaurant_aggregate {
  aggregate: visits_restaurant_aggregate_fields
  nodes: [visits_restaurant!]!
}

"""
aggregate fields of "visits_restaurant"
"""
type visits_restaurant_aggregate_fields {
  avg: visits_restaurant_avg_fields
  count(columns: [visits_restaurant_select_column!], distinct: Boolean): Int
  max: visits_restaurant_max_fields
  min: visits_restaurant_min_fields
  stddev: visits_restaurant_stddev_fields
  stddev_pop: visits_restaurant_stddev_pop_fields
  stddev_samp: visits_restaurant_stddev_samp_fields
  sum: visits_restaurant_sum_fields
  var_pop: visits_restaurant_var_pop_fields
  var_samp: visits_restaurant_var_samp_fields
  variance: visits_restaurant_variance_fields
}

"""
order by aggregate values of table "visits_restaurant"
"""
input visits_restaurant_aggregate_order_by {
  avg: visits_restaurant_avg_order_by
  count: order_by
  max: visits_restaurant_max_order_by
  min: visits_restaurant_min_order_by
  stddev: visits_restaurant_stddev_order_by
  stddev_pop: visits_restaurant_stddev_pop_order_by
  stddev_samp: visits_restaurant_stddev_samp_order_by
  sum: visits_restaurant_sum_order_by
  var_pop: visits_restaurant_var_pop_order_by
  var_samp: visits_restaurant_var_samp_order_by
  variance: visits_restaurant_variance_order_by
}

"""
input type for inserting array relation for remote table "visits_restaurant"
"""
input visits_restaurant_arr_rel_insert_input {
  data: [visits_restaurant_insert_input!]!
}

"""aggregate avg on columns"""
type visits_restaurant_avg_fields {
  resid: Float
  spent: Float
  stuid: Float
}

"""
order by avg() on columns of table "visits_restaurant"
"""
input visits_restaurant_avg_order_by {
  resid: order_by
  spent: order_by
  stuid: order_by
}

"""
Boolean expression to filter rows from the table "visits_restaurant". All fields are combined with a logical 'AND'.
"""
input visits_restaurant_bool_exp {
  _and: [visits_restaurant_bool_exp]
  _not: visits_restaurant_bool_exp
  _or: [visits_restaurant_bool_exp]
  resid: bigint_comparison_exp
  restaurant: restaurant_bool_exp
  spent: float8_comparison_exp
  student: student_bool_exp
  stuid: bigint_comparison_exp
  time: timestamp_comparison_exp
}

"""
input type for incrementing integer column in table "visits_restaurant"
"""
input visits_restaurant_inc_input {
  resid: bigint
  spent: float8
  stuid: bigint
}

"""
input type for inserting data into table "visits_restaurant"
"""
input visits_restaurant_insert_input {
  resid: bigint
  restaurant: restaurant_obj_rel_insert_input
  spent: float8
  student: student_obj_rel_insert_input
  stuid: bigint
  time: timestamp
}

"""aggregate max on columns"""
type visits_restaurant_max_fields {
  resid: bigint
  spent: float8
  stuid: bigint
  time: timestamp
}

"""
order by max() on columns of table "visits_restaurant"
"""
input visits_restaurant_max_order_by {
  resid: order_by
  spent: order_by
  stuid: order_by
  time: order_by
}

"""aggregate min on columns"""
type visits_restaurant_min_fields {
  resid: bigint
  spent: float8
  stuid: bigint
  time: timestamp
}

"""
order by min() on columns of table "visits_restaurant"
"""
input visits_restaurant_min_order_by {
  resid: order_by
  spent: order_by
  stuid: order_by
  time: order_by
}

"""
response of any mutation on the table "visits_restaurant"
"""
type visits_restaurant_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [visits_restaurant!]!
}

"""
input type for inserting object relation for remote table "visits_restaurant"
"""
input visits_restaurant_obj_rel_insert_input {
  data: visits_restaurant_insert_input!
}

"""
ordering options when selecting data from "visits_restaurant"
"""
input visits_restaurant_order_by {
  resid: order_by
  restaurant: restaurant_order_by
  spent: order_by
  student: student_order_by
  stuid: order_by
  time: order_by
}

"""
select columns of table "visits_restaurant"
"""
enum visits_restaurant_select_column {
  """column name"""
  resid

  """column name"""
  spent

  """column name"""
  stuid

  """column name"""
  time
}

"""
input type for updating data in table "visits_restaurant"
"""
input visits_restaurant_set_input {
  resid: bigint
  spent: float8
  stuid: bigint
  time: timestamp
}

"""aggregate stddev on columns"""
type visits_restaurant_stddev_fields {
  resid: Float
  spent: Float
  stuid: Float
}

"""
order by stddev() on columns of table "visits_restaurant"
"""
input visits_restaurant_stddev_order_by {
  resid: order_by
  spent: order_by
  stuid: order_by
}

"""aggregate stddev_pop on columns"""
type visits_restaurant_stddev_pop_fields {
  resid: Float
  spent: Float
  stuid: Float
}

"""
order by stddev_pop() on columns of table "visits_restaurant"
"""
input visits_restaurant_stddev_pop_order_by {
  resid: order_by
  spent: order_by
  stuid: order_by
}

"""aggregate stddev_samp on columns"""
type visits_restaurant_stddev_samp_fields {
  resid: Float
  spent: Float
  stuid: Float
}

"""
order by stddev_samp() on columns of table "visits_restaurant"
"""
input visits_restaurant_stddev_samp_order_by {
  resid: order_by
  spent: order_by
  stuid: order_by
}

"""aggregate sum on columns"""
type visits_restaurant_sum_fields {
  resid: bigint
  spent: float8
  stuid: bigint
}

"""
order by sum() on columns of table "visits_restaurant"
"""
input visits_restaurant_sum_order_by {
  resid: order_by
  spent: order_by
  stuid: order_by
}

"""aggregate var_pop on columns"""
type visits_restaurant_var_pop_fields {
  resid: Float
  spent: Float
  stuid: Float
}

"""
order by var_pop() on columns of table "visits_restaurant"
"""
input visits_restaurant_var_pop_order_by {
  resid: order_by
  spent: order_by
  stuid: order_by
}

"""aggregate var_samp on columns"""
type visits_restaurant_var_samp_fields {
  resid: Float
  spent: Float
  stuid: Float
}

"""
order by var_samp() on columns of table "visits_restaurant"
"""
input visits_restaurant_var_samp_order_by {
  resid: order_by
  spent: order_by
  stuid: order_by
}

"""aggregate variance on columns"""
type visits_restaurant_variance_fields {
  resid: Float
  spent: Float
  stuid: Float
}

"""
order by variance() on columns of table "visits_restaurant"
"""
input visits_restaurant_variance_order_by {
  resid: order_by
  spent: order_by
  stuid: order_by
}
