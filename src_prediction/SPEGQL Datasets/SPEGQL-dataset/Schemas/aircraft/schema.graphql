schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""
Direct the client to resolve this field locally, either from the cache or local resolvers.
"""
directive @client(
  """
  When true, the client will never use the cache for this value. See
  https://www.apollographql.com/docs/react/essentials/local-state/#forcing-resolvers-with-clientalways-true
  """
  always: Boolean
) on FIELD | FRAGMENT_DEFINITION | INLINE_FRAGMENT

"""
Export this locally resolved field as a variable to be used in the remainder of this query. See
https://www.apollographql.com/docs/react/essentials/local-state/#using-client-fields-as-variables
"""
directive @export(
  """The variable name to export this field as."""
  as: String!
) on FIELD

"""
Specify a custom store key for this result. See
https://www.apollographql.com/docs/react/advanced/caching/#the-connection-directive
"""
directive @connection(
  """Specify the store key."""
  key: String!

  """
  An array of query argument names to include in the generated custom store key.
  """
  filter: [String!]
) on FIELD

"""
columns and relationships of "aircraft"
"""
type aircraft {
  Aircraft: String
  Aircraft_ID: Int!
  Description: String
  Max_Gross_Weight: String
  Max_disk_Loading: String
  Total_disk_area: String

  """An array relationship"""
  airport_aircrafts(
    """distinct select on columns"""
    distinct_on: [airport_aircraft_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [airport_aircraft_order_by!]

    """filter the rows returned"""
    where: airport_aircraft_bool_exp
  ): [airport_aircraft!]!

  """An aggregated array relationship"""
  airport_aircrafts_aggregate(
    """distinct select on columns"""
    distinct_on: [airport_aircraft_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [airport_aircraft_order_by!]

    """filter the rows returned"""
    where: airport_aircraft_bool_exp
  ): airport_aircraft_aggregate!

  """An array relationship"""
  matches(
    """distinct select on columns"""
    distinct_on: [match_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [match_order_by!]

    """filter the rows returned"""
    where: match_bool_exp
  ): [match!]!

  """An aggregated array relationship"""
  matches_aggregate(
    """distinct select on columns"""
    distinct_on: [match_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [match_order_by!]

    """filter the rows returned"""
    where: match_bool_exp
  ): match_aggregate!
}

"""
aggregated selection of "aircraft"
"""
type aircraft_aggregate {
  aggregate: aircraft_aggregate_fields
  nodes: [aircraft!]!
}

"""
aggregate fields of "aircraft"
"""
type aircraft_aggregate_fields {
  avg: aircraft_avg_fields
  count(columns: [aircraft_select_column!], distinct: Boolean): Int
  max: aircraft_max_fields
  min: aircraft_min_fields
  stddev: aircraft_stddev_fields
  stddev_pop: aircraft_stddev_pop_fields
  stddev_samp: aircraft_stddev_samp_fields
  sum: aircraft_sum_fields
  var_pop: aircraft_var_pop_fields
  var_samp: aircraft_var_samp_fields
  variance: aircraft_variance_fields
}

"""
order by aggregate values of table "aircraft"
"""
input aircraft_aggregate_order_by {
  avg: aircraft_avg_order_by
  count: order_by
  max: aircraft_max_order_by
  min: aircraft_min_order_by
  stddev: aircraft_stddev_order_by
  stddev_pop: aircraft_stddev_pop_order_by
  stddev_samp: aircraft_stddev_samp_order_by
  sum: aircraft_sum_order_by
  var_pop: aircraft_var_pop_order_by
  var_samp: aircraft_var_samp_order_by
  variance: aircraft_variance_order_by
}

"""
input type for inserting array relation for remote table "aircraft"
"""
input aircraft_arr_rel_insert_input {
  data: [aircraft_insert_input!]!
  on_conflict: aircraft_on_conflict
}

"""aggregate avg on columns"""
type aircraft_avg_fields {
  Aircraft_ID: Float
}

"""
order by avg() on columns of table "aircraft"
"""
input aircraft_avg_order_by {
  Aircraft_ID: order_by
}

"""
Boolean expression to filter rows from the table "aircraft". All fields are combined with a logical 'AND'.
"""
input aircraft_bool_exp {
  Aircraft: String_comparison_exp
  Aircraft_ID: Int_comparison_exp
  Description: String_comparison_exp
  Max_Gross_Weight: String_comparison_exp
  Max_disk_Loading: String_comparison_exp
  Total_disk_area: String_comparison_exp
  _and: [aircraft_bool_exp]
  _not: aircraft_bool_exp
  _or: [aircraft_bool_exp]
  airport_aircrafts: airport_aircraft_bool_exp
  matches: match_bool_exp
}

"""
unique or primary key constraints on table "aircraft"
"""
enum aircraft_constraint {
  """unique or primary key constraint"""
  aircraft_Aircraft_ID_key

  """unique or primary key constraint"""
  aircraft_pkey
}

"""
input type for incrementing integer column in table "aircraft"
"""
input aircraft_inc_input {
  Aircraft_ID: Int
}

"""
input type for inserting data into table "aircraft"
"""
input aircraft_insert_input {
  Aircraft: String
  Aircraft_ID: Int
  Description: String
  Max_Gross_Weight: String
  Max_disk_Loading: String
  Total_disk_area: String
  airport_aircrafts: airport_aircraft_arr_rel_insert_input
  matches: match_arr_rel_insert_input
}

"""aggregate max on columns"""
type aircraft_max_fields {
  Aircraft: String
  Aircraft_ID: Int
  Description: String
  Max_Gross_Weight: String
  Max_disk_Loading: String
  Total_disk_area: String
}

"""
order by max() on columns of table "aircraft"
"""
input aircraft_max_order_by {
  Aircraft: order_by
  Aircraft_ID: order_by
  Description: order_by
  Max_Gross_Weight: order_by
  Max_disk_Loading: order_by
  Total_disk_area: order_by
}

"""aggregate min on columns"""
type aircraft_min_fields {
  Aircraft: String
  Aircraft_ID: Int
  Description: String
  Max_Gross_Weight: String
  Max_disk_Loading: String
  Total_disk_area: String
}

"""
order by min() on columns of table "aircraft"
"""
input aircraft_min_order_by {
  Aircraft: order_by
  Aircraft_ID: order_by
  Description: order_by
  Max_Gross_Weight: order_by
  Max_disk_Loading: order_by
  Total_disk_area: order_by
}

"""
response of any mutation on the table "aircraft"
"""
type aircraft_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [aircraft!]!
}

"""
input type for inserting object relation for remote table "aircraft"
"""
input aircraft_obj_rel_insert_input {
  data: aircraft_insert_input!
  on_conflict: aircraft_on_conflict
}

"""
on conflict condition type for table "aircraft"
"""
input aircraft_on_conflict {
  constraint: aircraft_constraint!
  update_columns: [aircraft_update_column!]!
  where: aircraft_bool_exp
}

"""
ordering options when selecting data from "aircraft"
"""
input aircraft_order_by {
  Aircraft: order_by
  Aircraft_ID: order_by
  Description: order_by
  Max_Gross_Weight: order_by
  Max_disk_Loading: order_by
  Total_disk_area: order_by
  airport_aircrafts_aggregate: airport_aircraft_aggregate_order_by
  matches_aggregate: match_aggregate_order_by
}

"""
primary key columns input for table: "aircraft"
"""
input aircraft_pk_columns_input {
  Aircraft_ID: Int!
}

"""
select columns of table "aircraft"
"""
enum aircraft_select_column {
  """column name"""
  Aircraft

  """column name"""
  Aircraft_ID

  """column name"""
  Description

  """column name"""
  Max_Gross_Weight

  """column name"""
  Max_disk_Loading

  """column name"""
  Total_disk_area
}

"""
input type for updating data in table "aircraft"
"""
input aircraft_set_input {
  Aircraft: String
  Aircraft_ID: Int
  Description: String
  Max_Gross_Weight: String
  Max_disk_Loading: String
  Total_disk_area: String
}

"""aggregate stddev on columns"""
type aircraft_stddev_fields {
  Aircraft_ID: Float
}

"""
order by stddev() on columns of table "aircraft"
"""
input aircraft_stddev_order_by {
  Aircraft_ID: order_by
}

"""aggregate stddev_pop on columns"""
type aircraft_stddev_pop_fields {
  Aircraft_ID: Float
}

"""
order by stddev_pop() on columns of table "aircraft"
"""
input aircraft_stddev_pop_order_by {
  Aircraft_ID: order_by
}

"""aggregate stddev_samp on columns"""
type aircraft_stddev_samp_fields {
  Aircraft_ID: Float
}

"""
order by stddev_samp() on columns of table "aircraft"
"""
input aircraft_stddev_samp_order_by {
  Aircraft_ID: order_by
}

"""aggregate sum on columns"""
type aircraft_sum_fields {
  Aircraft_ID: Int
}

"""
order by sum() on columns of table "aircraft"
"""
input aircraft_sum_order_by {
  Aircraft_ID: order_by
}

"""
update columns of table "aircraft"
"""
enum aircraft_update_column {
  """column name"""
  Aircraft

  """column name"""
  Aircraft_ID

  """column name"""
  Description

  """column name"""
  Max_Gross_Weight

  """column name"""
  Max_disk_Loading

  """column name"""
  Total_disk_area
}

"""aggregate var_pop on columns"""
type aircraft_var_pop_fields {
  Aircraft_ID: Float
}

"""
order by var_pop() on columns of table "aircraft"
"""
input aircraft_var_pop_order_by {
  Aircraft_ID: order_by
}

"""aggregate var_samp on columns"""
type aircraft_var_samp_fields {
  Aircraft_ID: Float
}

"""
order by var_samp() on columns of table "aircraft"
"""
input aircraft_var_samp_order_by {
  Aircraft_ID: order_by
}

"""aggregate variance on columns"""
type aircraft_variance_fields {
  Aircraft_ID: Float
}

"""
order by variance() on columns of table "aircraft"
"""
input aircraft_variance_order_by {
  Aircraft_ID: order_by
}

"""
columns and relationships of "airport"
"""
type airport {
  Aircraft_Movements: float8
  Airport_ID: Int
  Airport_Name: String
  Domestic_Passengers: float8
  Freight_Metric_Tonnes: float8
  International_Passengers: float8
  Total_Passengers: float8
  Transit_Passengers: float8

  """An array relationship"""
  airport_aircrafts(
    """distinct select on columns"""
    distinct_on: [airport_aircraft_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [airport_aircraft_order_by!]

    """filter the rows returned"""
    where: airport_aircraft_bool_exp
  ): [airport_aircraft!]!

  """An aggregated array relationship"""
  airport_aircrafts_aggregate(
    """distinct select on columns"""
    distinct_on: [airport_aircraft_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [airport_aircraft_order_by!]

    """filter the rows returned"""
    where: airport_aircraft_bool_exp
  ): airport_aircraft_aggregate!
}

"""
aggregated selection of "airport"
"""
type airport_aggregate {
  aggregate: airport_aggregate_fields
  nodes: [airport!]!
}

"""
aggregate fields of "airport"
"""
type airport_aggregate_fields {
  avg: airport_avg_fields
  count(columns: [airport_select_column!], distinct: Boolean): Int
  max: airport_max_fields
  min: airport_min_fields
  stddev: airport_stddev_fields
  stddev_pop: airport_stddev_pop_fields
  stddev_samp: airport_stddev_samp_fields
  sum: airport_sum_fields
  var_pop: airport_var_pop_fields
  var_samp: airport_var_samp_fields
  variance: airport_variance_fields
}

"""
order by aggregate values of table "airport"
"""
input airport_aggregate_order_by {
  avg: airport_avg_order_by
  count: order_by
  max: airport_max_order_by
  min: airport_min_order_by
  stddev: airport_stddev_order_by
  stddev_pop: airport_stddev_pop_order_by
  stddev_samp: airport_stddev_samp_order_by
  sum: airport_sum_order_by
  var_pop: airport_var_pop_order_by
  var_samp: airport_var_samp_order_by
  variance: airport_variance_order_by
}

"""
columns and relationships of "airport_aircraft"
"""
type airport_aircraft {
  Aircraft_ID: Int
  Airport_ID: Int
  ID: Int

  """An object relationship"""
  aircraft: aircraft

  """An object relationship"""
  airport: airport
}

"""
aggregated selection of "airport_aircraft"
"""
type airport_aircraft_aggregate {
  aggregate: airport_aircraft_aggregate_fields
  nodes: [airport_aircraft!]!
}

"""
aggregate fields of "airport_aircraft"
"""
type airport_aircraft_aggregate_fields {
  avg: airport_aircraft_avg_fields
  count(columns: [airport_aircraft_select_column!], distinct: Boolean): Int
  max: airport_aircraft_max_fields
  min: airport_aircraft_min_fields
  stddev: airport_aircraft_stddev_fields
  stddev_pop: airport_aircraft_stddev_pop_fields
  stddev_samp: airport_aircraft_stddev_samp_fields
  sum: airport_aircraft_sum_fields
  var_pop: airport_aircraft_var_pop_fields
  var_samp: airport_aircraft_var_samp_fields
  variance: airport_aircraft_variance_fields
}

"""
order by aggregate values of table "airport_aircraft"
"""
input airport_aircraft_aggregate_order_by {
  avg: airport_aircraft_avg_order_by
  count: order_by
  max: airport_aircraft_max_order_by
  min: airport_aircraft_min_order_by
  stddev: airport_aircraft_stddev_order_by
  stddev_pop: airport_aircraft_stddev_pop_order_by
  stddev_samp: airport_aircraft_stddev_samp_order_by
  sum: airport_aircraft_sum_order_by
  var_pop: airport_aircraft_var_pop_order_by
  var_samp: airport_aircraft_var_samp_order_by
  variance: airport_aircraft_variance_order_by
}

"""
input type for inserting array relation for remote table "airport_aircraft"
"""
input airport_aircraft_arr_rel_insert_input {
  data: [airport_aircraft_insert_input!]!
  on_conflict: airport_aircraft_on_conflict
}

"""aggregate avg on columns"""
type airport_aircraft_avg_fields {
  Aircraft_ID: Float
  Airport_ID: Float
  ID: Float
}

"""
order by avg() on columns of table "airport_aircraft"
"""
input airport_aircraft_avg_order_by {
  Aircraft_ID: order_by
  Airport_ID: order_by
  ID: order_by
}

"""
Boolean expression to filter rows from the table "airport_aircraft". All fields are combined with a logical 'AND'.
"""
input airport_aircraft_bool_exp {
  Aircraft_ID: Int_comparison_exp
  Airport_ID: Int_comparison_exp
  ID: Int_comparison_exp
  _and: [airport_aircraft_bool_exp]
  _not: airport_aircraft_bool_exp
  _or: [airport_aircraft_bool_exp]
  aircraft: aircraft_bool_exp
  airport: airport_bool_exp
}

"""
unique or primary key constraints on table "airport_aircraft"
"""
enum airport_aircraft_constraint {
  """unique or primary key constraint"""
  airport_aircraft_ID_key
}

"""
input type for incrementing integer column in table "airport_aircraft"
"""
input airport_aircraft_inc_input {
  Aircraft_ID: Int
  Airport_ID: Int
  ID: Int
}

"""
input type for inserting data into table "airport_aircraft"
"""
input airport_aircraft_insert_input {
  Aircraft_ID: Int
  Airport_ID: Int
  ID: Int
  aircraft: aircraft_obj_rel_insert_input
  airport: airport_obj_rel_insert_input
}

"""aggregate max on columns"""
type airport_aircraft_max_fields {
  Aircraft_ID: Int
  Airport_ID: Int
  ID: Int
}

"""
order by max() on columns of table "airport_aircraft"
"""
input airport_aircraft_max_order_by {
  Aircraft_ID: order_by
  Airport_ID: order_by
  ID: order_by
}

"""aggregate min on columns"""
type airport_aircraft_min_fields {
  Aircraft_ID: Int
  Airport_ID: Int
  ID: Int
}

"""
order by min() on columns of table "airport_aircraft"
"""
input airport_aircraft_min_order_by {
  Aircraft_ID: order_by
  Airport_ID: order_by
  ID: order_by
}

"""
response of any mutation on the table "airport_aircraft"
"""
type airport_aircraft_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [airport_aircraft!]!
}

"""
input type for inserting object relation for remote table "airport_aircraft"
"""
input airport_aircraft_obj_rel_insert_input {
  data: airport_aircraft_insert_input!
  on_conflict: airport_aircraft_on_conflict
}

"""
on conflict condition type for table "airport_aircraft"
"""
input airport_aircraft_on_conflict {
  constraint: airport_aircraft_constraint!
  update_columns: [airport_aircraft_update_column!]!
  where: airport_aircraft_bool_exp
}

"""
ordering options when selecting data from "airport_aircraft"
"""
input airport_aircraft_order_by {
  Aircraft_ID: order_by
  Airport_ID: order_by
  ID: order_by
  aircraft: aircraft_order_by
  airport: airport_order_by
}

"""
select columns of table "airport_aircraft"
"""
enum airport_aircraft_select_column {
  """column name"""
  Aircraft_ID

  """column name"""
  Airport_ID

  """column name"""
  ID
}

"""
input type for updating data in table "airport_aircraft"
"""
input airport_aircraft_set_input {
  Aircraft_ID: Int
  Airport_ID: Int
  ID: Int
}

"""aggregate stddev on columns"""
type airport_aircraft_stddev_fields {
  Aircraft_ID: Float
  Airport_ID: Float
  ID: Float
}

"""
order by stddev() on columns of table "airport_aircraft"
"""
input airport_aircraft_stddev_order_by {
  Aircraft_ID: order_by
  Airport_ID: order_by
  ID: order_by
}

"""aggregate stddev_pop on columns"""
type airport_aircraft_stddev_pop_fields {
  Aircraft_ID: Float
  Airport_ID: Float
  ID: Float
}

"""
order by stddev_pop() on columns of table "airport_aircraft"
"""
input airport_aircraft_stddev_pop_order_by {
  Aircraft_ID: order_by
  Airport_ID: order_by
  ID: order_by
}

"""aggregate stddev_samp on columns"""
type airport_aircraft_stddev_samp_fields {
  Aircraft_ID: Float
  Airport_ID: Float
  ID: Float
}

"""
order by stddev_samp() on columns of table "airport_aircraft"
"""
input airport_aircraft_stddev_samp_order_by {
  Aircraft_ID: order_by
  Airport_ID: order_by
  ID: order_by
}

"""aggregate sum on columns"""
type airport_aircraft_sum_fields {
  Aircraft_ID: Int
  Airport_ID: Int
  ID: Int
}

"""
order by sum() on columns of table "airport_aircraft"
"""
input airport_aircraft_sum_order_by {
  Aircraft_ID: order_by
  Airport_ID: order_by
  ID: order_by
}

"""
update columns of table "airport_aircraft"
"""
enum airport_aircraft_update_column {
  """column name"""
  Aircraft_ID

  """column name"""
  Airport_ID

  """column name"""
  ID
}

"""aggregate var_pop on columns"""
type airport_aircraft_var_pop_fields {
  Aircraft_ID: Float
  Airport_ID: Float
  ID: Float
}

"""
order by var_pop() on columns of table "airport_aircraft"
"""
input airport_aircraft_var_pop_order_by {
  Aircraft_ID: order_by
  Airport_ID: order_by
  ID: order_by
}

"""aggregate var_samp on columns"""
type airport_aircraft_var_samp_fields {
  Aircraft_ID: Float
  Airport_ID: Float
  ID: Float
}

"""
order by var_samp() on columns of table "airport_aircraft"
"""
input airport_aircraft_var_samp_order_by {
  Aircraft_ID: order_by
  Airport_ID: order_by
  ID: order_by
}

"""aggregate variance on columns"""
type airport_aircraft_variance_fields {
  Aircraft_ID: Float
  Airport_ID: Float
  ID: Float
}

"""
order by variance() on columns of table "airport_aircraft"
"""
input airport_aircraft_variance_order_by {
  Aircraft_ID: order_by
  Airport_ID: order_by
  ID: order_by
}

"""
input type for inserting array relation for remote table "airport"
"""
input airport_arr_rel_insert_input {
  data: [airport_insert_input!]!
  on_conflict: airport_on_conflict
}

"""aggregate avg on columns"""
type airport_avg_fields {
  Aircraft_Movements: Float
  Airport_ID: Float
  Domestic_Passengers: Float
  Freight_Metric_Tonnes: Float
  International_Passengers: Float
  Total_Passengers: Float
  Transit_Passengers: Float
}

"""
order by avg() on columns of table "airport"
"""
input airport_avg_order_by {
  Aircraft_Movements: order_by
  Airport_ID: order_by
  Domestic_Passengers: order_by
  Freight_Metric_Tonnes: order_by
  International_Passengers: order_by
  Total_Passengers: order_by
  Transit_Passengers: order_by
}

"""
Boolean expression to filter rows from the table "airport". All fields are combined with a logical 'AND'.
"""
input airport_bool_exp {
  Aircraft_Movements: float8_comparison_exp
  Airport_ID: Int_comparison_exp
  Airport_Name: String_comparison_exp
  Domestic_Passengers: float8_comparison_exp
  Freight_Metric_Tonnes: float8_comparison_exp
  International_Passengers: float8_comparison_exp
  Total_Passengers: float8_comparison_exp
  Transit_Passengers: float8_comparison_exp
  _and: [airport_bool_exp]
  _not: airport_bool_exp
  _or: [airport_bool_exp]
  airport_aircrafts: airport_aircraft_bool_exp
}

"""
unique or primary key constraints on table "airport"
"""
enum airport_constraint {
  """unique or primary key constraint"""
  airport_Airport_ID_key
}

"""
input type for incrementing integer column in table "airport"
"""
input airport_inc_input {
  Aircraft_Movements: float8
  Airport_ID: Int
  Domestic_Passengers: float8
  Freight_Metric_Tonnes: float8
  International_Passengers: float8
  Total_Passengers: float8
  Transit_Passengers: float8
}

"""
input type for inserting data into table "airport"
"""
input airport_insert_input {
  Aircraft_Movements: float8
  Airport_ID: Int
  Airport_Name: String
  Domestic_Passengers: float8
  Freight_Metric_Tonnes: float8
  International_Passengers: float8
  Total_Passengers: float8
  Transit_Passengers: float8
  airport_aircrafts: airport_aircraft_arr_rel_insert_input
}

"""aggregate max on columns"""
type airport_max_fields {
  Aircraft_Movements: float8
  Airport_ID: Int
  Airport_Name: String
  Domestic_Passengers: float8
  Freight_Metric_Tonnes: float8
  International_Passengers: float8
  Total_Passengers: float8
  Transit_Passengers: float8
}

"""
order by max() on columns of table "airport"
"""
input airport_max_order_by {
  Aircraft_Movements: order_by
  Airport_ID: order_by
  Airport_Name: order_by
  Domestic_Passengers: order_by
  Freight_Metric_Tonnes: order_by
  International_Passengers: order_by
  Total_Passengers: order_by
  Transit_Passengers: order_by
}

"""aggregate min on columns"""
type airport_min_fields {
  Aircraft_Movements: float8
  Airport_ID: Int
  Airport_Name: String
  Domestic_Passengers: float8
  Freight_Metric_Tonnes: float8
  International_Passengers: float8
  Total_Passengers: float8
  Transit_Passengers: float8
}

"""
order by min() on columns of table "airport"
"""
input airport_min_order_by {
  Aircraft_Movements: order_by
  Airport_ID: order_by
  Airport_Name: order_by
  Domestic_Passengers: order_by
  Freight_Metric_Tonnes: order_by
  International_Passengers: order_by
  Total_Passengers: order_by
  Transit_Passengers: order_by
}

"""
response of any mutation on the table "airport"
"""
type airport_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [airport!]!
}

"""
input type for inserting object relation for remote table "airport"
"""
input airport_obj_rel_insert_input {
  data: airport_insert_input!
  on_conflict: airport_on_conflict
}

"""
on conflict condition type for table "airport"
"""
input airport_on_conflict {
  constraint: airport_constraint!
  update_columns: [airport_update_column!]!
  where: airport_bool_exp
}

"""
ordering options when selecting data from "airport"
"""
input airport_order_by {
  Aircraft_Movements: order_by
  Airport_ID: order_by
  Airport_Name: order_by
  Domestic_Passengers: order_by
  Freight_Metric_Tonnes: order_by
  International_Passengers: order_by
  Total_Passengers: order_by
  Transit_Passengers: order_by
  airport_aircrafts_aggregate: airport_aircraft_aggregate_order_by
}

"""
select columns of table "airport"
"""
enum airport_select_column {
  """column name"""
  Aircraft_Movements

  """column name"""
  Airport_ID

  """column name"""
  Airport_Name

  """column name"""
  Domestic_Passengers

  """column name"""
  Freight_Metric_Tonnes

  """column name"""
  International_Passengers

  """column name"""
  Total_Passengers

  """column name"""
  Transit_Passengers
}

"""
input type for updating data in table "airport"
"""
input airport_set_input {
  Aircraft_Movements: float8
  Airport_ID: Int
  Airport_Name: String
  Domestic_Passengers: float8
  Freight_Metric_Tonnes: float8
  International_Passengers: float8
  Total_Passengers: float8
  Transit_Passengers: float8
}

"""aggregate stddev on columns"""
type airport_stddev_fields {
  Aircraft_Movements: Float
  Airport_ID: Float
  Domestic_Passengers: Float
  Freight_Metric_Tonnes: Float
  International_Passengers: Float
  Total_Passengers: Float
  Transit_Passengers: Float
}

"""
order by stddev() on columns of table "airport"
"""
input airport_stddev_order_by {
  Aircraft_Movements: order_by
  Airport_ID: order_by
  Domestic_Passengers: order_by
  Freight_Metric_Tonnes: order_by
  International_Passengers: order_by
  Total_Passengers: order_by
  Transit_Passengers: order_by
}

"""aggregate stddev_pop on columns"""
type airport_stddev_pop_fields {
  Aircraft_Movements: Float
  Airport_ID: Float
  Domestic_Passengers: Float
  Freight_Metric_Tonnes: Float
  International_Passengers: Float
  Total_Passengers: Float
  Transit_Passengers: Float
}

"""
order by stddev_pop() on columns of table "airport"
"""
input airport_stddev_pop_order_by {
  Aircraft_Movements: order_by
  Airport_ID: order_by
  Domestic_Passengers: order_by
  Freight_Metric_Tonnes: order_by
  International_Passengers: order_by
  Total_Passengers: order_by
  Transit_Passengers: order_by
}

"""aggregate stddev_samp on columns"""
type airport_stddev_samp_fields {
  Aircraft_Movements: Float
  Airport_ID: Float
  Domestic_Passengers: Float
  Freight_Metric_Tonnes: Float
  International_Passengers: Float
  Total_Passengers: Float
  Transit_Passengers: Float
}

"""
order by stddev_samp() on columns of table "airport"
"""
input airport_stddev_samp_order_by {
  Aircraft_Movements: order_by
  Airport_ID: order_by
  Domestic_Passengers: order_by
  Freight_Metric_Tonnes: order_by
  International_Passengers: order_by
  Total_Passengers: order_by
  Transit_Passengers: order_by
}

"""aggregate sum on columns"""
type airport_sum_fields {
  Aircraft_Movements: float8
  Airport_ID: Int
  Domestic_Passengers: float8
  Freight_Metric_Tonnes: float8
  International_Passengers: float8
  Total_Passengers: float8
  Transit_Passengers: float8
}

"""
order by sum() on columns of table "airport"
"""
input airport_sum_order_by {
  Aircraft_Movements: order_by
  Airport_ID: order_by
  Domestic_Passengers: order_by
  Freight_Metric_Tonnes: order_by
  International_Passengers: order_by
  Total_Passengers: order_by
  Transit_Passengers: order_by
}

"""
update columns of table "airport"
"""
enum airport_update_column {
  """column name"""
  Aircraft_Movements

  """column name"""
  Airport_ID

  """column name"""
  Airport_Name

  """column name"""
  Domestic_Passengers

  """column name"""
  Freight_Metric_Tonnes

  """column name"""
  International_Passengers

  """column name"""
  Total_Passengers

  """column name"""
  Transit_Passengers
}

"""aggregate var_pop on columns"""
type airport_var_pop_fields {
  Aircraft_Movements: Float
  Airport_ID: Float
  Domestic_Passengers: Float
  Freight_Metric_Tonnes: Float
  International_Passengers: Float
  Total_Passengers: Float
  Transit_Passengers: Float
}

"""
order by var_pop() on columns of table "airport"
"""
input airport_var_pop_order_by {
  Aircraft_Movements: order_by
  Airport_ID: order_by
  Domestic_Passengers: order_by
  Freight_Metric_Tonnes: order_by
  International_Passengers: order_by
  Total_Passengers: order_by
  Transit_Passengers: order_by
}

"""aggregate var_samp on columns"""
type airport_var_samp_fields {
  Aircraft_Movements: Float
  Airport_ID: Float
  Domestic_Passengers: Float
  Freight_Metric_Tonnes: Float
  International_Passengers: Float
  Total_Passengers: Float
  Transit_Passengers: Float
}

"""
order by var_samp() on columns of table "airport"
"""
input airport_var_samp_order_by {
  Aircraft_Movements: order_by
  Airport_ID: order_by
  Domestic_Passengers: order_by
  Freight_Metric_Tonnes: order_by
  International_Passengers: order_by
  Total_Passengers: order_by
  Transit_Passengers: order_by
}

"""aggregate variance on columns"""
type airport_variance_fields {
  Aircraft_Movements: Float
  Airport_ID: Float
  Domestic_Passengers: Float
  Freight_Metric_Tonnes: Float
  International_Passengers: Float
  Total_Passengers: Float
  Transit_Passengers: Float
}

"""
order by variance() on columns of table "airport"
"""
input airport_variance_order_by {
  Aircraft_Movements: order_by
  Airport_ID: order_by
  Domestic_Passengers: order_by
  Freight_Metric_Tonnes: order_by
  International_Passengers: order_by
  Total_Passengers: order_by
  Transit_Passengers: order_by
}

scalar float8

"""
expression to compare columns of type float8. All fields are combined with logical 'AND'.
"""
input float8_comparison_exp {
  _eq: float8
  _gt: float8
  _gte: float8
  _in: [float8!]
  _is_null: Boolean
  _lt: float8
  _lte: float8
  _neq: float8
  _nin: [float8!]
}

"""
expression to compare columns of type Int. All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""
columns and relationships of "match"
"""
type match {
  Country: String
  Date: String
  Fastest_Qualifying: String
  Location: String
  Round: float8
  Winning_Aircraft: Int
  Winning_Pilot: Int

  """An object relationship"""
  aircraft: aircraft

  """An object relationship"""
  pilot: pilot
}

"""
aggregated selection of "match"
"""
type match_aggregate {
  aggregate: match_aggregate_fields
  nodes: [match!]!
}

"""
aggregate fields of "match"
"""
type match_aggregate_fields {
  avg: match_avg_fields
  count(columns: [match_select_column!], distinct: Boolean): Int
  max: match_max_fields
  min: match_min_fields
  stddev: match_stddev_fields
  stddev_pop: match_stddev_pop_fields
  stddev_samp: match_stddev_samp_fields
  sum: match_sum_fields
  var_pop: match_var_pop_fields
  var_samp: match_var_samp_fields
  variance: match_variance_fields
}

"""
order by aggregate values of table "match"
"""
input match_aggregate_order_by {
  avg: match_avg_order_by
  count: order_by
  max: match_max_order_by
  min: match_min_order_by
  stddev: match_stddev_order_by
  stddev_pop: match_stddev_pop_order_by
  stddev_samp: match_stddev_samp_order_by
  sum: match_sum_order_by
  var_pop: match_var_pop_order_by
  var_samp: match_var_samp_order_by
  variance: match_variance_order_by
}

"""
input type for inserting array relation for remote table "match"
"""
input match_arr_rel_insert_input {
  data: [match_insert_input!]!
}

"""aggregate avg on columns"""
type match_avg_fields {
  Round: Float
  Winning_Aircraft: Float
  Winning_Pilot: Float
}

"""
order by avg() on columns of table "match"
"""
input match_avg_order_by {
  Round: order_by
  Winning_Aircraft: order_by
  Winning_Pilot: order_by
}

"""
Boolean expression to filter rows from the table "match". All fields are combined with a logical 'AND'.
"""
input match_bool_exp {
  Country: String_comparison_exp
  Date: String_comparison_exp
  Fastest_Qualifying: String_comparison_exp
  Location: String_comparison_exp
  Round: float8_comparison_exp
  Winning_Aircraft: Int_comparison_exp
  Winning_Pilot: Int_comparison_exp
  _and: [match_bool_exp]
  _not: match_bool_exp
  _or: [match_bool_exp]
  aircraft: aircraft_bool_exp
  pilot: pilot_bool_exp
}

"""
input type for incrementing integer column in table "match"
"""
input match_inc_input {
  Round: float8
  Winning_Aircraft: Int
  Winning_Pilot: Int
}

"""
input type for inserting data into table "match"
"""
input match_insert_input {
  Country: String
  Date: String
  Fastest_Qualifying: String
  Location: String
  Round: float8
  Winning_Aircraft: Int
  Winning_Pilot: Int
  aircraft: aircraft_obj_rel_insert_input
  pilot: pilot_obj_rel_insert_input
}

"""aggregate max on columns"""
type match_max_fields {
  Country: String
  Date: String
  Fastest_Qualifying: String
  Location: String
  Round: float8
  Winning_Aircraft: Int
  Winning_Pilot: Int
}

"""
order by max() on columns of table "match"
"""
input match_max_order_by {
  Country: order_by
  Date: order_by
  Fastest_Qualifying: order_by
  Location: order_by
  Round: order_by
  Winning_Aircraft: order_by
  Winning_Pilot: order_by
}

"""aggregate min on columns"""
type match_min_fields {
  Country: String
  Date: String
  Fastest_Qualifying: String
  Location: String
  Round: float8
  Winning_Aircraft: Int
  Winning_Pilot: Int
}

"""
order by min() on columns of table "match"
"""
input match_min_order_by {
  Country: order_by
  Date: order_by
  Fastest_Qualifying: order_by
  Location: order_by
  Round: order_by
  Winning_Aircraft: order_by
  Winning_Pilot: order_by
}

"""
response of any mutation on the table "match"
"""
type match_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [match!]!
}

"""
input type for inserting object relation for remote table "match"
"""
input match_obj_rel_insert_input {
  data: match_insert_input!
}

"""
ordering options when selecting data from "match"
"""
input match_order_by {
  Country: order_by
  Date: order_by
  Fastest_Qualifying: order_by
  Location: order_by
  Round: order_by
  Winning_Aircraft: order_by
  Winning_Pilot: order_by
  aircraft: aircraft_order_by
  pilot: pilot_order_by
}

"""
select columns of table "match"
"""
enum match_select_column {
  """column name"""
  Country

  """column name"""
  Date

  """column name"""
  Fastest_Qualifying

  """column name"""
  Location

  """column name"""
  Round

  """column name"""
  Winning_Aircraft

  """column name"""
  Winning_Pilot
}

"""
input type for updating data in table "match"
"""
input match_set_input {
  Country: String
  Date: String
  Fastest_Qualifying: String
  Location: String
  Round: float8
  Winning_Aircraft: Int
  Winning_Pilot: Int
}

"""aggregate stddev on columns"""
type match_stddev_fields {
  Round: Float
  Winning_Aircraft: Float
  Winning_Pilot: Float
}

"""
order by stddev() on columns of table "match"
"""
input match_stddev_order_by {
  Round: order_by
  Winning_Aircraft: order_by
  Winning_Pilot: order_by
}

"""aggregate stddev_pop on columns"""
type match_stddev_pop_fields {
  Round: Float
  Winning_Aircraft: Float
  Winning_Pilot: Float
}

"""
order by stddev_pop() on columns of table "match"
"""
input match_stddev_pop_order_by {
  Round: order_by
  Winning_Aircraft: order_by
  Winning_Pilot: order_by
}

"""aggregate stddev_samp on columns"""
type match_stddev_samp_fields {
  Round: Float
  Winning_Aircraft: Float
  Winning_Pilot: Float
}

"""
order by stddev_samp() on columns of table "match"
"""
input match_stddev_samp_order_by {
  Round: order_by
  Winning_Aircraft: order_by
  Winning_Pilot: order_by
}

"""aggregate sum on columns"""
type match_sum_fields {
  Round: float8
  Winning_Aircraft: Int
  Winning_Pilot: Int
}

"""
order by sum() on columns of table "match"
"""
input match_sum_order_by {
  Round: order_by
  Winning_Aircraft: order_by
  Winning_Pilot: order_by
}

"""aggregate var_pop on columns"""
type match_var_pop_fields {
  Round: Float
  Winning_Aircraft: Float
  Winning_Pilot: Float
}

"""
order by var_pop() on columns of table "match"
"""
input match_var_pop_order_by {
  Round: order_by
  Winning_Aircraft: order_by
  Winning_Pilot: order_by
}

"""aggregate var_samp on columns"""
type match_var_samp_fields {
  Round: Float
  Winning_Aircraft: Float
  Winning_Pilot: Float
}

"""
order by var_samp() on columns of table "match"
"""
input match_var_samp_order_by {
  Round: order_by
  Winning_Aircraft: order_by
  Winning_Pilot: order_by
}

"""aggregate variance on columns"""
type match_variance_fields {
  Round: Float
  Winning_Aircraft: Float
  Winning_Pilot: Float
}

"""
order by variance() on columns of table "match"
"""
input match_variance_order_by {
  Round: order_by
  Winning_Aircraft: order_by
  Winning_Pilot: order_by
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "aircraft"
  """
  delete_aircraft(
    """filter the rows which have to be deleted"""
    where: aircraft_bool_exp!
  ): aircraft_mutation_response

  """
  delete single row from the table: "aircraft"
  """
  delete_aircraft_by_pk(Aircraft_ID: Int!): aircraft

  """
  delete data from the table: "airport"
  """
  delete_airport(
    """filter the rows which have to be deleted"""
    where: airport_bool_exp!
  ): airport_mutation_response

  """
  delete data from the table: "airport_aircraft"
  """
  delete_airport_aircraft(
    """filter the rows which have to be deleted"""
    where: airport_aircraft_bool_exp!
  ): airport_aircraft_mutation_response

  """
  delete data from the table: "match"
  """
  delete_match(
    """filter the rows which have to be deleted"""
    where: match_bool_exp!
  ): match_mutation_response

  """
  delete data from the table: "pilot"
  """
  delete_pilot(
    """filter the rows which have to be deleted"""
    where: pilot_bool_exp!
  ): pilot_mutation_response

  """
  insert data into the table: "aircraft"
  """
  insert_aircraft(
    """the rows to be inserted"""
    objects: [aircraft_insert_input!]!

    """on conflict condition"""
    on_conflict: aircraft_on_conflict
  ): aircraft_mutation_response

  """
  insert a single row into the table: "aircraft"
  """
  insert_aircraft_one(
    """the row to be inserted"""
    object: aircraft_insert_input!

    """on conflict condition"""
    on_conflict: aircraft_on_conflict
  ): aircraft

  """
  insert data into the table: "airport"
  """
  insert_airport(
    """the rows to be inserted"""
    objects: [airport_insert_input!]!

    """on conflict condition"""
    on_conflict: airport_on_conflict
  ): airport_mutation_response

  """
  insert data into the table: "airport_aircraft"
  """
  insert_airport_aircraft(
    """the rows to be inserted"""
    objects: [airport_aircraft_insert_input!]!

    """on conflict condition"""
    on_conflict: airport_aircraft_on_conflict
  ): airport_aircraft_mutation_response

  """
  insert a single row into the table: "airport_aircraft"
  """
  insert_airport_aircraft_one(
    """the row to be inserted"""
    object: airport_aircraft_insert_input!

    """on conflict condition"""
    on_conflict: airport_aircraft_on_conflict
  ): airport_aircraft

  """
  insert a single row into the table: "airport"
  """
  insert_airport_one(
    """the row to be inserted"""
    object: airport_insert_input!

    """on conflict condition"""
    on_conflict: airport_on_conflict
  ): airport

  """
  insert data into the table: "match"
  """
  insert_match(
    """the rows to be inserted"""
    objects: [match_insert_input!]!
  ): match_mutation_response

  """
  insert a single row into the table: "match"
  """
  insert_match_one(
    """the row to be inserted"""
    object: match_insert_input!
  ): match

  """
  insert data into the table: "pilot"
  """
  insert_pilot(
    """the rows to be inserted"""
    objects: [pilot_insert_input!]!

    """on conflict condition"""
    on_conflict: pilot_on_conflict
  ): pilot_mutation_response

  """
  insert a single row into the table: "pilot"
  """
  insert_pilot_one(
    """the row to be inserted"""
    object: pilot_insert_input!

    """on conflict condition"""
    on_conflict: pilot_on_conflict
  ): pilot

  """
  update data of the table: "aircraft"
  """
  update_aircraft(
    """increments the integer columns with given value of the filtered values"""
    _inc: aircraft_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: aircraft_set_input

    """filter the rows which have to be updated"""
    where: aircraft_bool_exp!
  ): aircraft_mutation_response

  """
  update single row of the table: "aircraft"
  """
  update_aircraft_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: aircraft_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: aircraft_set_input
    pk_columns: aircraft_pk_columns_input!
  ): aircraft

  """
  update data of the table: "airport"
  """
  update_airport(
    """increments the integer columns with given value of the filtered values"""
    _inc: airport_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: airport_set_input

    """filter the rows which have to be updated"""
    where: airport_bool_exp!
  ): airport_mutation_response

  """
  update data of the table: "airport_aircraft"
  """
  update_airport_aircraft(
    """increments the integer columns with given value of the filtered values"""
    _inc: airport_aircraft_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: airport_aircraft_set_input

    """filter the rows which have to be updated"""
    where: airport_aircraft_bool_exp!
  ): airport_aircraft_mutation_response

  """
  update data of the table: "match"
  """
  update_match(
    """increments the integer columns with given value of the filtered values"""
    _inc: match_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: match_set_input

    """filter the rows which have to be updated"""
    where: match_bool_exp!
  ): match_mutation_response

  """
  update data of the table: "pilot"
  """
  update_pilot(
    """increments the integer columns with given value of the filtered values"""
    _inc: pilot_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: pilot_set_input

    """filter the rows which have to be updated"""
    where: pilot_bool_exp!
  ): pilot_mutation_response
}

"""column ordering options"""
enum order_by {
  """in the ascending order, nulls last"""
  asc

  """in the ascending order, nulls first"""
  asc_nulls_first

  """in the ascending order, nulls last"""
  asc_nulls_last

  """in the descending order, nulls first"""
  desc

  """in the descending order, nulls first"""
  desc_nulls_first

  """in the descending order, nulls last"""
  desc_nulls_last
}

"""
columns and relationships of "pilot"
"""
type pilot {
  Age: Int
  Name: String
  Pilot_Id: Int

  """An array relationship"""
  matches(
    """distinct select on columns"""
    distinct_on: [match_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [match_order_by!]

    """filter the rows returned"""
    where: match_bool_exp
  ): [match!]!

  """An aggregated array relationship"""
  matches_aggregate(
    """distinct select on columns"""
    distinct_on: [match_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [match_order_by!]

    """filter the rows returned"""
    where: match_bool_exp
  ): match_aggregate!
}

"""
aggregated selection of "pilot"
"""
type pilot_aggregate {
  aggregate: pilot_aggregate_fields
  nodes: [pilot!]!
}

"""
aggregate fields of "pilot"
"""
type pilot_aggregate_fields {
  avg: pilot_avg_fields
  count(columns: [pilot_select_column!], distinct: Boolean): Int
  max: pilot_max_fields
  min: pilot_min_fields
  stddev: pilot_stddev_fields
  stddev_pop: pilot_stddev_pop_fields
  stddev_samp: pilot_stddev_samp_fields
  sum: pilot_sum_fields
  var_pop: pilot_var_pop_fields
  var_samp: pilot_var_samp_fields
  variance: pilot_variance_fields
}

"""
order by aggregate values of table "pilot"
"""
input pilot_aggregate_order_by {
  avg: pilot_avg_order_by
  count: order_by
  max: pilot_max_order_by
  min: pilot_min_order_by
  stddev: pilot_stddev_order_by
  stddev_pop: pilot_stddev_pop_order_by
  stddev_samp: pilot_stddev_samp_order_by
  sum: pilot_sum_order_by
  var_pop: pilot_var_pop_order_by
  var_samp: pilot_var_samp_order_by
  variance: pilot_variance_order_by
}

"""
input type for inserting array relation for remote table "pilot"
"""
input pilot_arr_rel_insert_input {
  data: [pilot_insert_input!]!
  on_conflict: pilot_on_conflict
}

"""aggregate avg on columns"""
type pilot_avg_fields {
  Age: Float
  Pilot_Id: Float
}

"""
order by avg() on columns of table "pilot"
"""
input pilot_avg_order_by {
  Age: order_by
  Pilot_Id: order_by
}

"""
Boolean expression to filter rows from the table "pilot". All fields are combined with a logical 'AND'.
"""
input pilot_bool_exp {
  Age: Int_comparison_exp
  Name: String_comparison_exp
  Pilot_Id: Int_comparison_exp
  _and: [pilot_bool_exp]
  _not: pilot_bool_exp
  _or: [pilot_bool_exp]
  matches: match_bool_exp
}

"""
unique or primary key constraints on table "pilot"
"""
enum pilot_constraint {
  """unique or primary key constraint"""
  pilot_Pilot_Id_key
}

"""
input type for incrementing integer column in table "pilot"
"""
input pilot_inc_input {
  Age: Int
  Pilot_Id: Int
}

"""
input type for inserting data into table "pilot"
"""
input pilot_insert_input {
  Age: Int
  Name: String
  Pilot_Id: Int
  matches: match_arr_rel_insert_input
}

"""aggregate max on columns"""
type pilot_max_fields {
  Age: Int
  Name: String
  Pilot_Id: Int
}

"""
order by max() on columns of table "pilot"
"""
input pilot_max_order_by {
  Age: order_by
  Name: order_by
  Pilot_Id: order_by
}

"""aggregate min on columns"""
type pilot_min_fields {
  Age: Int
  Name: String
  Pilot_Id: Int
}

"""
order by min() on columns of table "pilot"
"""
input pilot_min_order_by {
  Age: order_by
  Name: order_by
  Pilot_Id: order_by
}

"""
response of any mutation on the table "pilot"
"""
type pilot_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [pilot!]!
}

"""
input type for inserting object relation for remote table "pilot"
"""
input pilot_obj_rel_insert_input {
  data: pilot_insert_input!
  on_conflict: pilot_on_conflict
}

"""
on conflict condition type for table "pilot"
"""
input pilot_on_conflict {
  constraint: pilot_constraint!
  update_columns: [pilot_update_column!]!
  where: pilot_bool_exp
}

"""
ordering options when selecting data from "pilot"
"""
input pilot_order_by {
  Age: order_by
  Name: order_by
  Pilot_Id: order_by
  matches_aggregate: match_aggregate_order_by
}

"""
select columns of table "pilot"
"""
enum pilot_select_column {
  """column name"""
  Age

  """column name"""
  Name

  """column name"""
  Pilot_Id
}

"""
input type for updating data in table "pilot"
"""
input pilot_set_input {
  Age: Int
  Name: String
  Pilot_Id: Int
}

"""aggregate stddev on columns"""
type pilot_stddev_fields {
  Age: Float
  Pilot_Id: Float
}

"""
order by stddev() on columns of table "pilot"
"""
input pilot_stddev_order_by {
  Age: order_by
  Pilot_Id: order_by
}

"""aggregate stddev_pop on columns"""
type pilot_stddev_pop_fields {
  Age: Float
  Pilot_Id: Float
}

"""
order by stddev_pop() on columns of table "pilot"
"""
input pilot_stddev_pop_order_by {
  Age: order_by
  Pilot_Id: order_by
}

"""aggregate stddev_samp on columns"""
type pilot_stddev_samp_fields {
  Age: Float
  Pilot_Id: Float
}

"""
order by stddev_samp() on columns of table "pilot"
"""
input pilot_stddev_samp_order_by {
  Age: order_by
  Pilot_Id: order_by
}

"""aggregate sum on columns"""
type pilot_sum_fields {
  Age: Int
  Pilot_Id: Int
}

"""
order by sum() on columns of table "pilot"
"""
input pilot_sum_order_by {
  Age: order_by
  Pilot_Id: order_by
}

"""
update columns of table "pilot"
"""
enum pilot_update_column {
  """column name"""
  Age

  """column name"""
  Name

  """column name"""
  Pilot_Id
}

"""aggregate var_pop on columns"""
type pilot_var_pop_fields {
  Age: Float
  Pilot_Id: Float
}

"""
order by var_pop() on columns of table "pilot"
"""
input pilot_var_pop_order_by {
  Age: order_by
  Pilot_Id: order_by
}

"""aggregate var_samp on columns"""
type pilot_var_samp_fields {
  Age: Float
  Pilot_Id: Float
}

"""
order by var_samp() on columns of table "pilot"
"""
input pilot_var_samp_order_by {
  Age: order_by
  Pilot_Id: order_by
}

"""aggregate variance on columns"""
type pilot_variance_fields {
  Age: Float
  Pilot_Id: Float
}

"""
order by variance() on columns of table "pilot"
"""
input pilot_variance_order_by {
  Age: order_by
  Pilot_Id: order_by
}

"""query root"""
type query_root {
  """
  fetch data from the table: "aircraft"
  """
  aircraft(
    """distinct select on columns"""
    distinct_on: [aircraft_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [aircraft_order_by!]

    """filter the rows returned"""
    where: aircraft_bool_exp
  ): [aircraft!]!

  """
  fetch aggregated fields from the table: "aircraft"
  """
  aircraft_aggregate(
    """distinct select on columns"""
    distinct_on: [aircraft_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [aircraft_order_by!]

    """filter the rows returned"""
    where: aircraft_bool_exp
  ): aircraft_aggregate!

  """fetch data from the table: "aircraft" using primary key columns"""
  aircraft_by_pk(Aircraft_ID: Int!): aircraft

  """
  fetch data from the table: "airport"
  """
  airport(
    """distinct select on columns"""
    distinct_on: [airport_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [airport_order_by!]

    """filter the rows returned"""
    where: airport_bool_exp
  ): [airport!]!

  """
  fetch aggregated fields from the table: "airport"
  """
  airport_aggregate(
    """distinct select on columns"""
    distinct_on: [airport_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [airport_order_by!]

    """filter the rows returned"""
    where: airport_bool_exp
  ): airport_aggregate!

  """
  fetch data from the table: "airport_aircraft"
  """
  airport_aircraft(
    """distinct select on columns"""
    distinct_on: [airport_aircraft_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [airport_aircraft_order_by!]

    """filter the rows returned"""
    where: airport_aircraft_bool_exp
  ): [airport_aircraft!]!

  """
  fetch aggregated fields from the table: "airport_aircraft"
  """
  airport_aircraft_aggregate(
    """distinct select on columns"""
    distinct_on: [airport_aircraft_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [airport_aircraft_order_by!]

    """filter the rows returned"""
    where: airport_aircraft_bool_exp
  ): airport_aircraft_aggregate!

  """
  fetch data from the table: "match"
  """
  match(
    """distinct select on columns"""
    distinct_on: [match_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [match_order_by!]

    """filter the rows returned"""
    where: match_bool_exp
  ): [match!]!

  """
  fetch aggregated fields from the table: "match"
  """
  match_aggregate(
    """distinct select on columns"""
    distinct_on: [match_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [match_order_by!]

    """filter the rows returned"""
    where: match_bool_exp
  ): match_aggregate!

  """
  fetch data from the table: "pilot"
  """
  pilot(
    """distinct select on columns"""
    distinct_on: [pilot_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [pilot_order_by!]

    """filter the rows returned"""
    where: pilot_bool_exp
  ): [pilot!]!

  """
  fetch aggregated fields from the table: "pilot"
  """
  pilot_aggregate(
    """distinct select on columns"""
    distinct_on: [pilot_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [pilot_order_by!]

    """filter the rows returned"""
    where: pilot_bool_exp
  ): pilot_aggregate!
}

"""
expression to compare columns of type String. All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String
  _ilike: String
  _in: [String!]
  _is_null: Boolean
  _like: String
  _lt: String
  _lte: String
  _neq: String
  _nilike: String
  _nin: [String!]
  _nlike: String
  _nsimilar: String
  _similar: String
}

"""subscription root"""
type subscription_root {
  """
  fetch data from the table: "aircraft"
  """
  aircraft(
    """distinct select on columns"""
    distinct_on: [aircraft_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [aircraft_order_by!]

    """filter the rows returned"""
    where: aircraft_bool_exp
  ): [aircraft!]!

  """
  fetch aggregated fields from the table: "aircraft"
  """
  aircraft_aggregate(
    """distinct select on columns"""
    distinct_on: [aircraft_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [aircraft_order_by!]

    """filter the rows returned"""
    where: aircraft_bool_exp
  ): aircraft_aggregate!

  """fetch data from the table: "aircraft" using primary key columns"""
  aircraft_by_pk(Aircraft_ID: Int!): aircraft

  """
  fetch data from the table: "airport"
  """
  airport(
    """distinct select on columns"""
    distinct_on: [airport_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [airport_order_by!]

    """filter the rows returned"""
    where: airport_bool_exp
  ): [airport!]!

  """
  fetch aggregated fields from the table: "airport"
  """
  airport_aggregate(
    """distinct select on columns"""
    distinct_on: [airport_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [airport_order_by!]

    """filter the rows returned"""
    where: airport_bool_exp
  ): airport_aggregate!

  """
  fetch data from the table: "airport_aircraft"
  """
  airport_aircraft(
    """distinct select on columns"""
    distinct_on: [airport_aircraft_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [airport_aircraft_order_by!]

    """filter the rows returned"""
    where: airport_aircraft_bool_exp
  ): [airport_aircraft!]!

  """
  fetch aggregated fields from the table: "airport_aircraft"
  """
  airport_aircraft_aggregate(
    """distinct select on columns"""
    distinct_on: [airport_aircraft_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [airport_aircraft_order_by!]

    """filter the rows returned"""
    where: airport_aircraft_bool_exp
  ): airport_aircraft_aggregate!

  """
  fetch data from the table: "match"
  """
  match(
    """distinct select on columns"""
    distinct_on: [match_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [match_order_by!]

    """filter the rows returned"""
    where: match_bool_exp
  ): [match!]!

  """
  fetch aggregated fields from the table: "match"
  """
  match_aggregate(
    """distinct select on columns"""
    distinct_on: [match_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [match_order_by!]

    """filter the rows returned"""
    where: match_bool_exp
  ): match_aggregate!

  """
  fetch data from the table: "pilot"
  """
  pilot(
    """distinct select on columns"""
    distinct_on: [pilot_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [pilot_order_by!]

    """filter the rows returned"""
    where: pilot_bool_exp
  ): [pilot!]!

  """
  fetch aggregated fields from the table: "pilot"
  """
  pilot_aggregate(
    """distinct select on columns"""
    distinct_on: [pilot_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [pilot_order_by!]

    """filter the rows returned"""
    where: pilot_bool_exp
  ): pilot_aggregate!
}
