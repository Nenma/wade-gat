schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""
Direct the client to resolve this field locally, either from the cache or local resolvers.
"""
directive @client(
  """
  When true, the client will never use the cache for this value. See
  https://www.apollographql.com/docs/react/essentials/local-state/#forcing-resolvers-with-clientalways-true
  """
  always: Boolean
) on FIELD | FRAGMENT_DEFINITION | INLINE_FRAGMENT

"""
Export this locally resolved field as a variable to be used in the remainder of this query. See
https://www.apollographql.com/docs/react/essentials/local-state/#using-client-fields-as-variables
"""
directive @export(
  """The variable name to export this field as."""
  as: String!
) on FIELD

"""
Specify a custom store key for this result. See
https://www.apollographql.com/docs/react/advanced/caching/#the-connection-directive
"""
directive @connection(
  """Specify the store key."""
  key: String!

  """
  An array of query argument names to include in the generated custom store key.
  """
  filter: [String!]
) on FIELD

"""
columns and relationships of "broadcast"
"""
type broadcast {
  """An object relationship"""
  channel: channel
  channel_id: Int

  """An object relationship"""
  program: program
  program_id: Int
  time_of_day: String
}

"""
aggregated selection of "broadcast"
"""
type broadcast_aggregate {
  aggregate: broadcast_aggregate_fields
  nodes: [broadcast!]!
}

"""
aggregate fields of "broadcast"
"""
type broadcast_aggregate_fields {
  avg: broadcast_avg_fields
  count(columns: [broadcast_select_column!], distinct: Boolean): Int
  max: broadcast_max_fields
  min: broadcast_min_fields
  stddev: broadcast_stddev_fields
  stddev_pop: broadcast_stddev_pop_fields
  stddev_samp: broadcast_stddev_samp_fields
  sum: broadcast_sum_fields
  var_pop: broadcast_var_pop_fields
  var_samp: broadcast_var_samp_fields
  variance: broadcast_variance_fields
}

"""
order by aggregate values of table "broadcast"
"""
input broadcast_aggregate_order_by {
  avg: broadcast_avg_order_by
  count: order_by
  max: broadcast_max_order_by
  min: broadcast_min_order_by
  stddev: broadcast_stddev_order_by
  stddev_pop: broadcast_stddev_pop_order_by
  stddev_samp: broadcast_stddev_samp_order_by
  sum: broadcast_sum_order_by
  var_pop: broadcast_var_pop_order_by
  var_samp: broadcast_var_samp_order_by
  variance: broadcast_variance_order_by
}

"""
input type for inserting array relation for remote table "broadcast"
"""
input broadcast_arr_rel_insert_input {
  data: [broadcast_insert_input!]!
  on_conflict: broadcast_on_conflict
}

"""aggregate avg on columns"""
type broadcast_avg_fields {
  channel_id: Float
  program_id: Float
}

"""
order by avg() on columns of table "broadcast"
"""
input broadcast_avg_order_by {
  channel_id: order_by
  program_id: order_by
}

"""
Boolean expression to filter rows from the table "broadcast". All fields are combined with a logical 'AND'.
"""
input broadcast_bool_exp {
  _and: [broadcast_bool_exp]
  _not: broadcast_bool_exp
  _or: [broadcast_bool_exp]
  channel: channel_bool_exp
  channel_id: Int_comparison_exp
  program: program_bool_exp
  program_id: Int_comparison_exp
  time_of_day: String_comparison_exp
}

"""
unique or primary key constraints on table "broadcast"
"""
enum broadcast_constraint {
  """unique or primary key constraint"""
  idx_19844_sqlite_autoindex_broadcast_1
}

"""
input type for incrementing integer column in table "broadcast"
"""
input broadcast_inc_input {
  channel_id: Int
  program_id: Int
}

"""
input type for inserting data into table "broadcast"
"""
input broadcast_insert_input {
  channel: channel_obj_rel_insert_input
  channel_id: Int
  program: program_obj_rel_insert_input
  program_id: Int
  time_of_day: String
}

"""aggregate max on columns"""
type broadcast_max_fields {
  channel_id: Int
  program_id: Int
  time_of_day: String
}

"""
order by max() on columns of table "broadcast"
"""
input broadcast_max_order_by {
  channel_id: order_by
  program_id: order_by
  time_of_day: order_by
}

"""aggregate min on columns"""
type broadcast_min_fields {
  channel_id: Int
  program_id: Int
  time_of_day: String
}

"""
order by min() on columns of table "broadcast"
"""
input broadcast_min_order_by {
  channel_id: order_by
  program_id: order_by
  time_of_day: order_by
}

"""
response of any mutation on the table "broadcast"
"""
type broadcast_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [broadcast!]!
}

"""
input type for inserting object relation for remote table "broadcast"
"""
input broadcast_obj_rel_insert_input {
  data: broadcast_insert_input!
  on_conflict: broadcast_on_conflict
}

"""
on conflict condition type for table "broadcast"
"""
input broadcast_on_conflict {
  constraint: broadcast_constraint!
  update_columns: [broadcast_update_column!]!
  where: broadcast_bool_exp
}

"""
ordering options when selecting data from "broadcast"
"""
input broadcast_order_by {
  channel: channel_order_by
  channel_id: order_by
  program: program_order_by
  program_id: order_by
  time_of_day: order_by
}

"""
select columns of table "broadcast"
"""
enum broadcast_select_column {
  """column name"""
  channel_id

  """column name"""
  program_id

  """column name"""
  time_of_day
}

"""
input type for updating data in table "broadcast"
"""
input broadcast_set_input {
  channel_id: Int
  program_id: Int
  time_of_day: String
}

"""
columns and relationships of "broadcast_share"
"""
type broadcast_share {
  """An object relationship"""
  channel: channel
  channel_id: Int
  date: String

  """An object relationship"""
  program: program
  program_id: Int
  share_in_percent: Float
}

"""
aggregated selection of "broadcast_share"
"""
type broadcast_share_aggregate {
  aggregate: broadcast_share_aggregate_fields
  nodes: [broadcast_share!]!
}

"""
aggregate fields of "broadcast_share"
"""
type broadcast_share_aggregate_fields {
  avg: broadcast_share_avg_fields
  count(columns: [broadcast_share_select_column!], distinct: Boolean): Int
  max: broadcast_share_max_fields
  min: broadcast_share_min_fields
  stddev: broadcast_share_stddev_fields
  stddev_pop: broadcast_share_stddev_pop_fields
  stddev_samp: broadcast_share_stddev_samp_fields
  sum: broadcast_share_sum_fields
  var_pop: broadcast_share_var_pop_fields
  var_samp: broadcast_share_var_samp_fields
  variance: broadcast_share_variance_fields
}

"""
order by aggregate values of table "broadcast_share"
"""
input broadcast_share_aggregate_order_by {
  avg: broadcast_share_avg_order_by
  count: order_by
  max: broadcast_share_max_order_by
  min: broadcast_share_min_order_by
  stddev: broadcast_share_stddev_order_by
  stddev_pop: broadcast_share_stddev_pop_order_by
  stddev_samp: broadcast_share_stddev_samp_order_by
  sum: broadcast_share_sum_order_by
  var_pop: broadcast_share_var_pop_order_by
  var_samp: broadcast_share_var_samp_order_by
  variance: broadcast_share_variance_order_by
}

"""
input type for inserting array relation for remote table "broadcast_share"
"""
input broadcast_share_arr_rel_insert_input {
  data: [broadcast_share_insert_input!]!
  on_conflict: broadcast_share_on_conflict
}

"""aggregate avg on columns"""
type broadcast_share_avg_fields {
  channel_id: Float
  program_id: Float
  share_in_percent: Float
}

"""
order by avg() on columns of table "broadcast_share"
"""
input broadcast_share_avg_order_by {
  channel_id: order_by
  program_id: order_by
  share_in_percent: order_by
}

"""
Boolean expression to filter rows from the table "broadcast_share". All fields are combined with a logical 'AND'.
"""
input broadcast_share_bool_exp {
  _and: [broadcast_share_bool_exp]
  _not: broadcast_share_bool_exp
  _or: [broadcast_share_bool_exp]
  channel: channel_bool_exp
  channel_id: Int_comparison_exp
  date: String_comparison_exp
  program: program_bool_exp
  program_id: Int_comparison_exp
  share_in_percent: Float_comparison_exp
}

"""
unique or primary key constraints on table "broadcast_share"
"""
enum broadcast_share_constraint {
  """unique or primary key constraint"""
  idx_19850_sqlite_autoindex_broadcast_share_1
}

"""
input type for incrementing integer column in table "broadcast_share"
"""
input broadcast_share_inc_input {
  channel_id: Int
  program_id: Int
  share_in_percent: Float
}

"""
input type for inserting data into table "broadcast_share"
"""
input broadcast_share_insert_input {
  channel: channel_obj_rel_insert_input
  channel_id: Int
  date: String
  program: program_obj_rel_insert_input
  program_id: Int
  share_in_percent: Float
}

"""aggregate max on columns"""
type broadcast_share_max_fields {
  channel_id: Int
  date: String
  program_id: Int
  share_in_percent: Float
}

"""
order by max() on columns of table "broadcast_share"
"""
input broadcast_share_max_order_by {
  channel_id: order_by
  date: order_by
  program_id: order_by
  share_in_percent: order_by
}

"""aggregate min on columns"""
type broadcast_share_min_fields {
  channel_id: Int
  date: String
  program_id: Int
  share_in_percent: Float
}

"""
order by min() on columns of table "broadcast_share"
"""
input broadcast_share_min_order_by {
  channel_id: order_by
  date: order_by
  program_id: order_by
  share_in_percent: order_by
}

"""
response of any mutation on the table "broadcast_share"
"""
type broadcast_share_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [broadcast_share!]!
}

"""
input type for inserting object relation for remote table "broadcast_share"
"""
input broadcast_share_obj_rel_insert_input {
  data: broadcast_share_insert_input!
  on_conflict: broadcast_share_on_conflict
}

"""
on conflict condition type for table "broadcast_share"
"""
input broadcast_share_on_conflict {
  constraint: broadcast_share_constraint!
  update_columns: [broadcast_share_update_column!]!
  where: broadcast_share_bool_exp
}

"""
ordering options when selecting data from "broadcast_share"
"""
input broadcast_share_order_by {
  channel: channel_order_by
  channel_id: order_by
  date: order_by
  program: program_order_by
  program_id: order_by
  share_in_percent: order_by
}

"""
select columns of table "broadcast_share"
"""
enum broadcast_share_select_column {
  """column name"""
  channel_id

  """column name"""
  date

  """column name"""
  program_id

  """column name"""
  share_in_percent
}

"""
input type for updating data in table "broadcast_share"
"""
input broadcast_share_set_input {
  channel_id: Int
  date: String
  program_id: Int
  share_in_percent: Float
}

"""aggregate stddev on columns"""
type broadcast_share_stddev_fields {
  channel_id: Float
  program_id: Float
  share_in_percent: Float
}

"""
order by stddev() on columns of table "broadcast_share"
"""
input broadcast_share_stddev_order_by {
  channel_id: order_by
  program_id: order_by
  share_in_percent: order_by
}

"""aggregate stddev_pop on columns"""
type broadcast_share_stddev_pop_fields {
  channel_id: Float
  program_id: Float
  share_in_percent: Float
}

"""
order by stddev_pop() on columns of table "broadcast_share"
"""
input broadcast_share_stddev_pop_order_by {
  channel_id: order_by
  program_id: order_by
  share_in_percent: order_by
}

"""aggregate stddev_samp on columns"""
type broadcast_share_stddev_samp_fields {
  channel_id: Float
  program_id: Float
  share_in_percent: Float
}

"""
order by stddev_samp() on columns of table "broadcast_share"
"""
input broadcast_share_stddev_samp_order_by {
  channel_id: order_by
  program_id: order_by
  share_in_percent: order_by
}

"""aggregate sum on columns"""
type broadcast_share_sum_fields {
  channel_id: Int
  program_id: Int
  share_in_percent: Float
}

"""
order by sum() on columns of table "broadcast_share"
"""
input broadcast_share_sum_order_by {
  channel_id: order_by
  program_id: order_by
  share_in_percent: order_by
}

"""
update columns of table "broadcast_share"
"""
enum broadcast_share_update_column {
  """column name"""
  channel_id

  """column name"""
  date

  """column name"""
  program_id

  """column name"""
  share_in_percent
}

"""aggregate var_pop on columns"""
type broadcast_share_var_pop_fields {
  channel_id: Float
  program_id: Float
  share_in_percent: Float
}

"""
order by var_pop() on columns of table "broadcast_share"
"""
input broadcast_share_var_pop_order_by {
  channel_id: order_by
  program_id: order_by
  share_in_percent: order_by
}

"""aggregate var_samp on columns"""
type broadcast_share_var_samp_fields {
  channel_id: Float
  program_id: Float
  share_in_percent: Float
}

"""
order by var_samp() on columns of table "broadcast_share"
"""
input broadcast_share_var_samp_order_by {
  channel_id: order_by
  program_id: order_by
  share_in_percent: order_by
}

"""aggregate variance on columns"""
type broadcast_share_variance_fields {
  channel_id: Float
  program_id: Float
  share_in_percent: Float
}

"""
order by variance() on columns of table "broadcast_share"
"""
input broadcast_share_variance_order_by {
  channel_id: order_by
  program_id: order_by
  share_in_percent: order_by
}

"""aggregate stddev on columns"""
type broadcast_stddev_fields {
  channel_id: Float
  program_id: Float
}

"""
order by stddev() on columns of table "broadcast"
"""
input broadcast_stddev_order_by {
  channel_id: order_by
  program_id: order_by
}

"""aggregate stddev_pop on columns"""
type broadcast_stddev_pop_fields {
  channel_id: Float
  program_id: Float
}

"""
order by stddev_pop() on columns of table "broadcast"
"""
input broadcast_stddev_pop_order_by {
  channel_id: order_by
  program_id: order_by
}

"""aggregate stddev_samp on columns"""
type broadcast_stddev_samp_fields {
  channel_id: Float
  program_id: Float
}

"""
order by stddev_samp() on columns of table "broadcast"
"""
input broadcast_stddev_samp_order_by {
  channel_id: order_by
  program_id: order_by
}

"""aggregate sum on columns"""
type broadcast_sum_fields {
  channel_id: Int
  program_id: Int
}

"""
order by sum() on columns of table "broadcast"
"""
input broadcast_sum_order_by {
  channel_id: order_by
  program_id: order_by
}

"""
update columns of table "broadcast"
"""
enum broadcast_update_column {
  """column name"""
  channel_id

  """column name"""
  program_id

  """column name"""
  time_of_day
}

"""aggregate var_pop on columns"""
type broadcast_var_pop_fields {
  channel_id: Float
  program_id: Float
}

"""
order by var_pop() on columns of table "broadcast"
"""
input broadcast_var_pop_order_by {
  channel_id: order_by
  program_id: order_by
}

"""aggregate var_samp on columns"""
type broadcast_var_samp_fields {
  channel_id: Float
  program_id: Float
}

"""
order by var_samp() on columns of table "broadcast"
"""
input broadcast_var_samp_order_by {
  channel_id: order_by
  program_id: order_by
}

"""aggregate variance on columns"""
type broadcast_variance_fields {
  channel_id: Float
  program_id: Float
}

"""
order by variance() on columns of table "broadcast"
"""
input broadcast_variance_order_by {
  channel_id: order_by
  program_id: order_by
}

"""
columns and relationships of "channel"
"""
type channel {
  """An array relationship"""
  broadcast_shares(
    """distinct select on columns"""
    distinct_on: [broadcast_share_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [broadcast_share_order_by!]

    """filter the rows returned"""
    where: broadcast_share_bool_exp
  ): [broadcast_share!]!

  """An aggregated array relationship"""
  broadcast_shares_aggregate(
    """distinct select on columns"""
    distinct_on: [broadcast_share_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [broadcast_share_order_by!]

    """filter the rows returned"""
    where: broadcast_share_bool_exp
  ): broadcast_share_aggregate!

  """An array relationship"""
  broadcasts(
    """distinct select on columns"""
    distinct_on: [broadcast_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [broadcast_order_by!]

    """filter the rows returned"""
    where: broadcast_bool_exp
  ): [broadcast!]!

  """An aggregated array relationship"""
  broadcasts_aggregate(
    """distinct select on columns"""
    distinct_on: [broadcast_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [broadcast_order_by!]

    """filter the rows returned"""
    where: broadcast_bool_exp
  ): broadcast_aggregate!
  channel_id: Int
  name: String
  owner: String
  rating_in_percent: Float
  share_in_percent: Float
}

"""
aggregated selection of "channel"
"""
type channel_aggregate {
  aggregate: channel_aggregate_fields
  nodes: [channel!]!
}

"""
aggregate fields of "channel"
"""
type channel_aggregate_fields {
  avg: channel_avg_fields
  count(columns: [channel_select_column!], distinct: Boolean): Int
  max: channel_max_fields
  min: channel_min_fields
  stddev: channel_stddev_fields
  stddev_pop: channel_stddev_pop_fields
  stddev_samp: channel_stddev_samp_fields
  sum: channel_sum_fields
  var_pop: channel_var_pop_fields
  var_samp: channel_var_samp_fields
  variance: channel_variance_fields
}

"""
order by aggregate values of table "channel"
"""
input channel_aggregate_order_by {
  avg: channel_avg_order_by
  count: order_by
  max: channel_max_order_by
  min: channel_min_order_by
  stddev: channel_stddev_order_by
  stddev_pop: channel_stddev_pop_order_by
  stddev_samp: channel_stddev_samp_order_by
  sum: channel_sum_order_by
  var_pop: channel_var_pop_order_by
  var_samp: channel_var_samp_order_by
  variance: channel_variance_order_by
}

"""
input type for inserting array relation for remote table "channel"
"""
input channel_arr_rel_insert_input {
  data: [channel_insert_input!]!
  on_conflict: channel_on_conflict
}

"""aggregate avg on columns"""
type channel_avg_fields {
  channel_id: Float
  rating_in_percent: Float
  share_in_percent: Float
}

"""
order by avg() on columns of table "channel"
"""
input channel_avg_order_by {
  channel_id: order_by
  rating_in_percent: order_by
  share_in_percent: order_by
}

"""
Boolean expression to filter rows from the table "channel". All fields are combined with a logical 'AND'.
"""
input channel_bool_exp {
  _and: [channel_bool_exp]
  _not: channel_bool_exp
  _or: [channel_bool_exp]
  broadcast_shares: broadcast_share_bool_exp
  broadcasts: broadcast_bool_exp
  channel_id: Int_comparison_exp
  name: String_comparison_exp
  owner: String_comparison_exp
  rating_in_percent: Float_comparison_exp
  share_in_percent: Float_comparison_exp
}

"""
unique or primary key constraints on table "channel"
"""
enum channel_constraint {
  """unique or primary key constraint"""
  idx_19838_sqlite_autoindex_channel_1
}

"""
input type for incrementing integer column in table "channel"
"""
input channel_inc_input {
  channel_id: Int
  rating_in_percent: Float
  share_in_percent: Float
}

"""
input type for inserting data into table "channel"
"""
input channel_insert_input {
  broadcast_shares: broadcast_share_arr_rel_insert_input
  broadcasts: broadcast_arr_rel_insert_input
  channel_id: Int
  name: String
  owner: String
  rating_in_percent: Float
  share_in_percent: Float
}

"""aggregate max on columns"""
type channel_max_fields {
  channel_id: Int
  name: String
  owner: String
  rating_in_percent: Float
  share_in_percent: Float
}

"""
order by max() on columns of table "channel"
"""
input channel_max_order_by {
  channel_id: order_by
  name: order_by
  owner: order_by
  rating_in_percent: order_by
  share_in_percent: order_by
}

"""aggregate min on columns"""
type channel_min_fields {
  channel_id: Int
  name: String
  owner: String
  rating_in_percent: Float
  share_in_percent: Float
}

"""
order by min() on columns of table "channel"
"""
input channel_min_order_by {
  channel_id: order_by
  name: order_by
  owner: order_by
  rating_in_percent: order_by
  share_in_percent: order_by
}

"""
response of any mutation on the table "channel"
"""
type channel_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [channel!]!
}

"""
input type for inserting object relation for remote table "channel"
"""
input channel_obj_rel_insert_input {
  data: channel_insert_input!
  on_conflict: channel_on_conflict
}

"""
on conflict condition type for table "channel"
"""
input channel_on_conflict {
  constraint: channel_constraint!
  update_columns: [channel_update_column!]!
  where: channel_bool_exp
}

"""
ordering options when selecting data from "channel"
"""
input channel_order_by {
  broadcast_shares_aggregate: broadcast_share_aggregate_order_by
  broadcasts_aggregate: broadcast_aggregate_order_by
  channel_id: order_by
  name: order_by
  owner: order_by
  rating_in_percent: order_by
  share_in_percent: order_by
}

"""
select columns of table "channel"
"""
enum channel_select_column {
  """column name"""
  channel_id

  """column name"""
  name

  """column name"""
  owner

  """column name"""
  rating_in_percent

  """column name"""
  share_in_percent
}

"""
input type for updating data in table "channel"
"""
input channel_set_input {
  channel_id: Int
  name: String
  owner: String
  rating_in_percent: Float
  share_in_percent: Float
}

"""aggregate stddev on columns"""
type channel_stddev_fields {
  channel_id: Float
  rating_in_percent: Float
  share_in_percent: Float
}

"""
order by stddev() on columns of table "channel"
"""
input channel_stddev_order_by {
  channel_id: order_by
  rating_in_percent: order_by
  share_in_percent: order_by
}

"""aggregate stddev_pop on columns"""
type channel_stddev_pop_fields {
  channel_id: Float
  rating_in_percent: Float
  share_in_percent: Float
}

"""
order by stddev_pop() on columns of table "channel"
"""
input channel_stddev_pop_order_by {
  channel_id: order_by
  rating_in_percent: order_by
  share_in_percent: order_by
}

"""aggregate stddev_samp on columns"""
type channel_stddev_samp_fields {
  channel_id: Float
  rating_in_percent: Float
  share_in_percent: Float
}

"""
order by stddev_samp() on columns of table "channel"
"""
input channel_stddev_samp_order_by {
  channel_id: order_by
  rating_in_percent: order_by
  share_in_percent: order_by
}

"""aggregate sum on columns"""
type channel_sum_fields {
  channel_id: Int
  rating_in_percent: Float
  share_in_percent: Float
}

"""
order by sum() on columns of table "channel"
"""
input channel_sum_order_by {
  channel_id: order_by
  rating_in_percent: order_by
  share_in_percent: order_by
}

"""
update columns of table "channel"
"""
enum channel_update_column {
  """column name"""
  channel_id

  """column name"""
  name

  """column name"""
  owner

  """column name"""
  rating_in_percent

  """column name"""
  share_in_percent
}

"""aggregate var_pop on columns"""
type channel_var_pop_fields {
  channel_id: Float
  rating_in_percent: Float
  share_in_percent: Float
}

"""
order by var_pop() on columns of table "channel"
"""
input channel_var_pop_order_by {
  channel_id: order_by
  rating_in_percent: order_by
  share_in_percent: order_by
}

"""aggregate var_samp on columns"""
type channel_var_samp_fields {
  channel_id: Float
  rating_in_percent: Float
  share_in_percent: Float
}

"""
order by var_samp() on columns of table "channel"
"""
input channel_var_samp_order_by {
  channel_id: order_by
  rating_in_percent: order_by
  share_in_percent: order_by
}

"""aggregate variance on columns"""
type channel_variance_fields {
  channel_id: Float
  rating_in_percent: Float
  share_in_percent: Float
}

"""
order by variance() on columns of table "channel"
"""
input channel_variance_order_by {
  channel_id: order_by
  rating_in_percent: order_by
  share_in_percent: order_by
}

"""
expression to compare columns of type Float. All fields are combined with logical 'AND'.
"""
input Float_comparison_exp {
  _eq: Float
  _gt: Float
  _gte: Float
  _in: [Float!]
  _is_null: Boolean
  _lt: Float
  _lte: Float
  _neq: Float
  _nin: [Float!]
}

"""
expression to compare columns of type Int. All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "broadcast"
  """
  delete_broadcast(
    """filter the rows which have to be deleted"""
    where: broadcast_bool_exp!
  ): broadcast_mutation_response

  """
  delete data from the table: "broadcast_share"
  """
  delete_broadcast_share(
    """filter the rows which have to be deleted"""
    where: broadcast_share_bool_exp!
  ): broadcast_share_mutation_response

  """
  delete data from the table: "channel"
  """
  delete_channel(
    """filter the rows which have to be deleted"""
    where: channel_bool_exp!
  ): channel_mutation_response

  """
  delete data from the table: "program"
  """
  delete_program(
    """filter the rows which have to be deleted"""
    where: program_bool_exp!
  ): program_mutation_response

  """
  insert data into the table: "broadcast"
  """
  insert_broadcast(
    """the rows to be inserted"""
    objects: [broadcast_insert_input!]!

    """on conflict condition"""
    on_conflict: broadcast_on_conflict
  ): broadcast_mutation_response

  """
  insert a single row into the table: "broadcast"
  """
  insert_broadcast_one(
    """the row to be inserted"""
    object: broadcast_insert_input!

    """on conflict condition"""
    on_conflict: broadcast_on_conflict
  ): broadcast

  """
  insert data into the table: "broadcast_share"
  """
  insert_broadcast_share(
    """the rows to be inserted"""
    objects: [broadcast_share_insert_input!]!

    """on conflict condition"""
    on_conflict: broadcast_share_on_conflict
  ): broadcast_share_mutation_response

  """
  insert a single row into the table: "broadcast_share"
  """
  insert_broadcast_share_one(
    """the row to be inserted"""
    object: broadcast_share_insert_input!

    """on conflict condition"""
    on_conflict: broadcast_share_on_conflict
  ): broadcast_share

  """
  insert data into the table: "channel"
  """
  insert_channel(
    """the rows to be inserted"""
    objects: [channel_insert_input!]!

    """on conflict condition"""
    on_conflict: channel_on_conflict
  ): channel_mutation_response

  """
  insert a single row into the table: "channel"
  """
  insert_channel_one(
    """the row to be inserted"""
    object: channel_insert_input!

    """on conflict condition"""
    on_conflict: channel_on_conflict
  ): channel

  """
  insert data into the table: "program"
  """
  insert_program(
    """the rows to be inserted"""
    objects: [program_insert_input!]!

    """on conflict condition"""
    on_conflict: program_on_conflict
  ): program_mutation_response

  """
  insert a single row into the table: "program"
  """
  insert_program_one(
    """the row to be inserted"""
    object: program_insert_input!

    """on conflict condition"""
    on_conflict: program_on_conflict
  ): program

  """
  update data of the table: "broadcast"
  """
  update_broadcast(
    """increments the integer columns with given value of the filtered values"""
    _inc: broadcast_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: broadcast_set_input

    """filter the rows which have to be updated"""
    where: broadcast_bool_exp!
  ): broadcast_mutation_response

  """
  update data of the table: "broadcast_share"
  """
  update_broadcast_share(
    """increments the integer columns with given value of the filtered values"""
    _inc: broadcast_share_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: broadcast_share_set_input

    """filter the rows which have to be updated"""
    where: broadcast_share_bool_exp!
  ): broadcast_share_mutation_response

  """
  update data of the table: "channel"
  """
  update_channel(
    """increments the integer columns with given value of the filtered values"""
    _inc: channel_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: channel_set_input

    """filter the rows which have to be updated"""
    where: channel_bool_exp!
  ): channel_mutation_response

  """
  update data of the table: "program"
  """
  update_program(
    """increments the integer columns with given value of the filtered values"""
    _inc: program_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: program_set_input

    """filter the rows which have to be updated"""
    where: program_bool_exp!
  ): program_mutation_response
}

"""column ordering options"""
enum order_by {
  """in the ascending order, nulls last"""
  asc

  """in the ascending order, nulls first"""
  asc_nulls_first

  """in the ascending order, nulls last"""
  asc_nulls_last

  """in the descending order, nulls first"""
  desc

  """in the descending order, nulls first"""
  desc_nulls_first

  """in the descending order, nulls last"""
  desc_nulls_last
}

"""
columns and relationships of "program"
"""
type program {
  """An array relationship"""
  broadcast_shares(
    """distinct select on columns"""
    distinct_on: [broadcast_share_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [broadcast_share_order_by!]

    """filter the rows returned"""
    where: broadcast_share_bool_exp
  ): [broadcast_share!]!

  """An aggregated array relationship"""
  broadcast_shares_aggregate(
    """distinct select on columns"""
    distinct_on: [broadcast_share_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [broadcast_share_order_by!]

    """filter the rows returned"""
    where: broadcast_share_bool_exp
  ): broadcast_share_aggregate!

  """An array relationship"""
  broadcasts(
    """distinct select on columns"""
    distinct_on: [broadcast_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [broadcast_order_by!]

    """filter the rows returned"""
    where: broadcast_bool_exp
  ): [broadcast!]!

  """An aggregated array relationship"""
  broadcasts_aggregate(
    """distinct select on columns"""
    distinct_on: [broadcast_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [broadcast_order_by!]

    """filter the rows returned"""
    where: broadcast_bool_exp
  ): broadcast_aggregate!
  launch: Float
  name: String
  origin: String
  owner: String
  program_id: Int
}

"""
aggregated selection of "program"
"""
type program_aggregate {
  aggregate: program_aggregate_fields
  nodes: [program!]!
}

"""
aggregate fields of "program"
"""
type program_aggregate_fields {
  avg: program_avg_fields
  count(columns: [program_select_column!], distinct: Boolean): Int
  max: program_max_fields
  min: program_min_fields
  stddev: program_stddev_fields
  stddev_pop: program_stddev_pop_fields
  stddev_samp: program_stddev_samp_fields
  sum: program_sum_fields
  var_pop: program_var_pop_fields
  var_samp: program_var_samp_fields
  variance: program_variance_fields
}

"""
order by aggregate values of table "program"
"""
input program_aggregate_order_by {
  avg: program_avg_order_by
  count: order_by
  max: program_max_order_by
  min: program_min_order_by
  stddev: program_stddev_order_by
  stddev_pop: program_stddev_pop_order_by
  stddev_samp: program_stddev_samp_order_by
  sum: program_sum_order_by
  var_pop: program_var_pop_order_by
  var_samp: program_var_samp_order_by
  variance: program_variance_order_by
}

"""
input type for inserting array relation for remote table "program"
"""
input program_arr_rel_insert_input {
  data: [program_insert_input!]!
  on_conflict: program_on_conflict
}

"""aggregate avg on columns"""
type program_avg_fields {
  launch: Float
  program_id: Float
}

"""
order by avg() on columns of table "program"
"""
input program_avg_order_by {
  launch: order_by
  program_id: order_by
}

"""
Boolean expression to filter rows from the table "program". All fields are combined with a logical 'AND'.
"""
input program_bool_exp {
  _and: [program_bool_exp]
  _not: program_bool_exp
  _or: [program_bool_exp]
  broadcast_shares: broadcast_share_bool_exp
  broadcasts: broadcast_bool_exp
  launch: Float_comparison_exp
  name: String_comparison_exp
  origin: String_comparison_exp
  owner: String_comparison_exp
  program_id: Int_comparison_exp
}

"""
unique or primary key constraints on table "program"
"""
enum program_constraint {
  """unique or primary key constraint"""
  idx_19832_sqlite_autoindex_program_1
}

"""
input type for incrementing integer column in table "program"
"""
input program_inc_input {
  launch: Float
  program_id: Int
}

"""
input type for inserting data into table "program"
"""
input program_insert_input {
  broadcast_shares: broadcast_share_arr_rel_insert_input
  broadcasts: broadcast_arr_rel_insert_input
  launch: Float
  name: String
  origin: String
  owner: String
  program_id: Int
}

"""aggregate max on columns"""
type program_max_fields {
  launch: Float
  name: String
  origin: String
  owner: String
  program_id: Int
}

"""
order by max() on columns of table "program"
"""
input program_max_order_by {
  launch: order_by
  name: order_by
  origin: order_by
  owner: order_by
  program_id: order_by
}

"""aggregate min on columns"""
type program_min_fields {
  launch: Float
  name: String
  origin: String
  owner: String
  program_id: Int
}

"""
order by min() on columns of table "program"
"""
input program_min_order_by {
  launch: order_by
  name: order_by
  origin: order_by
  owner: order_by
  program_id: order_by
}

"""
response of any mutation on the table "program"
"""
type program_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [program!]!
}

"""
input type for inserting object relation for remote table "program"
"""
input program_obj_rel_insert_input {
  data: program_insert_input!
  on_conflict: program_on_conflict
}

"""
on conflict condition type for table "program"
"""
input program_on_conflict {
  constraint: program_constraint!
  update_columns: [program_update_column!]!
  where: program_bool_exp
}

"""
ordering options when selecting data from "program"
"""
input program_order_by {
  broadcast_shares_aggregate: broadcast_share_aggregate_order_by
  broadcasts_aggregate: broadcast_aggregate_order_by
  launch: order_by
  name: order_by
  origin: order_by
  owner: order_by
  program_id: order_by
}

"""
select columns of table "program"
"""
enum program_select_column {
  """column name"""
  launch

  """column name"""
  name

  """column name"""
  origin

  """column name"""
  owner

  """column name"""
  program_id
}

"""
input type for updating data in table "program"
"""
input program_set_input {
  launch: Float
  name: String
  origin: String
  owner: String
  program_id: Int
}

"""aggregate stddev on columns"""
type program_stddev_fields {
  launch: Float
  program_id: Float
}

"""
order by stddev() on columns of table "program"
"""
input program_stddev_order_by {
  launch: order_by
  program_id: order_by
}

"""aggregate stddev_pop on columns"""
type program_stddev_pop_fields {
  launch: Float
  program_id: Float
}

"""
order by stddev_pop() on columns of table "program"
"""
input program_stddev_pop_order_by {
  launch: order_by
  program_id: order_by
}

"""aggregate stddev_samp on columns"""
type program_stddev_samp_fields {
  launch: Float
  program_id: Float
}

"""
order by stddev_samp() on columns of table "program"
"""
input program_stddev_samp_order_by {
  launch: order_by
  program_id: order_by
}

"""aggregate sum on columns"""
type program_sum_fields {
  launch: Float
  program_id: Int
}

"""
order by sum() on columns of table "program"
"""
input program_sum_order_by {
  launch: order_by
  program_id: order_by
}

"""
update columns of table "program"
"""
enum program_update_column {
  """column name"""
  launch

  """column name"""
  name

  """column name"""
  origin

  """column name"""
  owner

  """column name"""
  program_id
}

"""aggregate var_pop on columns"""
type program_var_pop_fields {
  launch: Float
  program_id: Float
}

"""
order by var_pop() on columns of table "program"
"""
input program_var_pop_order_by {
  launch: order_by
  program_id: order_by
}

"""aggregate var_samp on columns"""
type program_var_samp_fields {
  launch: Float
  program_id: Float
}

"""
order by var_samp() on columns of table "program"
"""
input program_var_samp_order_by {
  launch: order_by
  program_id: order_by
}

"""aggregate variance on columns"""
type program_variance_fields {
  launch: Float
  program_id: Float
}

"""
order by variance() on columns of table "program"
"""
input program_variance_order_by {
  launch: order_by
  program_id: order_by
}

"""query root"""
type query_root {
  """
  fetch data from the table: "broadcast"
  """
  broadcast(
    """distinct select on columns"""
    distinct_on: [broadcast_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [broadcast_order_by!]

    """filter the rows returned"""
    where: broadcast_bool_exp
  ): [broadcast!]!

  """
  fetch aggregated fields from the table: "broadcast"
  """
  broadcast_aggregate(
    """distinct select on columns"""
    distinct_on: [broadcast_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [broadcast_order_by!]

    """filter the rows returned"""
    where: broadcast_bool_exp
  ): broadcast_aggregate!

  """
  fetch data from the table: "broadcast_share"
  """
  broadcast_share(
    """distinct select on columns"""
    distinct_on: [broadcast_share_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [broadcast_share_order_by!]

    """filter the rows returned"""
    where: broadcast_share_bool_exp
  ): [broadcast_share!]!

  """
  fetch aggregated fields from the table: "broadcast_share"
  """
  broadcast_share_aggregate(
    """distinct select on columns"""
    distinct_on: [broadcast_share_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [broadcast_share_order_by!]

    """filter the rows returned"""
    where: broadcast_share_bool_exp
  ): broadcast_share_aggregate!

  """
  fetch data from the table: "channel"
  """
  channel(
    """distinct select on columns"""
    distinct_on: [channel_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [channel_order_by!]

    """filter the rows returned"""
    where: channel_bool_exp
  ): [channel!]!

  """
  fetch aggregated fields from the table: "channel"
  """
  channel_aggregate(
    """distinct select on columns"""
    distinct_on: [channel_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [channel_order_by!]

    """filter the rows returned"""
    where: channel_bool_exp
  ): channel_aggregate!

  """
  fetch data from the table: "program"
  """
  program(
    """distinct select on columns"""
    distinct_on: [program_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [program_order_by!]

    """filter the rows returned"""
    where: program_bool_exp
  ): [program!]!

  """
  fetch aggregated fields from the table: "program"
  """
  program_aggregate(
    """distinct select on columns"""
    distinct_on: [program_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [program_order_by!]

    """filter the rows returned"""
    where: program_bool_exp
  ): program_aggregate!
}

"""
expression to compare columns of type String. All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String
  _ilike: String
  _in: [String!]
  _is_null: Boolean
  _like: String
  _lt: String
  _lte: String
  _neq: String
  _nilike: String
  _nin: [String!]
  _nlike: String
  _nsimilar: String
  _similar: String
}

"""subscription root"""
type subscription_root {
  """
  fetch data from the table: "broadcast"
  """
  broadcast(
    """distinct select on columns"""
    distinct_on: [broadcast_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [broadcast_order_by!]

    """filter the rows returned"""
    where: broadcast_bool_exp
  ): [broadcast!]!

  """
  fetch aggregated fields from the table: "broadcast"
  """
  broadcast_aggregate(
    """distinct select on columns"""
    distinct_on: [broadcast_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [broadcast_order_by!]

    """filter the rows returned"""
    where: broadcast_bool_exp
  ): broadcast_aggregate!

  """
  fetch data from the table: "broadcast_share"
  """
  broadcast_share(
    """distinct select on columns"""
    distinct_on: [broadcast_share_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [broadcast_share_order_by!]

    """filter the rows returned"""
    where: broadcast_share_bool_exp
  ): [broadcast_share!]!

  """
  fetch aggregated fields from the table: "broadcast_share"
  """
  broadcast_share_aggregate(
    """distinct select on columns"""
    distinct_on: [broadcast_share_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [broadcast_share_order_by!]

    """filter the rows returned"""
    where: broadcast_share_bool_exp
  ): broadcast_share_aggregate!

  """
  fetch data from the table: "channel"
  """
  channel(
    """distinct select on columns"""
    distinct_on: [channel_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [channel_order_by!]

    """filter the rows returned"""
    where: channel_bool_exp
  ): [channel!]!

  """
  fetch aggregated fields from the table: "channel"
  """
  channel_aggregate(
    """distinct select on columns"""
    distinct_on: [channel_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [channel_order_by!]

    """filter the rows returned"""
    where: channel_bool_exp
  ): channel_aggregate!

  """
  fetch data from the table: "program"
  """
  program(
    """distinct select on columns"""
    distinct_on: [program_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [program_order_by!]

    """filter the rows returned"""
    where: program_bool_exp
  ): [program!]!

  """
  fetch aggregated fields from the table: "program"
  """
  program_aggregate(
    """distinct select on columns"""
    distinct_on: [program_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [program_order_by!]

    """filter the rows returned"""
    where: program_bool_exp
  ): program_aggregate!
}
