schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""
Direct the client to resolve this field locally, either from the cache or local resolvers.
"""
directive @client(
  """
  When true, the client will never use the cache for this value. See
  https://www.apollographql.com/docs/react/essentials/local-state/#forcing-resolvers-with-clientalways-true
  """
  always: Boolean
) on FIELD | FRAGMENT_DEFINITION | INLINE_FRAGMENT

"""
Export this locally resolved field as a variable to be used in the remainder of this query. See
https://www.apollographql.com/docs/react/essentials/local-state/#using-client-fields-as-variables
"""
directive @export(
  """The variable name to export this field as."""
  as: String!
) on FIELD

"""
Specify a custom store key for this result. See
https://www.apollographql.com/docs/react/advanced/caching/#the-connection-directive
"""
directive @connection(
  """Specify the store key."""
  key: String!

  """
  An array of query argument names to include in the generated custom store key.
  """
  filter: [String!]
) on FIELD

"""
columns and relationships of "addresses"
"""
type addresses {
  address_id: bigint!
  city: String
  country: String

  """An array relationship"""
  customers(
    """distinct select on columns"""
    distinct_on: [customers_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [customers_order_by!]

    """filter the rows returned"""
    where: customers_bool_exp
  ): [customers!]!

  """An aggregated array relationship"""
  customers_aggregate(
    """distinct select on columns"""
    distinct_on: [customers_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [customers_order_by!]

    """filter the rows returned"""
    where: customers_bool_exp
  ): customers_aggregate!
  line_1_number_building: String

  """An array relationship"""
  staffs(
    """distinct select on columns"""
    distinct_on: [staff_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [staff_order_by!]

    """filter the rows returned"""
    where: staff_bool_exp
  ): [staff!]!

  """An aggregated array relationship"""
  staffs_aggregate(
    """distinct select on columns"""
    distinct_on: [staff_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [staff_order_by!]

    """filter the rows returned"""
    where: staff_bool_exp
  ): staff_aggregate!
  state_province_county: String
  zip_postcode: String
}

"""
aggregated selection of "addresses"
"""
type addresses_aggregate {
  aggregate: addresses_aggregate_fields
  nodes: [addresses!]!
}

"""
aggregate fields of "addresses"
"""
type addresses_aggregate_fields {
  avg: addresses_avg_fields
  count(columns: [addresses_select_column!], distinct: Boolean): Int
  max: addresses_max_fields
  min: addresses_min_fields
  stddev: addresses_stddev_fields
  stddev_pop: addresses_stddev_pop_fields
  stddev_samp: addresses_stddev_samp_fields
  sum: addresses_sum_fields
  var_pop: addresses_var_pop_fields
  var_samp: addresses_var_samp_fields
  variance: addresses_variance_fields
}

"""
order by aggregate values of table "addresses"
"""
input addresses_aggregate_order_by {
  avg: addresses_avg_order_by
  count: order_by
  max: addresses_max_order_by
  min: addresses_min_order_by
  stddev: addresses_stddev_order_by
  stddev_pop: addresses_stddev_pop_order_by
  stddev_samp: addresses_stddev_samp_order_by
  sum: addresses_sum_order_by
  var_pop: addresses_var_pop_order_by
  var_samp: addresses_var_samp_order_by
  variance: addresses_variance_order_by
}

"""
input type for inserting array relation for remote table "addresses"
"""
input addresses_arr_rel_insert_input {
  data: [addresses_insert_input!]!
  on_conflict: addresses_on_conflict
}

"""aggregate avg on columns"""
type addresses_avg_fields {
  address_id: Float
}

"""
order by avg() on columns of table "addresses"
"""
input addresses_avg_order_by {
  address_id: order_by
}

"""
Boolean expression to filter rows from the table "addresses". All fields are combined with a logical 'AND'.
"""
input addresses_bool_exp {
  _and: [addresses_bool_exp]
  _not: addresses_bool_exp
  _or: [addresses_bool_exp]
  address_id: bigint_comparison_exp
  city: String_comparison_exp
  country: String_comparison_exp
  customers: customers_bool_exp
  line_1_number_building: String_comparison_exp
  staffs: staff_bool_exp
  state_province_county: String_comparison_exp
  zip_postcode: String_comparison_exp
}

"""
unique or primary key constraints on table "addresses"
"""
enum addresses_constraint {
  """unique or primary key constraint"""
  idx_22100_addresses_pkey
}

"""
input type for incrementing integer column in table "addresses"
"""
input addresses_inc_input {
  address_id: bigint
}

"""
input type for inserting data into table "addresses"
"""
input addresses_insert_input {
  address_id: bigint
  city: String
  country: String
  customers: customers_arr_rel_insert_input
  line_1_number_building: String
  staffs: staff_arr_rel_insert_input
  state_province_county: String
  zip_postcode: String
}

"""aggregate max on columns"""
type addresses_max_fields {
  address_id: bigint
  city: String
  country: String
  line_1_number_building: String
  state_province_county: String
  zip_postcode: String
}

"""
order by max() on columns of table "addresses"
"""
input addresses_max_order_by {
  address_id: order_by
  city: order_by
  country: order_by
  line_1_number_building: order_by
  state_province_county: order_by
  zip_postcode: order_by
}

"""aggregate min on columns"""
type addresses_min_fields {
  address_id: bigint
  city: String
  country: String
  line_1_number_building: String
  state_province_county: String
  zip_postcode: String
}

"""
order by min() on columns of table "addresses"
"""
input addresses_min_order_by {
  address_id: order_by
  city: order_by
  country: order_by
  line_1_number_building: order_by
  state_province_county: order_by
  zip_postcode: order_by
}

"""
response of any mutation on the table "addresses"
"""
type addresses_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [addresses!]!
}

"""
input type for inserting object relation for remote table "addresses"
"""
input addresses_obj_rel_insert_input {
  data: addresses_insert_input!
  on_conflict: addresses_on_conflict
}

"""
on conflict condition type for table "addresses"
"""
input addresses_on_conflict {
  constraint: addresses_constraint!
  update_columns: [addresses_update_column!]!
  where: addresses_bool_exp
}

"""
ordering options when selecting data from "addresses"
"""
input addresses_order_by {
  address_id: order_by
  city: order_by
  country: order_by
  customers_aggregate: customers_aggregate_order_by
  line_1_number_building: order_by
  staffs_aggregate: staff_aggregate_order_by
  state_province_county: order_by
  zip_postcode: order_by
}

"""
primary key columns input for table: "addresses"
"""
input addresses_pk_columns_input {
  address_id: bigint!
}

"""
select columns of table "addresses"
"""
enum addresses_select_column {
  """column name"""
  address_id

  """column name"""
  city

  """column name"""
  country

  """column name"""
  line_1_number_building

  """column name"""
  state_province_county

  """column name"""
  zip_postcode
}

"""
input type for updating data in table "addresses"
"""
input addresses_set_input {
  address_id: bigint
  city: String
  country: String
  line_1_number_building: String
  state_province_county: String
  zip_postcode: String
}

"""aggregate stddev on columns"""
type addresses_stddev_fields {
  address_id: Float
}

"""
order by stddev() on columns of table "addresses"
"""
input addresses_stddev_order_by {
  address_id: order_by
}

"""aggregate stddev_pop on columns"""
type addresses_stddev_pop_fields {
  address_id: Float
}

"""
order by stddev_pop() on columns of table "addresses"
"""
input addresses_stddev_pop_order_by {
  address_id: order_by
}

"""aggregate stddev_samp on columns"""
type addresses_stddev_samp_fields {
  address_id: Float
}

"""
order by stddev_samp() on columns of table "addresses"
"""
input addresses_stddev_samp_order_by {
  address_id: order_by
}

"""aggregate sum on columns"""
type addresses_sum_fields {
  address_id: bigint
}

"""
order by sum() on columns of table "addresses"
"""
input addresses_sum_order_by {
  address_id: order_by
}

"""
update columns of table "addresses"
"""
enum addresses_update_column {
  """column name"""
  address_id

  """column name"""
  city

  """column name"""
  country

  """column name"""
  line_1_number_building

  """column name"""
  state_province_county

  """column name"""
  zip_postcode
}

"""aggregate var_pop on columns"""
type addresses_var_pop_fields {
  address_id: Float
}

"""
order by var_pop() on columns of table "addresses"
"""
input addresses_var_pop_order_by {
  address_id: order_by
}

"""aggregate var_samp on columns"""
type addresses_var_samp_fields {
  address_id: Float
}

"""
order by var_samp() on columns of table "addresses"
"""
input addresses_var_samp_order_by {
  address_id: order_by
}

"""aggregate variance on columns"""
type addresses_variance_fields {
  address_id: Float
}

"""
order by variance() on columns of table "addresses"
"""
input addresses_variance_order_by {
  address_id: order_by
}

scalar bigint

"""
expression to compare columns of type bigint. All fields are combined with logical 'AND'.
"""
input bigint_comparison_exp {
  _eq: bigint
  _gt: bigint
  _gte: bigint
  _in: [bigint!]
  _is_null: Boolean
  _lt: bigint
  _lte: bigint
  _neq: bigint
  _nin: [bigint!]
}

"""
columns and relationships of "customer_payments"
"""
type customer_payments {
  amount_payment: float8

  """An object relationship"""
  customer: customers!
  customer_id: bigint!
  datetime_payment: timestamptz!
  payment_method_code: String
}

"""
aggregated selection of "customer_payments"
"""
type customer_payments_aggregate {
  aggregate: customer_payments_aggregate_fields
  nodes: [customer_payments!]!
}

"""
aggregate fields of "customer_payments"
"""
type customer_payments_aggregate_fields {
  avg: customer_payments_avg_fields
  count(columns: [customer_payments_select_column!], distinct: Boolean): Int
  max: customer_payments_max_fields
  min: customer_payments_min_fields
  stddev: customer_payments_stddev_fields
  stddev_pop: customer_payments_stddev_pop_fields
  stddev_samp: customer_payments_stddev_samp_fields
  sum: customer_payments_sum_fields
  var_pop: customer_payments_var_pop_fields
  var_samp: customer_payments_var_samp_fields
  variance: customer_payments_variance_fields
}

"""
order by aggregate values of table "customer_payments"
"""
input customer_payments_aggregate_order_by {
  avg: customer_payments_avg_order_by
  count: order_by
  max: customer_payments_max_order_by
  min: customer_payments_min_order_by
  stddev: customer_payments_stddev_order_by
  stddev_pop: customer_payments_stddev_pop_order_by
  stddev_samp: customer_payments_stddev_samp_order_by
  sum: customer_payments_sum_order_by
  var_pop: customer_payments_var_pop_order_by
  var_samp: customer_payments_var_samp_order_by
  variance: customer_payments_variance_order_by
}

"""
input type for inserting array relation for remote table "customer_payments"
"""
input customer_payments_arr_rel_insert_input {
  data: [customer_payments_insert_input!]!
  on_conflict: customer_payments_on_conflict
}

"""aggregate avg on columns"""
type customer_payments_avg_fields {
  amount_payment: Float
  customer_id: Float
}

"""
order by avg() on columns of table "customer_payments"
"""
input customer_payments_avg_order_by {
  amount_payment: order_by
  customer_id: order_by
}

"""
Boolean expression to filter rows from the table "customer_payments". All fields are combined with a logical 'AND'.
"""
input customer_payments_bool_exp {
  _and: [customer_payments_bool_exp]
  _not: customer_payments_bool_exp
  _or: [customer_payments_bool_exp]
  amount_payment: float8_comparison_exp
  customer: customers_bool_exp
  customer_id: bigint_comparison_exp
  datetime_payment: timestamptz_comparison_exp
  payment_method_code: String_comparison_exp
}

"""
unique or primary key constraints on table "customer_payments"
"""
enum customer_payments_constraint {
  """unique or primary key constraint"""
  idx_22124_sqlite_autoindex_customer_payments_1
}

"""
input type for incrementing integer column in table "customer_payments"
"""
input customer_payments_inc_input {
  amount_payment: float8
  customer_id: bigint
}

"""
input type for inserting data into table "customer_payments"
"""
input customer_payments_insert_input {
  amount_payment: float8
  customer: customers_obj_rel_insert_input
  customer_id: bigint
  datetime_payment: timestamptz
  payment_method_code: String
}

"""aggregate max on columns"""
type customer_payments_max_fields {
  amount_payment: float8
  customer_id: bigint
  datetime_payment: timestamptz
  payment_method_code: String
}

"""
order by max() on columns of table "customer_payments"
"""
input customer_payments_max_order_by {
  amount_payment: order_by
  customer_id: order_by
  datetime_payment: order_by
  payment_method_code: order_by
}

"""aggregate min on columns"""
type customer_payments_min_fields {
  amount_payment: float8
  customer_id: bigint
  datetime_payment: timestamptz
  payment_method_code: String
}

"""
order by min() on columns of table "customer_payments"
"""
input customer_payments_min_order_by {
  amount_payment: order_by
  customer_id: order_by
  datetime_payment: order_by
  payment_method_code: order_by
}

"""
response of any mutation on the table "customer_payments"
"""
type customer_payments_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [customer_payments!]!
}

"""
input type for inserting object relation for remote table "customer_payments"
"""
input customer_payments_obj_rel_insert_input {
  data: customer_payments_insert_input!
  on_conflict: customer_payments_on_conflict
}

"""
on conflict condition type for table "customer_payments"
"""
input customer_payments_on_conflict {
  constraint: customer_payments_constraint!
  update_columns: [customer_payments_update_column!]!
  where: customer_payments_bool_exp
}

"""
ordering options when selecting data from "customer_payments"
"""
input customer_payments_order_by {
  amount_payment: order_by
  customer: customers_order_by
  customer_id: order_by
  datetime_payment: order_by
  payment_method_code: order_by
}

"""
primary key columns input for table: "customer_payments"
"""
input customer_payments_pk_columns_input {
  customer_id: bigint!
  datetime_payment: timestamptz!
}

"""
select columns of table "customer_payments"
"""
enum customer_payments_select_column {
  """column name"""
  amount_payment

  """column name"""
  customer_id

  """column name"""
  datetime_payment

  """column name"""
  payment_method_code
}

"""
input type for updating data in table "customer_payments"
"""
input customer_payments_set_input {
  amount_payment: float8
  customer_id: bigint
  datetime_payment: timestamptz
  payment_method_code: String
}

"""aggregate stddev on columns"""
type customer_payments_stddev_fields {
  amount_payment: Float
  customer_id: Float
}

"""
order by stddev() on columns of table "customer_payments"
"""
input customer_payments_stddev_order_by {
  amount_payment: order_by
  customer_id: order_by
}

"""aggregate stddev_pop on columns"""
type customer_payments_stddev_pop_fields {
  amount_payment: Float
  customer_id: Float
}

"""
order by stddev_pop() on columns of table "customer_payments"
"""
input customer_payments_stddev_pop_order_by {
  amount_payment: order_by
  customer_id: order_by
}

"""aggregate stddev_samp on columns"""
type customer_payments_stddev_samp_fields {
  amount_payment: Float
  customer_id: Float
}

"""
order by stddev_samp() on columns of table "customer_payments"
"""
input customer_payments_stddev_samp_order_by {
  amount_payment: order_by
  customer_id: order_by
}

"""aggregate sum on columns"""
type customer_payments_sum_fields {
  amount_payment: float8
  customer_id: bigint
}

"""
order by sum() on columns of table "customer_payments"
"""
input customer_payments_sum_order_by {
  amount_payment: order_by
  customer_id: order_by
}

"""
update columns of table "customer_payments"
"""
enum customer_payments_update_column {
  """column name"""
  amount_payment

  """column name"""
  customer_id

  """column name"""
  datetime_payment

  """column name"""
  payment_method_code
}

"""aggregate var_pop on columns"""
type customer_payments_var_pop_fields {
  amount_payment: Float
  customer_id: Float
}

"""
order by var_pop() on columns of table "customer_payments"
"""
input customer_payments_var_pop_order_by {
  amount_payment: order_by
  customer_id: order_by
}

"""aggregate var_samp on columns"""
type customer_payments_var_samp_fields {
  amount_payment: Float
  customer_id: Float
}

"""
order by var_samp() on columns of table "customer_payments"
"""
input customer_payments_var_samp_order_by {
  amount_payment: order_by
  customer_id: order_by
}

"""aggregate variance on columns"""
type customer_payments_variance_fields {
  amount_payment: Float
  customer_id: Float
}

"""
order by variance() on columns of table "customer_payments"
"""
input customer_payments_variance_order_by {
  amount_payment: order_by
  customer_id: order_by
}

"""
columns and relationships of "customers"
"""
type customers {
  """An object relationship"""
  address: addresses
  amount_outstanding: float8
  cell_mobile_phone_number: String
  customer_address_id: bigint
  customer_id: bigint!

  """An array relationship"""
  customer_payments(
    """distinct select on columns"""
    distinct_on: [customer_payments_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [customer_payments_order_by!]

    """filter the rows returned"""
    where: customer_payments_bool_exp
  ): [customer_payments!]!

  """An aggregated array relationship"""
  customer_payments_aggregate(
    """distinct select on columns"""
    distinct_on: [customer_payments_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [customer_payments_order_by!]

    """filter the rows returned"""
    where: customer_payments_bool_exp
  ): customer_payments_aggregate!
  customer_status_code: String
  date_became_customer: timestamptz
  date_of_birth: timestamptz
  email_address: String
  first_name: String
  last_name: String

  """An array relationship"""
  lessons(
    """distinct select on columns"""
    distinct_on: [lessons_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [lessons_order_by!]

    """filter the rows returned"""
    where: lessons_bool_exp
  ): [lessons!]!

  """An aggregated array relationship"""
  lessons_aggregate(
    """distinct select on columns"""
    distinct_on: [lessons_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [lessons_order_by!]

    """filter the rows returned"""
    where: lessons_bool_exp
  ): lessons_aggregate!
  phone_number: String
}

"""
aggregated selection of "customers"
"""
type customers_aggregate {
  aggregate: customers_aggregate_fields
  nodes: [customers!]!
}

"""
aggregate fields of "customers"
"""
type customers_aggregate_fields {
  avg: customers_avg_fields
  count(columns: [customers_select_column!], distinct: Boolean): Int
  max: customers_max_fields
  min: customers_min_fields
  stddev: customers_stddev_fields
  stddev_pop: customers_stddev_pop_fields
  stddev_samp: customers_stddev_samp_fields
  sum: customers_sum_fields
  var_pop: customers_var_pop_fields
  var_samp: customers_var_samp_fields
  variance: customers_variance_fields
}

"""
order by aggregate values of table "customers"
"""
input customers_aggregate_order_by {
  avg: customers_avg_order_by
  count: order_by
  max: customers_max_order_by
  min: customers_min_order_by
  stddev: customers_stddev_order_by
  stddev_pop: customers_stddev_pop_order_by
  stddev_samp: customers_stddev_samp_order_by
  sum: customers_sum_order_by
  var_pop: customers_var_pop_order_by
  var_samp: customers_var_samp_order_by
  variance: customers_variance_order_by
}

"""
input type for inserting array relation for remote table "customers"
"""
input customers_arr_rel_insert_input {
  data: [customers_insert_input!]!
  on_conflict: customers_on_conflict
}

"""aggregate avg on columns"""
type customers_avg_fields {
  amount_outstanding: Float
  customer_address_id: Float
  customer_id: Float
}

"""
order by avg() on columns of table "customers"
"""
input customers_avg_order_by {
  amount_outstanding: order_by
  customer_address_id: order_by
  customer_id: order_by
}

"""
Boolean expression to filter rows from the table "customers". All fields are combined with a logical 'AND'.
"""
input customers_bool_exp {
  _and: [customers_bool_exp]
  _not: customers_bool_exp
  _or: [customers_bool_exp]
  address: addresses_bool_exp
  amount_outstanding: float8_comparison_exp
  cell_mobile_phone_number: String_comparison_exp
  customer_address_id: bigint_comparison_exp
  customer_id: bigint_comparison_exp
  customer_payments: customer_payments_bool_exp
  customer_status_code: String_comparison_exp
  date_became_customer: timestamptz_comparison_exp
  date_of_birth: timestamptz_comparison_exp
  email_address: String_comparison_exp
  first_name: String_comparison_exp
  last_name: String_comparison_exp
  lessons: lessons_bool_exp
  phone_number: String_comparison_exp
}

"""
unique or primary key constraints on table "customers"
"""
enum customers_constraint {
  """unique or primary key constraint"""
  idx_22118_customers_pkey
}

"""
input type for incrementing integer column in table "customers"
"""
input customers_inc_input {
  amount_outstanding: float8
  customer_address_id: bigint
  customer_id: bigint
}

"""
input type for inserting data into table "customers"
"""
input customers_insert_input {
  address: addresses_obj_rel_insert_input
  amount_outstanding: float8
  cell_mobile_phone_number: String
  customer_address_id: bigint
  customer_id: bigint
  customer_payments: customer_payments_arr_rel_insert_input
  customer_status_code: String
  date_became_customer: timestamptz
  date_of_birth: timestamptz
  email_address: String
  first_name: String
  last_name: String
  lessons: lessons_arr_rel_insert_input
  phone_number: String
}

"""aggregate max on columns"""
type customers_max_fields {
  amount_outstanding: float8
  cell_mobile_phone_number: String
  customer_address_id: bigint
  customer_id: bigint
  customer_status_code: String
  date_became_customer: timestamptz
  date_of_birth: timestamptz
  email_address: String
  first_name: String
  last_name: String
  phone_number: String
}

"""
order by max() on columns of table "customers"
"""
input customers_max_order_by {
  amount_outstanding: order_by
  cell_mobile_phone_number: order_by
  customer_address_id: order_by
  customer_id: order_by
  customer_status_code: order_by
  date_became_customer: order_by
  date_of_birth: order_by
  email_address: order_by
  first_name: order_by
  last_name: order_by
  phone_number: order_by
}

"""aggregate min on columns"""
type customers_min_fields {
  amount_outstanding: float8
  cell_mobile_phone_number: String
  customer_address_id: bigint
  customer_id: bigint
  customer_status_code: String
  date_became_customer: timestamptz
  date_of_birth: timestamptz
  email_address: String
  first_name: String
  last_name: String
  phone_number: String
}

"""
order by min() on columns of table "customers"
"""
input customers_min_order_by {
  amount_outstanding: order_by
  cell_mobile_phone_number: order_by
  customer_address_id: order_by
  customer_id: order_by
  customer_status_code: order_by
  date_became_customer: order_by
  date_of_birth: order_by
  email_address: order_by
  first_name: order_by
  last_name: order_by
  phone_number: order_by
}

"""
response of any mutation on the table "customers"
"""
type customers_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [customers!]!
}

"""
input type for inserting object relation for remote table "customers"
"""
input customers_obj_rel_insert_input {
  data: customers_insert_input!
  on_conflict: customers_on_conflict
}

"""
on conflict condition type for table "customers"
"""
input customers_on_conflict {
  constraint: customers_constraint!
  update_columns: [customers_update_column!]!
  where: customers_bool_exp
}

"""
ordering options when selecting data from "customers"
"""
input customers_order_by {
  address: addresses_order_by
  amount_outstanding: order_by
  cell_mobile_phone_number: order_by
  customer_address_id: order_by
  customer_id: order_by
  customer_payments_aggregate: customer_payments_aggregate_order_by
  customer_status_code: order_by
  date_became_customer: order_by
  date_of_birth: order_by
  email_address: order_by
  first_name: order_by
  last_name: order_by
  lessons_aggregate: lessons_aggregate_order_by
  phone_number: order_by
}

"""
primary key columns input for table: "customers"
"""
input customers_pk_columns_input {
  customer_id: bigint!
}

"""
select columns of table "customers"
"""
enum customers_select_column {
  """column name"""
  amount_outstanding

  """column name"""
  cell_mobile_phone_number

  """column name"""
  customer_address_id

  """column name"""
  customer_id

  """column name"""
  customer_status_code

  """column name"""
  date_became_customer

  """column name"""
  date_of_birth

  """column name"""
  email_address

  """column name"""
  first_name

  """column name"""
  last_name

  """column name"""
  phone_number
}

"""
input type for updating data in table "customers"
"""
input customers_set_input {
  amount_outstanding: float8
  cell_mobile_phone_number: String
  customer_address_id: bigint
  customer_id: bigint
  customer_status_code: String
  date_became_customer: timestamptz
  date_of_birth: timestamptz
  email_address: String
  first_name: String
  last_name: String
  phone_number: String
}

"""aggregate stddev on columns"""
type customers_stddev_fields {
  amount_outstanding: Float
  customer_address_id: Float
  customer_id: Float
}

"""
order by stddev() on columns of table "customers"
"""
input customers_stddev_order_by {
  amount_outstanding: order_by
  customer_address_id: order_by
  customer_id: order_by
}

"""aggregate stddev_pop on columns"""
type customers_stddev_pop_fields {
  amount_outstanding: Float
  customer_address_id: Float
  customer_id: Float
}

"""
order by stddev_pop() on columns of table "customers"
"""
input customers_stddev_pop_order_by {
  amount_outstanding: order_by
  customer_address_id: order_by
  customer_id: order_by
}

"""aggregate stddev_samp on columns"""
type customers_stddev_samp_fields {
  amount_outstanding: Float
  customer_address_id: Float
  customer_id: Float
}

"""
order by stddev_samp() on columns of table "customers"
"""
input customers_stddev_samp_order_by {
  amount_outstanding: order_by
  customer_address_id: order_by
  customer_id: order_by
}

"""aggregate sum on columns"""
type customers_sum_fields {
  amount_outstanding: float8
  customer_address_id: bigint
  customer_id: bigint
}

"""
order by sum() on columns of table "customers"
"""
input customers_sum_order_by {
  amount_outstanding: order_by
  customer_address_id: order_by
  customer_id: order_by
}

"""
update columns of table "customers"
"""
enum customers_update_column {
  """column name"""
  amount_outstanding

  """column name"""
  cell_mobile_phone_number

  """column name"""
  customer_address_id

  """column name"""
  customer_id

  """column name"""
  customer_status_code

  """column name"""
  date_became_customer

  """column name"""
  date_of_birth

  """column name"""
  email_address

  """column name"""
  first_name

  """column name"""
  last_name

  """column name"""
  phone_number
}

"""aggregate var_pop on columns"""
type customers_var_pop_fields {
  amount_outstanding: Float
  customer_address_id: Float
  customer_id: Float
}

"""
order by var_pop() on columns of table "customers"
"""
input customers_var_pop_order_by {
  amount_outstanding: order_by
  customer_address_id: order_by
  customer_id: order_by
}

"""aggregate var_samp on columns"""
type customers_var_samp_fields {
  amount_outstanding: Float
  customer_address_id: Float
  customer_id: Float
}

"""
order by var_samp() on columns of table "customers"
"""
input customers_var_samp_order_by {
  amount_outstanding: order_by
  customer_address_id: order_by
  customer_id: order_by
}

"""aggregate variance on columns"""
type customers_variance_fields {
  amount_outstanding: Float
  customer_address_id: Float
  customer_id: Float
}

"""
order by variance() on columns of table "customers"
"""
input customers_variance_order_by {
  amount_outstanding: order_by
  customer_address_id: order_by
  customer_id: order_by
}

scalar float8

"""
expression to compare columns of type float8. All fields are combined with logical 'AND'.
"""
input float8_comparison_exp {
  _eq: float8
  _gt: float8
  _gte: float8
  _in: [float8!]
  _is_null: Boolean
  _lt: float8
  _lte: float8
  _neq: float8
  _nin: [float8!]
}

"""
columns and relationships of "lessons"
"""
type lessons {
  """An object relationship"""
  customer: customers
  customer_id: bigint
  lesson_date: timestamptz
  lesson_id: bigint!
  lesson_status_code: String
  lesson_time: bigint
  price: float8

  """An object relationship"""
  staff: staff
  staff_id: bigint

  """An object relationship"""
  vehicle: vehicles
  vehicle_id: bigint
}

"""
aggregated selection of "lessons"
"""
type lessons_aggregate {
  aggregate: lessons_aggregate_fields
  nodes: [lessons!]!
}

"""
aggregate fields of "lessons"
"""
type lessons_aggregate_fields {
  avg: lessons_avg_fields
  count(columns: [lessons_select_column!], distinct: Boolean): Int
  max: lessons_max_fields
  min: lessons_min_fields
  stddev: lessons_stddev_fields
  stddev_pop: lessons_stddev_pop_fields
  stddev_samp: lessons_stddev_samp_fields
  sum: lessons_sum_fields
  var_pop: lessons_var_pop_fields
  var_samp: lessons_var_samp_fields
  variance: lessons_variance_fields
}

"""
order by aggregate values of table "lessons"
"""
input lessons_aggregate_order_by {
  avg: lessons_avg_order_by
  count: order_by
  max: lessons_max_order_by
  min: lessons_min_order_by
  stddev: lessons_stddev_order_by
  stddev_pop: lessons_stddev_pop_order_by
  stddev_samp: lessons_stddev_samp_order_by
  sum: lessons_sum_order_by
  var_pop: lessons_var_pop_order_by
  var_samp: lessons_var_samp_order_by
  variance: lessons_variance_order_by
}

"""
input type for inserting array relation for remote table "lessons"
"""
input lessons_arr_rel_insert_input {
  data: [lessons_insert_input!]!
  on_conflict: lessons_on_conflict
}

"""aggregate avg on columns"""
type lessons_avg_fields {
  customer_id: Float
  lesson_id: Float
  lesson_time: Float
  price: Float
  staff_id: Float
  vehicle_id: Float
}

"""
order by avg() on columns of table "lessons"
"""
input lessons_avg_order_by {
  customer_id: order_by
  lesson_id: order_by
  lesson_time: order_by
  price: order_by
  staff_id: order_by
  vehicle_id: order_by
}

"""
Boolean expression to filter rows from the table "lessons". All fields are combined with a logical 'AND'.
"""
input lessons_bool_exp {
  _and: [lessons_bool_exp]
  _not: lessons_bool_exp
  _or: [lessons_bool_exp]
  customer: customers_bool_exp
  customer_id: bigint_comparison_exp
  lesson_date: timestamptz_comparison_exp
  lesson_id: bigint_comparison_exp
  lesson_status_code: String_comparison_exp
  lesson_time: bigint_comparison_exp
  price: float8_comparison_exp
  staff: staff_bool_exp
  staff_id: bigint_comparison_exp
  vehicle: vehicles_bool_exp
  vehicle_id: bigint_comparison_exp
}

"""
unique or primary key constraints on table "lessons"
"""
enum lessons_constraint {
  """unique or primary key constraint"""
  idx_22130_lessons_pkey
}

"""
input type for incrementing integer column in table "lessons"
"""
input lessons_inc_input {
  customer_id: bigint
  lesson_id: bigint
  lesson_time: bigint
  price: float8
  staff_id: bigint
  vehicle_id: bigint
}

"""
input type for inserting data into table "lessons"
"""
input lessons_insert_input {
  customer: customers_obj_rel_insert_input
  customer_id: bigint
  lesson_date: timestamptz
  lesson_id: bigint
  lesson_status_code: String
  lesson_time: bigint
  price: float8
  staff: staff_obj_rel_insert_input
  staff_id: bigint
  vehicle: vehicles_obj_rel_insert_input
  vehicle_id: bigint
}

"""aggregate max on columns"""
type lessons_max_fields {
  customer_id: bigint
  lesson_date: timestamptz
  lesson_id: bigint
  lesson_status_code: String
  lesson_time: bigint
  price: float8
  staff_id: bigint
  vehicle_id: bigint
}

"""
order by max() on columns of table "lessons"
"""
input lessons_max_order_by {
  customer_id: order_by
  lesson_date: order_by
  lesson_id: order_by
  lesson_status_code: order_by
  lesson_time: order_by
  price: order_by
  staff_id: order_by
  vehicle_id: order_by
}

"""aggregate min on columns"""
type lessons_min_fields {
  customer_id: bigint
  lesson_date: timestamptz
  lesson_id: bigint
  lesson_status_code: String
  lesson_time: bigint
  price: float8
  staff_id: bigint
  vehicle_id: bigint
}

"""
order by min() on columns of table "lessons"
"""
input lessons_min_order_by {
  customer_id: order_by
  lesson_date: order_by
  lesson_id: order_by
  lesson_status_code: order_by
  lesson_time: order_by
  price: order_by
  staff_id: order_by
  vehicle_id: order_by
}

"""
response of any mutation on the table "lessons"
"""
type lessons_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [lessons!]!
}

"""
input type for inserting object relation for remote table "lessons"
"""
input lessons_obj_rel_insert_input {
  data: lessons_insert_input!
  on_conflict: lessons_on_conflict
}

"""
on conflict condition type for table "lessons"
"""
input lessons_on_conflict {
  constraint: lessons_constraint!
  update_columns: [lessons_update_column!]!
  where: lessons_bool_exp
}

"""
ordering options when selecting data from "lessons"
"""
input lessons_order_by {
  customer: customers_order_by
  customer_id: order_by
  lesson_date: order_by
  lesson_id: order_by
  lesson_status_code: order_by
  lesson_time: order_by
  price: order_by
  staff: staff_order_by
  staff_id: order_by
  vehicle: vehicles_order_by
  vehicle_id: order_by
}

"""
primary key columns input for table: "lessons"
"""
input lessons_pk_columns_input {
  lesson_id: bigint!
}

"""
select columns of table "lessons"
"""
enum lessons_select_column {
  """column name"""
  customer_id

  """column name"""
  lesson_date

  """column name"""
  lesson_id

  """column name"""
  lesson_status_code

  """column name"""
  lesson_time

  """column name"""
  price

  """column name"""
  staff_id

  """column name"""
  vehicle_id
}

"""
input type for updating data in table "lessons"
"""
input lessons_set_input {
  customer_id: bigint
  lesson_date: timestamptz
  lesson_id: bigint
  lesson_status_code: String
  lesson_time: bigint
  price: float8
  staff_id: bigint
  vehicle_id: bigint
}

"""aggregate stddev on columns"""
type lessons_stddev_fields {
  customer_id: Float
  lesson_id: Float
  lesson_time: Float
  price: Float
  staff_id: Float
  vehicle_id: Float
}

"""
order by stddev() on columns of table "lessons"
"""
input lessons_stddev_order_by {
  customer_id: order_by
  lesson_id: order_by
  lesson_time: order_by
  price: order_by
  staff_id: order_by
  vehicle_id: order_by
}

"""aggregate stddev_pop on columns"""
type lessons_stddev_pop_fields {
  customer_id: Float
  lesson_id: Float
  lesson_time: Float
  price: Float
  staff_id: Float
  vehicle_id: Float
}

"""
order by stddev_pop() on columns of table "lessons"
"""
input lessons_stddev_pop_order_by {
  customer_id: order_by
  lesson_id: order_by
  lesson_time: order_by
  price: order_by
  staff_id: order_by
  vehicle_id: order_by
}

"""aggregate stddev_samp on columns"""
type lessons_stddev_samp_fields {
  customer_id: Float
  lesson_id: Float
  lesson_time: Float
  price: Float
  staff_id: Float
  vehicle_id: Float
}

"""
order by stddev_samp() on columns of table "lessons"
"""
input lessons_stddev_samp_order_by {
  customer_id: order_by
  lesson_id: order_by
  lesson_time: order_by
  price: order_by
  staff_id: order_by
  vehicle_id: order_by
}

"""aggregate sum on columns"""
type lessons_sum_fields {
  customer_id: bigint
  lesson_id: bigint
  lesson_time: bigint
  price: float8
  staff_id: bigint
  vehicle_id: bigint
}

"""
order by sum() on columns of table "lessons"
"""
input lessons_sum_order_by {
  customer_id: order_by
  lesson_id: order_by
  lesson_time: order_by
  price: order_by
  staff_id: order_by
  vehicle_id: order_by
}

"""
update columns of table "lessons"
"""
enum lessons_update_column {
  """column name"""
  customer_id

  """column name"""
  lesson_date

  """column name"""
  lesson_id

  """column name"""
  lesson_status_code

  """column name"""
  lesson_time

  """column name"""
  price

  """column name"""
  staff_id

  """column name"""
  vehicle_id
}

"""aggregate var_pop on columns"""
type lessons_var_pop_fields {
  customer_id: Float
  lesson_id: Float
  lesson_time: Float
  price: Float
  staff_id: Float
  vehicle_id: Float
}

"""
order by var_pop() on columns of table "lessons"
"""
input lessons_var_pop_order_by {
  customer_id: order_by
  lesson_id: order_by
  lesson_time: order_by
  price: order_by
  staff_id: order_by
  vehicle_id: order_by
}

"""aggregate var_samp on columns"""
type lessons_var_samp_fields {
  customer_id: Float
  lesson_id: Float
  lesson_time: Float
  price: Float
  staff_id: Float
  vehicle_id: Float
}

"""
order by var_samp() on columns of table "lessons"
"""
input lessons_var_samp_order_by {
  customer_id: order_by
  lesson_id: order_by
  lesson_time: order_by
  price: order_by
  staff_id: order_by
  vehicle_id: order_by
}

"""aggregate variance on columns"""
type lessons_variance_fields {
  customer_id: Float
  lesson_id: Float
  lesson_time: Float
  price: Float
  staff_id: Float
  vehicle_id: Float
}

"""
order by variance() on columns of table "lessons"
"""
input lessons_variance_order_by {
  customer_id: order_by
  lesson_id: order_by
  lesson_time: order_by
  price: order_by
  staff_id: order_by
  vehicle_id: order_by
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "addresses"
  """
  delete_addresses(
    """filter the rows which have to be deleted"""
    where: addresses_bool_exp!
  ): addresses_mutation_response

  """
  delete single row from the table: "addresses"
  """
  delete_addresses_by_pk(address_id: bigint!): addresses

  """
  delete data from the table: "customer_payments"
  """
  delete_customer_payments(
    """filter the rows which have to be deleted"""
    where: customer_payments_bool_exp!
  ): customer_payments_mutation_response

  """
  delete single row from the table: "customer_payments"
  """
  delete_customer_payments_by_pk(customer_id: bigint!, datetime_payment: timestamptz!): customer_payments

  """
  delete data from the table: "customers"
  """
  delete_customers(
    """filter the rows which have to be deleted"""
    where: customers_bool_exp!
  ): customers_mutation_response

  """
  delete single row from the table: "customers"
  """
  delete_customers_by_pk(customer_id: bigint!): customers

  """
  delete data from the table: "lessons"
  """
  delete_lessons(
    """filter the rows which have to be deleted"""
    where: lessons_bool_exp!
  ): lessons_mutation_response

  """
  delete single row from the table: "lessons"
  """
  delete_lessons_by_pk(lesson_id: bigint!): lessons

  """
  delete data from the table: "staff"
  """
  delete_staff(
    """filter the rows which have to be deleted"""
    where: staff_bool_exp!
  ): staff_mutation_response

  """
  delete single row from the table: "staff"
  """
  delete_staff_by_pk(staff_id: bigint!): staff

  """
  delete data from the table: "vehicles"
  """
  delete_vehicles(
    """filter the rows which have to be deleted"""
    where: vehicles_bool_exp!
  ): vehicles_mutation_response

  """
  delete single row from the table: "vehicles"
  """
  delete_vehicles_by_pk(vehicle_id: bigint!): vehicles

  """
  insert data into the table: "addresses"
  """
  insert_addresses(
    """the rows to be inserted"""
    objects: [addresses_insert_input!]!

    """on conflict condition"""
    on_conflict: addresses_on_conflict
  ): addresses_mutation_response

  """
  insert a single row into the table: "addresses"
  """
  insert_addresses_one(
    """the row to be inserted"""
    object: addresses_insert_input!

    """on conflict condition"""
    on_conflict: addresses_on_conflict
  ): addresses

  """
  insert data into the table: "customer_payments"
  """
  insert_customer_payments(
    """the rows to be inserted"""
    objects: [customer_payments_insert_input!]!

    """on conflict condition"""
    on_conflict: customer_payments_on_conflict
  ): customer_payments_mutation_response

  """
  insert a single row into the table: "customer_payments"
  """
  insert_customer_payments_one(
    """the row to be inserted"""
    object: customer_payments_insert_input!

    """on conflict condition"""
    on_conflict: customer_payments_on_conflict
  ): customer_payments

  """
  insert data into the table: "customers"
  """
  insert_customers(
    """the rows to be inserted"""
    objects: [customers_insert_input!]!

    """on conflict condition"""
    on_conflict: customers_on_conflict
  ): customers_mutation_response

  """
  insert a single row into the table: "customers"
  """
  insert_customers_one(
    """the row to be inserted"""
    object: customers_insert_input!

    """on conflict condition"""
    on_conflict: customers_on_conflict
  ): customers

  """
  insert data into the table: "lessons"
  """
  insert_lessons(
    """the rows to be inserted"""
    objects: [lessons_insert_input!]!

    """on conflict condition"""
    on_conflict: lessons_on_conflict
  ): lessons_mutation_response

  """
  insert a single row into the table: "lessons"
  """
  insert_lessons_one(
    """the row to be inserted"""
    object: lessons_insert_input!

    """on conflict condition"""
    on_conflict: lessons_on_conflict
  ): lessons

  """
  insert data into the table: "staff"
  """
  insert_staff(
    """the rows to be inserted"""
    objects: [staff_insert_input!]!

    """on conflict condition"""
    on_conflict: staff_on_conflict
  ): staff_mutation_response

  """
  insert a single row into the table: "staff"
  """
  insert_staff_one(
    """the row to be inserted"""
    object: staff_insert_input!

    """on conflict condition"""
    on_conflict: staff_on_conflict
  ): staff

  """
  insert data into the table: "vehicles"
  """
  insert_vehicles(
    """the rows to be inserted"""
    objects: [vehicles_insert_input!]!

    """on conflict condition"""
    on_conflict: vehicles_on_conflict
  ): vehicles_mutation_response

  """
  insert a single row into the table: "vehicles"
  """
  insert_vehicles_one(
    """the row to be inserted"""
    object: vehicles_insert_input!

    """on conflict condition"""
    on_conflict: vehicles_on_conflict
  ): vehicles

  """
  update data of the table: "addresses"
  """
  update_addresses(
    """increments the integer columns with given value of the filtered values"""
    _inc: addresses_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: addresses_set_input

    """filter the rows which have to be updated"""
    where: addresses_bool_exp!
  ): addresses_mutation_response

  """
  update single row of the table: "addresses"
  """
  update_addresses_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: addresses_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: addresses_set_input
    pk_columns: addresses_pk_columns_input!
  ): addresses

  """
  update data of the table: "customer_payments"
  """
  update_customer_payments(
    """increments the integer columns with given value of the filtered values"""
    _inc: customer_payments_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: customer_payments_set_input

    """filter the rows which have to be updated"""
    where: customer_payments_bool_exp!
  ): customer_payments_mutation_response

  """
  update single row of the table: "customer_payments"
  """
  update_customer_payments_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: customer_payments_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: customer_payments_set_input
    pk_columns: customer_payments_pk_columns_input!
  ): customer_payments

  """
  update data of the table: "customers"
  """
  update_customers(
    """increments the integer columns with given value of the filtered values"""
    _inc: customers_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: customers_set_input

    """filter the rows which have to be updated"""
    where: customers_bool_exp!
  ): customers_mutation_response

  """
  update single row of the table: "customers"
  """
  update_customers_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: customers_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: customers_set_input
    pk_columns: customers_pk_columns_input!
  ): customers

  """
  update data of the table: "lessons"
  """
  update_lessons(
    """increments the integer columns with given value of the filtered values"""
    _inc: lessons_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: lessons_set_input

    """filter the rows which have to be updated"""
    where: lessons_bool_exp!
  ): lessons_mutation_response

  """
  update single row of the table: "lessons"
  """
  update_lessons_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: lessons_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: lessons_set_input
    pk_columns: lessons_pk_columns_input!
  ): lessons

  """
  update data of the table: "staff"
  """
  update_staff(
    """increments the integer columns with given value of the filtered values"""
    _inc: staff_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: staff_set_input

    """filter the rows which have to be updated"""
    where: staff_bool_exp!
  ): staff_mutation_response

  """
  update single row of the table: "staff"
  """
  update_staff_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: staff_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: staff_set_input
    pk_columns: staff_pk_columns_input!
  ): staff

  """
  update data of the table: "vehicles"
  """
  update_vehicles(
    """increments the integer columns with given value of the filtered values"""
    _inc: vehicles_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: vehicles_set_input

    """filter the rows which have to be updated"""
    where: vehicles_bool_exp!
  ): vehicles_mutation_response

  """
  update single row of the table: "vehicles"
  """
  update_vehicles_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: vehicles_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: vehicles_set_input
    pk_columns: vehicles_pk_columns_input!
  ): vehicles
}

"""column ordering options"""
enum order_by {
  """in the ascending order, nulls last"""
  asc

  """in the ascending order, nulls first"""
  asc_nulls_first

  """in the ascending order, nulls last"""
  asc_nulls_last

  """in the descending order, nulls first"""
  desc

  """in the descending order, nulls first"""
  desc_nulls_first

  """in the descending order, nulls last"""
  desc_nulls_last
}

"""query root"""
type query_root {
  """
  fetch data from the table: "addresses"
  """
  addresses(
    """distinct select on columns"""
    distinct_on: [addresses_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [addresses_order_by!]

    """filter the rows returned"""
    where: addresses_bool_exp
  ): [addresses!]!

  """
  fetch aggregated fields from the table: "addresses"
  """
  addresses_aggregate(
    """distinct select on columns"""
    distinct_on: [addresses_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [addresses_order_by!]

    """filter the rows returned"""
    where: addresses_bool_exp
  ): addresses_aggregate!

  """fetch data from the table: "addresses" using primary key columns"""
  addresses_by_pk(address_id: bigint!): addresses

  """
  fetch data from the table: "customer_payments"
  """
  customer_payments(
    """distinct select on columns"""
    distinct_on: [customer_payments_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [customer_payments_order_by!]

    """filter the rows returned"""
    where: customer_payments_bool_exp
  ): [customer_payments!]!

  """
  fetch aggregated fields from the table: "customer_payments"
  """
  customer_payments_aggregate(
    """distinct select on columns"""
    distinct_on: [customer_payments_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [customer_payments_order_by!]

    """filter the rows returned"""
    where: customer_payments_bool_exp
  ): customer_payments_aggregate!

  """
  fetch data from the table: "customer_payments" using primary key columns
  """
  customer_payments_by_pk(customer_id: bigint!, datetime_payment: timestamptz!): customer_payments

  """
  fetch data from the table: "customers"
  """
  customers(
    """distinct select on columns"""
    distinct_on: [customers_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [customers_order_by!]

    """filter the rows returned"""
    where: customers_bool_exp
  ): [customers!]!

  """
  fetch aggregated fields from the table: "customers"
  """
  customers_aggregate(
    """distinct select on columns"""
    distinct_on: [customers_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [customers_order_by!]

    """filter the rows returned"""
    where: customers_bool_exp
  ): customers_aggregate!

  """fetch data from the table: "customers" using primary key columns"""
  customers_by_pk(customer_id: bigint!): customers

  """
  fetch data from the table: "lessons"
  """
  lessons(
    """distinct select on columns"""
    distinct_on: [lessons_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [lessons_order_by!]

    """filter the rows returned"""
    where: lessons_bool_exp
  ): [lessons!]!

  """
  fetch aggregated fields from the table: "lessons"
  """
  lessons_aggregate(
    """distinct select on columns"""
    distinct_on: [lessons_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [lessons_order_by!]

    """filter the rows returned"""
    where: lessons_bool_exp
  ): lessons_aggregate!

  """fetch data from the table: "lessons" using primary key columns"""
  lessons_by_pk(lesson_id: bigint!): lessons

  """
  fetch data from the table: "staff"
  """
  staff(
    """distinct select on columns"""
    distinct_on: [staff_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [staff_order_by!]

    """filter the rows returned"""
    where: staff_bool_exp
  ): [staff!]!

  """
  fetch aggregated fields from the table: "staff"
  """
  staff_aggregate(
    """distinct select on columns"""
    distinct_on: [staff_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [staff_order_by!]

    """filter the rows returned"""
    where: staff_bool_exp
  ): staff_aggregate!

  """fetch data from the table: "staff" using primary key columns"""
  staff_by_pk(staff_id: bigint!): staff

  """
  fetch data from the table: "vehicles"
  """
  vehicles(
    """distinct select on columns"""
    distinct_on: [vehicles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [vehicles_order_by!]

    """filter the rows returned"""
    where: vehicles_bool_exp
  ): [vehicles!]!

  """
  fetch aggregated fields from the table: "vehicles"
  """
  vehicles_aggregate(
    """distinct select on columns"""
    distinct_on: [vehicles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [vehicles_order_by!]

    """filter the rows returned"""
    where: vehicles_bool_exp
  ): vehicles_aggregate!

  """fetch data from the table: "vehicles" using primary key columns"""
  vehicles_by_pk(vehicle_id: bigint!): vehicles
}

"""
columns and relationships of "staff"
"""
type staff {
  """An object relationship"""
  address: addresses
  date_joined_staff: timestamptz
  date_left_staff: timestamptz
  date_of_birth: timestamptz
  first_name: String
  last_name: String

  """An array relationship"""
  lessons(
    """distinct select on columns"""
    distinct_on: [lessons_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [lessons_order_by!]

    """filter the rows returned"""
    where: lessons_bool_exp
  ): [lessons!]!

  """An aggregated array relationship"""
  lessons_aggregate(
    """distinct select on columns"""
    distinct_on: [lessons_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [lessons_order_by!]

    """filter the rows returned"""
    where: lessons_bool_exp
  ): lessons_aggregate!
  middle_name: String
  nickname: String
  staff_address_id: bigint
  staff_id: bigint!
}

"""
aggregated selection of "staff"
"""
type staff_aggregate {
  aggregate: staff_aggregate_fields
  nodes: [staff!]!
}

"""
aggregate fields of "staff"
"""
type staff_aggregate_fields {
  avg: staff_avg_fields
  count(columns: [staff_select_column!], distinct: Boolean): Int
  max: staff_max_fields
  min: staff_min_fields
  stddev: staff_stddev_fields
  stddev_pop: staff_stddev_pop_fields
  stddev_samp: staff_stddev_samp_fields
  sum: staff_sum_fields
  var_pop: staff_var_pop_fields
  var_samp: staff_var_samp_fields
  variance: staff_variance_fields
}

"""
order by aggregate values of table "staff"
"""
input staff_aggregate_order_by {
  avg: staff_avg_order_by
  count: order_by
  max: staff_max_order_by
  min: staff_min_order_by
  stddev: staff_stddev_order_by
  stddev_pop: staff_stddev_pop_order_by
  stddev_samp: staff_stddev_samp_order_by
  sum: staff_sum_order_by
  var_pop: staff_var_pop_order_by
  var_samp: staff_var_samp_order_by
  variance: staff_variance_order_by
}

"""
input type for inserting array relation for remote table "staff"
"""
input staff_arr_rel_insert_input {
  data: [staff_insert_input!]!
  on_conflict: staff_on_conflict
}

"""aggregate avg on columns"""
type staff_avg_fields {
  staff_address_id: Float
  staff_id: Float
}

"""
order by avg() on columns of table "staff"
"""
input staff_avg_order_by {
  staff_address_id: order_by
  staff_id: order_by
}

"""
Boolean expression to filter rows from the table "staff". All fields are combined with a logical 'AND'.
"""
input staff_bool_exp {
  _and: [staff_bool_exp]
  _not: staff_bool_exp
  _or: [staff_bool_exp]
  address: addresses_bool_exp
  date_joined_staff: timestamptz_comparison_exp
  date_left_staff: timestamptz_comparison_exp
  date_of_birth: timestamptz_comparison_exp
  first_name: String_comparison_exp
  last_name: String_comparison_exp
  lessons: lessons_bool_exp
  middle_name: String_comparison_exp
  nickname: String_comparison_exp
  staff_address_id: bigint_comparison_exp
  staff_id: bigint_comparison_exp
}

"""
unique or primary key constraints on table "staff"
"""
enum staff_constraint {
  """unique or primary key constraint"""
  idx_22106_staff_pkey
}

"""
input type for incrementing integer column in table "staff"
"""
input staff_inc_input {
  staff_address_id: bigint
  staff_id: bigint
}

"""
input type for inserting data into table "staff"
"""
input staff_insert_input {
  address: addresses_obj_rel_insert_input
  date_joined_staff: timestamptz
  date_left_staff: timestamptz
  date_of_birth: timestamptz
  first_name: String
  last_name: String
  lessons: lessons_arr_rel_insert_input
  middle_name: String
  nickname: String
  staff_address_id: bigint
  staff_id: bigint
}

"""aggregate max on columns"""
type staff_max_fields {
  date_joined_staff: timestamptz
  date_left_staff: timestamptz
  date_of_birth: timestamptz
  first_name: String
  last_name: String
  middle_name: String
  nickname: String
  staff_address_id: bigint
  staff_id: bigint
}

"""
order by max() on columns of table "staff"
"""
input staff_max_order_by {
  date_joined_staff: order_by
  date_left_staff: order_by
  date_of_birth: order_by
  first_name: order_by
  last_name: order_by
  middle_name: order_by
  nickname: order_by
  staff_address_id: order_by
  staff_id: order_by
}

"""aggregate min on columns"""
type staff_min_fields {
  date_joined_staff: timestamptz
  date_left_staff: timestamptz
  date_of_birth: timestamptz
  first_name: String
  last_name: String
  middle_name: String
  nickname: String
  staff_address_id: bigint
  staff_id: bigint
}

"""
order by min() on columns of table "staff"
"""
input staff_min_order_by {
  date_joined_staff: order_by
  date_left_staff: order_by
  date_of_birth: order_by
  first_name: order_by
  last_name: order_by
  middle_name: order_by
  nickname: order_by
  staff_address_id: order_by
  staff_id: order_by
}

"""
response of any mutation on the table "staff"
"""
type staff_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [staff!]!
}

"""
input type for inserting object relation for remote table "staff"
"""
input staff_obj_rel_insert_input {
  data: staff_insert_input!
  on_conflict: staff_on_conflict
}

"""
on conflict condition type for table "staff"
"""
input staff_on_conflict {
  constraint: staff_constraint!
  update_columns: [staff_update_column!]!
  where: staff_bool_exp
}

"""
ordering options when selecting data from "staff"
"""
input staff_order_by {
  address: addresses_order_by
  date_joined_staff: order_by
  date_left_staff: order_by
  date_of_birth: order_by
  first_name: order_by
  last_name: order_by
  lessons_aggregate: lessons_aggregate_order_by
  middle_name: order_by
  nickname: order_by
  staff_address_id: order_by
  staff_id: order_by
}

"""
primary key columns input for table: "staff"
"""
input staff_pk_columns_input {
  staff_id: bigint!
}

"""
select columns of table "staff"
"""
enum staff_select_column {
  """column name"""
  date_joined_staff

  """column name"""
  date_left_staff

  """column name"""
  date_of_birth

  """column name"""
  first_name

  """column name"""
  last_name

  """column name"""
  middle_name

  """column name"""
  nickname

  """column name"""
  staff_address_id

  """column name"""
  staff_id
}

"""
input type for updating data in table "staff"
"""
input staff_set_input {
  date_joined_staff: timestamptz
  date_left_staff: timestamptz
  date_of_birth: timestamptz
  first_name: String
  last_name: String
  middle_name: String
  nickname: String
  staff_address_id: bigint
  staff_id: bigint
}

"""aggregate stddev on columns"""
type staff_stddev_fields {
  staff_address_id: Float
  staff_id: Float
}

"""
order by stddev() on columns of table "staff"
"""
input staff_stddev_order_by {
  staff_address_id: order_by
  staff_id: order_by
}

"""aggregate stddev_pop on columns"""
type staff_stddev_pop_fields {
  staff_address_id: Float
  staff_id: Float
}

"""
order by stddev_pop() on columns of table "staff"
"""
input staff_stddev_pop_order_by {
  staff_address_id: order_by
  staff_id: order_by
}

"""aggregate stddev_samp on columns"""
type staff_stddev_samp_fields {
  staff_address_id: Float
  staff_id: Float
}

"""
order by stddev_samp() on columns of table "staff"
"""
input staff_stddev_samp_order_by {
  staff_address_id: order_by
  staff_id: order_by
}

"""aggregate sum on columns"""
type staff_sum_fields {
  staff_address_id: bigint
  staff_id: bigint
}

"""
order by sum() on columns of table "staff"
"""
input staff_sum_order_by {
  staff_address_id: order_by
  staff_id: order_by
}

"""
update columns of table "staff"
"""
enum staff_update_column {
  """column name"""
  date_joined_staff

  """column name"""
  date_left_staff

  """column name"""
  date_of_birth

  """column name"""
  first_name

  """column name"""
  last_name

  """column name"""
  middle_name

  """column name"""
  nickname

  """column name"""
  staff_address_id

  """column name"""
  staff_id
}

"""aggregate var_pop on columns"""
type staff_var_pop_fields {
  staff_address_id: Float
  staff_id: Float
}

"""
order by var_pop() on columns of table "staff"
"""
input staff_var_pop_order_by {
  staff_address_id: order_by
  staff_id: order_by
}

"""aggregate var_samp on columns"""
type staff_var_samp_fields {
  staff_address_id: Float
  staff_id: Float
}

"""
order by var_samp() on columns of table "staff"
"""
input staff_var_samp_order_by {
  staff_address_id: order_by
  staff_id: order_by
}

"""aggregate variance on columns"""
type staff_variance_fields {
  staff_address_id: Float
  staff_id: Float
}

"""
order by variance() on columns of table "staff"
"""
input staff_variance_order_by {
  staff_address_id: order_by
  staff_id: order_by
}

"""
expression to compare columns of type String. All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String
  _ilike: String
  _in: [String!]
  _is_null: Boolean
  _like: String
  _lt: String
  _lte: String
  _neq: String
  _nilike: String
  _nin: [String!]
  _nlike: String
  _nsimilar: String
  _similar: String
}

"""subscription root"""
type subscription_root {
  """
  fetch data from the table: "addresses"
  """
  addresses(
    """distinct select on columns"""
    distinct_on: [addresses_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [addresses_order_by!]

    """filter the rows returned"""
    where: addresses_bool_exp
  ): [addresses!]!

  """
  fetch aggregated fields from the table: "addresses"
  """
  addresses_aggregate(
    """distinct select on columns"""
    distinct_on: [addresses_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [addresses_order_by!]

    """filter the rows returned"""
    where: addresses_bool_exp
  ): addresses_aggregate!

  """fetch data from the table: "addresses" using primary key columns"""
  addresses_by_pk(address_id: bigint!): addresses

  """
  fetch data from the table: "customer_payments"
  """
  customer_payments(
    """distinct select on columns"""
    distinct_on: [customer_payments_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [customer_payments_order_by!]

    """filter the rows returned"""
    where: customer_payments_bool_exp
  ): [customer_payments!]!

  """
  fetch aggregated fields from the table: "customer_payments"
  """
  customer_payments_aggregate(
    """distinct select on columns"""
    distinct_on: [customer_payments_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [customer_payments_order_by!]

    """filter the rows returned"""
    where: customer_payments_bool_exp
  ): customer_payments_aggregate!

  """
  fetch data from the table: "customer_payments" using primary key columns
  """
  customer_payments_by_pk(customer_id: bigint!, datetime_payment: timestamptz!): customer_payments

  """
  fetch data from the table: "customers"
  """
  customers(
    """distinct select on columns"""
    distinct_on: [customers_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [customers_order_by!]

    """filter the rows returned"""
    where: customers_bool_exp
  ): [customers!]!

  """
  fetch aggregated fields from the table: "customers"
  """
  customers_aggregate(
    """distinct select on columns"""
    distinct_on: [customers_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [customers_order_by!]

    """filter the rows returned"""
    where: customers_bool_exp
  ): customers_aggregate!

  """fetch data from the table: "customers" using primary key columns"""
  customers_by_pk(customer_id: bigint!): customers

  """
  fetch data from the table: "lessons"
  """
  lessons(
    """distinct select on columns"""
    distinct_on: [lessons_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [lessons_order_by!]

    """filter the rows returned"""
    where: lessons_bool_exp
  ): [lessons!]!

  """
  fetch aggregated fields from the table: "lessons"
  """
  lessons_aggregate(
    """distinct select on columns"""
    distinct_on: [lessons_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [lessons_order_by!]

    """filter the rows returned"""
    where: lessons_bool_exp
  ): lessons_aggregate!

  """fetch data from the table: "lessons" using primary key columns"""
  lessons_by_pk(lesson_id: bigint!): lessons

  """
  fetch data from the table: "staff"
  """
  staff(
    """distinct select on columns"""
    distinct_on: [staff_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [staff_order_by!]

    """filter the rows returned"""
    where: staff_bool_exp
  ): [staff!]!

  """
  fetch aggregated fields from the table: "staff"
  """
  staff_aggregate(
    """distinct select on columns"""
    distinct_on: [staff_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [staff_order_by!]

    """filter the rows returned"""
    where: staff_bool_exp
  ): staff_aggregate!

  """fetch data from the table: "staff" using primary key columns"""
  staff_by_pk(staff_id: bigint!): staff

  """
  fetch data from the table: "vehicles"
  """
  vehicles(
    """distinct select on columns"""
    distinct_on: [vehicles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [vehicles_order_by!]

    """filter the rows returned"""
    where: vehicles_bool_exp
  ): [vehicles!]!

  """
  fetch aggregated fields from the table: "vehicles"
  """
  vehicles_aggregate(
    """distinct select on columns"""
    distinct_on: [vehicles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [vehicles_order_by!]

    """filter the rows returned"""
    where: vehicles_bool_exp
  ): vehicles_aggregate!

  """fetch data from the table: "vehicles" using primary key columns"""
  vehicles_by_pk(vehicle_id: bigint!): vehicles
}

scalar timestamptz

"""
expression to compare columns of type timestamptz. All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}

"""
columns and relationships of "vehicles"
"""
type vehicles {
  """An array relationship"""
  lessons(
    """distinct select on columns"""
    distinct_on: [lessons_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [lessons_order_by!]

    """filter the rows returned"""
    where: lessons_bool_exp
  ): [lessons!]!

  """An aggregated array relationship"""
  lessons_aggregate(
    """distinct select on columns"""
    distinct_on: [lessons_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [lessons_order_by!]

    """filter the rows returned"""
    where: lessons_bool_exp
  ): lessons_aggregate!
  vehicle_details: String
  vehicle_id: bigint!
}

"""
aggregated selection of "vehicles"
"""
type vehicles_aggregate {
  aggregate: vehicles_aggregate_fields
  nodes: [vehicles!]!
}

"""
aggregate fields of "vehicles"
"""
type vehicles_aggregate_fields {
  avg: vehicles_avg_fields
  count(columns: [vehicles_select_column!], distinct: Boolean): Int
  max: vehicles_max_fields
  min: vehicles_min_fields
  stddev: vehicles_stddev_fields
  stddev_pop: vehicles_stddev_pop_fields
  stddev_samp: vehicles_stddev_samp_fields
  sum: vehicles_sum_fields
  var_pop: vehicles_var_pop_fields
  var_samp: vehicles_var_samp_fields
  variance: vehicles_variance_fields
}

"""
order by aggregate values of table "vehicles"
"""
input vehicles_aggregate_order_by {
  avg: vehicles_avg_order_by
  count: order_by
  max: vehicles_max_order_by
  min: vehicles_min_order_by
  stddev: vehicles_stddev_order_by
  stddev_pop: vehicles_stddev_pop_order_by
  stddev_samp: vehicles_stddev_samp_order_by
  sum: vehicles_sum_order_by
  var_pop: vehicles_var_pop_order_by
  var_samp: vehicles_var_samp_order_by
  variance: vehicles_variance_order_by
}

"""
input type for inserting array relation for remote table "vehicles"
"""
input vehicles_arr_rel_insert_input {
  data: [vehicles_insert_input!]!
  on_conflict: vehicles_on_conflict
}

"""aggregate avg on columns"""
type vehicles_avg_fields {
  vehicle_id: Float
}

"""
order by avg() on columns of table "vehicles"
"""
input vehicles_avg_order_by {
  vehicle_id: order_by
}

"""
Boolean expression to filter rows from the table "vehicles". All fields are combined with a logical 'AND'.
"""
input vehicles_bool_exp {
  _and: [vehicles_bool_exp]
  _not: vehicles_bool_exp
  _or: [vehicles_bool_exp]
  lessons: lessons_bool_exp
  vehicle_details: String_comparison_exp
  vehicle_id: bigint_comparison_exp
}

"""
unique or primary key constraints on table "vehicles"
"""
enum vehicles_constraint {
  """unique or primary key constraint"""
  idx_22112_vehicles_pkey
}

"""
input type for incrementing integer column in table "vehicles"
"""
input vehicles_inc_input {
  vehicle_id: bigint
}

"""
input type for inserting data into table "vehicles"
"""
input vehicles_insert_input {
  lessons: lessons_arr_rel_insert_input
  vehicle_details: String
  vehicle_id: bigint
}

"""aggregate max on columns"""
type vehicles_max_fields {
  vehicle_details: String
  vehicle_id: bigint
}

"""
order by max() on columns of table "vehicles"
"""
input vehicles_max_order_by {
  vehicle_details: order_by
  vehicle_id: order_by
}

"""aggregate min on columns"""
type vehicles_min_fields {
  vehicle_details: String
  vehicle_id: bigint
}

"""
order by min() on columns of table "vehicles"
"""
input vehicles_min_order_by {
  vehicle_details: order_by
  vehicle_id: order_by
}

"""
response of any mutation on the table "vehicles"
"""
type vehicles_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [vehicles!]!
}

"""
input type for inserting object relation for remote table "vehicles"
"""
input vehicles_obj_rel_insert_input {
  data: vehicles_insert_input!
  on_conflict: vehicles_on_conflict
}

"""
on conflict condition type for table "vehicles"
"""
input vehicles_on_conflict {
  constraint: vehicles_constraint!
  update_columns: [vehicles_update_column!]!
  where: vehicles_bool_exp
}

"""
ordering options when selecting data from "vehicles"
"""
input vehicles_order_by {
  lessons_aggregate: lessons_aggregate_order_by
  vehicle_details: order_by
  vehicle_id: order_by
}

"""
primary key columns input for table: "vehicles"
"""
input vehicles_pk_columns_input {
  vehicle_id: bigint!
}

"""
select columns of table "vehicles"
"""
enum vehicles_select_column {
  """column name"""
  vehicle_details

  """column name"""
  vehicle_id
}

"""
input type for updating data in table "vehicles"
"""
input vehicles_set_input {
  vehicle_details: String
  vehicle_id: bigint
}

"""aggregate stddev on columns"""
type vehicles_stddev_fields {
  vehicle_id: Float
}

"""
order by stddev() on columns of table "vehicles"
"""
input vehicles_stddev_order_by {
  vehicle_id: order_by
}

"""aggregate stddev_pop on columns"""
type vehicles_stddev_pop_fields {
  vehicle_id: Float
}

"""
order by stddev_pop() on columns of table "vehicles"
"""
input vehicles_stddev_pop_order_by {
  vehicle_id: order_by
}

"""aggregate stddev_samp on columns"""
type vehicles_stddev_samp_fields {
  vehicle_id: Float
}

"""
order by stddev_samp() on columns of table "vehicles"
"""
input vehicles_stddev_samp_order_by {
  vehicle_id: order_by
}

"""aggregate sum on columns"""
type vehicles_sum_fields {
  vehicle_id: bigint
}

"""
order by sum() on columns of table "vehicles"
"""
input vehicles_sum_order_by {
  vehicle_id: order_by
}

"""
update columns of table "vehicles"
"""
enum vehicles_update_column {
  """column name"""
  vehicle_details

  """column name"""
  vehicle_id
}

"""aggregate var_pop on columns"""
type vehicles_var_pop_fields {
  vehicle_id: Float
}

"""
order by var_pop() on columns of table "vehicles"
"""
input vehicles_var_pop_order_by {
  vehicle_id: order_by
}

"""aggregate var_samp on columns"""
type vehicles_var_samp_fields {
  vehicle_id: Float
}

"""
order by var_samp() on columns of table "vehicles"
"""
input vehicles_var_samp_order_by {
  vehicle_id: order_by
}

"""aggregate variance on columns"""
type vehicles_variance_fields {
  vehicle_id: Float
}

"""
order by variance() on columns of table "vehicles"
"""
input vehicles_variance_order_by {
  vehicle_id: order_by
}
