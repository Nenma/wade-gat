schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""
Direct the client to resolve this field locally, either from the cache or local resolvers.
"""
directive @client(
  """
  When true, the client will never use the cache for this value. See
  https://www.apollographql.com/docs/react/essentials/local-state/#forcing-resolvers-with-clientalways-true
  """
  always: Boolean
) on FIELD | FRAGMENT_DEFINITION | INLINE_FRAGMENT

"""
Export this locally resolved field as a variable to be used in the remainder of this query. See
https://www.apollographql.com/docs/react/essentials/local-state/#using-client-fields-as-variables
"""
directive @export(
  """The variable name to export this field as."""
  as: String!
) on FIELD

"""
Specify a custom store key for this result. See
https://www.apollographql.com/docs/react/advanced/caching/#the-connection-directive
"""
directive @connection(
  """Specify the store key."""
  key: String!

  """
  An array of query argument names to include in the generated custom store key.
  """
  filter: [String!]
) on FIELD

"""
columns and relationships of "architect"
"""
type architect {
  """An array relationship"""
  bridges(
    """distinct select on columns"""
    distinct_on: [bridge_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [bridge_order_by!]

    """filter the rows returned"""
    where: bridge_bool_exp
  ): [bridge!]!

  """An aggregated array relationship"""
  bridges_aggregate(
    """distinct select on columns"""
    distinct_on: [bridge_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [bridge_order_by!]

    """filter the rows returned"""
    where: bridge_bool_exp
  ): bridge_aggregate!
  gender: String
  id: Int!

  """An array relationship"""
  mills(
    """distinct select on columns"""
    distinct_on: [mill_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [mill_order_by!]

    """filter the rows returned"""
    where: mill_bool_exp
  ): [mill!]!

  """An aggregated array relationship"""
  mills_aggregate(
    """distinct select on columns"""
    distinct_on: [mill_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [mill_order_by!]

    """filter the rows returned"""
    where: mill_bool_exp
  ): mill_aggregate!
  name: String
  nationality: String
}

"""
aggregated selection of "architect"
"""
type architect_aggregate {
  aggregate: architect_aggregate_fields
  nodes: [architect!]!
}

"""
aggregate fields of "architect"
"""
type architect_aggregate_fields {
  avg: architect_avg_fields
  count(columns: [architect_select_column!], distinct: Boolean): Int
  max: architect_max_fields
  min: architect_min_fields
  stddev: architect_stddev_fields
  stddev_pop: architect_stddev_pop_fields
  stddev_samp: architect_stddev_samp_fields
  sum: architect_sum_fields
  var_pop: architect_var_pop_fields
  var_samp: architect_var_samp_fields
  variance: architect_variance_fields
}

"""
order by aggregate values of table "architect"
"""
input architect_aggregate_order_by {
  avg: architect_avg_order_by
  count: order_by
  max: architect_max_order_by
  min: architect_min_order_by
  stddev: architect_stddev_order_by
  stddev_pop: architect_stddev_pop_order_by
  stddev_samp: architect_stddev_samp_order_by
  sum: architect_sum_order_by
  var_pop: architect_var_pop_order_by
  var_samp: architect_var_samp_order_by
  variance: architect_variance_order_by
}

"""
input type for inserting array relation for remote table "architect"
"""
input architect_arr_rel_insert_input {
  data: [architect_insert_input!]!
  on_conflict: architect_on_conflict
}

"""aggregate avg on columns"""
type architect_avg_fields {
  id: Float
}

"""
order by avg() on columns of table "architect"
"""
input architect_avg_order_by {
  id: order_by
}

"""
Boolean expression to filter rows from the table "architect". All fields are combined with a logical 'AND'.
"""
input architect_bool_exp {
  _and: [architect_bool_exp]
  _not: architect_bool_exp
  _or: [architect_bool_exp]
  bridges: bridge_bool_exp
  gender: String_comparison_exp
  id: Int_comparison_exp
  mills: mill_bool_exp
  name: String_comparison_exp
  nationality: String_comparison_exp
}

"""
unique or primary key constraints on table "architect"
"""
enum architect_constraint {
  """unique or primary key constraint"""
  idx_22396_sqlite_autoindex_architect_1
}

"""
input type for incrementing integer column in table "architect"
"""
input architect_inc_input {
  id: Int
}

"""
input type for inserting data into table "architect"
"""
input architect_insert_input {
  bridges: bridge_arr_rel_insert_input
  gender: String
  id: Int
  mills: mill_arr_rel_insert_input
  name: String
  nationality: String
}

"""aggregate max on columns"""
type architect_max_fields {
  gender: String
  id: Int
  name: String
  nationality: String
}

"""
order by max() on columns of table "architect"
"""
input architect_max_order_by {
  gender: order_by
  id: order_by
  name: order_by
  nationality: order_by
}

"""aggregate min on columns"""
type architect_min_fields {
  gender: String
  id: Int
  name: String
  nationality: String
}

"""
order by min() on columns of table "architect"
"""
input architect_min_order_by {
  gender: order_by
  id: order_by
  name: order_by
  nationality: order_by
}

"""
response of any mutation on the table "architect"
"""
type architect_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [architect!]!
}

"""
input type for inserting object relation for remote table "architect"
"""
input architect_obj_rel_insert_input {
  data: architect_insert_input!
  on_conflict: architect_on_conflict
}

"""
on conflict condition type for table "architect"
"""
input architect_on_conflict {
  constraint: architect_constraint!
  update_columns: [architect_update_column!]!
  where: architect_bool_exp
}

"""
ordering options when selecting data from "architect"
"""
input architect_order_by {
  bridges_aggregate: bridge_aggregate_order_by
  gender: order_by
  id: order_by
  mills_aggregate: mill_aggregate_order_by
  name: order_by
  nationality: order_by
}

"""
primary key columns input for table: "architect"
"""
input architect_pk_columns_input {
  id: Int!
}

"""
select columns of table "architect"
"""
enum architect_select_column {
  """column name"""
  gender

  """column name"""
  id

  """column name"""
  name

  """column name"""
  nationality
}

"""
input type for updating data in table "architect"
"""
input architect_set_input {
  gender: String
  id: Int
  name: String
  nationality: String
}

"""aggregate stddev on columns"""
type architect_stddev_fields {
  id: Float
}

"""
order by stddev() on columns of table "architect"
"""
input architect_stddev_order_by {
  id: order_by
}

"""aggregate stddev_pop on columns"""
type architect_stddev_pop_fields {
  id: Float
}

"""
order by stddev_pop() on columns of table "architect"
"""
input architect_stddev_pop_order_by {
  id: order_by
}

"""aggregate stddev_samp on columns"""
type architect_stddev_samp_fields {
  id: Float
}

"""
order by stddev_samp() on columns of table "architect"
"""
input architect_stddev_samp_order_by {
  id: order_by
}

"""aggregate sum on columns"""
type architect_sum_fields {
  id: Int
}

"""
order by sum() on columns of table "architect"
"""
input architect_sum_order_by {
  id: order_by
}

"""
update columns of table "architect"
"""
enum architect_update_column {
  """column name"""
  gender

  """column name"""
  id

  """column name"""
  name

  """column name"""
  nationality
}

"""aggregate var_pop on columns"""
type architect_var_pop_fields {
  id: Float
}

"""
order by var_pop() on columns of table "architect"
"""
input architect_var_pop_order_by {
  id: order_by
}

"""aggregate var_samp on columns"""
type architect_var_samp_fields {
  id: Float
}

"""
order by var_samp() on columns of table "architect"
"""
input architect_var_samp_order_by {
  id: order_by
}

"""aggregate variance on columns"""
type architect_variance_fields {
  id: Float
}

"""
order by variance() on columns of table "architect"
"""
input architect_variance_order_by {
  id: order_by
}

"""
columns and relationships of "bridge"
"""
type bridge {
  """An object relationship"""
  architect: architect
  architect_id: Int
  id: Int!
  length_feet: Float
  length_meters: Float
  location: String
  name: String
}

"""
aggregated selection of "bridge"
"""
type bridge_aggregate {
  aggregate: bridge_aggregate_fields
  nodes: [bridge!]!
}

"""
aggregate fields of "bridge"
"""
type bridge_aggregate_fields {
  avg: bridge_avg_fields
  count(columns: [bridge_select_column!], distinct: Boolean): Int
  max: bridge_max_fields
  min: bridge_min_fields
  stddev: bridge_stddev_fields
  stddev_pop: bridge_stddev_pop_fields
  stddev_samp: bridge_stddev_samp_fields
  sum: bridge_sum_fields
  var_pop: bridge_var_pop_fields
  var_samp: bridge_var_samp_fields
  variance: bridge_variance_fields
}

"""
order by aggregate values of table "bridge"
"""
input bridge_aggregate_order_by {
  avg: bridge_avg_order_by
  count: order_by
  max: bridge_max_order_by
  min: bridge_min_order_by
  stddev: bridge_stddev_order_by
  stddev_pop: bridge_stddev_pop_order_by
  stddev_samp: bridge_stddev_samp_order_by
  sum: bridge_sum_order_by
  var_pop: bridge_var_pop_order_by
  var_samp: bridge_var_samp_order_by
  variance: bridge_variance_order_by
}

"""
input type for inserting array relation for remote table "bridge"
"""
input bridge_arr_rel_insert_input {
  data: [bridge_insert_input!]!
  on_conflict: bridge_on_conflict
}

"""aggregate avg on columns"""
type bridge_avg_fields {
  architect_id: Float
  id: Float
  length_feet: Float
  length_meters: Float
}

"""
order by avg() on columns of table "bridge"
"""
input bridge_avg_order_by {
  architect_id: order_by
  id: order_by
  length_feet: order_by
  length_meters: order_by
}

"""
Boolean expression to filter rows from the table "bridge". All fields are combined with a logical 'AND'.
"""
input bridge_bool_exp {
  _and: [bridge_bool_exp]
  _not: bridge_bool_exp
  _or: [bridge_bool_exp]
  architect: architect_bool_exp
  architect_id: Int_comparison_exp
  id: Int_comparison_exp
  length_feet: Float_comparison_exp
  length_meters: Float_comparison_exp
  location: String_comparison_exp
  name: String_comparison_exp
}

"""
unique or primary key constraints on table "bridge"
"""
enum bridge_constraint {
  """unique or primary key constraint"""
  idx_22402_sqlite_autoindex_bridge_1
}

"""
input type for incrementing integer column in table "bridge"
"""
input bridge_inc_input {
  architect_id: Int
  id: Int
  length_feet: Float
  length_meters: Float
}

"""
input type for inserting data into table "bridge"
"""
input bridge_insert_input {
  architect: architect_obj_rel_insert_input
  architect_id: Int
  id: Int
  length_feet: Float
  length_meters: Float
  location: String
  name: String
}

"""aggregate max on columns"""
type bridge_max_fields {
  architect_id: Int
  id: Int
  length_feet: Float
  length_meters: Float
  location: String
  name: String
}

"""
order by max() on columns of table "bridge"
"""
input bridge_max_order_by {
  architect_id: order_by
  id: order_by
  length_feet: order_by
  length_meters: order_by
  location: order_by
  name: order_by
}

"""aggregate min on columns"""
type bridge_min_fields {
  architect_id: Int
  id: Int
  length_feet: Float
  length_meters: Float
  location: String
  name: String
}

"""
order by min() on columns of table "bridge"
"""
input bridge_min_order_by {
  architect_id: order_by
  id: order_by
  length_feet: order_by
  length_meters: order_by
  location: order_by
  name: order_by
}

"""
response of any mutation on the table "bridge"
"""
type bridge_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [bridge!]!
}

"""
input type for inserting object relation for remote table "bridge"
"""
input bridge_obj_rel_insert_input {
  data: bridge_insert_input!
  on_conflict: bridge_on_conflict
}

"""
on conflict condition type for table "bridge"
"""
input bridge_on_conflict {
  constraint: bridge_constraint!
  update_columns: [bridge_update_column!]!
  where: bridge_bool_exp
}

"""
ordering options when selecting data from "bridge"
"""
input bridge_order_by {
  architect: architect_order_by
  architect_id: order_by
  id: order_by
  length_feet: order_by
  length_meters: order_by
  location: order_by
  name: order_by
}

"""
primary key columns input for table: "bridge"
"""
input bridge_pk_columns_input {
  id: Int!
}

"""
select columns of table "bridge"
"""
enum bridge_select_column {
  """column name"""
  architect_id

  """column name"""
  id

  """column name"""
  length_feet

  """column name"""
  length_meters

  """column name"""
  location

  """column name"""
  name
}

"""
input type for updating data in table "bridge"
"""
input bridge_set_input {
  architect_id: Int
  id: Int
  length_feet: Float
  length_meters: Float
  location: String
  name: String
}

"""aggregate stddev on columns"""
type bridge_stddev_fields {
  architect_id: Float
  id: Float
  length_feet: Float
  length_meters: Float
}

"""
order by stddev() on columns of table "bridge"
"""
input bridge_stddev_order_by {
  architect_id: order_by
  id: order_by
  length_feet: order_by
  length_meters: order_by
}

"""aggregate stddev_pop on columns"""
type bridge_stddev_pop_fields {
  architect_id: Float
  id: Float
  length_feet: Float
  length_meters: Float
}

"""
order by stddev_pop() on columns of table "bridge"
"""
input bridge_stddev_pop_order_by {
  architect_id: order_by
  id: order_by
  length_feet: order_by
  length_meters: order_by
}

"""aggregate stddev_samp on columns"""
type bridge_stddev_samp_fields {
  architect_id: Float
  id: Float
  length_feet: Float
  length_meters: Float
}

"""
order by stddev_samp() on columns of table "bridge"
"""
input bridge_stddev_samp_order_by {
  architect_id: order_by
  id: order_by
  length_feet: order_by
  length_meters: order_by
}

"""aggregate sum on columns"""
type bridge_sum_fields {
  architect_id: Int
  id: Int
  length_feet: Float
  length_meters: Float
}

"""
order by sum() on columns of table "bridge"
"""
input bridge_sum_order_by {
  architect_id: order_by
  id: order_by
  length_feet: order_by
  length_meters: order_by
}

"""
update columns of table "bridge"
"""
enum bridge_update_column {
  """column name"""
  architect_id

  """column name"""
  id

  """column name"""
  length_feet

  """column name"""
  length_meters

  """column name"""
  location

  """column name"""
  name
}

"""aggregate var_pop on columns"""
type bridge_var_pop_fields {
  architect_id: Float
  id: Float
  length_feet: Float
  length_meters: Float
}

"""
order by var_pop() on columns of table "bridge"
"""
input bridge_var_pop_order_by {
  architect_id: order_by
  id: order_by
  length_feet: order_by
  length_meters: order_by
}

"""aggregate var_samp on columns"""
type bridge_var_samp_fields {
  architect_id: Float
  id: Float
  length_feet: Float
  length_meters: Float
}

"""
order by var_samp() on columns of table "bridge"
"""
input bridge_var_samp_order_by {
  architect_id: order_by
  id: order_by
  length_feet: order_by
  length_meters: order_by
}

"""aggregate variance on columns"""
type bridge_variance_fields {
  architect_id: Float
  id: Float
  length_feet: Float
  length_meters: Float
}

"""
order by variance() on columns of table "bridge"
"""
input bridge_variance_order_by {
  architect_id: order_by
  id: order_by
  length_feet: order_by
  length_meters: order_by
}

"""
expression to compare columns of type Float. All fields are combined with logical 'AND'.
"""
input Float_comparison_exp {
  _eq: Float
  _gt: Float
  _gte: Float
  _in: [Float!]
  _is_null: Boolean
  _lt: Float
  _lte: Float
  _neq: Float
  _nin: [Float!]
}

"""
expression to compare columns of type Int. All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""
columns and relationships of "mill"
"""
type mill {
  """An object relationship"""
  architect: architect
  architect_id: Int
  built_year: Int
  id: Int!
  location: String
  name: String
  notes: String
  type: String
}

"""
aggregated selection of "mill"
"""
type mill_aggregate {
  aggregate: mill_aggregate_fields
  nodes: [mill!]!
}

"""
aggregate fields of "mill"
"""
type mill_aggregate_fields {
  avg: mill_avg_fields
  count(columns: [mill_select_column!], distinct: Boolean): Int
  max: mill_max_fields
  min: mill_min_fields
  stddev: mill_stddev_fields
  stddev_pop: mill_stddev_pop_fields
  stddev_samp: mill_stddev_samp_fields
  sum: mill_sum_fields
  var_pop: mill_var_pop_fields
  var_samp: mill_var_samp_fields
  variance: mill_variance_fields
}

"""
order by aggregate values of table "mill"
"""
input mill_aggregate_order_by {
  avg: mill_avg_order_by
  count: order_by
  max: mill_max_order_by
  min: mill_min_order_by
  stddev: mill_stddev_order_by
  stddev_pop: mill_stddev_pop_order_by
  stddev_samp: mill_stddev_samp_order_by
  sum: mill_sum_order_by
  var_pop: mill_var_pop_order_by
  var_samp: mill_var_samp_order_by
  variance: mill_variance_order_by
}

"""
input type for inserting array relation for remote table "mill"
"""
input mill_arr_rel_insert_input {
  data: [mill_insert_input!]!
  on_conflict: mill_on_conflict
}

"""aggregate avg on columns"""
type mill_avg_fields {
  architect_id: Float
  built_year: Float
  id: Float
}

"""
order by avg() on columns of table "mill"
"""
input mill_avg_order_by {
  architect_id: order_by
  built_year: order_by
  id: order_by
}

"""
Boolean expression to filter rows from the table "mill". All fields are combined with a logical 'AND'.
"""
input mill_bool_exp {
  _and: [mill_bool_exp]
  _not: mill_bool_exp
  _or: [mill_bool_exp]
  architect: architect_bool_exp
  architect_id: Int_comparison_exp
  built_year: Int_comparison_exp
  id: Int_comparison_exp
  location: String_comparison_exp
  name: String_comparison_exp
  notes: String_comparison_exp
  type: String_comparison_exp
}

"""
unique or primary key constraints on table "mill"
"""
enum mill_constraint {
  """unique or primary key constraint"""
  idx_22408_sqlite_autoindex_mill_1
}

"""
input type for incrementing integer column in table "mill"
"""
input mill_inc_input {
  architect_id: Int
  built_year: Int
  id: Int
}

"""
input type for inserting data into table "mill"
"""
input mill_insert_input {
  architect: architect_obj_rel_insert_input
  architect_id: Int
  built_year: Int
  id: Int
  location: String
  name: String
  notes: String
  type: String
}

"""aggregate max on columns"""
type mill_max_fields {
  architect_id: Int
  built_year: Int
  id: Int
  location: String
  name: String
  notes: String
  type: String
}

"""
order by max() on columns of table "mill"
"""
input mill_max_order_by {
  architect_id: order_by
  built_year: order_by
  id: order_by
  location: order_by
  name: order_by
  notes: order_by
  type: order_by
}

"""aggregate min on columns"""
type mill_min_fields {
  architect_id: Int
  built_year: Int
  id: Int
  location: String
  name: String
  notes: String
  type: String
}

"""
order by min() on columns of table "mill"
"""
input mill_min_order_by {
  architect_id: order_by
  built_year: order_by
  id: order_by
  location: order_by
  name: order_by
  notes: order_by
  type: order_by
}

"""
response of any mutation on the table "mill"
"""
type mill_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [mill!]!
}

"""
input type for inserting object relation for remote table "mill"
"""
input mill_obj_rel_insert_input {
  data: mill_insert_input!
  on_conflict: mill_on_conflict
}

"""
on conflict condition type for table "mill"
"""
input mill_on_conflict {
  constraint: mill_constraint!
  update_columns: [mill_update_column!]!
  where: mill_bool_exp
}

"""
ordering options when selecting data from "mill"
"""
input mill_order_by {
  architect: architect_order_by
  architect_id: order_by
  built_year: order_by
  id: order_by
  location: order_by
  name: order_by
  notes: order_by
  type: order_by
}

"""
primary key columns input for table: "mill"
"""
input mill_pk_columns_input {
  id: Int!
}

"""
select columns of table "mill"
"""
enum mill_select_column {
  """column name"""
  architect_id

  """column name"""
  built_year

  """column name"""
  id

  """column name"""
  location

  """column name"""
  name

  """column name"""
  notes

  """column name"""
  type
}

"""
input type for updating data in table "mill"
"""
input mill_set_input {
  architect_id: Int
  built_year: Int
  id: Int
  location: String
  name: String
  notes: String
  type: String
}

"""aggregate stddev on columns"""
type mill_stddev_fields {
  architect_id: Float
  built_year: Float
  id: Float
}

"""
order by stddev() on columns of table "mill"
"""
input mill_stddev_order_by {
  architect_id: order_by
  built_year: order_by
  id: order_by
}

"""aggregate stddev_pop on columns"""
type mill_stddev_pop_fields {
  architect_id: Float
  built_year: Float
  id: Float
}

"""
order by stddev_pop() on columns of table "mill"
"""
input mill_stddev_pop_order_by {
  architect_id: order_by
  built_year: order_by
  id: order_by
}

"""aggregate stddev_samp on columns"""
type mill_stddev_samp_fields {
  architect_id: Float
  built_year: Float
  id: Float
}

"""
order by stddev_samp() on columns of table "mill"
"""
input mill_stddev_samp_order_by {
  architect_id: order_by
  built_year: order_by
  id: order_by
}

"""aggregate sum on columns"""
type mill_sum_fields {
  architect_id: Int
  built_year: Int
  id: Int
}

"""
order by sum() on columns of table "mill"
"""
input mill_sum_order_by {
  architect_id: order_by
  built_year: order_by
  id: order_by
}

"""
update columns of table "mill"
"""
enum mill_update_column {
  """column name"""
  architect_id

  """column name"""
  built_year

  """column name"""
  id

  """column name"""
  location

  """column name"""
  name

  """column name"""
  notes

  """column name"""
  type
}

"""aggregate var_pop on columns"""
type mill_var_pop_fields {
  architect_id: Float
  built_year: Float
  id: Float
}

"""
order by var_pop() on columns of table "mill"
"""
input mill_var_pop_order_by {
  architect_id: order_by
  built_year: order_by
  id: order_by
}

"""aggregate var_samp on columns"""
type mill_var_samp_fields {
  architect_id: Float
  built_year: Float
  id: Float
}

"""
order by var_samp() on columns of table "mill"
"""
input mill_var_samp_order_by {
  architect_id: order_by
  built_year: order_by
  id: order_by
}

"""aggregate variance on columns"""
type mill_variance_fields {
  architect_id: Float
  built_year: Float
  id: Float
}

"""
order by variance() on columns of table "mill"
"""
input mill_variance_order_by {
  architect_id: order_by
  built_year: order_by
  id: order_by
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "architect"
  """
  delete_architect(
    """filter the rows which have to be deleted"""
    where: architect_bool_exp!
  ): architect_mutation_response

  """
  delete single row from the table: "architect"
  """
  delete_architect_by_pk(id: Int!): architect

  """
  delete data from the table: "bridge"
  """
  delete_bridge(
    """filter the rows which have to be deleted"""
    where: bridge_bool_exp!
  ): bridge_mutation_response

  """
  delete single row from the table: "bridge"
  """
  delete_bridge_by_pk(id: Int!): bridge

  """
  delete data from the table: "mill"
  """
  delete_mill(
    """filter the rows which have to be deleted"""
    where: mill_bool_exp!
  ): mill_mutation_response

  """
  delete single row from the table: "mill"
  """
  delete_mill_by_pk(id: Int!): mill

  """
  insert data into the table: "architect"
  """
  insert_architect(
    """the rows to be inserted"""
    objects: [architect_insert_input!]!

    """on conflict condition"""
    on_conflict: architect_on_conflict
  ): architect_mutation_response

  """
  insert a single row into the table: "architect"
  """
  insert_architect_one(
    """the row to be inserted"""
    object: architect_insert_input!

    """on conflict condition"""
    on_conflict: architect_on_conflict
  ): architect

  """
  insert data into the table: "bridge"
  """
  insert_bridge(
    """the rows to be inserted"""
    objects: [bridge_insert_input!]!

    """on conflict condition"""
    on_conflict: bridge_on_conflict
  ): bridge_mutation_response

  """
  insert a single row into the table: "bridge"
  """
  insert_bridge_one(
    """the row to be inserted"""
    object: bridge_insert_input!

    """on conflict condition"""
    on_conflict: bridge_on_conflict
  ): bridge

  """
  insert data into the table: "mill"
  """
  insert_mill(
    """the rows to be inserted"""
    objects: [mill_insert_input!]!

    """on conflict condition"""
    on_conflict: mill_on_conflict
  ): mill_mutation_response

  """
  insert a single row into the table: "mill"
  """
  insert_mill_one(
    """the row to be inserted"""
    object: mill_insert_input!

    """on conflict condition"""
    on_conflict: mill_on_conflict
  ): mill

  """
  update data of the table: "architect"
  """
  update_architect(
    """increments the integer columns with given value of the filtered values"""
    _inc: architect_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: architect_set_input

    """filter the rows which have to be updated"""
    where: architect_bool_exp!
  ): architect_mutation_response

  """
  update single row of the table: "architect"
  """
  update_architect_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: architect_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: architect_set_input
    pk_columns: architect_pk_columns_input!
  ): architect

  """
  update data of the table: "bridge"
  """
  update_bridge(
    """increments the integer columns with given value of the filtered values"""
    _inc: bridge_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: bridge_set_input

    """filter the rows which have to be updated"""
    where: bridge_bool_exp!
  ): bridge_mutation_response

  """
  update single row of the table: "bridge"
  """
  update_bridge_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: bridge_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: bridge_set_input
    pk_columns: bridge_pk_columns_input!
  ): bridge

  """
  update data of the table: "mill"
  """
  update_mill(
    """increments the integer columns with given value of the filtered values"""
    _inc: mill_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: mill_set_input

    """filter the rows which have to be updated"""
    where: mill_bool_exp!
  ): mill_mutation_response

  """
  update single row of the table: "mill"
  """
  update_mill_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: mill_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: mill_set_input
    pk_columns: mill_pk_columns_input!
  ): mill
}

"""column ordering options"""
enum order_by {
  """in the ascending order, nulls last"""
  asc

  """in the ascending order, nulls first"""
  asc_nulls_first

  """in the ascending order, nulls last"""
  asc_nulls_last

  """in the descending order, nulls first"""
  desc

  """in the descending order, nulls first"""
  desc_nulls_first

  """in the descending order, nulls last"""
  desc_nulls_last
}

"""query root"""
type query_root {
  """
  fetch data from the table: "architect"
  """
  architect(
    """distinct select on columns"""
    distinct_on: [architect_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [architect_order_by!]

    """filter the rows returned"""
    where: architect_bool_exp
  ): [architect!]!

  """
  fetch aggregated fields from the table: "architect"
  """
  architect_aggregate(
    """distinct select on columns"""
    distinct_on: [architect_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [architect_order_by!]

    """filter the rows returned"""
    where: architect_bool_exp
  ): architect_aggregate!

  """fetch data from the table: "architect" using primary key columns"""
  architect_by_pk(id: Int!): architect

  """
  fetch data from the table: "bridge"
  """
  bridge(
    """distinct select on columns"""
    distinct_on: [bridge_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [bridge_order_by!]

    """filter the rows returned"""
    where: bridge_bool_exp
  ): [bridge!]!

  """
  fetch aggregated fields from the table: "bridge"
  """
  bridge_aggregate(
    """distinct select on columns"""
    distinct_on: [bridge_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [bridge_order_by!]

    """filter the rows returned"""
    where: bridge_bool_exp
  ): bridge_aggregate!

  """fetch data from the table: "bridge" using primary key columns"""
  bridge_by_pk(id: Int!): bridge

  """
  fetch data from the table: "mill"
  """
  mill(
    """distinct select on columns"""
    distinct_on: [mill_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [mill_order_by!]

    """filter the rows returned"""
    where: mill_bool_exp
  ): [mill!]!

  """
  fetch aggregated fields from the table: "mill"
  """
  mill_aggregate(
    """distinct select on columns"""
    distinct_on: [mill_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [mill_order_by!]

    """filter the rows returned"""
    where: mill_bool_exp
  ): mill_aggregate!

  """fetch data from the table: "mill" using primary key columns"""
  mill_by_pk(id: Int!): mill
}

"""
expression to compare columns of type String. All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String
  _ilike: String
  _in: [String!]
  _is_null: Boolean
  _like: String
  _lt: String
  _lte: String
  _neq: String
  _nilike: String
  _nin: [String!]
  _nlike: String
  _nsimilar: String
  _similar: String
}

"""subscription root"""
type subscription_root {
  """
  fetch data from the table: "architect"
  """
  architect(
    """distinct select on columns"""
    distinct_on: [architect_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [architect_order_by!]

    """filter the rows returned"""
    where: architect_bool_exp
  ): [architect!]!

  """
  fetch aggregated fields from the table: "architect"
  """
  architect_aggregate(
    """distinct select on columns"""
    distinct_on: [architect_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [architect_order_by!]

    """filter the rows returned"""
    where: architect_bool_exp
  ): architect_aggregate!

  """fetch data from the table: "architect" using primary key columns"""
  architect_by_pk(id: Int!): architect

  """
  fetch data from the table: "bridge"
  """
  bridge(
    """distinct select on columns"""
    distinct_on: [bridge_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [bridge_order_by!]

    """filter the rows returned"""
    where: bridge_bool_exp
  ): [bridge!]!

  """
  fetch aggregated fields from the table: "bridge"
  """
  bridge_aggregate(
    """distinct select on columns"""
    distinct_on: [bridge_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [bridge_order_by!]

    """filter the rows returned"""
    where: bridge_bool_exp
  ): bridge_aggregate!

  """fetch data from the table: "bridge" using primary key columns"""
  bridge_by_pk(id: Int!): bridge

  """
  fetch data from the table: "mill"
  """
  mill(
    """distinct select on columns"""
    distinct_on: [mill_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [mill_order_by!]

    """filter the rows returned"""
    where: mill_bool_exp
  ): [mill!]!

  """
  fetch aggregated fields from the table: "mill"
  """
  mill_aggregate(
    """distinct select on columns"""
    distinct_on: [mill_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [mill_order_by!]

    """filter the rows returned"""
    where: mill_bool_exp
  ): mill_aggregate!

  """fetch data from the table: "mill" using primary key columns"""
  mill_by_pk(id: Int!): mill
}
