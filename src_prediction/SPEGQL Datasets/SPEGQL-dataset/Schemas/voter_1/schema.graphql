schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""
Direct the client to resolve this field locally, either from the cache or local resolvers.
"""
directive @client(
  """
  When true, the client will never use the cache for this value. See
  https://www.apollographql.com/docs/react/essentials/local-state/#forcing-resolvers-with-clientalways-true
  """
  always: Boolean
) on FIELD | FRAGMENT_DEFINITION | INLINE_FRAGMENT

"""
Export this locally resolved field as a variable to be used in the remainder of this query. See
https://www.apollographql.com/docs/react/essentials/local-state/#using-client-fields-as-variables
"""
directive @export(
  """The variable name to export this field as."""
  as: String!
) on FIELD

"""
Specify a custom store key for this result. See
https://www.apollographql.com/docs/react/advanced/caching/#the-connection-directive
"""
directive @connection(
  """Specify the store key."""
  key: String!

  """
  An array of query argument names to include in the generated custom store key.
  """
  filter: [String!]
) on FIELD

"""
columns and relationships of "area_code_state"
"""
type area_code_state {
  area_code: bigint!
  state: String

  """An array relationship"""
  votes(
    """distinct select on columns"""
    distinct_on: [votes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [votes_order_by!]

    """filter the rows returned"""
    where: votes_bool_exp
  ): [votes!]!

  """An aggregated array relationship"""
  votes_aggregate(
    """distinct select on columns"""
    distinct_on: [votes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [votes_order_by!]

    """filter the rows returned"""
    where: votes_bool_exp
  ): votes_aggregate!
}

"""
aggregated selection of "area_code_state"
"""
type area_code_state_aggregate {
  aggregate: area_code_state_aggregate_fields
  nodes: [area_code_state!]!
}

"""
aggregate fields of "area_code_state"
"""
type area_code_state_aggregate_fields {
  avg: area_code_state_avg_fields
  count(columns: [area_code_state_select_column!], distinct: Boolean): Int
  max: area_code_state_max_fields
  min: area_code_state_min_fields
  stddev: area_code_state_stddev_fields
  stddev_pop: area_code_state_stddev_pop_fields
  stddev_samp: area_code_state_stddev_samp_fields
  sum: area_code_state_sum_fields
  var_pop: area_code_state_var_pop_fields
  var_samp: area_code_state_var_samp_fields
  variance: area_code_state_variance_fields
}

"""
order by aggregate values of table "area_code_state"
"""
input area_code_state_aggregate_order_by {
  avg: area_code_state_avg_order_by
  count: order_by
  max: area_code_state_max_order_by
  min: area_code_state_min_order_by
  stddev: area_code_state_stddev_order_by
  stddev_pop: area_code_state_stddev_pop_order_by
  stddev_samp: area_code_state_stddev_samp_order_by
  sum: area_code_state_sum_order_by
  var_pop: area_code_state_var_pop_order_by
  var_samp: area_code_state_var_samp_order_by
  variance: area_code_state_variance_order_by
}

"""
input type for inserting array relation for remote table "area_code_state"
"""
input area_code_state_arr_rel_insert_input {
  data: [area_code_state_insert_input!]!
  on_conflict: area_code_state_on_conflict
}

"""aggregate avg on columns"""
type area_code_state_avg_fields {
  area_code: Float
}

"""
order by avg() on columns of table "area_code_state"
"""
input area_code_state_avg_order_by {
  area_code: order_by
}

"""
Boolean expression to filter rows from the table "area_code_state". All fields are combined with a logical 'AND'.
"""
input area_code_state_bool_exp {
  _and: [area_code_state_bool_exp]
  _not: area_code_state_bool_exp
  _or: [area_code_state_bool_exp]
  area_code: bigint_comparison_exp
  state: String_comparison_exp
  votes: votes_bool_exp
}

"""
unique or primary key constraints on table "area_code_state"
"""
enum area_code_state_constraint {
  """unique or primary key constraint"""
  idx_17146_area_code_state_pkey
}

"""
input type for incrementing integer column in table "area_code_state"
"""
input area_code_state_inc_input {
  area_code: bigint
}

"""
input type for inserting data into table "area_code_state"
"""
input area_code_state_insert_input {
  area_code: bigint
  state: String
  votes: votes_arr_rel_insert_input
}

"""aggregate max on columns"""
type area_code_state_max_fields {
  area_code: bigint
  state: String
}

"""
order by max() on columns of table "area_code_state"
"""
input area_code_state_max_order_by {
  area_code: order_by
  state: order_by
}

"""aggregate min on columns"""
type area_code_state_min_fields {
  area_code: bigint
  state: String
}

"""
order by min() on columns of table "area_code_state"
"""
input area_code_state_min_order_by {
  area_code: order_by
  state: order_by
}

"""
response of any mutation on the table "area_code_state"
"""
type area_code_state_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [area_code_state!]!
}

"""
input type for inserting object relation for remote table "area_code_state"
"""
input area_code_state_obj_rel_insert_input {
  data: area_code_state_insert_input!
  on_conflict: area_code_state_on_conflict
}

"""
on conflict condition type for table "area_code_state"
"""
input area_code_state_on_conflict {
  constraint: area_code_state_constraint!
  update_columns: [area_code_state_update_column!]!
  where: area_code_state_bool_exp
}

"""
ordering options when selecting data from "area_code_state"
"""
input area_code_state_order_by {
  area_code: order_by
  state: order_by
  votes_aggregate: votes_aggregate_order_by
}

"""
primary key columns input for table: "area_code_state"
"""
input area_code_state_pk_columns_input {
  area_code: bigint!
}

"""
select columns of table "area_code_state"
"""
enum area_code_state_select_column {
  """column name"""
  area_code

  """column name"""
  state
}

"""
input type for updating data in table "area_code_state"
"""
input area_code_state_set_input {
  area_code: bigint
  state: String
}

"""aggregate stddev on columns"""
type area_code_state_stddev_fields {
  area_code: Float
}

"""
order by stddev() on columns of table "area_code_state"
"""
input area_code_state_stddev_order_by {
  area_code: order_by
}

"""aggregate stddev_pop on columns"""
type area_code_state_stddev_pop_fields {
  area_code: Float
}

"""
order by stddev_pop() on columns of table "area_code_state"
"""
input area_code_state_stddev_pop_order_by {
  area_code: order_by
}

"""aggregate stddev_samp on columns"""
type area_code_state_stddev_samp_fields {
  area_code: Float
}

"""
order by stddev_samp() on columns of table "area_code_state"
"""
input area_code_state_stddev_samp_order_by {
  area_code: order_by
}

"""aggregate sum on columns"""
type area_code_state_sum_fields {
  area_code: bigint
}

"""
order by sum() on columns of table "area_code_state"
"""
input area_code_state_sum_order_by {
  area_code: order_by
}

"""
update columns of table "area_code_state"
"""
enum area_code_state_update_column {
  """column name"""
  area_code

  """column name"""
  state
}

"""aggregate var_pop on columns"""
type area_code_state_var_pop_fields {
  area_code: Float
}

"""
order by var_pop() on columns of table "area_code_state"
"""
input area_code_state_var_pop_order_by {
  area_code: order_by
}

"""aggregate var_samp on columns"""
type area_code_state_var_samp_fields {
  area_code: Float
}

"""
order by var_samp() on columns of table "area_code_state"
"""
input area_code_state_var_samp_order_by {
  area_code: order_by
}

"""aggregate variance on columns"""
type area_code_state_variance_fields {
  area_code: Float
}

"""
order by variance() on columns of table "area_code_state"
"""
input area_code_state_variance_order_by {
  area_code: order_by
}

scalar bigint

"""
expression to compare columns of type bigint. All fields are combined with logical 'AND'.
"""
input bigint_comparison_exp {
  _eq: bigint
  _gt: bigint
  _gte: bigint
  _in: [bigint!]
  _is_null: Boolean
  _lt: bigint
  _lte: bigint
  _neq: bigint
  _nin: [bigint!]
}

"""
columns and relationships of "contestants"
"""
type contestants {
  contestant_name: String
  contestant_number: bigint!

  """An array relationship"""
  votes(
    """distinct select on columns"""
    distinct_on: [votes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [votes_order_by!]

    """filter the rows returned"""
    where: votes_bool_exp
  ): [votes!]!

  """An aggregated array relationship"""
  votes_aggregate(
    """distinct select on columns"""
    distinct_on: [votes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [votes_order_by!]

    """filter the rows returned"""
    where: votes_bool_exp
  ): votes_aggregate!
}

"""
aggregated selection of "contestants"
"""
type contestants_aggregate {
  aggregate: contestants_aggregate_fields
  nodes: [contestants!]!
}

"""
aggregate fields of "contestants"
"""
type contestants_aggregate_fields {
  avg: contestants_avg_fields
  count(columns: [contestants_select_column!], distinct: Boolean): Int
  max: contestants_max_fields
  min: contestants_min_fields
  stddev: contestants_stddev_fields
  stddev_pop: contestants_stddev_pop_fields
  stddev_samp: contestants_stddev_samp_fields
  sum: contestants_sum_fields
  var_pop: contestants_var_pop_fields
  var_samp: contestants_var_samp_fields
  variance: contestants_variance_fields
}

"""
order by aggregate values of table "contestants"
"""
input contestants_aggregate_order_by {
  avg: contestants_avg_order_by
  count: order_by
  max: contestants_max_order_by
  min: contestants_min_order_by
  stddev: contestants_stddev_order_by
  stddev_pop: contestants_stddev_pop_order_by
  stddev_samp: contestants_stddev_samp_order_by
  sum: contestants_sum_order_by
  var_pop: contestants_var_pop_order_by
  var_samp: contestants_var_samp_order_by
  variance: contestants_variance_order_by
}

"""
input type for inserting array relation for remote table "contestants"
"""
input contestants_arr_rel_insert_input {
  data: [contestants_insert_input!]!
  on_conflict: contestants_on_conflict
}

"""aggregate avg on columns"""
type contestants_avg_fields {
  contestant_number: Float
}

"""
order by avg() on columns of table "contestants"
"""
input contestants_avg_order_by {
  contestant_number: order_by
}

"""
Boolean expression to filter rows from the table "contestants". All fields are combined with a logical 'AND'.
"""
input contestants_bool_exp {
  _and: [contestants_bool_exp]
  _not: contestants_bool_exp
  _or: [contestants_bool_exp]
  contestant_name: String_comparison_exp
  contestant_number: bigint_comparison_exp
  votes: votes_bool_exp
}

"""
unique or primary key constraints on table "contestants"
"""
enum contestants_constraint {
  """unique or primary key constraint"""
  idx_17152_contestants_pkey
}

"""
input type for incrementing integer column in table "contestants"
"""
input contestants_inc_input {
  contestant_number: bigint
}

"""
input type for inserting data into table "contestants"
"""
input contestants_insert_input {
  contestant_name: String
  contestant_number: bigint
  votes: votes_arr_rel_insert_input
}

"""aggregate max on columns"""
type contestants_max_fields {
  contestant_name: String
  contestant_number: bigint
}

"""
order by max() on columns of table "contestants"
"""
input contestants_max_order_by {
  contestant_name: order_by
  contestant_number: order_by
}

"""aggregate min on columns"""
type contestants_min_fields {
  contestant_name: String
  contestant_number: bigint
}

"""
order by min() on columns of table "contestants"
"""
input contestants_min_order_by {
  contestant_name: order_by
  contestant_number: order_by
}

"""
response of any mutation on the table "contestants"
"""
type contestants_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [contestants!]!
}

"""
input type for inserting object relation for remote table "contestants"
"""
input contestants_obj_rel_insert_input {
  data: contestants_insert_input!
  on_conflict: contestants_on_conflict
}

"""
on conflict condition type for table "contestants"
"""
input contestants_on_conflict {
  constraint: contestants_constraint!
  update_columns: [contestants_update_column!]!
  where: contestants_bool_exp
}

"""
ordering options when selecting data from "contestants"
"""
input contestants_order_by {
  contestant_name: order_by
  contestant_number: order_by
  votes_aggregate: votes_aggregate_order_by
}

"""
primary key columns input for table: "contestants"
"""
input contestants_pk_columns_input {
  contestant_number: bigint!
}

"""
select columns of table "contestants"
"""
enum contestants_select_column {
  """column name"""
  contestant_name

  """column name"""
  contestant_number
}

"""
input type for updating data in table "contestants"
"""
input contestants_set_input {
  contestant_name: String
  contestant_number: bigint
}

"""aggregate stddev on columns"""
type contestants_stddev_fields {
  contestant_number: Float
}

"""
order by stddev() on columns of table "contestants"
"""
input contestants_stddev_order_by {
  contestant_number: order_by
}

"""aggregate stddev_pop on columns"""
type contestants_stddev_pop_fields {
  contestant_number: Float
}

"""
order by stddev_pop() on columns of table "contestants"
"""
input contestants_stddev_pop_order_by {
  contestant_number: order_by
}

"""aggregate stddev_samp on columns"""
type contestants_stddev_samp_fields {
  contestant_number: Float
}

"""
order by stddev_samp() on columns of table "contestants"
"""
input contestants_stddev_samp_order_by {
  contestant_number: order_by
}

"""aggregate sum on columns"""
type contestants_sum_fields {
  contestant_number: bigint
}

"""
order by sum() on columns of table "contestants"
"""
input contestants_sum_order_by {
  contestant_number: order_by
}

"""
update columns of table "contestants"
"""
enum contestants_update_column {
  """column name"""
  contestant_name

  """column name"""
  contestant_number
}

"""aggregate var_pop on columns"""
type contestants_var_pop_fields {
  contestant_number: Float
}

"""
order by var_pop() on columns of table "contestants"
"""
input contestants_var_pop_order_by {
  contestant_number: order_by
}

"""aggregate var_samp on columns"""
type contestants_var_samp_fields {
  contestant_number: Float
}

"""
order by var_samp() on columns of table "contestants"
"""
input contestants_var_samp_order_by {
  contestant_number: order_by
}

"""aggregate variance on columns"""
type contestants_variance_fields {
  contestant_number: Float
}

"""
order by variance() on columns of table "contestants"
"""
input contestants_variance_order_by {
  contestant_number: order_by
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "area_code_state"
  """
  delete_area_code_state(
    """filter the rows which have to be deleted"""
    where: area_code_state_bool_exp!
  ): area_code_state_mutation_response

  """
  delete single row from the table: "area_code_state"
  """
  delete_area_code_state_by_pk(area_code: bigint!): area_code_state

  """
  delete data from the table: "contestants"
  """
  delete_contestants(
    """filter the rows which have to be deleted"""
    where: contestants_bool_exp!
  ): contestants_mutation_response

  """
  delete single row from the table: "contestants"
  """
  delete_contestants_by_pk(contestant_number: bigint!): contestants

  """
  delete data from the table: "votes"
  """
  delete_votes(
    """filter the rows which have to be deleted"""
    where: votes_bool_exp!
  ): votes_mutation_response

  """
  delete single row from the table: "votes"
  """
  delete_votes_by_pk(vote_id: bigint!): votes

  """
  insert data into the table: "area_code_state"
  """
  insert_area_code_state(
    """the rows to be inserted"""
    objects: [area_code_state_insert_input!]!

    """on conflict condition"""
    on_conflict: area_code_state_on_conflict
  ): area_code_state_mutation_response

  """
  insert a single row into the table: "area_code_state"
  """
  insert_area_code_state_one(
    """the row to be inserted"""
    object: area_code_state_insert_input!

    """on conflict condition"""
    on_conflict: area_code_state_on_conflict
  ): area_code_state

  """
  insert data into the table: "contestants"
  """
  insert_contestants(
    """the rows to be inserted"""
    objects: [contestants_insert_input!]!

    """on conflict condition"""
    on_conflict: contestants_on_conflict
  ): contestants_mutation_response

  """
  insert a single row into the table: "contestants"
  """
  insert_contestants_one(
    """the row to be inserted"""
    object: contestants_insert_input!

    """on conflict condition"""
    on_conflict: contestants_on_conflict
  ): contestants

  """
  insert data into the table: "votes"
  """
  insert_votes(
    """the rows to be inserted"""
    objects: [votes_insert_input!]!

    """on conflict condition"""
    on_conflict: votes_on_conflict
  ): votes_mutation_response

  """
  insert a single row into the table: "votes"
  """
  insert_votes_one(
    """the row to be inserted"""
    object: votes_insert_input!

    """on conflict condition"""
    on_conflict: votes_on_conflict
  ): votes

  """
  update data of the table: "area_code_state"
  """
  update_area_code_state(
    """increments the integer columns with given value of the filtered values"""
    _inc: area_code_state_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: area_code_state_set_input

    """filter the rows which have to be updated"""
    where: area_code_state_bool_exp!
  ): area_code_state_mutation_response

  """
  update single row of the table: "area_code_state"
  """
  update_area_code_state_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: area_code_state_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: area_code_state_set_input
    pk_columns: area_code_state_pk_columns_input!
  ): area_code_state

  """
  update data of the table: "contestants"
  """
  update_contestants(
    """increments the integer columns with given value of the filtered values"""
    _inc: contestants_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: contestants_set_input

    """filter the rows which have to be updated"""
    where: contestants_bool_exp!
  ): contestants_mutation_response

  """
  update single row of the table: "contestants"
  """
  update_contestants_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: contestants_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: contestants_set_input
    pk_columns: contestants_pk_columns_input!
  ): contestants

  """
  update data of the table: "votes"
  """
  update_votes(
    """increments the integer columns with given value of the filtered values"""
    _inc: votes_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: votes_set_input

    """filter the rows which have to be updated"""
    where: votes_bool_exp!
  ): votes_mutation_response

  """
  update single row of the table: "votes"
  """
  update_votes_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: votes_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: votes_set_input
    pk_columns: votes_pk_columns_input!
  ): votes
}

"""column ordering options"""
enum order_by {
  """in the ascending order, nulls last"""
  asc

  """in the ascending order, nulls first"""
  asc_nulls_first

  """in the ascending order, nulls last"""
  asc_nulls_last

  """in the descending order, nulls first"""
  desc

  """in the descending order, nulls first"""
  desc_nulls_first

  """in the descending order, nulls last"""
  desc_nulls_last
}

"""query root"""
type query_root {
  """
  fetch data from the table: "area_code_state"
  """
  area_code_state(
    """distinct select on columns"""
    distinct_on: [area_code_state_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [area_code_state_order_by!]

    """filter the rows returned"""
    where: area_code_state_bool_exp
  ): [area_code_state!]!

  """
  fetch aggregated fields from the table: "area_code_state"
  """
  area_code_state_aggregate(
    """distinct select on columns"""
    distinct_on: [area_code_state_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [area_code_state_order_by!]

    """filter the rows returned"""
    where: area_code_state_bool_exp
  ): area_code_state_aggregate!

  """fetch data from the table: "area_code_state" using primary key columns"""
  area_code_state_by_pk(area_code: bigint!): area_code_state

  """
  fetch data from the table: "contestants"
  """
  contestants(
    """distinct select on columns"""
    distinct_on: [contestants_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [contestants_order_by!]

    """filter the rows returned"""
    where: contestants_bool_exp
  ): [contestants!]!

  """
  fetch aggregated fields from the table: "contestants"
  """
  contestants_aggregate(
    """distinct select on columns"""
    distinct_on: [contestants_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [contestants_order_by!]

    """filter the rows returned"""
    where: contestants_bool_exp
  ): contestants_aggregate!

  """fetch data from the table: "contestants" using primary key columns"""
  contestants_by_pk(contestant_number: bigint!): contestants

  """
  fetch data from the table: "votes"
  """
  votes(
    """distinct select on columns"""
    distinct_on: [votes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [votes_order_by!]

    """filter the rows returned"""
    where: votes_bool_exp
  ): [votes!]!

  """
  fetch aggregated fields from the table: "votes"
  """
  votes_aggregate(
    """distinct select on columns"""
    distinct_on: [votes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [votes_order_by!]

    """filter the rows returned"""
    where: votes_bool_exp
  ): votes_aggregate!

  """fetch data from the table: "votes" using primary key columns"""
  votes_by_pk(vote_id: bigint!): votes
}

"""
expression to compare columns of type String. All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String
  _ilike: String
  _in: [String!]
  _is_null: Boolean
  _like: String
  _lt: String
  _lte: String
  _neq: String
  _nilike: String
  _nin: [String!]
  _nlike: String
  _nsimilar: String
  _similar: String
}

"""subscription root"""
type subscription_root {
  """
  fetch data from the table: "area_code_state"
  """
  area_code_state(
    """distinct select on columns"""
    distinct_on: [area_code_state_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [area_code_state_order_by!]

    """filter the rows returned"""
    where: area_code_state_bool_exp
  ): [area_code_state!]!

  """
  fetch aggregated fields from the table: "area_code_state"
  """
  area_code_state_aggregate(
    """distinct select on columns"""
    distinct_on: [area_code_state_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [area_code_state_order_by!]

    """filter the rows returned"""
    where: area_code_state_bool_exp
  ): area_code_state_aggregate!

  """fetch data from the table: "area_code_state" using primary key columns"""
  area_code_state_by_pk(area_code: bigint!): area_code_state

  """
  fetch data from the table: "contestants"
  """
  contestants(
    """distinct select on columns"""
    distinct_on: [contestants_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [contestants_order_by!]

    """filter the rows returned"""
    where: contestants_bool_exp
  ): [contestants!]!

  """
  fetch aggregated fields from the table: "contestants"
  """
  contestants_aggregate(
    """distinct select on columns"""
    distinct_on: [contestants_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [contestants_order_by!]

    """filter the rows returned"""
    where: contestants_bool_exp
  ): contestants_aggregate!

  """fetch data from the table: "contestants" using primary key columns"""
  contestants_by_pk(contestant_number: bigint!): contestants

  """
  fetch data from the table: "votes"
  """
  votes(
    """distinct select on columns"""
    distinct_on: [votes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [votes_order_by!]

    """filter the rows returned"""
    where: votes_bool_exp
  ): [votes!]!

  """
  fetch aggregated fields from the table: "votes"
  """
  votes_aggregate(
    """distinct select on columns"""
    distinct_on: [votes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [votes_order_by!]

    """filter the rows returned"""
    where: votes_bool_exp
  ): votes_aggregate!

  """fetch data from the table: "votes" using primary key columns"""
  votes_by_pk(vote_id: bigint!): votes
}

scalar timestamptz

"""
expression to compare columns of type timestamptz. All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}

"""
columns and relationships of "votes"
"""
type votes {
  """An array relationship"""
  area_code_state(
    """distinct select on columns"""
    distinct_on: [area_code_state_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [area_code_state_order_by!]

    """filter the rows returned"""
    where: area_code_state_bool_exp
  ): [area_code_state!]!

  """An aggregated array relationship"""
  area_code_state_aggregate(
    """distinct select on columns"""
    distinct_on: [area_code_state_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [area_code_state_order_by!]

    """filter the rows returned"""
    where: area_code_state_bool_exp
  ): area_code_state_aggregate!

  """An object relationship"""
  contestant: contestants
  contestant_number: bigint
  created: timestamptz
  phone_number: bigint
  state: String
  vote_id: bigint!
}

"""
aggregated selection of "votes"
"""
type votes_aggregate {
  aggregate: votes_aggregate_fields
  nodes: [votes!]!
}

"""
aggregate fields of "votes"
"""
type votes_aggregate_fields {
  avg: votes_avg_fields
  count(columns: [votes_select_column!], distinct: Boolean): Int
  max: votes_max_fields
  min: votes_min_fields
  stddev: votes_stddev_fields
  stddev_pop: votes_stddev_pop_fields
  stddev_samp: votes_stddev_samp_fields
  sum: votes_sum_fields
  var_pop: votes_var_pop_fields
  var_samp: votes_var_samp_fields
  variance: votes_variance_fields
}

"""
order by aggregate values of table "votes"
"""
input votes_aggregate_order_by {
  avg: votes_avg_order_by
  count: order_by
  max: votes_max_order_by
  min: votes_min_order_by
  stddev: votes_stddev_order_by
  stddev_pop: votes_stddev_pop_order_by
  stddev_samp: votes_stddev_samp_order_by
  sum: votes_sum_order_by
  var_pop: votes_var_pop_order_by
  var_samp: votes_var_samp_order_by
  variance: votes_variance_order_by
}

"""
input type for inserting array relation for remote table "votes"
"""
input votes_arr_rel_insert_input {
  data: [votes_insert_input!]!
  on_conflict: votes_on_conflict
}

"""aggregate avg on columns"""
type votes_avg_fields {
  contestant_number: Float
  phone_number: Float
  vote_id: Float
}

"""
order by avg() on columns of table "votes"
"""
input votes_avg_order_by {
  contestant_number: order_by
  phone_number: order_by
  vote_id: order_by
}

"""
Boolean expression to filter rows from the table "votes". All fields are combined with a logical 'AND'.
"""
input votes_bool_exp {
  _and: [votes_bool_exp]
  _not: votes_bool_exp
  _or: [votes_bool_exp]
  area_code_state: area_code_state_bool_exp
  contestant: contestants_bool_exp
  contestant_number: bigint_comparison_exp
  created: timestamptz_comparison_exp
  phone_number: bigint_comparison_exp
  state: String_comparison_exp
  vote_id: bigint_comparison_exp
}

"""
unique or primary key constraints on table "votes"
"""
enum votes_constraint {
  """unique or primary key constraint"""
  idx_17158_votes_pkey
}

"""
input type for incrementing integer column in table "votes"
"""
input votes_inc_input {
  contestant_number: bigint
  phone_number: bigint
  vote_id: bigint
}

"""
input type for inserting data into table "votes"
"""
input votes_insert_input {
  area_code_state: area_code_state_arr_rel_insert_input
  contestant: contestants_obj_rel_insert_input
  contestant_number: bigint
  created: timestamptz
  phone_number: bigint
  state: String
  vote_id: bigint
}

"""aggregate max on columns"""
type votes_max_fields {
  contestant_number: bigint
  created: timestamptz
  phone_number: bigint
  state: String
  vote_id: bigint
}

"""
order by max() on columns of table "votes"
"""
input votes_max_order_by {
  contestant_number: order_by
  created: order_by
  phone_number: order_by
  state: order_by
  vote_id: order_by
}

"""aggregate min on columns"""
type votes_min_fields {
  contestant_number: bigint
  created: timestamptz
  phone_number: bigint
  state: String
  vote_id: bigint
}

"""
order by min() on columns of table "votes"
"""
input votes_min_order_by {
  contestant_number: order_by
  created: order_by
  phone_number: order_by
  state: order_by
  vote_id: order_by
}

"""
response of any mutation on the table "votes"
"""
type votes_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [votes!]!
}

"""
input type for inserting object relation for remote table "votes"
"""
input votes_obj_rel_insert_input {
  data: votes_insert_input!
  on_conflict: votes_on_conflict
}

"""
on conflict condition type for table "votes"
"""
input votes_on_conflict {
  constraint: votes_constraint!
  update_columns: [votes_update_column!]!
  where: votes_bool_exp
}

"""
ordering options when selecting data from "votes"
"""
input votes_order_by {
  area_code_state_aggregate: area_code_state_aggregate_order_by
  contestant: contestants_order_by
  contestant_number: order_by
  created: order_by
  phone_number: order_by
  state: order_by
  vote_id: order_by
}

"""
primary key columns input for table: "votes"
"""
input votes_pk_columns_input {
  vote_id: bigint!
}

"""
select columns of table "votes"
"""
enum votes_select_column {
  """column name"""
  contestant_number

  """column name"""
  created

  """column name"""
  phone_number

  """column name"""
  state

  """column name"""
  vote_id
}

"""
input type for updating data in table "votes"
"""
input votes_set_input {
  contestant_number: bigint
  created: timestamptz
  phone_number: bigint
  state: String
  vote_id: bigint
}

"""aggregate stddev on columns"""
type votes_stddev_fields {
  contestant_number: Float
  phone_number: Float
  vote_id: Float
}

"""
order by stddev() on columns of table "votes"
"""
input votes_stddev_order_by {
  contestant_number: order_by
  phone_number: order_by
  vote_id: order_by
}

"""aggregate stddev_pop on columns"""
type votes_stddev_pop_fields {
  contestant_number: Float
  phone_number: Float
  vote_id: Float
}

"""
order by stddev_pop() on columns of table "votes"
"""
input votes_stddev_pop_order_by {
  contestant_number: order_by
  phone_number: order_by
  vote_id: order_by
}

"""aggregate stddev_samp on columns"""
type votes_stddev_samp_fields {
  contestant_number: Float
  phone_number: Float
  vote_id: Float
}

"""
order by stddev_samp() on columns of table "votes"
"""
input votes_stddev_samp_order_by {
  contestant_number: order_by
  phone_number: order_by
  vote_id: order_by
}

"""aggregate sum on columns"""
type votes_sum_fields {
  contestant_number: bigint
  phone_number: bigint
  vote_id: bigint
}

"""
order by sum() on columns of table "votes"
"""
input votes_sum_order_by {
  contestant_number: order_by
  phone_number: order_by
  vote_id: order_by
}

"""
update columns of table "votes"
"""
enum votes_update_column {
  """column name"""
  contestant_number

  """column name"""
  created

  """column name"""
  phone_number

  """column name"""
  state

  """column name"""
  vote_id
}

"""aggregate var_pop on columns"""
type votes_var_pop_fields {
  contestant_number: Float
  phone_number: Float
  vote_id: Float
}

"""
order by var_pop() on columns of table "votes"
"""
input votes_var_pop_order_by {
  contestant_number: order_by
  phone_number: order_by
  vote_id: order_by
}

"""aggregate var_samp on columns"""
type votes_var_samp_fields {
  contestant_number: Float
  phone_number: Float
  vote_id: Float
}

"""
order by var_samp() on columns of table "votes"
"""
input votes_var_samp_order_by {
  contestant_number: order_by
  phone_number: order_by
  vote_id: order_by
}

"""aggregate variance on columns"""
type votes_variance_fields {
  contestant_number: Float
  phone_number: Float
  vote_id: Float
}

"""
order by variance() on columns of table "votes"
"""
input votes_variance_order_by {
  contestant_number: order_by
  phone_number: order_by
  vote_id: order_by
}
