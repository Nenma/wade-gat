schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""
Direct the client to resolve this field locally, either from the cache or local resolvers.
"""
directive @client(
  """
  When true, the client will never use the cache for this value. See
  https://www.apollographql.com/docs/react/essentials/local-state/#forcing-resolvers-with-clientalways-true
  """
  always: Boolean
) on FIELD | FRAGMENT_DEFINITION | INLINE_FRAGMENT

"""
Export this locally resolved field as a variable to be used in the remainder of this query. See
https://www.apollographql.com/docs/react/essentials/local-state/#using-client-fields-as-variables
"""
directive @export(
  """The variable name to export this field as."""
  as: String!
) on FIELD

"""
Specify a custom store key for this result. See
https://www.apollographql.com/docs/react/advanced/caching/#the-connection-directive
"""
directive @connection(
  """Specify the store key."""
  key: String!

  """
  An array of query argument names to include in the generated custom store key.
  """
  filter: [String!]
) on FIELD

"""
columns and relationships of "benefits_overpayments"
"""
type benefits_overpayments {
  cmi_cross_ref_id: bigint

  """An object relationship"""
  cmi_cross_reference: cmi_cross_references
  council_tax_id: bigint!
}

"""
aggregated selection of "benefits_overpayments"
"""
type benefits_overpayments_aggregate {
  aggregate: benefits_overpayments_aggregate_fields
  nodes: [benefits_overpayments!]!
}

"""
aggregate fields of "benefits_overpayments"
"""
type benefits_overpayments_aggregate_fields {
  avg: benefits_overpayments_avg_fields
  count(columns: [benefits_overpayments_select_column!], distinct: Boolean): Int
  max: benefits_overpayments_max_fields
  min: benefits_overpayments_min_fields
  stddev: benefits_overpayments_stddev_fields
  stddev_pop: benefits_overpayments_stddev_pop_fields
  stddev_samp: benefits_overpayments_stddev_samp_fields
  sum: benefits_overpayments_sum_fields
  var_pop: benefits_overpayments_var_pop_fields
  var_samp: benefits_overpayments_var_samp_fields
  variance: benefits_overpayments_variance_fields
}

"""
order by aggregate values of table "benefits_overpayments"
"""
input benefits_overpayments_aggregate_order_by {
  avg: benefits_overpayments_avg_order_by
  count: order_by
  max: benefits_overpayments_max_order_by
  min: benefits_overpayments_min_order_by
  stddev: benefits_overpayments_stddev_order_by
  stddev_pop: benefits_overpayments_stddev_pop_order_by
  stddev_samp: benefits_overpayments_stddev_samp_order_by
  sum: benefits_overpayments_sum_order_by
  var_pop: benefits_overpayments_var_pop_order_by
  var_samp: benefits_overpayments_var_samp_order_by
  variance: benefits_overpayments_variance_order_by
}

"""
input type for inserting array relation for remote table "benefits_overpayments"
"""
input benefits_overpayments_arr_rel_insert_input {
  data: [benefits_overpayments_insert_input!]!
  on_conflict: benefits_overpayments_on_conflict
}

"""aggregate avg on columns"""
type benefits_overpayments_avg_fields {
  cmi_cross_ref_id: Float
  council_tax_id: Float
}

"""
order by avg() on columns of table "benefits_overpayments"
"""
input benefits_overpayments_avg_order_by {
  cmi_cross_ref_id: order_by
  council_tax_id: order_by
}

"""
Boolean expression to filter rows from the table "benefits_overpayments". All fields are combined with a logical 'AND'.
"""
input benefits_overpayments_bool_exp {
  _and: [benefits_overpayments_bool_exp]
  _not: benefits_overpayments_bool_exp
  _or: [benefits_overpayments_bool_exp]
  cmi_cross_ref_id: bigint_comparison_exp
  cmi_cross_reference: cmi_cross_references_bool_exp
  council_tax_id: bigint_comparison_exp
}

"""
unique or primary key constraints on table "benefits_overpayments"
"""
enum benefits_overpayments_constraint {
  """unique or primary key constraint"""
  idx_25245_benefits_overpayments_pkey
}

"""
input type for incrementing integer column in table "benefits_overpayments"
"""
input benefits_overpayments_inc_input {
  cmi_cross_ref_id: bigint
  council_tax_id: bigint
}

"""
input type for inserting data into table "benefits_overpayments"
"""
input benefits_overpayments_insert_input {
  cmi_cross_ref_id: bigint
  cmi_cross_reference: cmi_cross_references_obj_rel_insert_input
  council_tax_id: bigint
}

"""aggregate max on columns"""
type benefits_overpayments_max_fields {
  cmi_cross_ref_id: bigint
  council_tax_id: bigint
}

"""
order by max() on columns of table "benefits_overpayments"
"""
input benefits_overpayments_max_order_by {
  cmi_cross_ref_id: order_by
  council_tax_id: order_by
}

"""aggregate min on columns"""
type benefits_overpayments_min_fields {
  cmi_cross_ref_id: bigint
  council_tax_id: bigint
}

"""
order by min() on columns of table "benefits_overpayments"
"""
input benefits_overpayments_min_order_by {
  cmi_cross_ref_id: order_by
  council_tax_id: order_by
}

"""
response of any mutation on the table "benefits_overpayments"
"""
type benefits_overpayments_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [benefits_overpayments!]!
}

"""
input type for inserting object relation for remote table "benefits_overpayments"
"""
input benefits_overpayments_obj_rel_insert_input {
  data: benefits_overpayments_insert_input!
  on_conflict: benefits_overpayments_on_conflict
}

"""
on conflict condition type for table "benefits_overpayments"
"""
input benefits_overpayments_on_conflict {
  constraint: benefits_overpayments_constraint!
  update_columns: [benefits_overpayments_update_column!]!
  where: benefits_overpayments_bool_exp
}

"""
ordering options when selecting data from "benefits_overpayments"
"""
input benefits_overpayments_order_by {
  cmi_cross_ref_id: order_by
  cmi_cross_reference: cmi_cross_references_order_by
  council_tax_id: order_by
}

"""
primary key columns input for table: "benefits_overpayments"
"""
input benefits_overpayments_pk_columns_input {
  council_tax_id: bigint!
}

"""
select columns of table "benefits_overpayments"
"""
enum benefits_overpayments_select_column {
  """column name"""
  cmi_cross_ref_id

  """column name"""
  council_tax_id
}

"""
input type for updating data in table "benefits_overpayments"
"""
input benefits_overpayments_set_input {
  cmi_cross_ref_id: bigint
  council_tax_id: bigint
}

"""aggregate stddev on columns"""
type benefits_overpayments_stddev_fields {
  cmi_cross_ref_id: Float
  council_tax_id: Float
}

"""
order by stddev() on columns of table "benefits_overpayments"
"""
input benefits_overpayments_stddev_order_by {
  cmi_cross_ref_id: order_by
  council_tax_id: order_by
}

"""aggregate stddev_pop on columns"""
type benefits_overpayments_stddev_pop_fields {
  cmi_cross_ref_id: Float
  council_tax_id: Float
}

"""
order by stddev_pop() on columns of table "benefits_overpayments"
"""
input benefits_overpayments_stddev_pop_order_by {
  cmi_cross_ref_id: order_by
  council_tax_id: order_by
}

"""aggregate stddev_samp on columns"""
type benefits_overpayments_stddev_samp_fields {
  cmi_cross_ref_id: Float
  council_tax_id: Float
}

"""
order by stddev_samp() on columns of table "benefits_overpayments"
"""
input benefits_overpayments_stddev_samp_order_by {
  cmi_cross_ref_id: order_by
  council_tax_id: order_by
}

"""aggregate sum on columns"""
type benefits_overpayments_sum_fields {
  cmi_cross_ref_id: bigint
  council_tax_id: bigint
}

"""
order by sum() on columns of table "benefits_overpayments"
"""
input benefits_overpayments_sum_order_by {
  cmi_cross_ref_id: order_by
  council_tax_id: order_by
}

"""
update columns of table "benefits_overpayments"
"""
enum benefits_overpayments_update_column {
  """column name"""
  cmi_cross_ref_id

  """column name"""
  council_tax_id
}

"""aggregate var_pop on columns"""
type benefits_overpayments_var_pop_fields {
  cmi_cross_ref_id: Float
  council_tax_id: Float
}

"""
order by var_pop() on columns of table "benefits_overpayments"
"""
input benefits_overpayments_var_pop_order_by {
  cmi_cross_ref_id: order_by
  council_tax_id: order_by
}

"""aggregate var_samp on columns"""
type benefits_overpayments_var_samp_fields {
  cmi_cross_ref_id: Float
  council_tax_id: Float
}

"""
order by var_samp() on columns of table "benefits_overpayments"
"""
input benefits_overpayments_var_samp_order_by {
  cmi_cross_ref_id: order_by
  council_tax_id: order_by
}

"""aggregate variance on columns"""
type benefits_overpayments_variance_fields {
  cmi_cross_ref_id: Float
  council_tax_id: Float
}

"""
order by variance() on columns of table "benefits_overpayments"
"""
input benefits_overpayments_variance_order_by {
  cmi_cross_ref_id: order_by
  council_tax_id: order_by
}

scalar bigint

"""
expression to compare columns of type bigint. All fields are combined with logical 'AND'.
"""
input bigint_comparison_exp {
  _eq: bigint
  _gt: bigint
  _gte: bigint
  _in: [bigint!]
  _is_null: Boolean
  _lt: bigint
  _lte: bigint
  _neq: bigint
  _nin: [bigint!]
}

"""
columns and relationships of "business_rates"
"""
type business_rates {
  business_rates_id: bigint!
  cmi_cross_ref_id: bigint

  """An object relationship"""
  cmi_cross_reference: cmi_cross_references
}

"""
aggregated selection of "business_rates"
"""
type business_rates_aggregate {
  aggregate: business_rates_aggregate_fields
  nodes: [business_rates!]!
}

"""
aggregate fields of "business_rates"
"""
type business_rates_aggregate_fields {
  avg: business_rates_avg_fields
  count(columns: [business_rates_select_column!], distinct: Boolean): Int
  max: business_rates_max_fields
  min: business_rates_min_fields
  stddev: business_rates_stddev_fields
  stddev_pop: business_rates_stddev_pop_fields
  stddev_samp: business_rates_stddev_samp_fields
  sum: business_rates_sum_fields
  var_pop: business_rates_var_pop_fields
  var_samp: business_rates_var_samp_fields
  variance: business_rates_variance_fields
}

"""
order by aggregate values of table "business_rates"
"""
input business_rates_aggregate_order_by {
  avg: business_rates_avg_order_by
  count: order_by
  max: business_rates_max_order_by
  min: business_rates_min_order_by
  stddev: business_rates_stddev_order_by
  stddev_pop: business_rates_stddev_pop_order_by
  stddev_samp: business_rates_stddev_samp_order_by
  sum: business_rates_sum_order_by
  var_pop: business_rates_var_pop_order_by
  var_samp: business_rates_var_samp_order_by
  variance: business_rates_variance_order_by
}

"""
input type for inserting array relation for remote table "business_rates"
"""
input business_rates_arr_rel_insert_input {
  data: [business_rates_insert_input!]!
  on_conflict: business_rates_on_conflict
}

"""aggregate avg on columns"""
type business_rates_avg_fields {
  business_rates_id: Float
  cmi_cross_ref_id: Float
}

"""
order by avg() on columns of table "business_rates"
"""
input business_rates_avg_order_by {
  business_rates_id: order_by
  cmi_cross_ref_id: order_by
}

"""
Boolean expression to filter rows from the table "business_rates". All fields are combined with a logical 'AND'.
"""
input business_rates_bool_exp {
  _and: [business_rates_bool_exp]
  _not: business_rates_bool_exp
  _or: [business_rates_bool_exp]
  business_rates_id: bigint_comparison_exp
  cmi_cross_ref_id: bigint_comparison_exp
  cmi_cross_reference: cmi_cross_references_bool_exp
}

"""
unique or primary key constraints on table "business_rates"
"""
enum business_rates_constraint {
  """unique or primary key constraint"""
  idx_25242_business_rates_pkey
}

"""
input type for incrementing integer column in table "business_rates"
"""
input business_rates_inc_input {
  business_rates_id: bigint
  cmi_cross_ref_id: bigint
}

"""
input type for inserting data into table "business_rates"
"""
input business_rates_insert_input {
  business_rates_id: bigint
  cmi_cross_ref_id: bigint
  cmi_cross_reference: cmi_cross_references_obj_rel_insert_input
}

"""aggregate max on columns"""
type business_rates_max_fields {
  business_rates_id: bigint
  cmi_cross_ref_id: bigint
}

"""
order by max() on columns of table "business_rates"
"""
input business_rates_max_order_by {
  business_rates_id: order_by
  cmi_cross_ref_id: order_by
}

"""aggregate min on columns"""
type business_rates_min_fields {
  business_rates_id: bigint
  cmi_cross_ref_id: bigint
}

"""
order by min() on columns of table "business_rates"
"""
input business_rates_min_order_by {
  business_rates_id: order_by
  cmi_cross_ref_id: order_by
}

"""
response of any mutation on the table "business_rates"
"""
type business_rates_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [business_rates!]!
}

"""
input type for inserting object relation for remote table "business_rates"
"""
input business_rates_obj_rel_insert_input {
  data: business_rates_insert_input!
  on_conflict: business_rates_on_conflict
}

"""
on conflict condition type for table "business_rates"
"""
input business_rates_on_conflict {
  constraint: business_rates_constraint!
  update_columns: [business_rates_update_column!]!
  where: business_rates_bool_exp
}

"""
ordering options when selecting data from "business_rates"
"""
input business_rates_order_by {
  business_rates_id: order_by
  cmi_cross_ref_id: order_by
  cmi_cross_reference: cmi_cross_references_order_by
}

"""
primary key columns input for table: "business_rates"
"""
input business_rates_pk_columns_input {
  business_rates_id: bigint!
}

"""
select columns of table "business_rates"
"""
enum business_rates_select_column {
  """column name"""
  business_rates_id

  """column name"""
  cmi_cross_ref_id
}

"""
input type for updating data in table "business_rates"
"""
input business_rates_set_input {
  business_rates_id: bigint
  cmi_cross_ref_id: bigint
}

"""aggregate stddev on columns"""
type business_rates_stddev_fields {
  business_rates_id: Float
  cmi_cross_ref_id: Float
}

"""
order by stddev() on columns of table "business_rates"
"""
input business_rates_stddev_order_by {
  business_rates_id: order_by
  cmi_cross_ref_id: order_by
}

"""aggregate stddev_pop on columns"""
type business_rates_stddev_pop_fields {
  business_rates_id: Float
  cmi_cross_ref_id: Float
}

"""
order by stddev_pop() on columns of table "business_rates"
"""
input business_rates_stddev_pop_order_by {
  business_rates_id: order_by
  cmi_cross_ref_id: order_by
}

"""aggregate stddev_samp on columns"""
type business_rates_stddev_samp_fields {
  business_rates_id: Float
  cmi_cross_ref_id: Float
}

"""
order by stddev_samp() on columns of table "business_rates"
"""
input business_rates_stddev_samp_order_by {
  business_rates_id: order_by
  cmi_cross_ref_id: order_by
}

"""aggregate sum on columns"""
type business_rates_sum_fields {
  business_rates_id: bigint
  cmi_cross_ref_id: bigint
}

"""
order by sum() on columns of table "business_rates"
"""
input business_rates_sum_order_by {
  business_rates_id: order_by
  cmi_cross_ref_id: order_by
}

"""
update columns of table "business_rates"
"""
enum business_rates_update_column {
  """column name"""
  business_rates_id

  """column name"""
  cmi_cross_ref_id
}

"""aggregate var_pop on columns"""
type business_rates_var_pop_fields {
  business_rates_id: Float
  cmi_cross_ref_id: Float
}

"""
order by var_pop() on columns of table "business_rates"
"""
input business_rates_var_pop_order_by {
  business_rates_id: order_by
  cmi_cross_ref_id: order_by
}

"""aggregate var_samp on columns"""
type business_rates_var_samp_fields {
  business_rates_id: Float
  cmi_cross_ref_id: Float
}

"""
order by var_samp() on columns of table "business_rates"
"""
input business_rates_var_samp_order_by {
  business_rates_id: order_by
  cmi_cross_ref_id: order_by
}

"""aggregate variance on columns"""
type business_rates_variance_fields {
  business_rates_id: Float
  cmi_cross_ref_id: Float
}

"""
order by variance() on columns of table "business_rates"
"""
input business_rates_variance_order_by {
  business_rates_id: order_by
  cmi_cross_ref_id: order_by
}

"""
columns and relationships of "cmi_cross_references"
"""
type cmi_cross_references {
  """An array relationship"""
  benefits_overpayments(
    """distinct select on columns"""
    distinct_on: [benefits_overpayments_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [benefits_overpayments_order_by!]

    """filter the rows returned"""
    where: benefits_overpayments_bool_exp
  ): [benefits_overpayments!]!

  """An aggregated array relationship"""
  benefits_overpayments_aggregate(
    """distinct select on columns"""
    distinct_on: [benefits_overpayments_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [benefits_overpayments_order_by!]

    """filter the rows returned"""
    where: benefits_overpayments_bool_exp
  ): benefits_overpayments_aggregate!

  """An array relationship"""
  business_rates(
    """distinct select on columns"""
    distinct_on: [business_rates_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [business_rates_order_by!]

    """filter the rows returned"""
    where: business_rates_bool_exp
  ): [business_rates!]!

  """An aggregated array relationship"""
  business_rates_aggregate(
    """distinct select on columns"""
    distinct_on: [business_rates_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [business_rates_order_by!]

    """filter the rows returned"""
    where: business_rates_bool_exp
  ): business_rates_aggregate!
  cmi_cross_ref_id: bigint!

  """An array relationship"""
  council_taxes(
    """distinct select on columns"""
    distinct_on: [council_tax_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [council_tax_order_by!]

    """filter the rows returned"""
    where: council_tax_bool_exp
  ): [council_tax!]!

  """An aggregated array relationship"""
  council_taxes_aggregate(
    """distinct select on columns"""
    distinct_on: [council_tax_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [council_tax_order_by!]

    """filter the rows returned"""
    where: council_tax_bool_exp
  ): council_tax_aggregate!

  """An object relationship"""
  customer_master_index: customer_master_index

  """An array relationship"""
  electoral_registers(
    """distinct select on columns"""
    distinct_on: [electoral_register_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [electoral_register_order_by!]

    """filter the rows returned"""
    where: electoral_register_bool_exp
  ): [electoral_register!]!

  """An aggregated array relationship"""
  electoral_registers_aggregate(
    """distinct select on columns"""
    distinct_on: [electoral_register_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [electoral_register_order_by!]

    """filter the rows returned"""
    where: electoral_register_bool_exp
  ): electoral_register_aggregate!
  master_customer_id: bigint

  """An array relationship"""
  parking_fines(
    """distinct select on columns"""
    distinct_on: [parking_fines_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [parking_fines_order_by!]

    """filter the rows returned"""
    where: parking_fines_bool_exp
  ): [parking_fines!]!

  """An aggregated array relationship"""
  parking_fines_aggregate(
    """distinct select on columns"""
    distinct_on: [parking_fines_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [parking_fines_order_by!]

    """filter the rows returned"""
    where: parking_fines_bool_exp
  ): parking_fines_aggregate!

  """An array relationship"""
  rent_arrears(
    """distinct select on columns"""
    distinct_on: [rent_arrears_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [rent_arrears_order_by!]

    """filter the rows returned"""
    where: rent_arrears_bool_exp
  ): [rent_arrears!]!

  """An aggregated array relationship"""
  rent_arrears_aggregate(
    """distinct select on columns"""
    distinct_on: [rent_arrears_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [rent_arrears_order_by!]

    """filter the rows returned"""
    where: rent_arrears_bool_exp
  ): rent_arrears_aggregate!
  source_system_code: String
}

"""
aggregated selection of "cmi_cross_references"
"""
type cmi_cross_references_aggregate {
  aggregate: cmi_cross_references_aggregate_fields
  nodes: [cmi_cross_references!]!
}

"""
aggregate fields of "cmi_cross_references"
"""
type cmi_cross_references_aggregate_fields {
  avg: cmi_cross_references_avg_fields
  count(columns: [cmi_cross_references_select_column!], distinct: Boolean): Int
  max: cmi_cross_references_max_fields
  min: cmi_cross_references_min_fields
  stddev: cmi_cross_references_stddev_fields
  stddev_pop: cmi_cross_references_stddev_pop_fields
  stddev_samp: cmi_cross_references_stddev_samp_fields
  sum: cmi_cross_references_sum_fields
  var_pop: cmi_cross_references_var_pop_fields
  var_samp: cmi_cross_references_var_samp_fields
  variance: cmi_cross_references_variance_fields
}

"""
order by aggregate values of table "cmi_cross_references"
"""
input cmi_cross_references_aggregate_order_by {
  avg: cmi_cross_references_avg_order_by
  count: order_by
  max: cmi_cross_references_max_order_by
  min: cmi_cross_references_min_order_by
  stddev: cmi_cross_references_stddev_order_by
  stddev_pop: cmi_cross_references_stddev_pop_order_by
  stddev_samp: cmi_cross_references_stddev_samp_order_by
  sum: cmi_cross_references_sum_order_by
  var_pop: cmi_cross_references_var_pop_order_by
  var_samp: cmi_cross_references_var_samp_order_by
  variance: cmi_cross_references_variance_order_by
}

"""
input type for inserting array relation for remote table "cmi_cross_references"
"""
input cmi_cross_references_arr_rel_insert_input {
  data: [cmi_cross_references_insert_input!]!
  on_conflict: cmi_cross_references_on_conflict
}

"""aggregate avg on columns"""
type cmi_cross_references_avg_fields {
  cmi_cross_ref_id: Float
  master_customer_id: Float
}

"""
order by avg() on columns of table "cmi_cross_references"
"""
input cmi_cross_references_avg_order_by {
  cmi_cross_ref_id: order_by
  master_customer_id: order_by
}

"""
Boolean expression to filter rows from the table "cmi_cross_references". All fields are combined with a logical 'AND'.
"""
input cmi_cross_references_bool_exp {
  _and: [cmi_cross_references_bool_exp]
  _not: cmi_cross_references_bool_exp
  _or: [cmi_cross_references_bool_exp]
  benefits_overpayments: benefits_overpayments_bool_exp
  business_rates: business_rates_bool_exp
  cmi_cross_ref_id: bigint_comparison_exp
  council_taxes: council_tax_bool_exp
  customer_master_index: customer_master_index_bool_exp
  electoral_registers: electoral_register_bool_exp
  master_customer_id: bigint_comparison_exp
  parking_fines: parking_fines_bool_exp
  rent_arrears: rent_arrears_bool_exp
  source_system_code: String_comparison_exp
}

"""
unique or primary key constraints on table "cmi_cross_references"
"""
enum cmi_cross_references_constraint {
  """unique or primary key constraint"""
  idx_25233_cmi_cross_references_pkey
}

"""
input type for incrementing integer column in table "cmi_cross_references"
"""
input cmi_cross_references_inc_input {
  cmi_cross_ref_id: bigint
  master_customer_id: bigint
}

"""
input type for inserting data into table "cmi_cross_references"
"""
input cmi_cross_references_insert_input {
  benefits_overpayments: benefits_overpayments_arr_rel_insert_input
  business_rates: business_rates_arr_rel_insert_input
  cmi_cross_ref_id: bigint
  council_taxes: council_tax_arr_rel_insert_input
  customer_master_index: customer_master_index_obj_rel_insert_input
  electoral_registers: electoral_register_arr_rel_insert_input
  master_customer_id: bigint
  parking_fines: parking_fines_arr_rel_insert_input
  rent_arrears: rent_arrears_arr_rel_insert_input
  source_system_code: String
}

"""aggregate max on columns"""
type cmi_cross_references_max_fields {
  cmi_cross_ref_id: bigint
  master_customer_id: bigint
  source_system_code: String
}

"""
order by max() on columns of table "cmi_cross_references"
"""
input cmi_cross_references_max_order_by {
  cmi_cross_ref_id: order_by
  master_customer_id: order_by
  source_system_code: order_by
}

"""aggregate min on columns"""
type cmi_cross_references_min_fields {
  cmi_cross_ref_id: bigint
  master_customer_id: bigint
  source_system_code: String
}

"""
order by min() on columns of table "cmi_cross_references"
"""
input cmi_cross_references_min_order_by {
  cmi_cross_ref_id: order_by
  master_customer_id: order_by
  source_system_code: order_by
}

"""
response of any mutation on the table "cmi_cross_references"
"""
type cmi_cross_references_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [cmi_cross_references!]!
}

"""
input type for inserting object relation for remote table "cmi_cross_references"
"""
input cmi_cross_references_obj_rel_insert_input {
  data: cmi_cross_references_insert_input!
  on_conflict: cmi_cross_references_on_conflict
}

"""
on conflict condition type for table "cmi_cross_references"
"""
input cmi_cross_references_on_conflict {
  constraint: cmi_cross_references_constraint!
  update_columns: [cmi_cross_references_update_column!]!
  where: cmi_cross_references_bool_exp
}

"""
ordering options when selecting data from "cmi_cross_references"
"""
input cmi_cross_references_order_by {
  benefits_overpayments_aggregate: benefits_overpayments_aggregate_order_by
  business_rates_aggregate: business_rates_aggregate_order_by
  cmi_cross_ref_id: order_by
  council_taxes_aggregate: council_tax_aggregate_order_by
  customer_master_index: customer_master_index_order_by
  electoral_registers_aggregate: electoral_register_aggregate_order_by
  master_customer_id: order_by
  parking_fines_aggregate: parking_fines_aggregate_order_by
  rent_arrears_aggregate: rent_arrears_aggregate_order_by
  source_system_code: order_by
}

"""
primary key columns input for table: "cmi_cross_references"
"""
input cmi_cross_references_pk_columns_input {
  cmi_cross_ref_id: bigint!
}

"""
select columns of table "cmi_cross_references"
"""
enum cmi_cross_references_select_column {
  """column name"""
  cmi_cross_ref_id

  """column name"""
  master_customer_id

  """column name"""
  source_system_code
}

"""
input type for updating data in table "cmi_cross_references"
"""
input cmi_cross_references_set_input {
  cmi_cross_ref_id: bigint
  master_customer_id: bigint
  source_system_code: String
}

"""aggregate stddev on columns"""
type cmi_cross_references_stddev_fields {
  cmi_cross_ref_id: Float
  master_customer_id: Float
}

"""
order by stddev() on columns of table "cmi_cross_references"
"""
input cmi_cross_references_stddev_order_by {
  cmi_cross_ref_id: order_by
  master_customer_id: order_by
}

"""aggregate stddev_pop on columns"""
type cmi_cross_references_stddev_pop_fields {
  cmi_cross_ref_id: Float
  master_customer_id: Float
}

"""
order by stddev_pop() on columns of table "cmi_cross_references"
"""
input cmi_cross_references_stddev_pop_order_by {
  cmi_cross_ref_id: order_by
  master_customer_id: order_by
}

"""aggregate stddev_samp on columns"""
type cmi_cross_references_stddev_samp_fields {
  cmi_cross_ref_id: Float
  master_customer_id: Float
}

"""
order by stddev_samp() on columns of table "cmi_cross_references"
"""
input cmi_cross_references_stddev_samp_order_by {
  cmi_cross_ref_id: order_by
  master_customer_id: order_by
}

"""aggregate sum on columns"""
type cmi_cross_references_sum_fields {
  cmi_cross_ref_id: bigint
  master_customer_id: bigint
}

"""
order by sum() on columns of table "cmi_cross_references"
"""
input cmi_cross_references_sum_order_by {
  cmi_cross_ref_id: order_by
  master_customer_id: order_by
}

"""
update columns of table "cmi_cross_references"
"""
enum cmi_cross_references_update_column {
  """column name"""
  cmi_cross_ref_id

  """column name"""
  master_customer_id

  """column name"""
  source_system_code
}

"""aggregate var_pop on columns"""
type cmi_cross_references_var_pop_fields {
  cmi_cross_ref_id: Float
  master_customer_id: Float
}

"""
order by var_pop() on columns of table "cmi_cross_references"
"""
input cmi_cross_references_var_pop_order_by {
  cmi_cross_ref_id: order_by
  master_customer_id: order_by
}

"""aggregate var_samp on columns"""
type cmi_cross_references_var_samp_fields {
  cmi_cross_ref_id: Float
  master_customer_id: Float
}

"""
order by var_samp() on columns of table "cmi_cross_references"
"""
input cmi_cross_references_var_samp_order_by {
  cmi_cross_ref_id: order_by
  master_customer_id: order_by
}

"""aggregate variance on columns"""
type cmi_cross_references_variance_fields {
  cmi_cross_ref_id: Float
  master_customer_id: Float
}

"""
order by variance() on columns of table "cmi_cross_references"
"""
input cmi_cross_references_variance_order_by {
  cmi_cross_ref_id: order_by
  master_customer_id: order_by
}

"""
columns and relationships of "council_tax"
"""
type council_tax {
  cmi_cross_ref_id: bigint

  """An object relationship"""
  cmi_cross_reference: cmi_cross_references
  council_tax_id: bigint!
}

"""
aggregated selection of "council_tax"
"""
type council_tax_aggregate {
  aggregate: council_tax_aggregate_fields
  nodes: [council_tax!]!
}

"""
aggregate fields of "council_tax"
"""
type council_tax_aggregate_fields {
  avg: council_tax_avg_fields
  count(columns: [council_tax_select_column!], distinct: Boolean): Int
  max: council_tax_max_fields
  min: council_tax_min_fields
  stddev: council_tax_stddev_fields
  stddev_pop: council_tax_stddev_pop_fields
  stddev_samp: council_tax_stddev_samp_fields
  sum: council_tax_sum_fields
  var_pop: council_tax_var_pop_fields
  var_samp: council_tax_var_samp_fields
  variance: council_tax_variance_fields
}

"""
order by aggregate values of table "council_tax"
"""
input council_tax_aggregate_order_by {
  avg: council_tax_avg_order_by
  count: order_by
  max: council_tax_max_order_by
  min: council_tax_min_order_by
  stddev: council_tax_stddev_order_by
  stddev_pop: council_tax_stddev_pop_order_by
  stddev_samp: council_tax_stddev_samp_order_by
  sum: council_tax_sum_order_by
  var_pop: council_tax_var_pop_order_by
  var_samp: council_tax_var_samp_order_by
  variance: council_tax_variance_order_by
}

"""
input type for inserting array relation for remote table "council_tax"
"""
input council_tax_arr_rel_insert_input {
  data: [council_tax_insert_input!]!
  on_conflict: council_tax_on_conflict
}

"""aggregate avg on columns"""
type council_tax_avg_fields {
  cmi_cross_ref_id: Float
  council_tax_id: Float
}

"""
order by avg() on columns of table "council_tax"
"""
input council_tax_avg_order_by {
  cmi_cross_ref_id: order_by
  council_tax_id: order_by
}

"""
Boolean expression to filter rows from the table "council_tax". All fields are combined with a logical 'AND'.
"""
input council_tax_bool_exp {
  _and: [council_tax_bool_exp]
  _not: council_tax_bool_exp
  _or: [council_tax_bool_exp]
  cmi_cross_ref_id: bigint_comparison_exp
  cmi_cross_reference: cmi_cross_references_bool_exp
  council_tax_id: bigint_comparison_exp
}

"""
unique or primary key constraints on table "council_tax"
"""
enum council_tax_constraint {
  """unique or primary key constraint"""
  idx_25239_council_tax_pkey
}

"""
input type for incrementing integer column in table "council_tax"
"""
input council_tax_inc_input {
  cmi_cross_ref_id: bigint
  council_tax_id: bigint
}

"""
input type for inserting data into table "council_tax"
"""
input council_tax_insert_input {
  cmi_cross_ref_id: bigint
  cmi_cross_reference: cmi_cross_references_obj_rel_insert_input
  council_tax_id: bigint
}

"""aggregate max on columns"""
type council_tax_max_fields {
  cmi_cross_ref_id: bigint
  council_tax_id: bigint
}

"""
order by max() on columns of table "council_tax"
"""
input council_tax_max_order_by {
  cmi_cross_ref_id: order_by
  council_tax_id: order_by
}

"""aggregate min on columns"""
type council_tax_min_fields {
  cmi_cross_ref_id: bigint
  council_tax_id: bigint
}

"""
order by min() on columns of table "council_tax"
"""
input council_tax_min_order_by {
  cmi_cross_ref_id: order_by
  council_tax_id: order_by
}

"""
response of any mutation on the table "council_tax"
"""
type council_tax_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [council_tax!]!
}

"""
input type for inserting object relation for remote table "council_tax"
"""
input council_tax_obj_rel_insert_input {
  data: council_tax_insert_input!
  on_conflict: council_tax_on_conflict
}

"""
on conflict condition type for table "council_tax"
"""
input council_tax_on_conflict {
  constraint: council_tax_constraint!
  update_columns: [council_tax_update_column!]!
  where: council_tax_bool_exp
}

"""
ordering options when selecting data from "council_tax"
"""
input council_tax_order_by {
  cmi_cross_ref_id: order_by
  cmi_cross_reference: cmi_cross_references_order_by
  council_tax_id: order_by
}

"""
primary key columns input for table: "council_tax"
"""
input council_tax_pk_columns_input {
  council_tax_id: bigint!
}

"""
select columns of table "council_tax"
"""
enum council_tax_select_column {
  """column name"""
  cmi_cross_ref_id

  """column name"""
  council_tax_id
}

"""
input type for updating data in table "council_tax"
"""
input council_tax_set_input {
  cmi_cross_ref_id: bigint
  council_tax_id: bigint
}

"""aggregate stddev on columns"""
type council_tax_stddev_fields {
  cmi_cross_ref_id: Float
  council_tax_id: Float
}

"""
order by stddev() on columns of table "council_tax"
"""
input council_tax_stddev_order_by {
  cmi_cross_ref_id: order_by
  council_tax_id: order_by
}

"""aggregate stddev_pop on columns"""
type council_tax_stddev_pop_fields {
  cmi_cross_ref_id: Float
  council_tax_id: Float
}

"""
order by stddev_pop() on columns of table "council_tax"
"""
input council_tax_stddev_pop_order_by {
  cmi_cross_ref_id: order_by
  council_tax_id: order_by
}

"""aggregate stddev_samp on columns"""
type council_tax_stddev_samp_fields {
  cmi_cross_ref_id: Float
  council_tax_id: Float
}

"""
order by stddev_samp() on columns of table "council_tax"
"""
input council_tax_stddev_samp_order_by {
  cmi_cross_ref_id: order_by
  council_tax_id: order_by
}

"""aggregate sum on columns"""
type council_tax_sum_fields {
  cmi_cross_ref_id: bigint
  council_tax_id: bigint
}

"""
order by sum() on columns of table "council_tax"
"""
input council_tax_sum_order_by {
  cmi_cross_ref_id: order_by
  council_tax_id: order_by
}

"""
update columns of table "council_tax"
"""
enum council_tax_update_column {
  """column name"""
  cmi_cross_ref_id

  """column name"""
  council_tax_id
}

"""aggregate var_pop on columns"""
type council_tax_var_pop_fields {
  cmi_cross_ref_id: Float
  council_tax_id: Float
}

"""
order by var_pop() on columns of table "council_tax"
"""
input council_tax_var_pop_order_by {
  cmi_cross_ref_id: order_by
  council_tax_id: order_by
}

"""aggregate var_samp on columns"""
type council_tax_var_samp_fields {
  cmi_cross_ref_id: Float
  council_tax_id: Float
}

"""
order by var_samp() on columns of table "council_tax"
"""
input council_tax_var_samp_order_by {
  cmi_cross_ref_id: order_by
  council_tax_id: order_by
}

"""aggregate variance on columns"""
type council_tax_variance_fields {
  cmi_cross_ref_id: Float
  council_tax_id: Float
}

"""
order by variance() on columns of table "council_tax"
"""
input council_tax_variance_order_by {
  cmi_cross_ref_id: order_by
  council_tax_id: order_by
}

"""
columns and relationships of "customer_master_index"
"""
type customer_master_index {
  """An array relationship"""
  cmi_cross_references(
    """distinct select on columns"""
    distinct_on: [cmi_cross_references_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [cmi_cross_references_order_by!]

    """filter the rows returned"""
    where: cmi_cross_references_bool_exp
  ): [cmi_cross_references!]!

  """An aggregated array relationship"""
  cmi_cross_references_aggregate(
    """distinct select on columns"""
    distinct_on: [cmi_cross_references_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [cmi_cross_references_order_by!]

    """filter the rows returned"""
    where: cmi_cross_references_bool_exp
  ): cmi_cross_references_aggregate!
  cmi_details: String
  master_customer_id: bigint!
}

"""
aggregated selection of "customer_master_index"
"""
type customer_master_index_aggregate {
  aggregate: customer_master_index_aggregate_fields
  nodes: [customer_master_index!]!
}

"""
aggregate fields of "customer_master_index"
"""
type customer_master_index_aggregate_fields {
  avg: customer_master_index_avg_fields
  count(columns: [customer_master_index_select_column!], distinct: Boolean): Int
  max: customer_master_index_max_fields
  min: customer_master_index_min_fields
  stddev: customer_master_index_stddev_fields
  stddev_pop: customer_master_index_stddev_pop_fields
  stddev_samp: customer_master_index_stddev_samp_fields
  sum: customer_master_index_sum_fields
  var_pop: customer_master_index_var_pop_fields
  var_samp: customer_master_index_var_samp_fields
  variance: customer_master_index_variance_fields
}

"""
order by aggregate values of table "customer_master_index"
"""
input customer_master_index_aggregate_order_by {
  avg: customer_master_index_avg_order_by
  count: order_by
  max: customer_master_index_max_order_by
  min: customer_master_index_min_order_by
  stddev: customer_master_index_stddev_order_by
  stddev_pop: customer_master_index_stddev_pop_order_by
  stddev_samp: customer_master_index_stddev_samp_order_by
  sum: customer_master_index_sum_order_by
  var_pop: customer_master_index_var_pop_order_by
  var_samp: customer_master_index_var_samp_order_by
  variance: customer_master_index_variance_order_by
}

"""
input type for inserting array relation for remote table "customer_master_index"
"""
input customer_master_index_arr_rel_insert_input {
  data: [customer_master_index_insert_input!]!
  on_conflict: customer_master_index_on_conflict
}

"""aggregate avg on columns"""
type customer_master_index_avg_fields {
  master_customer_id: Float
}

"""
order by avg() on columns of table "customer_master_index"
"""
input customer_master_index_avg_order_by {
  master_customer_id: order_by
}

"""
Boolean expression to filter rows from the table "customer_master_index". All fields are combined with a logical 'AND'.
"""
input customer_master_index_bool_exp {
  _and: [customer_master_index_bool_exp]
  _not: customer_master_index_bool_exp
  _or: [customer_master_index_bool_exp]
  cmi_cross_references: cmi_cross_references_bool_exp
  cmi_details: String_comparison_exp
  master_customer_id: bigint_comparison_exp
}

"""
unique or primary key constraints on table "customer_master_index"
"""
enum customer_master_index_constraint {
  """unique or primary key constraint"""
  idx_25227_customer_master_index_pkey
}

"""
input type for incrementing integer column in table "customer_master_index"
"""
input customer_master_index_inc_input {
  master_customer_id: bigint
}

"""
input type for inserting data into table "customer_master_index"
"""
input customer_master_index_insert_input {
  cmi_cross_references: cmi_cross_references_arr_rel_insert_input
  cmi_details: String
  master_customer_id: bigint
}

"""aggregate max on columns"""
type customer_master_index_max_fields {
  cmi_details: String
  master_customer_id: bigint
}

"""
order by max() on columns of table "customer_master_index"
"""
input customer_master_index_max_order_by {
  cmi_details: order_by
  master_customer_id: order_by
}

"""aggregate min on columns"""
type customer_master_index_min_fields {
  cmi_details: String
  master_customer_id: bigint
}

"""
order by min() on columns of table "customer_master_index"
"""
input customer_master_index_min_order_by {
  cmi_details: order_by
  master_customer_id: order_by
}

"""
response of any mutation on the table "customer_master_index"
"""
type customer_master_index_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [customer_master_index!]!
}

"""
input type for inserting object relation for remote table "customer_master_index"
"""
input customer_master_index_obj_rel_insert_input {
  data: customer_master_index_insert_input!
  on_conflict: customer_master_index_on_conflict
}

"""
on conflict condition type for table "customer_master_index"
"""
input customer_master_index_on_conflict {
  constraint: customer_master_index_constraint!
  update_columns: [customer_master_index_update_column!]!
  where: customer_master_index_bool_exp
}

"""
ordering options when selecting data from "customer_master_index"
"""
input customer_master_index_order_by {
  cmi_cross_references_aggregate: cmi_cross_references_aggregate_order_by
  cmi_details: order_by
  master_customer_id: order_by
}

"""
primary key columns input for table: "customer_master_index"
"""
input customer_master_index_pk_columns_input {
  master_customer_id: bigint!
}

"""
select columns of table "customer_master_index"
"""
enum customer_master_index_select_column {
  """column name"""
  cmi_details

  """column name"""
  master_customer_id
}

"""
input type for updating data in table "customer_master_index"
"""
input customer_master_index_set_input {
  cmi_details: String
  master_customer_id: bigint
}

"""aggregate stddev on columns"""
type customer_master_index_stddev_fields {
  master_customer_id: Float
}

"""
order by stddev() on columns of table "customer_master_index"
"""
input customer_master_index_stddev_order_by {
  master_customer_id: order_by
}

"""aggregate stddev_pop on columns"""
type customer_master_index_stddev_pop_fields {
  master_customer_id: Float
}

"""
order by stddev_pop() on columns of table "customer_master_index"
"""
input customer_master_index_stddev_pop_order_by {
  master_customer_id: order_by
}

"""aggregate stddev_samp on columns"""
type customer_master_index_stddev_samp_fields {
  master_customer_id: Float
}

"""
order by stddev_samp() on columns of table "customer_master_index"
"""
input customer_master_index_stddev_samp_order_by {
  master_customer_id: order_by
}

"""aggregate sum on columns"""
type customer_master_index_sum_fields {
  master_customer_id: bigint
}

"""
order by sum() on columns of table "customer_master_index"
"""
input customer_master_index_sum_order_by {
  master_customer_id: order_by
}

"""
update columns of table "customer_master_index"
"""
enum customer_master_index_update_column {
  """column name"""
  cmi_details

  """column name"""
  master_customer_id
}

"""aggregate var_pop on columns"""
type customer_master_index_var_pop_fields {
  master_customer_id: Float
}

"""
order by var_pop() on columns of table "customer_master_index"
"""
input customer_master_index_var_pop_order_by {
  master_customer_id: order_by
}

"""aggregate var_samp on columns"""
type customer_master_index_var_samp_fields {
  master_customer_id: Float
}

"""
order by var_samp() on columns of table "customer_master_index"
"""
input customer_master_index_var_samp_order_by {
  master_customer_id: order_by
}

"""aggregate variance on columns"""
type customer_master_index_variance_fields {
  master_customer_id: Float
}

"""
order by variance() on columns of table "customer_master_index"
"""
input customer_master_index_variance_order_by {
  master_customer_id: order_by
}

"""
columns and relationships of "electoral_register"
"""
type electoral_register {
  cmi_cross_ref_id: bigint

  """An object relationship"""
  cmi_cross_reference: cmi_cross_references
  electoral_register_id: bigint!
}

"""
aggregated selection of "electoral_register"
"""
type electoral_register_aggregate {
  aggregate: electoral_register_aggregate_fields
  nodes: [electoral_register!]!
}

"""
aggregate fields of "electoral_register"
"""
type electoral_register_aggregate_fields {
  avg: electoral_register_avg_fields
  count(columns: [electoral_register_select_column!], distinct: Boolean): Int
  max: electoral_register_max_fields
  min: electoral_register_min_fields
  stddev: electoral_register_stddev_fields
  stddev_pop: electoral_register_stddev_pop_fields
  stddev_samp: electoral_register_stddev_samp_fields
  sum: electoral_register_sum_fields
  var_pop: electoral_register_var_pop_fields
  var_samp: electoral_register_var_samp_fields
  variance: electoral_register_variance_fields
}

"""
order by aggregate values of table "electoral_register"
"""
input electoral_register_aggregate_order_by {
  avg: electoral_register_avg_order_by
  count: order_by
  max: electoral_register_max_order_by
  min: electoral_register_min_order_by
  stddev: electoral_register_stddev_order_by
  stddev_pop: electoral_register_stddev_pop_order_by
  stddev_samp: electoral_register_stddev_samp_order_by
  sum: electoral_register_sum_order_by
  var_pop: electoral_register_var_pop_order_by
  var_samp: electoral_register_var_samp_order_by
  variance: electoral_register_variance_order_by
}

"""
input type for inserting array relation for remote table "electoral_register"
"""
input electoral_register_arr_rel_insert_input {
  data: [electoral_register_insert_input!]!
  on_conflict: electoral_register_on_conflict
}

"""aggregate avg on columns"""
type electoral_register_avg_fields {
  cmi_cross_ref_id: Float
  electoral_register_id: Float
}

"""
order by avg() on columns of table "electoral_register"
"""
input electoral_register_avg_order_by {
  cmi_cross_ref_id: order_by
  electoral_register_id: order_by
}

"""
Boolean expression to filter rows from the table "electoral_register". All fields are combined with a logical 'AND'.
"""
input electoral_register_bool_exp {
  _and: [electoral_register_bool_exp]
  _not: electoral_register_bool_exp
  _or: [electoral_register_bool_exp]
  cmi_cross_ref_id: bigint_comparison_exp
  cmi_cross_reference: cmi_cross_references_bool_exp
  electoral_register_id: bigint_comparison_exp
}

"""
unique or primary key constraints on table "electoral_register"
"""
enum electoral_register_constraint {
  """unique or primary key constraint"""
  idx_25254_electoral_register_pkey
}

"""
input type for incrementing integer column in table "electoral_register"
"""
input electoral_register_inc_input {
  cmi_cross_ref_id: bigint
  electoral_register_id: bigint
}

"""
input type for inserting data into table "electoral_register"
"""
input electoral_register_insert_input {
  cmi_cross_ref_id: bigint
  cmi_cross_reference: cmi_cross_references_obj_rel_insert_input
  electoral_register_id: bigint
}

"""aggregate max on columns"""
type electoral_register_max_fields {
  cmi_cross_ref_id: bigint
  electoral_register_id: bigint
}

"""
order by max() on columns of table "electoral_register"
"""
input electoral_register_max_order_by {
  cmi_cross_ref_id: order_by
  electoral_register_id: order_by
}

"""aggregate min on columns"""
type electoral_register_min_fields {
  cmi_cross_ref_id: bigint
  electoral_register_id: bigint
}

"""
order by min() on columns of table "electoral_register"
"""
input electoral_register_min_order_by {
  cmi_cross_ref_id: order_by
  electoral_register_id: order_by
}

"""
response of any mutation on the table "electoral_register"
"""
type electoral_register_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [electoral_register!]!
}

"""
input type for inserting object relation for remote table "electoral_register"
"""
input electoral_register_obj_rel_insert_input {
  data: electoral_register_insert_input!
  on_conflict: electoral_register_on_conflict
}

"""
on conflict condition type for table "electoral_register"
"""
input electoral_register_on_conflict {
  constraint: electoral_register_constraint!
  update_columns: [electoral_register_update_column!]!
  where: electoral_register_bool_exp
}

"""
ordering options when selecting data from "electoral_register"
"""
input electoral_register_order_by {
  cmi_cross_ref_id: order_by
  cmi_cross_reference: cmi_cross_references_order_by
  electoral_register_id: order_by
}

"""
primary key columns input for table: "electoral_register"
"""
input electoral_register_pk_columns_input {
  electoral_register_id: bigint!
}

"""
select columns of table "electoral_register"
"""
enum electoral_register_select_column {
  """column name"""
  cmi_cross_ref_id

  """column name"""
  electoral_register_id
}

"""
input type for updating data in table "electoral_register"
"""
input electoral_register_set_input {
  cmi_cross_ref_id: bigint
  electoral_register_id: bigint
}

"""aggregate stddev on columns"""
type electoral_register_stddev_fields {
  cmi_cross_ref_id: Float
  electoral_register_id: Float
}

"""
order by stddev() on columns of table "electoral_register"
"""
input electoral_register_stddev_order_by {
  cmi_cross_ref_id: order_by
  electoral_register_id: order_by
}

"""aggregate stddev_pop on columns"""
type electoral_register_stddev_pop_fields {
  cmi_cross_ref_id: Float
  electoral_register_id: Float
}

"""
order by stddev_pop() on columns of table "electoral_register"
"""
input electoral_register_stddev_pop_order_by {
  cmi_cross_ref_id: order_by
  electoral_register_id: order_by
}

"""aggregate stddev_samp on columns"""
type electoral_register_stddev_samp_fields {
  cmi_cross_ref_id: Float
  electoral_register_id: Float
}

"""
order by stddev_samp() on columns of table "electoral_register"
"""
input electoral_register_stddev_samp_order_by {
  cmi_cross_ref_id: order_by
  electoral_register_id: order_by
}

"""aggregate sum on columns"""
type electoral_register_sum_fields {
  cmi_cross_ref_id: bigint
  electoral_register_id: bigint
}

"""
order by sum() on columns of table "electoral_register"
"""
input electoral_register_sum_order_by {
  cmi_cross_ref_id: order_by
  electoral_register_id: order_by
}

"""
update columns of table "electoral_register"
"""
enum electoral_register_update_column {
  """column name"""
  cmi_cross_ref_id

  """column name"""
  electoral_register_id
}

"""aggregate var_pop on columns"""
type electoral_register_var_pop_fields {
  cmi_cross_ref_id: Float
  electoral_register_id: Float
}

"""
order by var_pop() on columns of table "electoral_register"
"""
input electoral_register_var_pop_order_by {
  cmi_cross_ref_id: order_by
  electoral_register_id: order_by
}

"""aggregate var_samp on columns"""
type electoral_register_var_samp_fields {
  cmi_cross_ref_id: Float
  electoral_register_id: Float
}

"""
order by var_samp() on columns of table "electoral_register"
"""
input electoral_register_var_samp_order_by {
  cmi_cross_ref_id: order_by
  electoral_register_id: order_by
}

"""aggregate variance on columns"""
type electoral_register_variance_fields {
  cmi_cross_ref_id: Float
  electoral_register_id: Float
}

"""
order by variance() on columns of table "electoral_register"
"""
input electoral_register_variance_order_by {
  cmi_cross_ref_id: order_by
  electoral_register_id: order_by
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "benefits_overpayments"
  """
  delete_benefits_overpayments(
    """filter the rows which have to be deleted"""
    where: benefits_overpayments_bool_exp!
  ): benefits_overpayments_mutation_response

  """
  delete single row from the table: "benefits_overpayments"
  """
  delete_benefits_overpayments_by_pk(council_tax_id: bigint!): benefits_overpayments

  """
  delete data from the table: "business_rates"
  """
  delete_business_rates(
    """filter the rows which have to be deleted"""
    where: business_rates_bool_exp!
  ): business_rates_mutation_response

  """
  delete single row from the table: "business_rates"
  """
  delete_business_rates_by_pk(business_rates_id: bigint!): business_rates

  """
  delete data from the table: "cmi_cross_references"
  """
  delete_cmi_cross_references(
    """filter the rows which have to be deleted"""
    where: cmi_cross_references_bool_exp!
  ): cmi_cross_references_mutation_response

  """
  delete single row from the table: "cmi_cross_references"
  """
  delete_cmi_cross_references_by_pk(cmi_cross_ref_id: bigint!): cmi_cross_references

  """
  delete data from the table: "council_tax"
  """
  delete_council_tax(
    """filter the rows which have to be deleted"""
    where: council_tax_bool_exp!
  ): council_tax_mutation_response

  """
  delete single row from the table: "council_tax"
  """
  delete_council_tax_by_pk(council_tax_id: bigint!): council_tax

  """
  delete data from the table: "customer_master_index"
  """
  delete_customer_master_index(
    """filter the rows which have to be deleted"""
    where: customer_master_index_bool_exp!
  ): customer_master_index_mutation_response

  """
  delete single row from the table: "customer_master_index"
  """
  delete_customer_master_index_by_pk(master_customer_id: bigint!): customer_master_index

  """
  delete data from the table: "electoral_register"
  """
  delete_electoral_register(
    """filter the rows which have to be deleted"""
    where: electoral_register_bool_exp!
  ): electoral_register_mutation_response

  """
  delete single row from the table: "electoral_register"
  """
  delete_electoral_register_by_pk(electoral_register_id: bigint!): electoral_register

  """
  delete data from the table: "parking_fines"
  """
  delete_parking_fines(
    """filter the rows which have to be deleted"""
    where: parking_fines_bool_exp!
  ): parking_fines_mutation_response

  """
  delete single row from the table: "parking_fines"
  """
  delete_parking_fines_by_pk(council_tax_id: bigint!): parking_fines

  """
  delete data from the table: "rent_arrears"
  """
  delete_rent_arrears(
    """filter the rows which have to be deleted"""
    where: rent_arrears_bool_exp!
  ): rent_arrears_mutation_response

  """
  delete single row from the table: "rent_arrears"
  """
  delete_rent_arrears_by_pk(council_tax_id: bigint!): rent_arrears

  """
  insert data into the table: "benefits_overpayments"
  """
  insert_benefits_overpayments(
    """the rows to be inserted"""
    objects: [benefits_overpayments_insert_input!]!

    """on conflict condition"""
    on_conflict: benefits_overpayments_on_conflict
  ): benefits_overpayments_mutation_response

  """
  insert a single row into the table: "benefits_overpayments"
  """
  insert_benefits_overpayments_one(
    """the row to be inserted"""
    object: benefits_overpayments_insert_input!

    """on conflict condition"""
    on_conflict: benefits_overpayments_on_conflict
  ): benefits_overpayments

  """
  insert data into the table: "business_rates"
  """
  insert_business_rates(
    """the rows to be inserted"""
    objects: [business_rates_insert_input!]!

    """on conflict condition"""
    on_conflict: business_rates_on_conflict
  ): business_rates_mutation_response

  """
  insert a single row into the table: "business_rates"
  """
  insert_business_rates_one(
    """the row to be inserted"""
    object: business_rates_insert_input!

    """on conflict condition"""
    on_conflict: business_rates_on_conflict
  ): business_rates

  """
  insert data into the table: "cmi_cross_references"
  """
  insert_cmi_cross_references(
    """the rows to be inserted"""
    objects: [cmi_cross_references_insert_input!]!

    """on conflict condition"""
    on_conflict: cmi_cross_references_on_conflict
  ): cmi_cross_references_mutation_response

  """
  insert a single row into the table: "cmi_cross_references"
  """
  insert_cmi_cross_references_one(
    """the row to be inserted"""
    object: cmi_cross_references_insert_input!

    """on conflict condition"""
    on_conflict: cmi_cross_references_on_conflict
  ): cmi_cross_references

  """
  insert data into the table: "council_tax"
  """
  insert_council_tax(
    """the rows to be inserted"""
    objects: [council_tax_insert_input!]!

    """on conflict condition"""
    on_conflict: council_tax_on_conflict
  ): council_tax_mutation_response

  """
  insert a single row into the table: "council_tax"
  """
  insert_council_tax_one(
    """the row to be inserted"""
    object: council_tax_insert_input!

    """on conflict condition"""
    on_conflict: council_tax_on_conflict
  ): council_tax

  """
  insert data into the table: "customer_master_index"
  """
  insert_customer_master_index(
    """the rows to be inserted"""
    objects: [customer_master_index_insert_input!]!

    """on conflict condition"""
    on_conflict: customer_master_index_on_conflict
  ): customer_master_index_mutation_response

  """
  insert a single row into the table: "customer_master_index"
  """
  insert_customer_master_index_one(
    """the row to be inserted"""
    object: customer_master_index_insert_input!

    """on conflict condition"""
    on_conflict: customer_master_index_on_conflict
  ): customer_master_index

  """
  insert data into the table: "electoral_register"
  """
  insert_electoral_register(
    """the rows to be inserted"""
    objects: [electoral_register_insert_input!]!

    """on conflict condition"""
    on_conflict: electoral_register_on_conflict
  ): electoral_register_mutation_response

  """
  insert a single row into the table: "electoral_register"
  """
  insert_electoral_register_one(
    """the row to be inserted"""
    object: electoral_register_insert_input!

    """on conflict condition"""
    on_conflict: electoral_register_on_conflict
  ): electoral_register

  """
  insert data into the table: "parking_fines"
  """
  insert_parking_fines(
    """the rows to be inserted"""
    objects: [parking_fines_insert_input!]!

    """on conflict condition"""
    on_conflict: parking_fines_on_conflict
  ): parking_fines_mutation_response

  """
  insert a single row into the table: "parking_fines"
  """
  insert_parking_fines_one(
    """the row to be inserted"""
    object: parking_fines_insert_input!

    """on conflict condition"""
    on_conflict: parking_fines_on_conflict
  ): parking_fines

  """
  insert data into the table: "rent_arrears"
  """
  insert_rent_arrears(
    """the rows to be inserted"""
    objects: [rent_arrears_insert_input!]!

    """on conflict condition"""
    on_conflict: rent_arrears_on_conflict
  ): rent_arrears_mutation_response

  """
  insert a single row into the table: "rent_arrears"
  """
  insert_rent_arrears_one(
    """the row to be inserted"""
    object: rent_arrears_insert_input!

    """on conflict condition"""
    on_conflict: rent_arrears_on_conflict
  ): rent_arrears

  """
  update data of the table: "benefits_overpayments"
  """
  update_benefits_overpayments(
    """increments the integer columns with given value of the filtered values"""
    _inc: benefits_overpayments_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: benefits_overpayments_set_input

    """filter the rows which have to be updated"""
    where: benefits_overpayments_bool_exp!
  ): benefits_overpayments_mutation_response

  """
  update single row of the table: "benefits_overpayments"
  """
  update_benefits_overpayments_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: benefits_overpayments_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: benefits_overpayments_set_input
    pk_columns: benefits_overpayments_pk_columns_input!
  ): benefits_overpayments

  """
  update data of the table: "business_rates"
  """
  update_business_rates(
    """increments the integer columns with given value of the filtered values"""
    _inc: business_rates_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: business_rates_set_input

    """filter the rows which have to be updated"""
    where: business_rates_bool_exp!
  ): business_rates_mutation_response

  """
  update single row of the table: "business_rates"
  """
  update_business_rates_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: business_rates_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: business_rates_set_input
    pk_columns: business_rates_pk_columns_input!
  ): business_rates

  """
  update data of the table: "cmi_cross_references"
  """
  update_cmi_cross_references(
    """increments the integer columns with given value of the filtered values"""
    _inc: cmi_cross_references_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: cmi_cross_references_set_input

    """filter the rows which have to be updated"""
    where: cmi_cross_references_bool_exp!
  ): cmi_cross_references_mutation_response

  """
  update single row of the table: "cmi_cross_references"
  """
  update_cmi_cross_references_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: cmi_cross_references_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: cmi_cross_references_set_input
    pk_columns: cmi_cross_references_pk_columns_input!
  ): cmi_cross_references

  """
  update data of the table: "council_tax"
  """
  update_council_tax(
    """increments the integer columns with given value of the filtered values"""
    _inc: council_tax_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: council_tax_set_input

    """filter the rows which have to be updated"""
    where: council_tax_bool_exp!
  ): council_tax_mutation_response

  """
  update single row of the table: "council_tax"
  """
  update_council_tax_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: council_tax_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: council_tax_set_input
    pk_columns: council_tax_pk_columns_input!
  ): council_tax

  """
  update data of the table: "customer_master_index"
  """
  update_customer_master_index(
    """increments the integer columns with given value of the filtered values"""
    _inc: customer_master_index_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: customer_master_index_set_input

    """filter the rows which have to be updated"""
    where: customer_master_index_bool_exp!
  ): customer_master_index_mutation_response

  """
  update single row of the table: "customer_master_index"
  """
  update_customer_master_index_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: customer_master_index_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: customer_master_index_set_input
    pk_columns: customer_master_index_pk_columns_input!
  ): customer_master_index

  """
  update data of the table: "electoral_register"
  """
  update_electoral_register(
    """increments the integer columns with given value of the filtered values"""
    _inc: electoral_register_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: electoral_register_set_input

    """filter the rows which have to be updated"""
    where: electoral_register_bool_exp!
  ): electoral_register_mutation_response

  """
  update single row of the table: "electoral_register"
  """
  update_electoral_register_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: electoral_register_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: electoral_register_set_input
    pk_columns: electoral_register_pk_columns_input!
  ): electoral_register

  """
  update data of the table: "parking_fines"
  """
  update_parking_fines(
    """increments the integer columns with given value of the filtered values"""
    _inc: parking_fines_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: parking_fines_set_input

    """filter the rows which have to be updated"""
    where: parking_fines_bool_exp!
  ): parking_fines_mutation_response

  """
  update single row of the table: "parking_fines"
  """
  update_parking_fines_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: parking_fines_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: parking_fines_set_input
    pk_columns: parking_fines_pk_columns_input!
  ): parking_fines

  """
  update data of the table: "rent_arrears"
  """
  update_rent_arrears(
    """increments the integer columns with given value of the filtered values"""
    _inc: rent_arrears_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: rent_arrears_set_input

    """filter the rows which have to be updated"""
    where: rent_arrears_bool_exp!
  ): rent_arrears_mutation_response

  """
  update single row of the table: "rent_arrears"
  """
  update_rent_arrears_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: rent_arrears_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: rent_arrears_set_input
    pk_columns: rent_arrears_pk_columns_input!
  ): rent_arrears
}

"""column ordering options"""
enum order_by {
  """in the ascending order, nulls last"""
  asc

  """in the ascending order, nulls first"""
  asc_nulls_first

  """in the ascending order, nulls last"""
  asc_nulls_last

  """in the descending order, nulls first"""
  desc

  """in the descending order, nulls first"""
  desc_nulls_first

  """in the descending order, nulls last"""
  desc_nulls_last
}

"""
columns and relationships of "parking_fines"
"""
type parking_fines {
  cmi_cross_ref_id: bigint

  """An object relationship"""
  cmi_cross_reference: cmi_cross_references
  council_tax_id: bigint!
}

"""
aggregated selection of "parking_fines"
"""
type parking_fines_aggregate {
  aggregate: parking_fines_aggregate_fields
  nodes: [parking_fines!]!
}

"""
aggregate fields of "parking_fines"
"""
type parking_fines_aggregate_fields {
  avg: parking_fines_avg_fields
  count(columns: [parking_fines_select_column!], distinct: Boolean): Int
  max: parking_fines_max_fields
  min: parking_fines_min_fields
  stddev: parking_fines_stddev_fields
  stddev_pop: parking_fines_stddev_pop_fields
  stddev_samp: parking_fines_stddev_samp_fields
  sum: parking_fines_sum_fields
  var_pop: parking_fines_var_pop_fields
  var_samp: parking_fines_var_samp_fields
  variance: parking_fines_variance_fields
}

"""
order by aggregate values of table "parking_fines"
"""
input parking_fines_aggregate_order_by {
  avg: parking_fines_avg_order_by
  count: order_by
  max: parking_fines_max_order_by
  min: parking_fines_min_order_by
  stddev: parking_fines_stddev_order_by
  stddev_pop: parking_fines_stddev_pop_order_by
  stddev_samp: parking_fines_stddev_samp_order_by
  sum: parking_fines_sum_order_by
  var_pop: parking_fines_var_pop_order_by
  var_samp: parking_fines_var_samp_order_by
  variance: parking_fines_variance_order_by
}

"""
input type for inserting array relation for remote table "parking_fines"
"""
input parking_fines_arr_rel_insert_input {
  data: [parking_fines_insert_input!]!
  on_conflict: parking_fines_on_conflict
}

"""aggregate avg on columns"""
type parking_fines_avg_fields {
  cmi_cross_ref_id: Float
  council_tax_id: Float
}

"""
order by avg() on columns of table "parking_fines"
"""
input parking_fines_avg_order_by {
  cmi_cross_ref_id: order_by
  council_tax_id: order_by
}

"""
Boolean expression to filter rows from the table "parking_fines". All fields are combined with a logical 'AND'.
"""
input parking_fines_bool_exp {
  _and: [parking_fines_bool_exp]
  _not: parking_fines_bool_exp
  _or: [parking_fines_bool_exp]
  cmi_cross_ref_id: bigint_comparison_exp
  cmi_cross_reference: cmi_cross_references_bool_exp
  council_tax_id: bigint_comparison_exp
}

"""
unique or primary key constraints on table "parking_fines"
"""
enum parking_fines_constraint {
  """unique or primary key constraint"""
  idx_25248_parking_fines_pkey
}

"""
input type for incrementing integer column in table "parking_fines"
"""
input parking_fines_inc_input {
  cmi_cross_ref_id: bigint
  council_tax_id: bigint
}

"""
input type for inserting data into table "parking_fines"
"""
input parking_fines_insert_input {
  cmi_cross_ref_id: bigint
  cmi_cross_reference: cmi_cross_references_obj_rel_insert_input
  council_tax_id: bigint
}

"""aggregate max on columns"""
type parking_fines_max_fields {
  cmi_cross_ref_id: bigint
  council_tax_id: bigint
}

"""
order by max() on columns of table "parking_fines"
"""
input parking_fines_max_order_by {
  cmi_cross_ref_id: order_by
  council_tax_id: order_by
}

"""aggregate min on columns"""
type parking_fines_min_fields {
  cmi_cross_ref_id: bigint
  council_tax_id: bigint
}

"""
order by min() on columns of table "parking_fines"
"""
input parking_fines_min_order_by {
  cmi_cross_ref_id: order_by
  council_tax_id: order_by
}

"""
response of any mutation on the table "parking_fines"
"""
type parking_fines_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [parking_fines!]!
}

"""
input type for inserting object relation for remote table "parking_fines"
"""
input parking_fines_obj_rel_insert_input {
  data: parking_fines_insert_input!
  on_conflict: parking_fines_on_conflict
}

"""
on conflict condition type for table "parking_fines"
"""
input parking_fines_on_conflict {
  constraint: parking_fines_constraint!
  update_columns: [parking_fines_update_column!]!
  where: parking_fines_bool_exp
}

"""
ordering options when selecting data from "parking_fines"
"""
input parking_fines_order_by {
  cmi_cross_ref_id: order_by
  cmi_cross_reference: cmi_cross_references_order_by
  council_tax_id: order_by
}

"""
primary key columns input for table: "parking_fines"
"""
input parking_fines_pk_columns_input {
  council_tax_id: bigint!
}

"""
select columns of table "parking_fines"
"""
enum parking_fines_select_column {
  """column name"""
  cmi_cross_ref_id

  """column name"""
  council_tax_id
}

"""
input type for updating data in table "parking_fines"
"""
input parking_fines_set_input {
  cmi_cross_ref_id: bigint
  council_tax_id: bigint
}

"""aggregate stddev on columns"""
type parking_fines_stddev_fields {
  cmi_cross_ref_id: Float
  council_tax_id: Float
}

"""
order by stddev() on columns of table "parking_fines"
"""
input parking_fines_stddev_order_by {
  cmi_cross_ref_id: order_by
  council_tax_id: order_by
}

"""aggregate stddev_pop on columns"""
type parking_fines_stddev_pop_fields {
  cmi_cross_ref_id: Float
  council_tax_id: Float
}

"""
order by stddev_pop() on columns of table "parking_fines"
"""
input parking_fines_stddev_pop_order_by {
  cmi_cross_ref_id: order_by
  council_tax_id: order_by
}

"""aggregate stddev_samp on columns"""
type parking_fines_stddev_samp_fields {
  cmi_cross_ref_id: Float
  council_tax_id: Float
}

"""
order by stddev_samp() on columns of table "parking_fines"
"""
input parking_fines_stddev_samp_order_by {
  cmi_cross_ref_id: order_by
  council_tax_id: order_by
}

"""aggregate sum on columns"""
type parking_fines_sum_fields {
  cmi_cross_ref_id: bigint
  council_tax_id: bigint
}

"""
order by sum() on columns of table "parking_fines"
"""
input parking_fines_sum_order_by {
  cmi_cross_ref_id: order_by
  council_tax_id: order_by
}

"""
update columns of table "parking_fines"
"""
enum parking_fines_update_column {
  """column name"""
  cmi_cross_ref_id

  """column name"""
  council_tax_id
}

"""aggregate var_pop on columns"""
type parking_fines_var_pop_fields {
  cmi_cross_ref_id: Float
  council_tax_id: Float
}

"""
order by var_pop() on columns of table "parking_fines"
"""
input parking_fines_var_pop_order_by {
  cmi_cross_ref_id: order_by
  council_tax_id: order_by
}

"""aggregate var_samp on columns"""
type parking_fines_var_samp_fields {
  cmi_cross_ref_id: Float
  council_tax_id: Float
}

"""
order by var_samp() on columns of table "parking_fines"
"""
input parking_fines_var_samp_order_by {
  cmi_cross_ref_id: order_by
  council_tax_id: order_by
}

"""aggregate variance on columns"""
type parking_fines_variance_fields {
  cmi_cross_ref_id: Float
  council_tax_id: Float
}

"""
order by variance() on columns of table "parking_fines"
"""
input parking_fines_variance_order_by {
  cmi_cross_ref_id: order_by
  council_tax_id: order_by
}

"""query root"""
type query_root {
  """
  fetch data from the table: "benefits_overpayments"
  """
  benefits_overpayments(
    """distinct select on columns"""
    distinct_on: [benefits_overpayments_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [benefits_overpayments_order_by!]

    """filter the rows returned"""
    where: benefits_overpayments_bool_exp
  ): [benefits_overpayments!]!

  """
  fetch aggregated fields from the table: "benefits_overpayments"
  """
  benefits_overpayments_aggregate(
    """distinct select on columns"""
    distinct_on: [benefits_overpayments_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [benefits_overpayments_order_by!]

    """filter the rows returned"""
    where: benefits_overpayments_bool_exp
  ): benefits_overpayments_aggregate!

  """
  fetch data from the table: "benefits_overpayments" using primary key columns
  """
  benefits_overpayments_by_pk(council_tax_id: bigint!): benefits_overpayments

  """
  fetch data from the table: "business_rates"
  """
  business_rates(
    """distinct select on columns"""
    distinct_on: [business_rates_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [business_rates_order_by!]

    """filter the rows returned"""
    where: business_rates_bool_exp
  ): [business_rates!]!

  """
  fetch aggregated fields from the table: "business_rates"
  """
  business_rates_aggregate(
    """distinct select on columns"""
    distinct_on: [business_rates_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [business_rates_order_by!]

    """filter the rows returned"""
    where: business_rates_bool_exp
  ): business_rates_aggregate!

  """fetch data from the table: "business_rates" using primary key columns"""
  business_rates_by_pk(business_rates_id: bigint!): business_rates

  """
  fetch data from the table: "cmi_cross_references"
  """
  cmi_cross_references(
    """distinct select on columns"""
    distinct_on: [cmi_cross_references_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [cmi_cross_references_order_by!]

    """filter the rows returned"""
    where: cmi_cross_references_bool_exp
  ): [cmi_cross_references!]!

  """
  fetch aggregated fields from the table: "cmi_cross_references"
  """
  cmi_cross_references_aggregate(
    """distinct select on columns"""
    distinct_on: [cmi_cross_references_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [cmi_cross_references_order_by!]

    """filter the rows returned"""
    where: cmi_cross_references_bool_exp
  ): cmi_cross_references_aggregate!

  """
  fetch data from the table: "cmi_cross_references" using primary key columns
  """
  cmi_cross_references_by_pk(cmi_cross_ref_id: bigint!): cmi_cross_references

  """
  fetch data from the table: "council_tax"
  """
  council_tax(
    """distinct select on columns"""
    distinct_on: [council_tax_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [council_tax_order_by!]

    """filter the rows returned"""
    where: council_tax_bool_exp
  ): [council_tax!]!

  """
  fetch aggregated fields from the table: "council_tax"
  """
  council_tax_aggregate(
    """distinct select on columns"""
    distinct_on: [council_tax_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [council_tax_order_by!]

    """filter the rows returned"""
    where: council_tax_bool_exp
  ): council_tax_aggregate!

  """fetch data from the table: "council_tax" using primary key columns"""
  council_tax_by_pk(council_tax_id: bigint!): council_tax

  """
  fetch data from the table: "customer_master_index"
  """
  customer_master_index(
    """distinct select on columns"""
    distinct_on: [customer_master_index_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [customer_master_index_order_by!]

    """filter the rows returned"""
    where: customer_master_index_bool_exp
  ): [customer_master_index!]!

  """
  fetch aggregated fields from the table: "customer_master_index"
  """
  customer_master_index_aggregate(
    """distinct select on columns"""
    distinct_on: [customer_master_index_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [customer_master_index_order_by!]

    """filter the rows returned"""
    where: customer_master_index_bool_exp
  ): customer_master_index_aggregate!

  """
  fetch data from the table: "customer_master_index" using primary key columns
  """
  customer_master_index_by_pk(master_customer_id: bigint!): customer_master_index

  """
  fetch data from the table: "electoral_register"
  """
  electoral_register(
    """distinct select on columns"""
    distinct_on: [electoral_register_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [electoral_register_order_by!]

    """filter the rows returned"""
    where: electoral_register_bool_exp
  ): [electoral_register!]!

  """
  fetch aggregated fields from the table: "electoral_register"
  """
  electoral_register_aggregate(
    """distinct select on columns"""
    distinct_on: [electoral_register_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [electoral_register_order_by!]

    """filter the rows returned"""
    where: electoral_register_bool_exp
  ): electoral_register_aggregate!

  """
  fetch data from the table: "electoral_register" using primary key columns
  """
  electoral_register_by_pk(electoral_register_id: bigint!): electoral_register

  """
  fetch data from the table: "parking_fines"
  """
  parking_fines(
    """distinct select on columns"""
    distinct_on: [parking_fines_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [parking_fines_order_by!]

    """filter the rows returned"""
    where: parking_fines_bool_exp
  ): [parking_fines!]!

  """
  fetch aggregated fields from the table: "parking_fines"
  """
  parking_fines_aggregate(
    """distinct select on columns"""
    distinct_on: [parking_fines_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [parking_fines_order_by!]

    """filter the rows returned"""
    where: parking_fines_bool_exp
  ): parking_fines_aggregate!

  """fetch data from the table: "parking_fines" using primary key columns"""
  parking_fines_by_pk(council_tax_id: bigint!): parking_fines

  """
  fetch data from the table: "rent_arrears"
  """
  rent_arrears(
    """distinct select on columns"""
    distinct_on: [rent_arrears_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [rent_arrears_order_by!]

    """filter the rows returned"""
    where: rent_arrears_bool_exp
  ): [rent_arrears!]!

  """
  fetch aggregated fields from the table: "rent_arrears"
  """
  rent_arrears_aggregate(
    """distinct select on columns"""
    distinct_on: [rent_arrears_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [rent_arrears_order_by!]

    """filter the rows returned"""
    where: rent_arrears_bool_exp
  ): rent_arrears_aggregate!

  """fetch data from the table: "rent_arrears" using primary key columns"""
  rent_arrears_by_pk(council_tax_id: bigint!): rent_arrears
}

"""
columns and relationships of "rent_arrears"
"""
type rent_arrears {
  cmi_cross_ref_id: bigint

  """An object relationship"""
  cmi_cross_reference: cmi_cross_references
  council_tax_id: bigint!
}

"""
aggregated selection of "rent_arrears"
"""
type rent_arrears_aggregate {
  aggregate: rent_arrears_aggregate_fields
  nodes: [rent_arrears!]!
}

"""
aggregate fields of "rent_arrears"
"""
type rent_arrears_aggregate_fields {
  avg: rent_arrears_avg_fields
  count(columns: [rent_arrears_select_column!], distinct: Boolean): Int
  max: rent_arrears_max_fields
  min: rent_arrears_min_fields
  stddev: rent_arrears_stddev_fields
  stddev_pop: rent_arrears_stddev_pop_fields
  stddev_samp: rent_arrears_stddev_samp_fields
  sum: rent_arrears_sum_fields
  var_pop: rent_arrears_var_pop_fields
  var_samp: rent_arrears_var_samp_fields
  variance: rent_arrears_variance_fields
}

"""
order by aggregate values of table "rent_arrears"
"""
input rent_arrears_aggregate_order_by {
  avg: rent_arrears_avg_order_by
  count: order_by
  max: rent_arrears_max_order_by
  min: rent_arrears_min_order_by
  stddev: rent_arrears_stddev_order_by
  stddev_pop: rent_arrears_stddev_pop_order_by
  stddev_samp: rent_arrears_stddev_samp_order_by
  sum: rent_arrears_sum_order_by
  var_pop: rent_arrears_var_pop_order_by
  var_samp: rent_arrears_var_samp_order_by
  variance: rent_arrears_variance_order_by
}

"""
input type for inserting array relation for remote table "rent_arrears"
"""
input rent_arrears_arr_rel_insert_input {
  data: [rent_arrears_insert_input!]!
  on_conflict: rent_arrears_on_conflict
}

"""aggregate avg on columns"""
type rent_arrears_avg_fields {
  cmi_cross_ref_id: Float
  council_tax_id: Float
}

"""
order by avg() on columns of table "rent_arrears"
"""
input rent_arrears_avg_order_by {
  cmi_cross_ref_id: order_by
  council_tax_id: order_by
}

"""
Boolean expression to filter rows from the table "rent_arrears". All fields are combined with a logical 'AND'.
"""
input rent_arrears_bool_exp {
  _and: [rent_arrears_bool_exp]
  _not: rent_arrears_bool_exp
  _or: [rent_arrears_bool_exp]
  cmi_cross_ref_id: bigint_comparison_exp
  cmi_cross_reference: cmi_cross_references_bool_exp
  council_tax_id: bigint_comparison_exp
}

"""
unique or primary key constraints on table "rent_arrears"
"""
enum rent_arrears_constraint {
  """unique or primary key constraint"""
  idx_25251_rent_arrears_pkey
}

"""
input type for incrementing integer column in table "rent_arrears"
"""
input rent_arrears_inc_input {
  cmi_cross_ref_id: bigint
  council_tax_id: bigint
}

"""
input type for inserting data into table "rent_arrears"
"""
input rent_arrears_insert_input {
  cmi_cross_ref_id: bigint
  cmi_cross_reference: cmi_cross_references_obj_rel_insert_input
  council_tax_id: bigint
}

"""aggregate max on columns"""
type rent_arrears_max_fields {
  cmi_cross_ref_id: bigint
  council_tax_id: bigint
}

"""
order by max() on columns of table "rent_arrears"
"""
input rent_arrears_max_order_by {
  cmi_cross_ref_id: order_by
  council_tax_id: order_by
}

"""aggregate min on columns"""
type rent_arrears_min_fields {
  cmi_cross_ref_id: bigint
  council_tax_id: bigint
}

"""
order by min() on columns of table "rent_arrears"
"""
input rent_arrears_min_order_by {
  cmi_cross_ref_id: order_by
  council_tax_id: order_by
}

"""
response of any mutation on the table "rent_arrears"
"""
type rent_arrears_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [rent_arrears!]!
}

"""
input type for inserting object relation for remote table "rent_arrears"
"""
input rent_arrears_obj_rel_insert_input {
  data: rent_arrears_insert_input!
  on_conflict: rent_arrears_on_conflict
}

"""
on conflict condition type for table "rent_arrears"
"""
input rent_arrears_on_conflict {
  constraint: rent_arrears_constraint!
  update_columns: [rent_arrears_update_column!]!
  where: rent_arrears_bool_exp
}

"""
ordering options when selecting data from "rent_arrears"
"""
input rent_arrears_order_by {
  cmi_cross_ref_id: order_by
  cmi_cross_reference: cmi_cross_references_order_by
  council_tax_id: order_by
}

"""
primary key columns input for table: "rent_arrears"
"""
input rent_arrears_pk_columns_input {
  council_tax_id: bigint!
}

"""
select columns of table "rent_arrears"
"""
enum rent_arrears_select_column {
  """column name"""
  cmi_cross_ref_id

  """column name"""
  council_tax_id
}

"""
input type for updating data in table "rent_arrears"
"""
input rent_arrears_set_input {
  cmi_cross_ref_id: bigint
  council_tax_id: bigint
}

"""aggregate stddev on columns"""
type rent_arrears_stddev_fields {
  cmi_cross_ref_id: Float
  council_tax_id: Float
}

"""
order by stddev() on columns of table "rent_arrears"
"""
input rent_arrears_stddev_order_by {
  cmi_cross_ref_id: order_by
  council_tax_id: order_by
}

"""aggregate stddev_pop on columns"""
type rent_arrears_stddev_pop_fields {
  cmi_cross_ref_id: Float
  council_tax_id: Float
}

"""
order by stddev_pop() on columns of table "rent_arrears"
"""
input rent_arrears_stddev_pop_order_by {
  cmi_cross_ref_id: order_by
  council_tax_id: order_by
}

"""aggregate stddev_samp on columns"""
type rent_arrears_stddev_samp_fields {
  cmi_cross_ref_id: Float
  council_tax_id: Float
}

"""
order by stddev_samp() on columns of table "rent_arrears"
"""
input rent_arrears_stddev_samp_order_by {
  cmi_cross_ref_id: order_by
  council_tax_id: order_by
}

"""aggregate sum on columns"""
type rent_arrears_sum_fields {
  cmi_cross_ref_id: bigint
  council_tax_id: bigint
}

"""
order by sum() on columns of table "rent_arrears"
"""
input rent_arrears_sum_order_by {
  cmi_cross_ref_id: order_by
  council_tax_id: order_by
}

"""
update columns of table "rent_arrears"
"""
enum rent_arrears_update_column {
  """column name"""
  cmi_cross_ref_id

  """column name"""
  council_tax_id
}

"""aggregate var_pop on columns"""
type rent_arrears_var_pop_fields {
  cmi_cross_ref_id: Float
  council_tax_id: Float
}

"""
order by var_pop() on columns of table "rent_arrears"
"""
input rent_arrears_var_pop_order_by {
  cmi_cross_ref_id: order_by
  council_tax_id: order_by
}

"""aggregate var_samp on columns"""
type rent_arrears_var_samp_fields {
  cmi_cross_ref_id: Float
  council_tax_id: Float
}

"""
order by var_samp() on columns of table "rent_arrears"
"""
input rent_arrears_var_samp_order_by {
  cmi_cross_ref_id: order_by
  council_tax_id: order_by
}

"""aggregate variance on columns"""
type rent_arrears_variance_fields {
  cmi_cross_ref_id: Float
  council_tax_id: Float
}

"""
order by variance() on columns of table "rent_arrears"
"""
input rent_arrears_variance_order_by {
  cmi_cross_ref_id: order_by
  council_tax_id: order_by
}

"""
expression to compare columns of type String. All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String
  _ilike: String
  _in: [String!]
  _is_null: Boolean
  _like: String
  _lt: String
  _lte: String
  _neq: String
  _nilike: String
  _nin: [String!]
  _nlike: String
  _nsimilar: String
  _similar: String
}

"""subscription root"""
type subscription_root {
  """
  fetch data from the table: "benefits_overpayments"
  """
  benefits_overpayments(
    """distinct select on columns"""
    distinct_on: [benefits_overpayments_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [benefits_overpayments_order_by!]

    """filter the rows returned"""
    where: benefits_overpayments_bool_exp
  ): [benefits_overpayments!]!

  """
  fetch aggregated fields from the table: "benefits_overpayments"
  """
  benefits_overpayments_aggregate(
    """distinct select on columns"""
    distinct_on: [benefits_overpayments_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [benefits_overpayments_order_by!]

    """filter the rows returned"""
    where: benefits_overpayments_bool_exp
  ): benefits_overpayments_aggregate!

  """
  fetch data from the table: "benefits_overpayments" using primary key columns
  """
  benefits_overpayments_by_pk(council_tax_id: bigint!): benefits_overpayments

  """
  fetch data from the table: "business_rates"
  """
  business_rates(
    """distinct select on columns"""
    distinct_on: [business_rates_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [business_rates_order_by!]

    """filter the rows returned"""
    where: business_rates_bool_exp
  ): [business_rates!]!

  """
  fetch aggregated fields from the table: "business_rates"
  """
  business_rates_aggregate(
    """distinct select on columns"""
    distinct_on: [business_rates_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [business_rates_order_by!]

    """filter the rows returned"""
    where: business_rates_bool_exp
  ): business_rates_aggregate!

  """fetch data from the table: "business_rates" using primary key columns"""
  business_rates_by_pk(business_rates_id: bigint!): business_rates

  """
  fetch data from the table: "cmi_cross_references"
  """
  cmi_cross_references(
    """distinct select on columns"""
    distinct_on: [cmi_cross_references_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [cmi_cross_references_order_by!]

    """filter the rows returned"""
    where: cmi_cross_references_bool_exp
  ): [cmi_cross_references!]!

  """
  fetch aggregated fields from the table: "cmi_cross_references"
  """
  cmi_cross_references_aggregate(
    """distinct select on columns"""
    distinct_on: [cmi_cross_references_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [cmi_cross_references_order_by!]

    """filter the rows returned"""
    where: cmi_cross_references_bool_exp
  ): cmi_cross_references_aggregate!

  """
  fetch data from the table: "cmi_cross_references" using primary key columns
  """
  cmi_cross_references_by_pk(cmi_cross_ref_id: bigint!): cmi_cross_references

  """
  fetch data from the table: "council_tax"
  """
  council_tax(
    """distinct select on columns"""
    distinct_on: [council_tax_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [council_tax_order_by!]

    """filter the rows returned"""
    where: council_tax_bool_exp
  ): [council_tax!]!

  """
  fetch aggregated fields from the table: "council_tax"
  """
  council_tax_aggregate(
    """distinct select on columns"""
    distinct_on: [council_tax_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [council_tax_order_by!]

    """filter the rows returned"""
    where: council_tax_bool_exp
  ): council_tax_aggregate!

  """fetch data from the table: "council_tax" using primary key columns"""
  council_tax_by_pk(council_tax_id: bigint!): council_tax

  """
  fetch data from the table: "customer_master_index"
  """
  customer_master_index(
    """distinct select on columns"""
    distinct_on: [customer_master_index_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [customer_master_index_order_by!]

    """filter the rows returned"""
    where: customer_master_index_bool_exp
  ): [customer_master_index!]!

  """
  fetch aggregated fields from the table: "customer_master_index"
  """
  customer_master_index_aggregate(
    """distinct select on columns"""
    distinct_on: [customer_master_index_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [customer_master_index_order_by!]

    """filter the rows returned"""
    where: customer_master_index_bool_exp
  ): customer_master_index_aggregate!

  """
  fetch data from the table: "customer_master_index" using primary key columns
  """
  customer_master_index_by_pk(master_customer_id: bigint!): customer_master_index

  """
  fetch data from the table: "electoral_register"
  """
  electoral_register(
    """distinct select on columns"""
    distinct_on: [electoral_register_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [electoral_register_order_by!]

    """filter the rows returned"""
    where: electoral_register_bool_exp
  ): [electoral_register!]!

  """
  fetch aggregated fields from the table: "electoral_register"
  """
  electoral_register_aggregate(
    """distinct select on columns"""
    distinct_on: [electoral_register_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [electoral_register_order_by!]

    """filter the rows returned"""
    where: electoral_register_bool_exp
  ): electoral_register_aggregate!

  """
  fetch data from the table: "electoral_register" using primary key columns
  """
  electoral_register_by_pk(electoral_register_id: bigint!): electoral_register

  """
  fetch data from the table: "parking_fines"
  """
  parking_fines(
    """distinct select on columns"""
    distinct_on: [parking_fines_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [parking_fines_order_by!]

    """filter the rows returned"""
    where: parking_fines_bool_exp
  ): [parking_fines!]!

  """
  fetch aggregated fields from the table: "parking_fines"
  """
  parking_fines_aggregate(
    """distinct select on columns"""
    distinct_on: [parking_fines_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [parking_fines_order_by!]

    """filter the rows returned"""
    where: parking_fines_bool_exp
  ): parking_fines_aggregate!

  """fetch data from the table: "parking_fines" using primary key columns"""
  parking_fines_by_pk(council_tax_id: bigint!): parking_fines

  """
  fetch data from the table: "rent_arrears"
  """
  rent_arrears(
    """distinct select on columns"""
    distinct_on: [rent_arrears_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [rent_arrears_order_by!]

    """filter the rows returned"""
    where: rent_arrears_bool_exp
  ): [rent_arrears!]!

  """
  fetch aggregated fields from the table: "rent_arrears"
  """
  rent_arrears_aggregate(
    """distinct select on columns"""
    distinct_on: [rent_arrears_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [rent_arrears_order_by!]

    """filter the rows returned"""
    where: rent_arrears_bool_exp
  ): rent_arrears_aggregate!

  """fetch data from the table: "rent_arrears" using primary key columns"""
  rent_arrears_by_pk(council_tax_id: bigint!): rent_arrears
}
