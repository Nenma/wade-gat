schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""
Direct the client to resolve this field locally, either from the cache or local resolvers.
"""
directive @client(
  """
  When true, the client will never use the cache for this value. See
  https://www.apollographql.com/docs/react/essentials/local-state/#forcing-resolvers-with-clientalways-true
  """
  always: Boolean
) on FIELD | FRAGMENT_DEFINITION | INLINE_FRAGMENT

"""
Export this locally resolved field as a variable to be used in the remainder of this query. See
https://www.apollographql.com/docs/react/essentials/local-state/#using-client-fields-as-variables
"""
directive @export(
  """The variable name to export this field as."""
  as: String!
) on FIELD

"""
Specify a custom store key for this result. See
https://www.apollographql.com/docs/react/advanced/caching/#the-connection-directive
"""
directive @connection(
  """Specify the store key."""
  key: String!

  """
  An array of query argument names to include in the generated custom store key.
  """
  filter: [String!]
) on FIELD

scalar bigint

"""
expression to compare columns of type bigint. All fields are combined with logical 'AND'.
"""
input bigint_comparison_exp {
  _eq: bigint
  _gt: bigint
  _gte: bigint
  _in: [bigint!]
  _is_null: Boolean
  _lt: bigint
  _lte: bigint
  _neq: bigint
  _nin: [bigint!]
}

"""
columns and relationships of "border_info"
"""
type border_info {
  border: String

  """An object relationship"""
  state: state

  """An object relationship"""
  stateByStateName: state
  state_name: String
}

"""
aggregated selection of "border_info"
"""
type border_info_aggregate {
  aggregate: border_info_aggregate_fields
  nodes: [border_info!]!
}

"""
aggregate fields of "border_info"
"""
type border_info_aggregate_fields {
  count(columns: [border_info_select_column!], distinct: Boolean): Int
  max: border_info_max_fields
  min: border_info_min_fields
}

"""
order by aggregate values of table "border_info"
"""
input border_info_aggregate_order_by {
  count: order_by
  max: border_info_max_order_by
  min: border_info_min_order_by
}

"""
input type for inserting array relation for remote table "border_info"
"""
input border_info_arr_rel_insert_input {
  data: [border_info_insert_input!]!
  on_conflict: border_info_on_conflict
}

"""
Boolean expression to filter rows from the table "border_info". All fields are combined with a logical 'AND'.
"""
input border_info_bool_exp {
  _and: [border_info_bool_exp]
  _not: border_info_bool_exp
  _or: [border_info_bool_exp]
  border: String_comparison_exp
  state: state_bool_exp
  stateByStateName: state_bool_exp
  state_name: String_comparison_exp
}

"""
unique or primary key constraints on table "border_info"
"""
enum border_info_constraint {
  """unique or primary key constraint"""
  idx_20536_sqlite_autoindex_border_info_1
}

"""
input type for inserting data into table "border_info"
"""
input border_info_insert_input {
  border: String
  state: state_obj_rel_insert_input
  stateByStateName: state_obj_rel_insert_input
  state_name: String
}

"""aggregate max on columns"""
type border_info_max_fields {
  border: String
  state_name: String
}

"""
order by max() on columns of table "border_info"
"""
input border_info_max_order_by {
  border: order_by
  state_name: order_by
}

"""aggregate min on columns"""
type border_info_min_fields {
  border: String
  state_name: String
}

"""
order by min() on columns of table "border_info"
"""
input border_info_min_order_by {
  border: order_by
  state_name: order_by
}

"""
response of any mutation on the table "border_info"
"""
type border_info_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [border_info!]!
}

"""
input type for inserting object relation for remote table "border_info"
"""
input border_info_obj_rel_insert_input {
  data: border_info_insert_input!
  on_conflict: border_info_on_conflict
}

"""
on conflict condition type for table "border_info"
"""
input border_info_on_conflict {
  constraint: border_info_constraint!
  update_columns: [border_info_update_column!]!
  where: border_info_bool_exp
}

"""
ordering options when selecting data from "border_info"
"""
input border_info_order_by {
  border: order_by
  state: state_order_by
  stateByStateName: state_order_by
  state_name: order_by
}

"""
select columns of table "border_info"
"""
enum border_info_select_column {
  """column name"""
  border

  """column name"""
  state_name
}

"""
input type for updating data in table "border_info"
"""
input border_info_set_input {
  border: String
  state_name: String
}

"""
update columns of table "border_info"
"""
enum border_info_update_column {
  """column name"""
  border

  """column name"""
  state_name
}

"""
columns and relationships of "city"
"""
type city {
  city_name: String!
  country_name: String
  population: bigint

  """An object relationship"""
  state: state!
  state_name: String!
}

"""
aggregated selection of "city"
"""
type city_aggregate {
  aggregate: city_aggregate_fields
  nodes: [city!]!
}

"""
aggregate fields of "city"
"""
type city_aggregate_fields {
  avg: city_avg_fields
  count(columns: [city_select_column!], distinct: Boolean): Int
  max: city_max_fields
  min: city_min_fields
  stddev: city_stddev_fields
  stddev_pop: city_stddev_pop_fields
  stddev_samp: city_stddev_samp_fields
  sum: city_sum_fields
  var_pop: city_var_pop_fields
  var_samp: city_var_samp_fields
  variance: city_variance_fields
}

"""
order by aggregate values of table "city"
"""
input city_aggregate_order_by {
  avg: city_avg_order_by
  count: order_by
  max: city_max_order_by
  min: city_min_order_by
  stddev: city_stddev_order_by
  stddev_pop: city_stddev_pop_order_by
  stddev_samp: city_stddev_samp_order_by
  sum: city_sum_order_by
  var_pop: city_var_pop_order_by
  var_samp: city_var_samp_order_by
  variance: city_variance_order_by
}

"""
input type for inserting array relation for remote table "city"
"""
input city_arr_rel_insert_input {
  data: [city_insert_input!]!
  on_conflict: city_on_conflict
}

"""aggregate avg on columns"""
type city_avg_fields {
  population: Float
}

"""
order by avg() on columns of table "city"
"""
input city_avg_order_by {
  population: order_by
}

"""
Boolean expression to filter rows from the table "city". All fields are combined with a logical 'AND'.
"""
input city_bool_exp {
  _and: [city_bool_exp]
  _not: city_bool_exp
  _or: [city_bool_exp]
  city_name: String_comparison_exp
  country_name: String_comparison_exp
  population: bigint_comparison_exp
  state: state_bool_exp
  state_name: String_comparison_exp
}

"""
unique or primary key constraints on table "city"
"""
enum city_constraint {
  """unique or primary key constraint"""
  idx_20529_sqlite_autoindex_city_1
}

"""
input type for incrementing integer column in table "city"
"""
input city_inc_input {
  population: bigint
}

"""
input type for inserting data into table "city"
"""
input city_insert_input {
  city_name: String
  country_name: String
  population: bigint
  state: state_obj_rel_insert_input
  state_name: String
}

"""aggregate max on columns"""
type city_max_fields {
  city_name: String
  country_name: String
  population: bigint
  state_name: String
}

"""
order by max() on columns of table "city"
"""
input city_max_order_by {
  city_name: order_by
  country_name: order_by
  population: order_by
  state_name: order_by
}

"""aggregate min on columns"""
type city_min_fields {
  city_name: String
  country_name: String
  population: bigint
  state_name: String
}

"""
order by min() on columns of table "city"
"""
input city_min_order_by {
  city_name: order_by
  country_name: order_by
  population: order_by
  state_name: order_by
}

"""
response of any mutation on the table "city"
"""
type city_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [city!]!
}

"""
input type for inserting object relation for remote table "city"
"""
input city_obj_rel_insert_input {
  data: city_insert_input!
  on_conflict: city_on_conflict
}

"""
on conflict condition type for table "city"
"""
input city_on_conflict {
  constraint: city_constraint!
  update_columns: [city_update_column!]!
  where: city_bool_exp
}

"""
ordering options when selecting data from "city"
"""
input city_order_by {
  city_name: order_by
  country_name: order_by
  population: order_by
  state: state_order_by
  state_name: order_by
}

"""
primary key columns input for table: "city"
"""
input city_pk_columns_input {
  city_name: String!
  state_name: String!
}

"""
select columns of table "city"
"""
enum city_select_column {
  """column name"""
  city_name

  """column name"""
  country_name

  """column name"""
  population

  """column name"""
  state_name
}

"""
input type for updating data in table "city"
"""
input city_set_input {
  city_name: String
  country_name: String
  population: bigint
  state_name: String
}

"""aggregate stddev on columns"""
type city_stddev_fields {
  population: Float
}

"""
order by stddev() on columns of table "city"
"""
input city_stddev_order_by {
  population: order_by
}

"""aggregate stddev_pop on columns"""
type city_stddev_pop_fields {
  population: Float
}

"""
order by stddev_pop() on columns of table "city"
"""
input city_stddev_pop_order_by {
  population: order_by
}

"""aggregate stddev_samp on columns"""
type city_stddev_samp_fields {
  population: Float
}

"""
order by stddev_samp() on columns of table "city"
"""
input city_stddev_samp_order_by {
  population: order_by
}

"""aggregate sum on columns"""
type city_sum_fields {
  population: bigint
}

"""
order by sum() on columns of table "city"
"""
input city_sum_order_by {
  population: order_by
}

"""
update columns of table "city"
"""
enum city_update_column {
  """column name"""
  city_name

  """column name"""
  country_name

  """column name"""
  population

  """column name"""
  state_name
}

"""aggregate var_pop on columns"""
type city_var_pop_fields {
  population: Float
}

"""
order by var_pop() on columns of table "city"
"""
input city_var_pop_order_by {
  population: order_by
}

"""aggregate var_samp on columns"""
type city_var_samp_fields {
  population: Float
}

"""
order by var_samp() on columns of table "city"
"""
input city_var_samp_order_by {
  population: order_by
}

"""aggregate variance on columns"""
type city_variance_fields {
  population: Float
}

"""
order by variance() on columns of table "city"
"""
input city_variance_order_by {
  population: order_by
}

scalar float8

"""
expression to compare columns of type float8. All fields are combined with logical 'AND'.
"""
input float8_comparison_exp {
  _eq: float8
  _gt: float8
  _gte: float8
  _in: [float8!]
  _is_null: Boolean
  _lt: float8
  _lte: float8
  _neq: float8
  _nin: [float8!]
}

"""
columns and relationships of "highlow"
"""
type highlow {
  highest_elevation: String
  highest_point: String
  lowest_elevation: String
  lowest_point: String

  """An object relationship"""
  state: state!
  state_name: String!
}

"""
aggregated selection of "highlow"
"""
type highlow_aggregate {
  aggregate: highlow_aggregate_fields
  nodes: [highlow!]!
}

"""
aggregate fields of "highlow"
"""
type highlow_aggregate_fields {
  count(columns: [highlow_select_column!], distinct: Boolean): Int
  max: highlow_max_fields
  min: highlow_min_fields
}

"""
order by aggregate values of table "highlow"
"""
input highlow_aggregate_order_by {
  count: order_by
  max: highlow_max_order_by
  min: highlow_min_order_by
}

"""
input type for inserting array relation for remote table "highlow"
"""
input highlow_arr_rel_insert_input {
  data: [highlow_insert_input!]!
  on_conflict: highlow_on_conflict
}

"""
Boolean expression to filter rows from the table "highlow". All fields are combined with a logical 'AND'.
"""
input highlow_bool_exp {
  _and: [highlow_bool_exp]
  _not: highlow_bool_exp
  _or: [highlow_bool_exp]
  highest_elevation: String_comparison_exp
  highest_point: String_comparison_exp
  lowest_elevation: String_comparison_exp
  lowest_point: String_comparison_exp
  state: state_bool_exp
  state_name: String_comparison_exp
}

"""
unique or primary key constraints on table "highlow"
"""
enum highlow_constraint {
  """unique or primary key constraint"""
  idx_20542_sqlite_autoindex_highlow_1
}

"""
input type for inserting data into table "highlow"
"""
input highlow_insert_input {
  highest_elevation: String
  highest_point: String
  lowest_elevation: String
  lowest_point: String
  state: state_obj_rel_insert_input
  state_name: String
}

"""aggregate max on columns"""
type highlow_max_fields {
  highest_elevation: String
  highest_point: String
  lowest_elevation: String
  lowest_point: String
  state_name: String
}

"""
order by max() on columns of table "highlow"
"""
input highlow_max_order_by {
  highest_elevation: order_by
  highest_point: order_by
  lowest_elevation: order_by
  lowest_point: order_by
  state_name: order_by
}

"""aggregate min on columns"""
type highlow_min_fields {
  highest_elevation: String
  highest_point: String
  lowest_elevation: String
  lowest_point: String
  state_name: String
}

"""
order by min() on columns of table "highlow"
"""
input highlow_min_order_by {
  highest_elevation: order_by
  highest_point: order_by
  lowest_elevation: order_by
  lowest_point: order_by
  state_name: order_by
}

"""
response of any mutation on the table "highlow"
"""
type highlow_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [highlow!]!
}

"""
input type for inserting object relation for remote table "highlow"
"""
input highlow_obj_rel_insert_input {
  data: highlow_insert_input!
  on_conflict: highlow_on_conflict
}

"""
on conflict condition type for table "highlow"
"""
input highlow_on_conflict {
  constraint: highlow_constraint!
  update_columns: [highlow_update_column!]!
  where: highlow_bool_exp
}

"""
ordering options when selecting data from "highlow"
"""
input highlow_order_by {
  highest_elevation: order_by
  highest_point: order_by
  lowest_elevation: order_by
  lowest_point: order_by
  state: state_order_by
  state_name: order_by
}

"""
primary key columns input for table: "highlow"
"""
input highlow_pk_columns_input {
  state_name: String!
}

"""
select columns of table "highlow"
"""
enum highlow_select_column {
  """column name"""
  highest_elevation

  """column name"""
  highest_point

  """column name"""
  lowest_elevation

  """column name"""
  lowest_point

  """column name"""
  state_name
}

"""
input type for updating data in table "highlow"
"""
input highlow_set_input {
  highest_elevation: String
  highest_point: String
  lowest_elevation: String
  lowest_point: String
  state_name: String
}

"""
update columns of table "highlow"
"""
enum highlow_update_column {
  """column name"""
  highest_elevation

  """column name"""
  highest_point

  """column name"""
  lowest_elevation

  """column name"""
  lowest_point

  """column name"""
  state_name
}

"""
columns and relationships of "lake"
"""
type lake {
  area: float8
  country_name: String
  lake_name: String
  state_name: String
}

"""
aggregated selection of "lake"
"""
type lake_aggregate {
  aggregate: lake_aggregate_fields
  nodes: [lake!]!
}

"""
aggregate fields of "lake"
"""
type lake_aggregate_fields {
  avg: lake_avg_fields
  count(columns: [lake_select_column!], distinct: Boolean): Int
  max: lake_max_fields
  min: lake_min_fields
  stddev: lake_stddev_fields
  stddev_pop: lake_stddev_pop_fields
  stddev_samp: lake_stddev_samp_fields
  sum: lake_sum_fields
  var_pop: lake_var_pop_fields
  var_samp: lake_var_samp_fields
  variance: lake_variance_fields
}

"""
order by aggregate values of table "lake"
"""
input lake_aggregate_order_by {
  avg: lake_avg_order_by
  count: order_by
  max: lake_max_order_by
  min: lake_min_order_by
  stddev: lake_stddev_order_by
  stddev_pop: lake_stddev_pop_order_by
  stddev_samp: lake_stddev_samp_order_by
  sum: lake_sum_order_by
  var_pop: lake_var_pop_order_by
  var_samp: lake_var_samp_order_by
  variance: lake_variance_order_by
}

"""
input type for inserting array relation for remote table "lake"
"""
input lake_arr_rel_insert_input {
  data: [lake_insert_input!]!
}

"""aggregate avg on columns"""
type lake_avg_fields {
  area: Float
}

"""
order by avg() on columns of table "lake"
"""
input lake_avg_order_by {
  area: order_by
}

"""
Boolean expression to filter rows from the table "lake". All fields are combined with a logical 'AND'.
"""
input lake_bool_exp {
  _and: [lake_bool_exp]
  _not: lake_bool_exp
  _or: [lake_bool_exp]
  area: float8_comparison_exp
  country_name: String_comparison_exp
  lake_name: String_comparison_exp
  state_name: String_comparison_exp
}

"""
input type for incrementing integer column in table "lake"
"""
input lake_inc_input {
  area: float8
}

"""
input type for inserting data into table "lake"
"""
input lake_insert_input {
  area: float8
  country_name: String
  lake_name: String
  state_name: String
}

"""aggregate max on columns"""
type lake_max_fields {
  area: float8
  country_name: String
  lake_name: String
  state_name: String
}

"""
order by max() on columns of table "lake"
"""
input lake_max_order_by {
  area: order_by
  country_name: order_by
  lake_name: order_by
  state_name: order_by
}

"""aggregate min on columns"""
type lake_min_fields {
  area: float8
  country_name: String
  lake_name: String
  state_name: String
}

"""
order by min() on columns of table "lake"
"""
input lake_min_order_by {
  area: order_by
  country_name: order_by
  lake_name: order_by
  state_name: order_by
}

"""
response of any mutation on the table "lake"
"""
type lake_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [lake!]!
}

"""
input type for inserting object relation for remote table "lake"
"""
input lake_obj_rel_insert_input {
  data: lake_insert_input!
}

"""
ordering options when selecting data from "lake"
"""
input lake_order_by {
  area: order_by
  country_name: order_by
  lake_name: order_by
  state_name: order_by
}

"""
select columns of table "lake"
"""
enum lake_select_column {
  """column name"""
  area

  """column name"""
  country_name

  """column name"""
  lake_name

  """column name"""
  state_name
}

"""
input type for updating data in table "lake"
"""
input lake_set_input {
  area: float8
  country_name: String
  lake_name: String
  state_name: String
}

"""aggregate stddev on columns"""
type lake_stddev_fields {
  area: Float
}

"""
order by stddev() on columns of table "lake"
"""
input lake_stddev_order_by {
  area: order_by
}

"""aggregate stddev_pop on columns"""
type lake_stddev_pop_fields {
  area: Float
}

"""
order by stddev_pop() on columns of table "lake"
"""
input lake_stddev_pop_order_by {
  area: order_by
}

"""aggregate stddev_samp on columns"""
type lake_stddev_samp_fields {
  area: Float
}

"""
order by stddev_samp() on columns of table "lake"
"""
input lake_stddev_samp_order_by {
  area: order_by
}

"""aggregate sum on columns"""
type lake_sum_fields {
  area: float8
}

"""
order by sum() on columns of table "lake"
"""
input lake_sum_order_by {
  area: order_by
}

"""aggregate var_pop on columns"""
type lake_var_pop_fields {
  area: Float
}

"""
order by var_pop() on columns of table "lake"
"""
input lake_var_pop_order_by {
  area: order_by
}

"""aggregate var_samp on columns"""
type lake_var_samp_fields {
  area: Float
}

"""
order by var_samp() on columns of table "lake"
"""
input lake_var_samp_order_by {
  area: order_by
}

"""aggregate variance on columns"""
type lake_variance_fields {
  area: Float
}

"""
order by variance() on columns of table "lake"
"""
input lake_variance_order_by {
  area: order_by
}

"""
columns and relationships of "mountain"
"""
type mountain {
  country_name: String
  mountain_altitude: bigint
  mountain_name: String!

  """An object relationship"""
  state: state!
  state_name: String!
}

"""
aggregated selection of "mountain"
"""
type mountain_aggregate {
  aggregate: mountain_aggregate_fields
  nodes: [mountain!]!
}

"""
aggregate fields of "mountain"
"""
type mountain_aggregate_fields {
  avg: mountain_avg_fields
  count(columns: [mountain_select_column!], distinct: Boolean): Int
  max: mountain_max_fields
  min: mountain_min_fields
  stddev: mountain_stddev_fields
  stddev_pop: mountain_stddev_pop_fields
  stddev_samp: mountain_stddev_samp_fields
  sum: mountain_sum_fields
  var_pop: mountain_var_pop_fields
  var_samp: mountain_var_samp_fields
  variance: mountain_variance_fields
}

"""
order by aggregate values of table "mountain"
"""
input mountain_aggregate_order_by {
  avg: mountain_avg_order_by
  count: order_by
  max: mountain_max_order_by
  min: mountain_min_order_by
  stddev: mountain_stddev_order_by
  stddev_pop: mountain_stddev_pop_order_by
  stddev_samp: mountain_stddev_samp_order_by
  sum: mountain_sum_order_by
  var_pop: mountain_var_pop_order_by
  var_samp: mountain_var_samp_order_by
  variance: mountain_variance_order_by
}

"""
input type for inserting array relation for remote table "mountain"
"""
input mountain_arr_rel_insert_input {
  data: [mountain_insert_input!]!
  on_conflict: mountain_on_conflict
}

"""aggregate avg on columns"""
type mountain_avg_fields {
  mountain_altitude: Float
}

"""
order by avg() on columns of table "mountain"
"""
input mountain_avg_order_by {
  mountain_altitude: order_by
}

"""
Boolean expression to filter rows from the table "mountain". All fields are combined with a logical 'AND'.
"""
input mountain_bool_exp {
  _and: [mountain_bool_exp]
  _not: mountain_bool_exp
  _or: [mountain_bool_exp]
  country_name: String_comparison_exp
  mountain_altitude: bigint_comparison_exp
  mountain_name: String_comparison_exp
  state: state_bool_exp
  state_name: String_comparison_exp
}

"""
unique or primary key constraints on table "mountain"
"""
enum mountain_constraint {
  """unique or primary key constraint"""
  idx_20555_sqlite_autoindex_mountain_1
}

"""
input type for incrementing integer column in table "mountain"
"""
input mountain_inc_input {
  mountain_altitude: bigint
}

"""
input type for inserting data into table "mountain"
"""
input mountain_insert_input {
  country_name: String
  mountain_altitude: bigint
  mountain_name: String
  state: state_obj_rel_insert_input
  state_name: String
}

"""aggregate max on columns"""
type mountain_max_fields {
  country_name: String
  mountain_altitude: bigint
  mountain_name: String
  state_name: String
}

"""
order by max() on columns of table "mountain"
"""
input mountain_max_order_by {
  country_name: order_by
  mountain_altitude: order_by
  mountain_name: order_by
  state_name: order_by
}

"""aggregate min on columns"""
type mountain_min_fields {
  country_name: String
  mountain_altitude: bigint
  mountain_name: String
  state_name: String
}

"""
order by min() on columns of table "mountain"
"""
input mountain_min_order_by {
  country_name: order_by
  mountain_altitude: order_by
  mountain_name: order_by
  state_name: order_by
}

"""
response of any mutation on the table "mountain"
"""
type mountain_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [mountain!]!
}

"""
input type for inserting object relation for remote table "mountain"
"""
input mountain_obj_rel_insert_input {
  data: mountain_insert_input!
  on_conflict: mountain_on_conflict
}

"""
on conflict condition type for table "mountain"
"""
input mountain_on_conflict {
  constraint: mountain_constraint!
  update_columns: [mountain_update_column!]!
  where: mountain_bool_exp
}

"""
ordering options when selecting data from "mountain"
"""
input mountain_order_by {
  country_name: order_by
  mountain_altitude: order_by
  mountain_name: order_by
  state: state_order_by
  state_name: order_by
}

"""
primary key columns input for table: "mountain"
"""
input mountain_pk_columns_input {
  mountain_name: String!
  state_name: String!
}

"""
select columns of table "mountain"
"""
enum mountain_select_column {
  """column name"""
  country_name

  """column name"""
  mountain_altitude

  """column name"""
  mountain_name

  """column name"""
  state_name
}

"""
input type for updating data in table "mountain"
"""
input mountain_set_input {
  country_name: String
  mountain_altitude: bigint
  mountain_name: String
  state_name: String
}

"""aggregate stddev on columns"""
type mountain_stddev_fields {
  mountain_altitude: Float
}

"""
order by stddev() on columns of table "mountain"
"""
input mountain_stddev_order_by {
  mountain_altitude: order_by
}

"""aggregate stddev_pop on columns"""
type mountain_stddev_pop_fields {
  mountain_altitude: Float
}

"""
order by stddev_pop() on columns of table "mountain"
"""
input mountain_stddev_pop_order_by {
  mountain_altitude: order_by
}

"""aggregate stddev_samp on columns"""
type mountain_stddev_samp_fields {
  mountain_altitude: Float
}

"""
order by stddev_samp() on columns of table "mountain"
"""
input mountain_stddev_samp_order_by {
  mountain_altitude: order_by
}

"""aggregate sum on columns"""
type mountain_sum_fields {
  mountain_altitude: bigint
}

"""
order by sum() on columns of table "mountain"
"""
input mountain_sum_order_by {
  mountain_altitude: order_by
}

"""
update columns of table "mountain"
"""
enum mountain_update_column {
  """column name"""
  country_name

  """column name"""
  mountain_altitude

  """column name"""
  mountain_name

  """column name"""
  state_name
}

"""aggregate var_pop on columns"""
type mountain_var_pop_fields {
  mountain_altitude: Float
}

"""
order by var_pop() on columns of table "mountain"
"""
input mountain_var_pop_order_by {
  mountain_altitude: order_by
}

"""aggregate var_samp on columns"""
type mountain_var_samp_fields {
  mountain_altitude: Float
}

"""
order by var_samp() on columns of table "mountain"
"""
input mountain_var_samp_order_by {
  mountain_altitude: order_by
}

"""aggregate variance on columns"""
type mountain_variance_fields {
  mountain_altitude: Float
}

"""
order by variance() on columns of table "mountain"
"""
input mountain_variance_order_by {
  mountain_altitude: order_by
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "border_info"
  """
  delete_border_info(
    """filter the rows which have to be deleted"""
    where: border_info_bool_exp!
  ): border_info_mutation_response

  """
  delete data from the table: "city"
  """
  delete_city(
    """filter the rows which have to be deleted"""
    where: city_bool_exp!
  ): city_mutation_response

  """
  delete single row from the table: "city"
  """
  delete_city_by_pk(city_name: String!, state_name: String!): city

  """
  delete data from the table: "highlow"
  """
  delete_highlow(
    """filter the rows which have to be deleted"""
    where: highlow_bool_exp!
  ): highlow_mutation_response

  """
  delete single row from the table: "highlow"
  """
  delete_highlow_by_pk(state_name: String!): highlow

  """
  delete data from the table: "lake"
  """
  delete_lake(
    """filter the rows which have to be deleted"""
    where: lake_bool_exp!
  ): lake_mutation_response

  """
  delete data from the table: "mountain"
  """
  delete_mountain(
    """filter the rows which have to be deleted"""
    where: mountain_bool_exp!
  ): mountain_mutation_response

  """
  delete single row from the table: "mountain"
  """
  delete_mountain_by_pk(mountain_name: String!, state_name: String!): mountain

  """
  delete data from the table: "river"
  """
  delete_river(
    """filter the rows which have to be deleted"""
    where: river_bool_exp!
  ): river_mutation_response

  """
  delete single row from the table: "river"
  """
  delete_river_by_pk(river_name: String!): river

  """
  delete data from the table: "state"
  """
  delete_state(
    """filter the rows which have to be deleted"""
    where: state_bool_exp!
  ): state_mutation_response

  """
  delete single row from the table: "state"
  """
  delete_state_by_pk(state_name: String!): state

  """
  insert data into the table: "border_info"
  """
  insert_border_info(
    """the rows to be inserted"""
    objects: [border_info_insert_input!]!

    """on conflict condition"""
    on_conflict: border_info_on_conflict
  ): border_info_mutation_response

  """
  insert a single row into the table: "border_info"
  """
  insert_border_info_one(
    """the row to be inserted"""
    object: border_info_insert_input!

    """on conflict condition"""
    on_conflict: border_info_on_conflict
  ): border_info

  """
  insert data into the table: "city"
  """
  insert_city(
    """the rows to be inserted"""
    objects: [city_insert_input!]!

    """on conflict condition"""
    on_conflict: city_on_conflict
  ): city_mutation_response

  """
  insert a single row into the table: "city"
  """
  insert_city_one(
    """the row to be inserted"""
    object: city_insert_input!

    """on conflict condition"""
    on_conflict: city_on_conflict
  ): city

  """
  insert data into the table: "highlow"
  """
  insert_highlow(
    """the rows to be inserted"""
    objects: [highlow_insert_input!]!

    """on conflict condition"""
    on_conflict: highlow_on_conflict
  ): highlow_mutation_response

  """
  insert a single row into the table: "highlow"
  """
  insert_highlow_one(
    """the row to be inserted"""
    object: highlow_insert_input!

    """on conflict condition"""
    on_conflict: highlow_on_conflict
  ): highlow

  """
  insert data into the table: "lake"
  """
  insert_lake(
    """the rows to be inserted"""
    objects: [lake_insert_input!]!
  ): lake_mutation_response

  """
  insert a single row into the table: "lake"
  """
  insert_lake_one(
    """the row to be inserted"""
    object: lake_insert_input!
  ): lake

  """
  insert data into the table: "mountain"
  """
  insert_mountain(
    """the rows to be inserted"""
    objects: [mountain_insert_input!]!

    """on conflict condition"""
    on_conflict: mountain_on_conflict
  ): mountain_mutation_response

  """
  insert a single row into the table: "mountain"
  """
  insert_mountain_one(
    """the row to be inserted"""
    object: mountain_insert_input!

    """on conflict condition"""
    on_conflict: mountain_on_conflict
  ): mountain

  """
  insert data into the table: "river"
  """
  insert_river(
    """the rows to be inserted"""
    objects: [river_insert_input!]!

    """on conflict condition"""
    on_conflict: river_on_conflict
  ): river_mutation_response

  """
  insert a single row into the table: "river"
  """
  insert_river_one(
    """the row to be inserted"""
    object: river_insert_input!

    """on conflict condition"""
    on_conflict: river_on_conflict
  ): river

  """
  insert data into the table: "state"
  """
  insert_state(
    """the rows to be inserted"""
    objects: [state_insert_input!]!

    """on conflict condition"""
    on_conflict: state_on_conflict
  ): state_mutation_response

  """
  insert a single row into the table: "state"
  """
  insert_state_one(
    """the row to be inserted"""
    object: state_insert_input!

    """on conflict condition"""
    on_conflict: state_on_conflict
  ): state

  """
  update data of the table: "border_info"
  """
  update_border_info(
    """sets the columns of the filtered rows to the given values"""
    _set: border_info_set_input

    """filter the rows which have to be updated"""
    where: border_info_bool_exp!
  ): border_info_mutation_response

  """
  update data of the table: "city"
  """
  update_city(
    """increments the integer columns with given value of the filtered values"""
    _inc: city_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: city_set_input

    """filter the rows which have to be updated"""
    where: city_bool_exp!
  ): city_mutation_response

  """
  update single row of the table: "city"
  """
  update_city_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: city_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: city_set_input
    pk_columns: city_pk_columns_input!
  ): city

  """
  update data of the table: "highlow"
  """
  update_highlow(
    """sets the columns of the filtered rows to the given values"""
    _set: highlow_set_input

    """filter the rows which have to be updated"""
    where: highlow_bool_exp!
  ): highlow_mutation_response

  """
  update single row of the table: "highlow"
  """
  update_highlow_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: highlow_set_input
    pk_columns: highlow_pk_columns_input!
  ): highlow

  """
  update data of the table: "lake"
  """
  update_lake(
    """increments the integer columns with given value of the filtered values"""
    _inc: lake_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: lake_set_input

    """filter the rows which have to be updated"""
    where: lake_bool_exp!
  ): lake_mutation_response

  """
  update data of the table: "mountain"
  """
  update_mountain(
    """increments the integer columns with given value of the filtered values"""
    _inc: mountain_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: mountain_set_input

    """filter the rows which have to be updated"""
    where: mountain_bool_exp!
  ): mountain_mutation_response

  """
  update single row of the table: "mountain"
  """
  update_mountain_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: mountain_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: mountain_set_input
    pk_columns: mountain_pk_columns_input!
  ): mountain

  """
  update data of the table: "river"
  """
  update_river(
    """increments the integer columns with given value of the filtered values"""
    _inc: river_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: river_set_input

    """filter the rows which have to be updated"""
    where: river_bool_exp!
  ): river_mutation_response

  """
  update single row of the table: "river"
  """
  update_river_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: river_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: river_set_input
    pk_columns: river_pk_columns_input!
  ): river

  """
  update data of the table: "state"
  """
  update_state(
    """increments the integer columns with given value of the filtered values"""
    _inc: state_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: state_set_input

    """filter the rows which have to be updated"""
    where: state_bool_exp!
  ): state_mutation_response

  """
  update single row of the table: "state"
  """
  update_state_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: state_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: state_set_input
    pk_columns: state_pk_columns_input!
  ): state
}

"""column ordering options"""
enum order_by {
  """in the ascending order, nulls last"""
  asc

  """in the ascending order, nulls first"""
  asc_nulls_first

  """in the ascending order, nulls last"""
  asc_nulls_last

  """in the descending order, nulls first"""
  desc

  """in the descending order, nulls first"""
  desc_nulls_first

  """in the descending order, nulls last"""
  desc_nulls_last
}

"""query root"""
type query_root {
  """
  fetch data from the table: "border_info"
  """
  border_info(
    """distinct select on columns"""
    distinct_on: [border_info_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [border_info_order_by!]

    """filter the rows returned"""
    where: border_info_bool_exp
  ): [border_info!]!

  """
  fetch aggregated fields from the table: "border_info"
  """
  border_info_aggregate(
    """distinct select on columns"""
    distinct_on: [border_info_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [border_info_order_by!]

    """filter the rows returned"""
    where: border_info_bool_exp
  ): border_info_aggregate!

  """
  fetch data from the table: "city"
  """
  city(
    """distinct select on columns"""
    distinct_on: [city_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [city_order_by!]

    """filter the rows returned"""
    where: city_bool_exp
  ): [city!]!

  """
  fetch aggregated fields from the table: "city"
  """
  city_aggregate(
    """distinct select on columns"""
    distinct_on: [city_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [city_order_by!]

    """filter the rows returned"""
    where: city_bool_exp
  ): city_aggregate!

  """fetch data from the table: "city" using primary key columns"""
  city_by_pk(city_name: String!, state_name: String!): city

  """
  fetch data from the table: "highlow"
  """
  highlow(
    """distinct select on columns"""
    distinct_on: [highlow_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [highlow_order_by!]

    """filter the rows returned"""
    where: highlow_bool_exp
  ): [highlow!]!

  """
  fetch aggregated fields from the table: "highlow"
  """
  highlow_aggregate(
    """distinct select on columns"""
    distinct_on: [highlow_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [highlow_order_by!]

    """filter the rows returned"""
    where: highlow_bool_exp
  ): highlow_aggregate!

  """fetch data from the table: "highlow" using primary key columns"""
  highlow_by_pk(state_name: String!): highlow

  """
  fetch data from the table: "lake"
  """
  lake(
    """distinct select on columns"""
    distinct_on: [lake_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [lake_order_by!]

    """filter the rows returned"""
    where: lake_bool_exp
  ): [lake!]!

  """
  fetch aggregated fields from the table: "lake"
  """
  lake_aggregate(
    """distinct select on columns"""
    distinct_on: [lake_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [lake_order_by!]

    """filter the rows returned"""
    where: lake_bool_exp
  ): lake_aggregate!

  """
  fetch data from the table: "mountain"
  """
  mountain(
    """distinct select on columns"""
    distinct_on: [mountain_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [mountain_order_by!]

    """filter the rows returned"""
    where: mountain_bool_exp
  ): [mountain!]!

  """
  fetch aggregated fields from the table: "mountain"
  """
  mountain_aggregate(
    """distinct select on columns"""
    distinct_on: [mountain_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [mountain_order_by!]

    """filter the rows returned"""
    where: mountain_bool_exp
  ): mountain_aggregate!

  """fetch data from the table: "mountain" using primary key columns"""
  mountain_by_pk(mountain_name: String!, state_name: String!): mountain

  """
  fetch data from the table: "river"
  """
  river(
    """distinct select on columns"""
    distinct_on: [river_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [river_order_by!]

    """filter the rows returned"""
    where: river_bool_exp
  ): [river!]!

  """
  fetch aggregated fields from the table: "river"
  """
  river_aggregate(
    """distinct select on columns"""
    distinct_on: [river_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [river_order_by!]

    """filter the rows returned"""
    where: river_bool_exp
  ): river_aggregate!

  """fetch data from the table: "river" using primary key columns"""
  river_by_pk(river_name: String!): river

  """
  fetch data from the table: "state"
  """
  state(
    """distinct select on columns"""
    distinct_on: [state_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [state_order_by!]

    """filter the rows returned"""
    where: state_bool_exp
  ): [state!]!

  """
  fetch aggregated fields from the table: "state"
  """
  state_aggregate(
    """distinct select on columns"""
    distinct_on: [state_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [state_order_by!]

    """filter the rows returned"""
    where: state_bool_exp
  ): state_aggregate!

  """fetch data from the table: "state" using primary key columns"""
  state_by_pk(state_name: String!): state
}

"""
columns and relationships of "river"
"""
type river {
  country_name: String
  length: bigint
  river_name: String!

  """An object relationship"""
  state: state
  traverse: String
}

"""
aggregated selection of "river"
"""
type river_aggregate {
  aggregate: river_aggregate_fields
  nodes: [river!]!
}

"""
aggregate fields of "river"
"""
type river_aggregate_fields {
  avg: river_avg_fields
  count(columns: [river_select_column!], distinct: Boolean): Int
  max: river_max_fields
  min: river_min_fields
  stddev: river_stddev_fields
  stddev_pop: river_stddev_pop_fields
  stddev_samp: river_stddev_samp_fields
  sum: river_sum_fields
  var_pop: river_var_pop_fields
  var_samp: river_var_samp_fields
  variance: river_variance_fields
}

"""
order by aggregate values of table "river"
"""
input river_aggregate_order_by {
  avg: river_avg_order_by
  count: order_by
  max: river_max_order_by
  min: river_min_order_by
  stddev: river_stddev_order_by
  stddev_pop: river_stddev_pop_order_by
  stddev_samp: river_stddev_samp_order_by
  sum: river_sum_order_by
  var_pop: river_var_pop_order_by
  var_samp: river_var_samp_order_by
  variance: river_variance_order_by
}

"""
input type for inserting array relation for remote table "river"
"""
input river_arr_rel_insert_input {
  data: [river_insert_input!]!
  on_conflict: river_on_conflict
}

"""aggregate avg on columns"""
type river_avg_fields {
  length: Float
}

"""
order by avg() on columns of table "river"
"""
input river_avg_order_by {
  length: order_by
}

"""
Boolean expression to filter rows from the table "river". All fields are combined with a logical 'AND'.
"""
input river_bool_exp {
  _and: [river_bool_exp]
  _not: river_bool_exp
  _or: [river_bool_exp]
  country_name: String_comparison_exp
  length: bigint_comparison_exp
  river_name: String_comparison_exp
  state: state_bool_exp
  traverse: String_comparison_exp
}

"""
unique or primary key constraints on table "river"
"""
enum river_constraint {
  """unique or primary key constraint"""
  idx_20562_sqlite_autoindex_river_1
}

"""
input type for incrementing integer column in table "river"
"""
input river_inc_input {
  length: bigint
}

"""
input type for inserting data into table "river"
"""
input river_insert_input {
  country_name: String
  length: bigint
  river_name: String
  state: state_obj_rel_insert_input
  traverse: String
}

"""aggregate max on columns"""
type river_max_fields {
  country_name: String
  length: bigint
  river_name: String
  traverse: String
}

"""
order by max() on columns of table "river"
"""
input river_max_order_by {
  country_name: order_by
  length: order_by
  river_name: order_by
  traverse: order_by
}

"""aggregate min on columns"""
type river_min_fields {
  country_name: String
  length: bigint
  river_name: String
  traverse: String
}

"""
order by min() on columns of table "river"
"""
input river_min_order_by {
  country_name: order_by
  length: order_by
  river_name: order_by
  traverse: order_by
}

"""
response of any mutation on the table "river"
"""
type river_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [river!]!
}

"""
input type for inserting object relation for remote table "river"
"""
input river_obj_rel_insert_input {
  data: river_insert_input!
  on_conflict: river_on_conflict
}

"""
on conflict condition type for table "river"
"""
input river_on_conflict {
  constraint: river_constraint!
  update_columns: [river_update_column!]!
  where: river_bool_exp
}

"""
ordering options when selecting data from "river"
"""
input river_order_by {
  country_name: order_by
  length: order_by
  river_name: order_by
  state: state_order_by
  traverse: order_by
}

"""
primary key columns input for table: "river"
"""
input river_pk_columns_input {
  river_name: String!
}

"""
select columns of table "river"
"""
enum river_select_column {
  """column name"""
  country_name

  """column name"""
  length

  """column name"""
  river_name

  """column name"""
  traverse
}

"""
input type for updating data in table "river"
"""
input river_set_input {
  country_name: String
  length: bigint
  river_name: String
  traverse: String
}

"""aggregate stddev on columns"""
type river_stddev_fields {
  length: Float
}

"""
order by stddev() on columns of table "river"
"""
input river_stddev_order_by {
  length: order_by
}

"""aggregate stddev_pop on columns"""
type river_stddev_pop_fields {
  length: Float
}

"""
order by stddev_pop() on columns of table "river"
"""
input river_stddev_pop_order_by {
  length: order_by
}

"""aggregate stddev_samp on columns"""
type river_stddev_samp_fields {
  length: Float
}

"""
order by stddev_samp() on columns of table "river"
"""
input river_stddev_samp_order_by {
  length: order_by
}

"""aggregate sum on columns"""
type river_sum_fields {
  length: bigint
}

"""
order by sum() on columns of table "river"
"""
input river_sum_order_by {
  length: order_by
}

"""
update columns of table "river"
"""
enum river_update_column {
  """column name"""
  country_name

  """column name"""
  length

  """column name"""
  river_name

  """column name"""
  traverse
}

"""aggregate var_pop on columns"""
type river_var_pop_fields {
  length: Float
}

"""
order by var_pop() on columns of table "river"
"""
input river_var_pop_order_by {
  length: order_by
}

"""aggregate var_samp on columns"""
type river_var_samp_fields {
  length: Float
}

"""
order by var_samp() on columns of table "river"
"""
input river_var_samp_order_by {
  length: order_by
}

"""aggregate variance on columns"""
type river_variance_fields {
  length: Float
}

"""
order by variance() on columns of table "river"
"""
input river_variance_order_by {
  length: order_by
}

"""
columns and relationships of "state"
"""
type state {
  area: float8

  """An array relationship"""
  borderInfosByStateName(
    """distinct select on columns"""
    distinct_on: [border_info_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [border_info_order_by!]

    """filter the rows returned"""
    where: border_info_bool_exp
  ): [border_info!]!

  """An aggregated array relationship"""
  borderInfosByStateName_aggregate(
    """distinct select on columns"""
    distinct_on: [border_info_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [border_info_order_by!]

    """filter the rows returned"""
    where: border_info_bool_exp
  ): border_info_aggregate!

  """An array relationship"""
  border_infos(
    """distinct select on columns"""
    distinct_on: [border_info_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [border_info_order_by!]

    """filter the rows returned"""
    where: border_info_bool_exp
  ): [border_info!]!

  """An aggregated array relationship"""
  border_infos_aggregate(
    """distinct select on columns"""
    distinct_on: [border_info_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [border_info_order_by!]

    """filter the rows returned"""
    where: border_info_bool_exp
  ): border_info_aggregate!
  capital: String

  """An array relationship"""
  cities(
    """distinct select on columns"""
    distinct_on: [city_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [city_order_by!]

    """filter the rows returned"""
    where: city_bool_exp
  ): [city!]!

  """An aggregated array relationship"""
  cities_aggregate(
    """distinct select on columns"""
    distinct_on: [city_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [city_order_by!]

    """filter the rows returned"""
    where: city_bool_exp
  ): city_aggregate!
  country_name: String
  density: float8

  """An array relationship"""
  highlows(
    """distinct select on columns"""
    distinct_on: [highlow_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [highlow_order_by!]

    """filter the rows returned"""
    where: highlow_bool_exp
  ): [highlow!]!

  """An aggregated array relationship"""
  highlows_aggregate(
    """distinct select on columns"""
    distinct_on: [highlow_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [highlow_order_by!]

    """filter the rows returned"""
    where: highlow_bool_exp
  ): highlow_aggregate!

  """An array relationship"""
  mountains(
    """distinct select on columns"""
    distinct_on: [mountain_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [mountain_order_by!]

    """filter the rows returned"""
    where: mountain_bool_exp
  ): [mountain!]!

  """An aggregated array relationship"""
  mountains_aggregate(
    """distinct select on columns"""
    distinct_on: [mountain_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [mountain_order_by!]

    """filter the rows returned"""
    where: mountain_bool_exp
  ): mountain_aggregate!
  population: bigint

  """An array relationship"""
  rivers(
    """distinct select on columns"""
    distinct_on: [river_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [river_order_by!]

    """filter the rows returned"""
    where: river_bool_exp
  ): [river!]!

  """An aggregated array relationship"""
  rivers_aggregate(
    """distinct select on columns"""
    distinct_on: [river_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [river_order_by!]

    """filter the rows returned"""
    where: river_bool_exp
  ): river_aggregate!
  state_name: String!
}

"""
aggregated selection of "state"
"""
type state_aggregate {
  aggregate: state_aggregate_fields
  nodes: [state!]!
}

"""
aggregate fields of "state"
"""
type state_aggregate_fields {
  avg: state_avg_fields
  count(columns: [state_select_column!], distinct: Boolean): Int
  max: state_max_fields
  min: state_min_fields
  stddev: state_stddev_fields
  stddev_pop: state_stddev_pop_fields
  stddev_samp: state_stddev_samp_fields
  sum: state_sum_fields
  var_pop: state_var_pop_fields
  var_samp: state_var_samp_fields
  variance: state_variance_fields
}

"""
order by aggregate values of table "state"
"""
input state_aggregate_order_by {
  avg: state_avg_order_by
  count: order_by
  max: state_max_order_by
  min: state_min_order_by
  stddev: state_stddev_order_by
  stddev_pop: state_stddev_pop_order_by
  stddev_samp: state_stddev_samp_order_by
  sum: state_sum_order_by
  var_pop: state_var_pop_order_by
  var_samp: state_var_samp_order_by
  variance: state_variance_order_by
}

"""
input type for inserting array relation for remote table "state"
"""
input state_arr_rel_insert_input {
  data: [state_insert_input!]!
  on_conflict: state_on_conflict
}

"""aggregate avg on columns"""
type state_avg_fields {
  area: Float
  density: Float
  population: Float
}

"""
order by avg() on columns of table "state"
"""
input state_avg_order_by {
  area: order_by
  density: order_by
  population: order_by
}

"""
Boolean expression to filter rows from the table "state". All fields are combined with a logical 'AND'.
"""
input state_bool_exp {
  _and: [state_bool_exp]
  _not: state_bool_exp
  _or: [state_bool_exp]
  area: float8_comparison_exp
  borderInfosByStateName: border_info_bool_exp
  border_infos: border_info_bool_exp
  capital: String_comparison_exp
  cities: city_bool_exp
  country_name: String_comparison_exp
  density: float8_comparison_exp
  highlows: highlow_bool_exp
  mountains: mountain_bool_exp
  population: bigint_comparison_exp
  rivers: river_bool_exp
  state_name: String_comparison_exp
}

"""
unique or primary key constraints on table "state"
"""
enum state_constraint {
  """unique or primary key constraint"""
  idx_20522_sqlite_autoindex_state_1
}

"""
input type for incrementing integer column in table "state"
"""
input state_inc_input {
  area: float8
  density: float8
  population: bigint
}

"""
input type for inserting data into table "state"
"""
input state_insert_input {
  area: float8
  borderInfosByStateName: border_info_arr_rel_insert_input
  border_infos: border_info_arr_rel_insert_input
  capital: String
  cities: city_arr_rel_insert_input
  country_name: String
  density: float8
  highlows: highlow_arr_rel_insert_input
  mountains: mountain_arr_rel_insert_input
  population: bigint
  rivers: river_arr_rel_insert_input
  state_name: String
}

"""aggregate max on columns"""
type state_max_fields {
  area: float8
  capital: String
  country_name: String
  density: float8
  population: bigint
  state_name: String
}

"""
order by max() on columns of table "state"
"""
input state_max_order_by {
  area: order_by
  capital: order_by
  country_name: order_by
  density: order_by
  population: order_by
  state_name: order_by
}

"""aggregate min on columns"""
type state_min_fields {
  area: float8
  capital: String
  country_name: String
  density: float8
  population: bigint
  state_name: String
}

"""
order by min() on columns of table "state"
"""
input state_min_order_by {
  area: order_by
  capital: order_by
  country_name: order_by
  density: order_by
  population: order_by
  state_name: order_by
}

"""
response of any mutation on the table "state"
"""
type state_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [state!]!
}

"""
input type for inserting object relation for remote table "state"
"""
input state_obj_rel_insert_input {
  data: state_insert_input!
  on_conflict: state_on_conflict
}

"""
on conflict condition type for table "state"
"""
input state_on_conflict {
  constraint: state_constraint!
  update_columns: [state_update_column!]!
  where: state_bool_exp
}

"""
ordering options when selecting data from "state"
"""
input state_order_by {
  area: order_by
  borderInfosByStateName_aggregate: border_info_aggregate_order_by
  border_infos_aggregate: border_info_aggregate_order_by
  capital: order_by
  cities_aggregate: city_aggregate_order_by
  country_name: order_by
  density: order_by
  highlows_aggregate: highlow_aggregate_order_by
  mountains_aggregate: mountain_aggregate_order_by
  population: order_by
  rivers_aggregate: river_aggregate_order_by
  state_name: order_by
}

"""
primary key columns input for table: "state"
"""
input state_pk_columns_input {
  state_name: String!
}

"""
select columns of table "state"
"""
enum state_select_column {
  """column name"""
  area

  """column name"""
  capital

  """column name"""
  country_name

  """column name"""
  density

  """column name"""
  population

  """column name"""
  state_name
}

"""
input type for updating data in table "state"
"""
input state_set_input {
  area: float8
  capital: String
  country_name: String
  density: float8
  population: bigint
  state_name: String
}

"""aggregate stddev on columns"""
type state_stddev_fields {
  area: Float
  density: Float
  population: Float
}

"""
order by stddev() on columns of table "state"
"""
input state_stddev_order_by {
  area: order_by
  density: order_by
  population: order_by
}

"""aggregate stddev_pop on columns"""
type state_stddev_pop_fields {
  area: Float
  density: Float
  population: Float
}

"""
order by stddev_pop() on columns of table "state"
"""
input state_stddev_pop_order_by {
  area: order_by
  density: order_by
  population: order_by
}

"""aggregate stddev_samp on columns"""
type state_stddev_samp_fields {
  area: Float
  density: Float
  population: Float
}

"""
order by stddev_samp() on columns of table "state"
"""
input state_stddev_samp_order_by {
  area: order_by
  density: order_by
  population: order_by
}

"""aggregate sum on columns"""
type state_sum_fields {
  area: float8
  density: float8
  population: bigint
}

"""
order by sum() on columns of table "state"
"""
input state_sum_order_by {
  area: order_by
  density: order_by
  population: order_by
}

"""
update columns of table "state"
"""
enum state_update_column {
  """column name"""
  area

  """column name"""
  capital

  """column name"""
  country_name

  """column name"""
  density

  """column name"""
  population

  """column name"""
  state_name
}

"""aggregate var_pop on columns"""
type state_var_pop_fields {
  area: Float
  density: Float
  population: Float
}

"""
order by var_pop() on columns of table "state"
"""
input state_var_pop_order_by {
  area: order_by
  density: order_by
  population: order_by
}

"""aggregate var_samp on columns"""
type state_var_samp_fields {
  area: Float
  density: Float
  population: Float
}

"""
order by var_samp() on columns of table "state"
"""
input state_var_samp_order_by {
  area: order_by
  density: order_by
  population: order_by
}

"""aggregate variance on columns"""
type state_variance_fields {
  area: Float
  density: Float
  population: Float
}

"""
order by variance() on columns of table "state"
"""
input state_variance_order_by {
  area: order_by
  density: order_by
  population: order_by
}

"""
expression to compare columns of type String. All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String
  _ilike: String
  _in: [String!]
  _is_null: Boolean
  _like: String
  _lt: String
  _lte: String
  _neq: String
  _nilike: String
  _nin: [String!]
  _nlike: String
  _nsimilar: String
  _similar: String
}

"""subscription root"""
type subscription_root {
  """
  fetch data from the table: "border_info"
  """
  border_info(
    """distinct select on columns"""
    distinct_on: [border_info_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [border_info_order_by!]

    """filter the rows returned"""
    where: border_info_bool_exp
  ): [border_info!]!

  """
  fetch aggregated fields from the table: "border_info"
  """
  border_info_aggregate(
    """distinct select on columns"""
    distinct_on: [border_info_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [border_info_order_by!]

    """filter the rows returned"""
    where: border_info_bool_exp
  ): border_info_aggregate!

  """
  fetch data from the table: "city"
  """
  city(
    """distinct select on columns"""
    distinct_on: [city_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [city_order_by!]

    """filter the rows returned"""
    where: city_bool_exp
  ): [city!]!

  """
  fetch aggregated fields from the table: "city"
  """
  city_aggregate(
    """distinct select on columns"""
    distinct_on: [city_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [city_order_by!]

    """filter the rows returned"""
    where: city_bool_exp
  ): city_aggregate!

  """fetch data from the table: "city" using primary key columns"""
  city_by_pk(city_name: String!, state_name: String!): city

  """
  fetch data from the table: "highlow"
  """
  highlow(
    """distinct select on columns"""
    distinct_on: [highlow_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [highlow_order_by!]

    """filter the rows returned"""
    where: highlow_bool_exp
  ): [highlow!]!

  """
  fetch aggregated fields from the table: "highlow"
  """
  highlow_aggregate(
    """distinct select on columns"""
    distinct_on: [highlow_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [highlow_order_by!]

    """filter the rows returned"""
    where: highlow_bool_exp
  ): highlow_aggregate!

  """fetch data from the table: "highlow" using primary key columns"""
  highlow_by_pk(state_name: String!): highlow

  """
  fetch data from the table: "lake"
  """
  lake(
    """distinct select on columns"""
    distinct_on: [lake_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [lake_order_by!]

    """filter the rows returned"""
    where: lake_bool_exp
  ): [lake!]!

  """
  fetch aggregated fields from the table: "lake"
  """
  lake_aggregate(
    """distinct select on columns"""
    distinct_on: [lake_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [lake_order_by!]

    """filter the rows returned"""
    where: lake_bool_exp
  ): lake_aggregate!

  """
  fetch data from the table: "mountain"
  """
  mountain(
    """distinct select on columns"""
    distinct_on: [mountain_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [mountain_order_by!]

    """filter the rows returned"""
    where: mountain_bool_exp
  ): [mountain!]!

  """
  fetch aggregated fields from the table: "mountain"
  """
  mountain_aggregate(
    """distinct select on columns"""
    distinct_on: [mountain_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [mountain_order_by!]

    """filter the rows returned"""
    where: mountain_bool_exp
  ): mountain_aggregate!

  """fetch data from the table: "mountain" using primary key columns"""
  mountain_by_pk(mountain_name: String!, state_name: String!): mountain

  """
  fetch data from the table: "river"
  """
  river(
    """distinct select on columns"""
    distinct_on: [river_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [river_order_by!]

    """filter the rows returned"""
    where: river_bool_exp
  ): [river!]!

  """
  fetch aggregated fields from the table: "river"
  """
  river_aggregate(
    """distinct select on columns"""
    distinct_on: [river_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [river_order_by!]

    """filter the rows returned"""
    where: river_bool_exp
  ): river_aggregate!

  """fetch data from the table: "river" using primary key columns"""
  river_by_pk(river_name: String!): river

  """
  fetch data from the table: "state"
  """
  state(
    """distinct select on columns"""
    distinct_on: [state_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [state_order_by!]

    """filter the rows returned"""
    where: state_bool_exp
  ): [state!]!

  """
  fetch aggregated fields from the table: "state"
  """
  state_aggregate(
    """distinct select on columns"""
    distinct_on: [state_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [state_order_by!]

    """filter the rows returned"""
    where: state_bool_exp
  ): state_aggregate!

  """fetch data from the table: "state" using primary key columns"""
  state_by_pk(state_name: String!): state
}
