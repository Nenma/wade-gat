schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""
Direct the client to resolve this field locally, either from the cache or local resolvers.
"""
directive @client(
  """
  When true, the client will never use the cache for this value. See
  https://www.apollographql.com/docs/react/essentials/local-state/#forcing-resolvers-with-clientalways-true
  """
  always: Boolean
) on FIELD | FRAGMENT_DEFINITION | INLINE_FRAGMENT

"""
Export this locally resolved field as a variable to be used in the remainder of this query. See
https://www.apollographql.com/docs/react/essentials/local-state/#using-client-fields-as-variables
"""
directive @export(
  """The variable name to export this field as."""
  as: String!
) on FIELD

"""
Specify a custom store key for this result. See
https://www.apollographql.com/docs/react/advanced/caching/#the-connection-directive
"""
directive @connection(
  """Specify the store key."""
  key: String!

  """
  An array of query argument names to include in the generated custom store key.
  """
  filter: [String!]
) on FIELD

"""
columns and relationships of "budget"
"""
type budget {
  budget_invested_percent: String
  budgeted: Int
  invested: Int

  """An object relationship"""
  school: school
  school_id: Int
  total_budget_percent_budgeted: Float
  total_budget_percent_invested: Float
  year: Int
}

"""
aggregated selection of "budget"
"""
type budget_aggregate {
  aggregate: budget_aggregate_fields
  nodes: [budget!]!
}

"""
aggregate fields of "budget"
"""
type budget_aggregate_fields {
  avg: budget_avg_fields
  count(columns: [budget_select_column!], distinct: Boolean): Int
  max: budget_max_fields
  min: budget_min_fields
  stddev: budget_stddev_fields
  stddev_pop: budget_stddev_pop_fields
  stddev_samp: budget_stddev_samp_fields
  sum: budget_sum_fields
  var_pop: budget_var_pop_fields
  var_samp: budget_var_samp_fields
  variance: budget_variance_fields
}

"""
order by aggregate values of table "budget"
"""
input budget_aggregate_order_by {
  avg: budget_avg_order_by
  count: order_by
  max: budget_max_order_by
  min: budget_min_order_by
  stddev: budget_stddev_order_by
  stddev_pop: budget_stddev_pop_order_by
  stddev_samp: budget_stddev_samp_order_by
  sum: budget_sum_order_by
  var_pop: budget_var_pop_order_by
  var_samp: budget_var_samp_order_by
  variance: budget_variance_order_by
}

"""
input type for inserting array relation for remote table "budget"
"""
input budget_arr_rel_insert_input {
  data: [budget_insert_input!]!
  on_conflict: budget_on_conflict
}

"""aggregate avg on columns"""
type budget_avg_fields {
  budgeted: Float
  invested: Float
  school_id: Float
  total_budget_percent_budgeted: Float
  total_budget_percent_invested: Float
  year: Float
}

"""
order by avg() on columns of table "budget"
"""
input budget_avg_order_by {
  budgeted: order_by
  invested: order_by
  school_id: order_by
  total_budget_percent_budgeted: order_by
  total_budget_percent_invested: order_by
  year: order_by
}

"""
Boolean expression to filter rows from the table "budget". All fields are combined with a logical 'AND'.
"""
input budget_bool_exp {
  _and: [budget_bool_exp]
  _not: budget_bool_exp
  _or: [budget_bool_exp]
  budget_invested_percent: String_comparison_exp
  budgeted: Int_comparison_exp
  invested: Int_comparison_exp
  school: school_bool_exp
  school_id: Int_comparison_exp
  total_budget_percent_budgeted: Float_comparison_exp
  total_budget_percent_invested: Float_comparison_exp
  year: Int_comparison_exp
}

"""
unique or primary key constraints on table "budget"
"""
enum budget_constraint {
  """unique or primary key constraint"""
  idx_22189_sqlite_autoindex_budget_1
}

"""
input type for incrementing integer column in table "budget"
"""
input budget_inc_input {
  budgeted: Int
  invested: Int
  school_id: Int
  total_budget_percent_budgeted: Float
  total_budget_percent_invested: Float
  year: Int
}

"""
input type for inserting data into table "budget"
"""
input budget_insert_input {
  budget_invested_percent: String
  budgeted: Int
  invested: Int
  school: school_obj_rel_insert_input
  school_id: Int
  total_budget_percent_budgeted: Float
  total_budget_percent_invested: Float
  year: Int
}

"""aggregate max on columns"""
type budget_max_fields {
  budget_invested_percent: String
  budgeted: Int
  invested: Int
  school_id: Int
  total_budget_percent_budgeted: Float
  total_budget_percent_invested: Float
  year: Int
}

"""
order by max() on columns of table "budget"
"""
input budget_max_order_by {
  budget_invested_percent: order_by
  budgeted: order_by
  invested: order_by
  school_id: order_by
  total_budget_percent_budgeted: order_by
  total_budget_percent_invested: order_by
  year: order_by
}

"""aggregate min on columns"""
type budget_min_fields {
  budget_invested_percent: String
  budgeted: Int
  invested: Int
  school_id: Int
  total_budget_percent_budgeted: Float
  total_budget_percent_invested: Float
  year: Int
}

"""
order by min() on columns of table "budget"
"""
input budget_min_order_by {
  budget_invested_percent: order_by
  budgeted: order_by
  invested: order_by
  school_id: order_by
  total_budget_percent_budgeted: order_by
  total_budget_percent_invested: order_by
  year: order_by
}

"""
response of any mutation on the table "budget"
"""
type budget_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [budget!]!
}

"""
input type for inserting object relation for remote table "budget"
"""
input budget_obj_rel_insert_input {
  data: budget_insert_input!
  on_conflict: budget_on_conflict
}

"""
on conflict condition type for table "budget"
"""
input budget_on_conflict {
  constraint: budget_constraint!
  update_columns: [budget_update_column!]!
  where: budget_bool_exp
}

"""
ordering options when selecting data from "budget"
"""
input budget_order_by {
  budget_invested_percent: order_by
  budgeted: order_by
  invested: order_by
  school: school_order_by
  school_id: order_by
  total_budget_percent_budgeted: order_by
  total_budget_percent_invested: order_by
  year: order_by
}

"""
select columns of table "budget"
"""
enum budget_select_column {
  """column name"""
  budget_invested_percent

  """column name"""
  budgeted

  """column name"""
  invested

  """column name"""
  school_id

  """column name"""
  total_budget_percent_budgeted

  """column name"""
  total_budget_percent_invested

  """column name"""
  year
}

"""
input type for updating data in table "budget"
"""
input budget_set_input {
  budget_invested_percent: String
  budgeted: Int
  invested: Int
  school_id: Int
  total_budget_percent_budgeted: Float
  total_budget_percent_invested: Float
  year: Int
}

"""aggregate stddev on columns"""
type budget_stddev_fields {
  budgeted: Float
  invested: Float
  school_id: Float
  total_budget_percent_budgeted: Float
  total_budget_percent_invested: Float
  year: Float
}

"""
order by stddev() on columns of table "budget"
"""
input budget_stddev_order_by {
  budgeted: order_by
  invested: order_by
  school_id: order_by
  total_budget_percent_budgeted: order_by
  total_budget_percent_invested: order_by
  year: order_by
}

"""aggregate stddev_pop on columns"""
type budget_stddev_pop_fields {
  budgeted: Float
  invested: Float
  school_id: Float
  total_budget_percent_budgeted: Float
  total_budget_percent_invested: Float
  year: Float
}

"""
order by stddev_pop() on columns of table "budget"
"""
input budget_stddev_pop_order_by {
  budgeted: order_by
  invested: order_by
  school_id: order_by
  total_budget_percent_budgeted: order_by
  total_budget_percent_invested: order_by
  year: order_by
}

"""aggregate stddev_samp on columns"""
type budget_stddev_samp_fields {
  budgeted: Float
  invested: Float
  school_id: Float
  total_budget_percent_budgeted: Float
  total_budget_percent_invested: Float
  year: Float
}

"""
order by stddev_samp() on columns of table "budget"
"""
input budget_stddev_samp_order_by {
  budgeted: order_by
  invested: order_by
  school_id: order_by
  total_budget_percent_budgeted: order_by
  total_budget_percent_invested: order_by
  year: order_by
}

"""aggregate sum on columns"""
type budget_sum_fields {
  budgeted: Int
  invested: Int
  school_id: Int
  total_budget_percent_budgeted: Float
  total_budget_percent_invested: Float
  year: Int
}

"""
order by sum() on columns of table "budget"
"""
input budget_sum_order_by {
  budgeted: order_by
  invested: order_by
  school_id: order_by
  total_budget_percent_budgeted: order_by
  total_budget_percent_invested: order_by
  year: order_by
}

"""
update columns of table "budget"
"""
enum budget_update_column {
  """column name"""
  budget_invested_percent

  """column name"""
  budgeted

  """column name"""
  invested

  """column name"""
  school_id

  """column name"""
  total_budget_percent_budgeted

  """column name"""
  total_budget_percent_invested

  """column name"""
  year
}

"""aggregate var_pop on columns"""
type budget_var_pop_fields {
  budgeted: Float
  invested: Float
  school_id: Float
  total_budget_percent_budgeted: Float
  total_budget_percent_invested: Float
  year: Float
}

"""
order by var_pop() on columns of table "budget"
"""
input budget_var_pop_order_by {
  budgeted: order_by
  invested: order_by
  school_id: order_by
  total_budget_percent_budgeted: order_by
  total_budget_percent_invested: order_by
  year: order_by
}

"""aggregate var_samp on columns"""
type budget_var_samp_fields {
  budgeted: Float
  invested: Float
  school_id: Float
  total_budget_percent_budgeted: Float
  total_budget_percent_invested: Float
  year: Float
}

"""
order by var_samp() on columns of table "budget"
"""
input budget_var_samp_order_by {
  budgeted: order_by
  invested: order_by
  school_id: order_by
  total_budget_percent_budgeted: order_by
  total_budget_percent_invested: order_by
  year: order_by
}

"""aggregate variance on columns"""
type budget_variance_fields {
  budgeted: Float
  invested: Float
  school_id: Float
  total_budget_percent_budgeted: Float
  total_budget_percent_invested: Float
  year: Float
}

"""
order by variance() on columns of table "budget"
"""
input budget_variance_order_by {
  budgeted: order_by
  invested: order_by
  school_id: order_by
  total_budget_percent_budgeted: order_by
  total_budget_percent_invested: order_by
  year: order_by
}

"""
columns and relationships of "endowment"
"""
type endowment {
  amount: Float
  donator_name: String
  endowment_id: Int!

  """An object relationship"""
  school: school
  school_id: Int
}

"""
aggregated selection of "endowment"
"""
type endowment_aggregate {
  aggregate: endowment_aggregate_fields
  nodes: [endowment!]!
}

"""
aggregate fields of "endowment"
"""
type endowment_aggregate_fields {
  avg: endowment_avg_fields
  count(columns: [endowment_select_column!], distinct: Boolean): Int
  max: endowment_max_fields
  min: endowment_min_fields
  stddev: endowment_stddev_fields
  stddev_pop: endowment_stddev_pop_fields
  stddev_samp: endowment_stddev_samp_fields
  sum: endowment_sum_fields
  var_pop: endowment_var_pop_fields
  var_samp: endowment_var_samp_fields
  variance: endowment_variance_fields
}

"""
order by aggregate values of table "endowment"
"""
input endowment_aggregate_order_by {
  avg: endowment_avg_order_by
  count: order_by
  max: endowment_max_order_by
  min: endowment_min_order_by
  stddev: endowment_stddev_order_by
  stddev_pop: endowment_stddev_pop_order_by
  stddev_samp: endowment_stddev_samp_order_by
  sum: endowment_sum_order_by
  var_pop: endowment_var_pop_order_by
  var_samp: endowment_var_samp_order_by
  variance: endowment_variance_order_by
}

"""
input type for inserting array relation for remote table "endowment"
"""
input endowment_arr_rel_insert_input {
  data: [endowment_insert_input!]!
  on_conflict: endowment_on_conflict
}

"""aggregate avg on columns"""
type endowment_avg_fields {
  amount: Float
  endowment_id: Float
  school_id: Float
}

"""
order by avg() on columns of table "endowment"
"""
input endowment_avg_order_by {
  amount: order_by
  endowment_id: order_by
  school_id: order_by
}

"""
Boolean expression to filter rows from the table "endowment". All fields are combined with a logical 'AND'.
"""
input endowment_bool_exp {
  _and: [endowment_bool_exp]
  _not: endowment_bool_exp
  _or: [endowment_bool_exp]
  amount: Float_comparison_exp
  donator_name: String_comparison_exp
  endowment_id: Int_comparison_exp
  school: school_bool_exp
  school_id: Int_comparison_exp
}

"""
unique or primary key constraints on table "endowment"
"""
enum endowment_constraint {
  """unique or primary key constraint"""
  idx_22195_sqlite_autoindex_endowment_1
}

"""
input type for incrementing integer column in table "endowment"
"""
input endowment_inc_input {
  amount: Float
  endowment_id: Int
  school_id: Int
}

"""
input type for inserting data into table "endowment"
"""
input endowment_insert_input {
  amount: Float
  donator_name: String
  endowment_id: Int
  school: school_obj_rel_insert_input
  school_id: Int
}

"""aggregate max on columns"""
type endowment_max_fields {
  amount: Float
  donator_name: String
  endowment_id: Int
  school_id: Int
}

"""
order by max() on columns of table "endowment"
"""
input endowment_max_order_by {
  amount: order_by
  donator_name: order_by
  endowment_id: order_by
  school_id: order_by
}

"""aggregate min on columns"""
type endowment_min_fields {
  amount: Float
  donator_name: String
  endowment_id: Int
  school_id: Int
}

"""
order by min() on columns of table "endowment"
"""
input endowment_min_order_by {
  amount: order_by
  donator_name: order_by
  endowment_id: order_by
  school_id: order_by
}

"""
response of any mutation on the table "endowment"
"""
type endowment_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [endowment!]!
}

"""
input type for inserting object relation for remote table "endowment"
"""
input endowment_obj_rel_insert_input {
  data: endowment_insert_input!
  on_conflict: endowment_on_conflict
}

"""
on conflict condition type for table "endowment"
"""
input endowment_on_conflict {
  constraint: endowment_constraint!
  update_columns: [endowment_update_column!]!
  where: endowment_bool_exp
}

"""
ordering options when selecting data from "endowment"
"""
input endowment_order_by {
  amount: order_by
  donator_name: order_by
  endowment_id: order_by
  school: school_order_by
  school_id: order_by
}

"""
primary key columns input for table: "endowment"
"""
input endowment_pk_columns_input {
  endowment_id: Int!
}

"""
select columns of table "endowment"
"""
enum endowment_select_column {
  """column name"""
  amount

  """column name"""
  donator_name

  """column name"""
  endowment_id

  """column name"""
  school_id
}

"""
input type for updating data in table "endowment"
"""
input endowment_set_input {
  amount: Float
  donator_name: String
  endowment_id: Int
  school_id: Int
}

"""aggregate stddev on columns"""
type endowment_stddev_fields {
  amount: Float
  endowment_id: Float
  school_id: Float
}

"""
order by stddev() on columns of table "endowment"
"""
input endowment_stddev_order_by {
  amount: order_by
  endowment_id: order_by
  school_id: order_by
}

"""aggregate stddev_pop on columns"""
type endowment_stddev_pop_fields {
  amount: Float
  endowment_id: Float
  school_id: Float
}

"""
order by stddev_pop() on columns of table "endowment"
"""
input endowment_stddev_pop_order_by {
  amount: order_by
  endowment_id: order_by
  school_id: order_by
}

"""aggregate stddev_samp on columns"""
type endowment_stddev_samp_fields {
  amount: Float
  endowment_id: Float
  school_id: Float
}

"""
order by stddev_samp() on columns of table "endowment"
"""
input endowment_stddev_samp_order_by {
  amount: order_by
  endowment_id: order_by
  school_id: order_by
}

"""aggregate sum on columns"""
type endowment_sum_fields {
  amount: Float
  endowment_id: Int
  school_id: Int
}

"""
order by sum() on columns of table "endowment"
"""
input endowment_sum_order_by {
  amount: order_by
  endowment_id: order_by
  school_id: order_by
}

"""
update columns of table "endowment"
"""
enum endowment_update_column {
  """column name"""
  amount

  """column name"""
  donator_name

  """column name"""
  endowment_id

  """column name"""
  school_id
}

"""aggregate var_pop on columns"""
type endowment_var_pop_fields {
  amount: Float
  endowment_id: Float
  school_id: Float
}

"""
order by var_pop() on columns of table "endowment"
"""
input endowment_var_pop_order_by {
  amount: order_by
  endowment_id: order_by
  school_id: order_by
}

"""aggregate var_samp on columns"""
type endowment_var_samp_fields {
  amount: Float
  endowment_id: Float
  school_id: Float
}

"""
order by var_samp() on columns of table "endowment"
"""
input endowment_var_samp_order_by {
  amount: order_by
  endowment_id: order_by
  school_id: order_by
}

"""aggregate variance on columns"""
type endowment_variance_fields {
  amount: Float
  endowment_id: Float
  school_id: Float
}

"""
order by variance() on columns of table "endowment"
"""
input endowment_variance_order_by {
  amount: order_by
  endowment_id: order_by
  school_id: order_by
}

"""
expression to compare columns of type Float. All fields are combined with logical 'AND'.
"""
input Float_comparison_exp {
  _eq: Float
  _gt: Float
  _gte: Float
  _in: [Float!]
  _is_null: Boolean
  _lt: Float
  _lte: Float
  _neq: Float
  _nin: [Float!]
}

"""
expression to compare columns of type Int. All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "budget"
  """
  delete_budget(
    """filter the rows which have to be deleted"""
    where: budget_bool_exp!
  ): budget_mutation_response

  """
  delete data from the table: "endowment"
  """
  delete_endowment(
    """filter the rows which have to be deleted"""
    where: endowment_bool_exp!
  ): endowment_mutation_response

  """
  delete single row from the table: "endowment"
  """
  delete_endowment_by_pk(endowment_id: Int!): endowment

  """
  delete data from the table: "school"
  """
  delete_school(
    """filter the rows which have to be deleted"""
    where: school_bool_exp!
  ): school_mutation_response

  """
  insert data into the table: "budget"
  """
  insert_budget(
    """the rows to be inserted"""
    objects: [budget_insert_input!]!

    """on conflict condition"""
    on_conflict: budget_on_conflict
  ): budget_mutation_response

  """
  insert a single row into the table: "budget"
  """
  insert_budget_one(
    """the row to be inserted"""
    object: budget_insert_input!

    """on conflict condition"""
    on_conflict: budget_on_conflict
  ): budget

  """
  insert data into the table: "endowment"
  """
  insert_endowment(
    """the rows to be inserted"""
    objects: [endowment_insert_input!]!

    """on conflict condition"""
    on_conflict: endowment_on_conflict
  ): endowment_mutation_response

  """
  insert a single row into the table: "endowment"
  """
  insert_endowment_one(
    """the row to be inserted"""
    object: endowment_insert_input!

    """on conflict condition"""
    on_conflict: endowment_on_conflict
  ): endowment

  """
  insert data into the table: "school"
  """
  insert_school(
    """the rows to be inserted"""
    objects: [school_insert_input!]!

    """on conflict condition"""
    on_conflict: school_on_conflict
  ): school_mutation_response

  """
  insert a single row into the table: "school"
  """
  insert_school_one(
    """the row to be inserted"""
    object: school_insert_input!

    """on conflict condition"""
    on_conflict: school_on_conflict
  ): school

  """
  update data of the table: "budget"
  """
  update_budget(
    """increments the integer columns with given value of the filtered values"""
    _inc: budget_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: budget_set_input

    """filter the rows which have to be updated"""
    where: budget_bool_exp!
  ): budget_mutation_response

  """
  update data of the table: "endowment"
  """
  update_endowment(
    """increments the integer columns with given value of the filtered values"""
    _inc: endowment_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: endowment_set_input

    """filter the rows which have to be updated"""
    where: endowment_bool_exp!
  ): endowment_mutation_response

  """
  update single row of the table: "endowment"
  """
  update_endowment_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: endowment_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: endowment_set_input
    pk_columns: endowment_pk_columns_input!
  ): endowment

  """
  update data of the table: "school"
  """
  update_school(
    """increments the integer columns with given value of the filtered values"""
    _inc: school_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: school_set_input

    """filter the rows which have to be updated"""
    where: school_bool_exp!
  ): school_mutation_response
}

"""column ordering options"""
enum order_by {
  """in the ascending order, nulls last"""
  asc

  """in the ascending order, nulls first"""
  asc_nulls_first

  """in the ascending order, nulls last"""
  asc_nulls_last

  """in the descending order, nulls first"""
  desc

  """in the descending order, nulls first"""
  desc_nulls_first

  """in the descending order, nulls last"""
  desc_nulls_last
}

"""query root"""
type query_root {
  """
  fetch data from the table: "budget"
  """
  budget(
    """distinct select on columns"""
    distinct_on: [budget_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [budget_order_by!]

    """filter the rows returned"""
    where: budget_bool_exp
  ): [budget!]!

  """
  fetch aggregated fields from the table: "budget"
  """
  budget_aggregate(
    """distinct select on columns"""
    distinct_on: [budget_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [budget_order_by!]

    """filter the rows returned"""
    where: budget_bool_exp
  ): budget_aggregate!

  """
  fetch data from the table: "endowment"
  """
  endowment(
    """distinct select on columns"""
    distinct_on: [endowment_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [endowment_order_by!]

    """filter the rows returned"""
    where: endowment_bool_exp
  ): [endowment!]!

  """
  fetch aggregated fields from the table: "endowment"
  """
  endowment_aggregate(
    """distinct select on columns"""
    distinct_on: [endowment_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [endowment_order_by!]

    """filter the rows returned"""
    where: endowment_bool_exp
  ): endowment_aggregate!

  """fetch data from the table: "endowment" using primary key columns"""
  endowment_by_pk(endowment_id: Int!): endowment

  """
  fetch data from the table: "school"
  """
  school(
    """distinct select on columns"""
    distinct_on: [school_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [school_order_by!]

    """filter the rows returned"""
    where: school_bool_exp
  ): [school!]!

  """
  fetch aggregated fields from the table: "school"
  """
  school_aggregate(
    """distinct select on columns"""
    distinct_on: [school_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [school_order_by!]

    """filter the rows returned"""
    where: school_bool_exp
  ): school_aggregate!
}

"""
columns and relationships of "school"
"""
type school {
  """An array relationship"""
  budgets(
    """distinct select on columns"""
    distinct_on: [budget_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [budget_order_by!]

    """filter the rows returned"""
    where: budget_bool_exp
  ): [budget!]!

  """An aggregated array relationship"""
  budgets_aggregate(
    """distinct select on columns"""
    distinct_on: [budget_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [budget_order_by!]

    """filter the rows returned"""
    where: budget_bool_exp
  ): budget_aggregate!
  county: String

  """An array relationship"""
  endowments(
    """distinct select on columns"""
    distinct_on: [endowment_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [endowment_order_by!]

    """filter the rows returned"""
    where: endowment_bool_exp
  ): [endowment!]!

  """An aggregated array relationship"""
  endowments_aggregate(
    """distinct select on columns"""
    distinct_on: [endowment_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [endowment_order_by!]

    """filter the rows returned"""
    where: endowment_bool_exp
  ): endowment_aggregate!
  enrollment: Int
  ihsaa_class: String
  ihsaa_football_class: String
  location: String
  mascot: String
  school_id: Int
  school_name: String
}

"""
aggregated selection of "school"
"""
type school_aggregate {
  aggregate: school_aggregate_fields
  nodes: [school!]!
}

"""
aggregate fields of "school"
"""
type school_aggregate_fields {
  avg: school_avg_fields
  count(columns: [school_select_column!], distinct: Boolean): Int
  max: school_max_fields
  min: school_min_fields
  stddev: school_stddev_fields
  stddev_pop: school_stddev_pop_fields
  stddev_samp: school_stddev_samp_fields
  sum: school_sum_fields
  var_pop: school_var_pop_fields
  var_samp: school_var_samp_fields
  variance: school_variance_fields
}

"""
order by aggregate values of table "school"
"""
input school_aggregate_order_by {
  avg: school_avg_order_by
  count: order_by
  max: school_max_order_by
  min: school_min_order_by
  stddev: school_stddev_order_by
  stddev_pop: school_stddev_pop_order_by
  stddev_samp: school_stddev_samp_order_by
  sum: school_sum_order_by
  var_pop: school_var_pop_order_by
  var_samp: school_var_samp_order_by
  variance: school_variance_order_by
}

"""
input type for inserting array relation for remote table "school"
"""
input school_arr_rel_insert_input {
  data: [school_insert_input!]!
  on_conflict: school_on_conflict
}

"""aggregate avg on columns"""
type school_avg_fields {
  enrollment: Float
  school_id: Float
}

"""
order by avg() on columns of table "school"
"""
input school_avg_order_by {
  enrollment: order_by
  school_id: order_by
}

"""
Boolean expression to filter rows from the table "school". All fields are combined with a logical 'AND'.
"""
input school_bool_exp {
  _and: [school_bool_exp]
  _not: school_bool_exp
  _or: [school_bool_exp]
  budgets: budget_bool_exp
  county: String_comparison_exp
  endowments: endowment_bool_exp
  enrollment: Int_comparison_exp
  ihsaa_class: String_comparison_exp
  ihsaa_football_class: String_comparison_exp
  location: String_comparison_exp
  mascot: String_comparison_exp
  school_id: Int_comparison_exp
  school_name: String_comparison_exp
}

"""
unique or primary key constraints on table "school"
"""
enum school_constraint {
  """unique or primary key constraint"""
  idx_22183_sqlite_autoindex_school_1
}

"""
input type for incrementing integer column in table "school"
"""
input school_inc_input {
  enrollment: Int
  school_id: Int
}

"""
input type for inserting data into table "school"
"""
input school_insert_input {
  budgets: budget_arr_rel_insert_input
  county: String
  endowments: endowment_arr_rel_insert_input
  enrollment: Int
  ihsaa_class: String
  ihsaa_football_class: String
  location: String
  mascot: String
  school_id: Int
  school_name: String
}

"""aggregate max on columns"""
type school_max_fields {
  county: String
  enrollment: Int
  ihsaa_class: String
  ihsaa_football_class: String
  location: String
  mascot: String
  school_id: Int
  school_name: String
}

"""
order by max() on columns of table "school"
"""
input school_max_order_by {
  county: order_by
  enrollment: order_by
  ihsaa_class: order_by
  ihsaa_football_class: order_by
  location: order_by
  mascot: order_by
  school_id: order_by
  school_name: order_by
}

"""aggregate min on columns"""
type school_min_fields {
  county: String
  enrollment: Int
  ihsaa_class: String
  ihsaa_football_class: String
  location: String
  mascot: String
  school_id: Int
  school_name: String
}

"""
order by min() on columns of table "school"
"""
input school_min_order_by {
  county: order_by
  enrollment: order_by
  ihsaa_class: order_by
  ihsaa_football_class: order_by
  location: order_by
  mascot: order_by
  school_id: order_by
  school_name: order_by
}

"""
response of any mutation on the table "school"
"""
type school_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [school!]!
}

"""
input type for inserting object relation for remote table "school"
"""
input school_obj_rel_insert_input {
  data: school_insert_input!
  on_conflict: school_on_conflict
}

"""
on conflict condition type for table "school"
"""
input school_on_conflict {
  constraint: school_constraint!
  update_columns: [school_update_column!]!
  where: school_bool_exp
}

"""
ordering options when selecting data from "school"
"""
input school_order_by {
  budgets_aggregate: budget_aggregate_order_by
  county: order_by
  endowments_aggregate: endowment_aggregate_order_by
  enrollment: order_by
  ihsaa_class: order_by
  ihsaa_football_class: order_by
  location: order_by
  mascot: order_by
  school_id: order_by
  school_name: order_by
}

"""
select columns of table "school"
"""
enum school_select_column {
  """column name"""
  county

  """column name"""
  enrollment

  """column name"""
  ihsaa_class

  """column name"""
  ihsaa_football_class

  """column name"""
  location

  """column name"""
  mascot

  """column name"""
  school_id

  """column name"""
  school_name
}

"""
input type for updating data in table "school"
"""
input school_set_input {
  county: String
  enrollment: Int
  ihsaa_class: String
  ihsaa_football_class: String
  location: String
  mascot: String
  school_id: Int
  school_name: String
}

"""aggregate stddev on columns"""
type school_stddev_fields {
  enrollment: Float
  school_id: Float
}

"""
order by stddev() on columns of table "school"
"""
input school_stddev_order_by {
  enrollment: order_by
  school_id: order_by
}

"""aggregate stddev_pop on columns"""
type school_stddev_pop_fields {
  enrollment: Float
  school_id: Float
}

"""
order by stddev_pop() on columns of table "school"
"""
input school_stddev_pop_order_by {
  enrollment: order_by
  school_id: order_by
}

"""aggregate stddev_samp on columns"""
type school_stddev_samp_fields {
  enrollment: Float
  school_id: Float
}

"""
order by stddev_samp() on columns of table "school"
"""
input school_stddev_samp_order_by {
  enrollment: order_by
  school_id: order_by
}

"""aggregate sum on columns"""
type school_sum_fields {
  enrollment: Int
  school_id: Int
}

"""
order by sum() on columns of table "school"
"""
input school_sum_order_by {
  enrollment: order_by
  school_id: order_by
}

"""
update columns of table "school"
"""
enum school_update_column {
  """column name"""
  county

  """column name"""
  enrollment

  """column name"""
  ihsaa_class

  """column name"""
  ihsaa_football_class

  """column name"""
  location

  """column name"""
  mascot

  """column name"""
  school_id

  """column name"""
  school_name
}

"""aggregate var_pop on columns"""
type school_var_pop_fields {
  enrollment: Float
  school_id: Float
}

"""
order by var_pop() on columns of table "school"
"""
input school_var_pop_order_by {
  enrollment: order_by
  school_id: order_by
}

"""aggregate var_samp on columns"""
type school_var_samp_fields {
  enrollment: Float
  school_id: Float
}

"""
order by var_samp() on columns of table "school"
"""
input school_var_samp_order_by {
  enrollment: order_by
  school_id: order_by
}

"""aggregate variance on columns"""
type school_variance_fields {
  enrollment: Float
  school_id: Float
}

"""
order by variance() on columns of table "school"
"""
input school_variance_order_by {
  enrollment: order_by
  school_id: order_by
}

"""
expression to compare columns of type String. All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String
  _ilike: String
  _in: [String!]
  _is_null: Boolean
  _like: String
  _lt: String
  _lte: String
  _neq: String
  _nilike: String
  _nin: [String!]
  _nlike: String
  _nsimilar: String
  _similar: String
}

"""subscription root"""
type subscription_root {
  """
  fetch data from the table: "budget"
  """
  budget(
    """distinct select on columns"""
    distinct_on: [budget_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [budget_order_by!]

    """filter the rows returned"""
    where: budget_bool_exp
  ): [budget!]!

  """
  fetch aggregated fields from the table: "budget"
  """
  budget_aggregate(
    """distinct select on columns"""
    distinct_on: [budget_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [budget_order_by!]

    """filter the rows returned"""
    where: budget_bool_exp
  ): budget_aggregate!

  """
  fetch data from the table: "endowment"
  """
  endowment(
    """distinct select on columns"""
    distinct_on: [endowment_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [endowment_order_by!]

    """filter the rows returned"""
    where: endowment_bool_exp
  ): [endowment!]!

  """
  fetch aggregated fields from the table: "endowment"
  """
  endowment_aggregate(
    """distinct select on columns"""
    distinct_on: [endowment_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [endowment_order_by!]

    """filter the rows returned"""
    where: endowment_bool_exp
  ): endowment_aggregate!

  """fetch data from the table: "endowment" using primary key columns"""
  endowment_by_pk(endowment_id: Int!): endowment

  """
  fetch data from the table: "school"
  """
  school(
    """distinct select on columns"""
    distinct_on: [school_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [school_order_by!]

    """filter the rows returned"""
    where: school_bool_exp
  ): [school!]!

  """
  fetch aggregated fields from the table: "school"
  """
  school_aggregate(
    """distinct select on columns"""
    distinct_on: [school_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [school_order_by!]

    """filter the rows returned"""
    where: school_bool_exp
  ): school_aggregate!
}
