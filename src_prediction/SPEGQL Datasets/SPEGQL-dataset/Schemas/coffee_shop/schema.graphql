schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""
Direct the client to resolve this field locally, either from the cache or local resolvers.
"""
directive @client(
  """
  When true, the client will never use the cache for this value. See
  https://www.apollographql.com/docs/react/essentials/local-state/#forcing-resolvers-with-clientalways-true
  """
  always: Boolean
) on FIELD | FRAGMENT_DEFINITION | INLINE_FRAGMENT

"""
Export this locally resolved field as a variable to be used in the remainder of this query. See
https://www.apollographql.com/docs/react/essentials/local-state/#using-client-fields-as-variables
"""
directive @export(
  """The variable name to export this field as."""
  as: String!
) on FIELD

"""
Specify a custom store key for this result. See
https://www.apollographql.com/docs/react/advanced/caching/#the-connection-directive
"""
directive @connection(
  """Specify the store key."""
  key: String!

  """
  An array of query argument names to include in the generated custom store key.
  """
  filter: [String!]
) on FIELD

"""
expression to compare columns of type Float. All fields are combined with logical 'AND'.
"""
input Float_comparison_exp {
  _eq: Float
  _gt: Float
  _gte: Float
  _in: [Float!]
  _is_null: Boolean
  _lt: Float
  _lte: Float
  _neq: Float
  _nin: [Float!]
}

"""
columns and relationships of "happy_hour"
"""
type happy_hour {
  """An array relationship"""
  happy_hour_members(
    """distinct select on columns"""
    distinct_on: [happy_hour_member_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [happy_hour_member_order_by!]

    """filter the rows returned"""
    where: happy_hour_member_bool_exp
  ): [happy_hour_member!]!

  """An aggregated array relationship"""
  happy_hour_members_aggregate(
    """distinct select on columns"""
    distinct_on: [happy_hour_member_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [happy_hour_member_order_by!]

    """filter the rows returned"""
    where: happy_hour_member_bool_exp
  ): happy_hour_member_aggregate!
  hh_id: Int
  month: String
  num_of_shaff_in_charge: Int

  """An object relationship"""
  shop: shop
  shop_id: Int
}

"""
aggregated selection of "happy_hour"
"""
type happy_hour_aggregate {
  aggregate: happy_hour_aggregate_fields
  nodes: [happy_hour!]!
}

"""
aggregate fields of "happy_hour"
"""
type happy_hour_aggregate_fields {
  avg: happy_hour_avg_fields
  count(columns: [happy_hour_select_column!], distinct: Boolean): Int
  max: happy_hour_max_fields
  min: happy_hour_min_fields
  stddev: happy_hour_stddev_fields
  stddev_pop: happy_hour_stddev_pop_fields
  stddev_samp: happy_hour_stddev_samp_fields
  sum: happy_hour_sum_fields
  var_pop: happy_hour_var_pop_fields
  var_samp: happy_hour_var_samp_fields
  variance: happy_hour_variance_fields
}

"""
order by aggregate values of table "happy_hour"
"""
input happy_hour_aggregate_order_by {
  avg: happy_hour_avg_order_by
  count: order_by
  max: happy_hour_max_order_by
  min: happy_hour_min_order_by
  stddev: happy_hour_stddev_order_by
  stddev_pop: happy_hour_stddev_pop_order_by
  stddev_samp: happy_hour_stddev_samp_order_by
  sum: happy_hour_sum_order_by
  var_pop: happy_hour_var_pop_order_by
  var_samp: happy_hour_var_samp_order_by
  variance: happy_hour_variance_order_by
}

"""
input type for inserting array relation for remote table "happy_hour"
"""
input happy_hour_arr_rel_insert_input {
  data: [happy_hour_insert_input!]!
  on_conflict: happy_hour_on_conflict
}

"""aggregate avg on columns"""
type happy_hour_avg_fields {
  hh_id: Float
  num_of_shaff_in_charge: Float
  shop_id: Float
}

"""
order by avg() on columns of table "happy_hour"
"""
input happy_hour_avg_order_by {
  hh_id: order_by
  num_of_shaff_in_charge: order_by
  shop_id: order_by
}

"""
Boolean expression to filter rows from the table "happy_hour". All fields are combined with a logical 'AND'.
"""
input happy_hour_bool_exp {
  _and: [happy_hour_bool_exp]
  _not: happy_hour_bool_exp
  _or: [happy_hour_bool_exp]
  happy_hour_members: happy_hour_member_bool_exp
  hh_id: Int_comparison_exp
  month: String_comparison_exp
  num_of_shaff_in_charge: Int_comparison_exp
  shop: shop_bool_exp
  shop_id: Int_comparison_exp
}

"""
unique or primary key constraints on table "happy_hour"
"""
enum happy_hour_constraint {
  """unique or primary key constraint"""
  happy_hour_hh_id_key

  """unique or primary key constraint"""
  idx_25534_sqlite_autoindex_happy_hour_1
}

"""
input type for incrementing integer column in table "happy_hour"
"""
input happy_hour_inc_input {
  hh_id: Int
  num_of_shaff_in_charge: Int
  shop_id: Int
}

"""
input type for inserting data into table "happy_hour"
"""
input happy_hour_insert_input {
  happy_hour_members: happy_hour_member_arr_rel_insert_input
  hh_id: Int
  month: String
  num_of_shaff_in_charge: Int
  shop: shop_obj_rel_insert_input
  shop_id: Int
}

"""aggregate max on columns"""
type happy_hour_max_fields {
  hh_id: Int
  month: String
  num_of_shaff_in_charge: Int
  shop_id: Int
}

"""
order by max() on columns of table "happy_hour"
"""
input happy_hour_max_order_by {
  hh_id: order_by
  month: order_by
  num_of_shaff_in_charge: order_by
  shop_id: order_by
}

"""
columns and relationships of "happy_hour_member"
"""
type happy_hour_member {
  """An object relationship"""
  happy_hour: happy_hour
  hh_id: Int

  """An object relationship"""
  member: member
  member_id: Int
  total_amount: Float
}

"""
aggregated selection of "happy_hour_member"
"""
type happy_hour_member_aggregate {
  aggregate: happy_hour_member_aggregate_fields
  nodes: [happy_hour_member!]!
}

"""
aggregate fields of "happy_hour_member"
"""
type happy_hour_member_aggregate_fields {
  avg: happy_hour_member_avg_fields
  count(columns: [happy_hour_member_select_column!], distinct: Boolean): Int
  max: happy_hour_member_max_fields
  min: happy_hour_member_min_fields
  stddev: happy_hour_member_stddev_fields
  stddev_pop: happy_hour_member_stddev_pop_fields
  stddev_samp: happy_hour_member_stddev_samp_fields
  sum: happy_hour_member_sum_fields
  var_pop: happy_hour_member_var_pop_fields
  var_samp: happy_hour_member_var_samp_fields
  variance: happy_hour_member_variance_fields
}

"""
order by aggregate values of table "happy_hour_member"
"""
input happy_hour_member_aggregate_order_by {
  avg: happy_hour_member_avg_order_by
  count: order_by
  max: happy_hour_member_max_order_by
  min: happy_hour_member_min_order_by
  stddev: happy_hour_member_stddev_order_by
  stddev_pop: happy_hour_member_stddev_pop_order_by
  stddev_samp: happy_hour_member_stddev_samp_order_by
  sum: happy_hour_member_sum_order_by
  var_pop: happy_hour_member_var_pop_order_by
  var_samp: happy_hour_member_var_samp_order_by
  variance: happy_hour_member_variance_order_by
}

"""
input type for inserting array relation for remote table "happy_hour_member"
"""
input happy_hour_member_arr_rel_insert_input {
  data: [happy_hour_member_insert_input!]!
  on_conflict: happy_hour_member_on_conflict
}

"""aggregate avg on columns"""
type happy_hour_member_avg_fields {
  hh_id: Float
  member_id: Float
  total_amount: Float
}

"""
order by avg() on columns of table "happy_hour_member"
"""
input happy_hour_member_avg_order_by {
  hh_id: order_by
  member_id: order_by
  total_amount: order_by
}

"""
Boolean expression to filter rows from the table "happy_hour_member". All fields are combined with a logical 'AND'.
"""
input happy_hour_member_bool_exp {
  _and: [happy_hour_member_bool_exp]
  _not: happy_hour_member_bool_exp
  _or: [happy_hour_member_bool_exp]
  happy_hour: happy_hour_bool_exp
  hh_id: Int_comparison_exp
  member: member_bool_exp
  member_id: Int_comparison_exp
  total_amount: Float_comparison_exp
}

"""
unique or primary key constraints on table "happy_hour_member"
"""
enum happy_hour_member_constraint {
  """unique or primary key constraint"""
  idx_25540_sqlite_autoindex_happy_hour_member_1
}

"""
input type for incrementing integer column in table "happy_hour_member"
"""
input happy_hour_member_inc_input {
  hh_id: Int
  member_id: Int
  total_amount: Float
}

"""
input type for inserting data into table "happy_hour_member"
"""
input happy_hour_member_insert_input {
  happy_hour: happy_hour_obj_rel_insert_input
  hh_id: Int
  member: member_obj_rel_insert_input
  member_id: Int
  total_amount: Float
}

"""aggregate max on columns"""
type happy_hour_member_max_fields {
  hh_id: Int
  member_id: Int
  total_amount: Float
}

"""
order by max() on columns of table "happy_hour_member"
"""
input happy_hour_member_max_order_by {
  hh_id: order_by
  member_id: order_by
  total_amount: order_by
}

"""aggregate min on columns"""
type happy_hour_member_min_fields {
  hh_id: Int
  member_id: Int
  total_amount: Float
}

"""
order by min() on columns of table "happy_hour_member"
"""
input happy_hour_member_min_order_by {
  hh_id: order_by
  member_id: order_by
  total_amount: order_by
}

"""
response of any mutation on the table "happy_hour_member"
"""
type happy_hour_member_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [happy_hour_member!]!
}

"""
input type for inserting object relation for remote table "happy_hour_member"
"""
input happy_hour_member_obj_rel_insert_input {
  data: happy_hour_member_insert_input!
  on_conflict: happy_hour_member_on_conflict
}

"""
on conflict condition type for table "happy_hour_member"
"""
input happy_hour_member_on_conflict {
  constraint: happy_hour_member_constraint!
  update_columns: [happy_hour_member_update_column!]!
  where: happy_hour_member_bool_exp
}

"""
ordering options when selecting data from "happy_hour_member"
"""
input happy_hour_member_order_by {
  happy_hour: happy_hour_order_by
  hh_id: order_by
  member: member_order_by
  member_id: order_by
  total_amount: order_by
}

"""
select columns of table "happy_hour_member"
"""
enum happy_hour_member_select_column {
  """column name"""
  hh_id

  """column name"""
  member_id

  """column name"""
  total_amount
}

"""
input type for updating data in table "happy_hour_member"
"""
input happy_hour_member_set_input {
  hh_id: Int
  member_id: Int
  total_amount: Float
}

"""aggregate stddev on columns"""
type happy_hour_member_stddev_fields {
  hh_id: Float
  member_id: Float
  total_amount: Float
}

"""
order by stddev() on columns of table "happy_hour_member"
"""
input happy_hour_member_stddev_order_by {
  hh_id: order_by
  member_id: order_by
  total_amount: order_by
}

"""aggregate stddev_pop on columns"""
type happy_hour_member_stddev_pop_fields {
  hh_id: Float
  member_id: Float
  total_amount: Float
}

"""
order by stddev_pop() on columns of table "happy_hour_member"
"""
input happy_hour_member_stddev_pop_order_by {
  hh_id: order_by
  member_id: order_by
  total_amount: order_by
}

"""aggregate stddev_samp on columns"""
type happy_hour_member_stddev_samp_fields {
  hh_id: Float
  member_id: Float
  total_amount: Float
}

"""
order by stddev_samp() on columns of table "happy_hour_member"
"""
input happy_hour_member_stddev_samp_order_by {
  hh_id: order_by
  member_id: order_by
  total_amount: order_by
}

"""aggregate sum on columns"""
type happy_hour_member_sum_fields {
  hh_id: Int
  member_id: Int
  total_amount: Float
}

"""
order by sum() on columns of table "happy_hour_member"
"""
input happy_hour_member_sum_order_by {
  hh_id: order_by
  member_id: order_by
  total_amount: order_by
}

"""
update columns of table "happy_hour_member"
"""
enum happy_hour_member_update_column {
  """column name"""
  hh_id

  """column name"""
  member_id

  """column name"""
  total_amount
}

"""aggregate var_pop on columns"""
type happy_hour_member_var_pop_fields {
  hh_id: Float
  member_id: Float
  total_amount: Float
}

"""
order by var_pop() on columns of table "happy_hour_member"
"""
input happy_hour_member_var_pop_order_by {
  hh_id: order_by
  member_id: order_by
  total_amount: order_by
}

"""aggregate var_samp on columns"""
type happy_hour_member_var_samp_fields {
  hh_id: Float
  member_id: Float
  total_amount: Float
}

"""
order by var_samp() on columns of table "happy_hour_member"
"""
input happy_hour_member_var_samp_order_by {
  hh_id: order_by
  member_id: order_by
  total_amount: order_by
}

"""aggregate variance on columns"""
type happy_hour_member_variance_fields {
  hh_id: Float
  member_id: Float
  total_amount: Float
}

"""
order by variance() on columns of table "happy_hour_member"
"""
input happy_hour_member_variance_order_by {
  hh_id: order_by
  member_id: order_by
  total_amount: order_by
}

"""aggregate min on columns"""
type happy_hour_min_fields {
  hh_id: Int
  month: String
  num_of_shaff_in_charge: Int
  shop_id: Int
}

"""
order by min() on columns of table "happy_hour"
"""
input happy_hour_min_order_by {
  hh_id: order_by
  month: order_by
  num_of_shaff_in_charge: order_by
  shop_id: order_by
}

"""
response of any mutation on the table "happy_hour"
"""
type happy_hour_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [happy_hour!]!
}

"""
input type for inserting object relation for remote table "happy_hour"
"""
input happy_hour_obj_rel_insert_input {
  data: happy_hour_insert_input!
  on_conflict: happy_hour_on_conflict
}

"""
on conflict condition type for table "happy_hour"
"""
input happy_hour_on_conflict {
  constraint: happy_hour_constraint!
  update_columns: [happy_hour_update_column!]!
  where: happy_hour_bool_exp
}

"""
ordering options when selecting data from "happy_hour"
"""
input happy_hour_order_by {
  happy_hour_members_aggregate: happy_hour_member_aggregate_order_by
  hh_id: order_by
  month: order_by
  num_of_shaff_in_charge: order_by
  shop: shop_order_by
  shop_id: order_by
}

"""
select columns of table "happy_hour"
"""
enum happy_hour_select_column {
  """column name"""
  hh_id

  """column name"""
  month

  """column name"""
  num_of_shaff_in_charge

  """column name"""
  shop_id
}

"""
input type for updating data in table "happy_hour"
"""
input happy_hour_set_input {
  hh_id: Int
  month: String
  num_of_shaff_in_charge: Int
  shop_id: Int
}

"""aggregate stddev on columns"""
type happy_hour_stddev_fields {
  hh_id: Float
  num_of_shaff_in_charge: Float
  shop_id: Float
}

"""
order by stddev() on columns of table "happy_hour"
"""
input happy_hour_stddev_order_by {
  hh_id: order_by
  num_of_shaff_in_charge: order_by
  shop_id: order_by
}

"""aggregate stddev_pop on columns"""
type happy_hour_stddev_pop_fields {
  hh_id: Float
  num_of_shaff_in_charge: Float
  shop_id: Float
}

"""
order by stddev_pop() on columns of table "happy_hour"
"""
input happy_hour_stddev_pop_order_by {
  hh_id: order_by
  num_of_shaff_in_charge: order_by
  shop_id: order_by
}

"""aggregate stddev_samp on columns"""
type happy_hour_stddev_samp_fields {
  hh_id: Float
  num_of_shaff_in_charge: Float
  shop_id: Float
}

"""
order by stddev_samp() on columns of table "happy_hour"
"""
input happy_hour_stddev_samp_order_by {
  hh_id: order_by
  num_of_shaff_in_charge: order_by
  shop_id: order_by
}

"""aggregate sum on columns"""
type happy_hour_sum_fields {
  hh_id: Int
  num_of_shaff_in_charge: Int
  shop_id: Int
}

"""
order by sum() on columns of table "happy_hour"
"""
input happy_hour_sum_order_by {
  hh_id: order_by
  num_of_shaff_in_charge: order_by
  shop_id: order_by
}

"""
update columns of table "happy_hour"
"""
enum happy_hour_update_column {
  """column name"""
  hh_id

  """column name"""
  month

  """column name"""
  num_of_shaff_in_charge

  """column name"""
  shop_id
}

"""aggregate var_pop on columns"""
type happy_hour_var_pop_fields {
  hh_id: Float
  num_of_shaff_in_charge: Float
  shop_id: Float
}

"""
order by var_pop() on columns of table "happy_hour"
"""
input happy_hour_var_pop_order_by {
  hh_id: order_by
  num_of_shaff_in_charge: order_by
  shop_id: order_by
}

"""aggregate var_samp on columns"""
type happy_hour_var_samp_fields {
  hh_id: Float
  num_of_shaff_in_charge: Float
  shop_id: Float
}

"""
order by var_samp() on columns of table "happy_hour"
"""
input happy_hour_var_samp_order_by {
  hh_id: order_by
  num_of_shaff_in_charge: order_by
  shop_id: order_by
}

"""aggregate variance on columns"""
type happy_hour_variance_fields {
  hh_id: Float
  num_of_shaff_in_charge: Float
  shop_id: Float
}

"""
order by variance() on columns of table "happy_hour"
"""
input happy_hour_variance_order_by {
  hh_id: order_by
  num_of_shaff_in_charge: order_by
  shop_id: order_by
}

"""
expression to compare columns of type Int. All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""
columns and relationships of "member"
"""
type member {
  address: String
  age: Int

  """An array relationship"""
  happy_hour_members(
    """distinct select on columns"""
    distinct_on: [happy_hour_member_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [happy_hour_member_order_by!]

    """filter the rows returned"""
    where: happy_hour_member_bool_exp
  ): [happy_hour_member!]!

  """An aggregated array relationship"""
  happy_hour_members_aggregate(
    """distinct select on columns"""
    distinct_on: [happy_hour_member_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [happy_hour_member_order_by!]

    """filter the rows returned"""
    where: happy_hour_member_bool_exp
  ): happy_hour_member_aggregate!
  level_of_membership: Int
  member_id: Int
  membership_card: String
  name: String
  time_of_purchase: Int
}

"""
aggregated selection of "member"
"""
type member_aggregate {
  aggregate: member_aggregate_fields
  nodes: [member!]!
}

"""
aggregate fields of "member"
"""
type member_aggregate_fields {
  avg: member_avg_fields
  count(columns: [member_select_column!], distinct: Boolean): Int
  max: member_max_fields
  min: member_min_fields
  stddev: member_stddev_fields
  stddev_pop: member_stddev_pop_fields
  stddev_samp: member_stddev_samp_fields
  sum: member_sum_fields
  var_pop: member_var_pop_fields
  var_samp: member_var_samp_fields
  variance: member_variance_fields
}

"""
order by aggregate values of table "member"
"""
input member_aggregate_order_by {
  avg: member_avg_order_by
  count: order_by
  max: member_max_order_by
  min: member_min_order_by
  stddev: member_stddev_order_by
  stddev_pop: member_stddev_pop_order_by
  stddev_samp: member_stddev_samp_order_by
  sum: member_sum_order_by
  var_pop: member_var_pop_order_by
  var_samp: member_var_samp_order_by
  variance: member_variance_order_by
}

"""
input type for inserting array relation for remote table "member"
"""
input member_arr_rel_insert_input {
  data: [member_insert_input!]!
  on_conflict: member_on_conflict
}

"""aggregate avg on columns"""
type member_avg_fields {
  age: Float
  level_of_membership: Float
  member_id: Float
  time_of_purchase: Float
}

"""
order by avg() on columns of table "member"
"""
input member_avg_order_by {
  age: order_by
  level_of_membership: order_by
  member_id: order_by
  time_of_purchase: order_by
}

"""
Boolean expression to filter rows from the table "member". All fields are combined with a logical 'AND'.
"""
input member_bool_exp {
  _and: [member_bool_exp]
  _not: member_bool_exp
  _or: [member_bool_exp]
  address: String_comparison_exp
  age: Int_comparison_exp
  happy_hour_members: happy_hour_member_bool_exp
  level_of_membership: Int_comparison_exp
  member_id: Int_comparison_exp
  membership_card: String_comparison_exp
  name: String_comparison_exp
  time_of_purchase: Int_comparison_exp
}

"""
unique or primary key constraints on table "member"
"""
enum member_constraint {
  """unique or primary key constraint"""
  idx_25528_sqlite_autoindex_member_1
}

"""
input type for incrementing integer column in table "member"
"""
input member_inc_input {
  age: Int
  level_of_membership: Int
  member_id: Int
  time_of_purchase: Int
}

"""
input type for inserting data into table "member"
"""
input member_insert_input {
  address: String
  age: Int
  happy_hour_members: happy_hour_member_arr_rel_insert_input
  level_of_membership: Int
  member_id: Int
  membership_card: String
  name: String
  time_of_purchase: Int
}

"""aggregate max on columns"""
type member_max_fields {
  address: String
  age: Int
  level_of_membership: Int
  member_id: Int
  membership_card: String
  name: String
  time_of_purchase: Int
}

"""
order by max() on columns of table "member"
"""
input member_max_order_by {
  address: order_by
  age: order_by
  level_of_membership: order_by
  member_id: order_by
  membership_card: order_by
  name: order_by
  time_of_purchase: order_by
}

"""aggregate min on columns"""
type member_min_fields {
  address: String
  age: Int
  level_of_membership: Int
  member_id: Int
  membership_card: String
  name: String
  time_of_purchase: Int
}

"""
order by min() on columns of table "member"
"""
input member_min_order_by {
  address: order_by
  age: order_by
  level_of_membership: order_by
  member_id: order_by
  membership_card: order_by
  name: order_by
  time_of_purchase: order_by
}

"""
response of any mutation on the table "member"
"""
type member_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [member!]!
}

"""
input type for inserting object relation for remote table "member"
"""
input member_obj_rel_insert_input {
  data: member_insert_input!
  on_conflict: member_on_conflict
}

"""
on conflict condition type for table "member"
"""
input member_on_conflict {
  constraint: member_constraint!
  update_columns: [member_update_column!]!
  where: member_bool_exp
}

"""
ordering options when selecting data from "member"
"""
input member_order_by {
  address: order_by
  age: order_by
  happy_hour_members_aggregate: happy_hour_member_aggregate_order_by
  level_of_membership: order_by
  member_id: order_by
  membership_card: order_by
  name: order_by
  time_of_purchase: order_by
}

"""
select columns of table "member"
"""
enum member_select_column {
  """column name"""
  address

  """column name"""
  age

  """column name"""
  level_of_membership

  """column name"""
  member_id

  """column name"""
  membership_card

  """column name"""
  name

  """column name"""
  time_of_purchase
}

"""
input type for updating data in table "member"
"""
input member_set_input {
  address: String
  age: Int
  level_of_membership: Int
  member_id: Int
  membership_card: String
  name: String
  time_of_purchase: Int
}

"""aggregate stddev on columns"""
type member_stddev_fields {
  age: Float
  level_of_membership: Float
  member_id: Float
  time_of_purchase: Float
}

"""
order by stddev() on columns of table "member"
"""
input member_stddev_order_by {
  age: order_by
  level_of_membership: order_by
  member_id: order_by
  time_of_purchase: order_by
}

"""aggregate stddev_pop on columns"""
type member_stddev_pop_fields {
  age: Float
  level_of_membership: Float
  member_id: Float
  time_of_purchase: Float
}

"""
order by stddev_pop() on columns of table "member"
"""
input member_stddev_pop_order_by {
  age: order_by
  level_of_membership: order_by
  member_id: order_by
  time_of_purchase: order_by
}

"""aggregate stddev_samp on columns"""
type member_stddev_samp_fields {
  age: Float
  level_of_membership: Float
  member_id: Float
  time_of_purchase: Float
}

"""
order by stddev_samp() on columns of table "member"
"""
input member_stddev_samp_order_by {
  age: order_by
  level_of_membership: order_by
  member_id: order_by
  time_of_purchase: order_by
}

"""aggregate sum on columns"""
type member_sum_fields {
  age: Int
  level_of_membership: Int
  member_id: Int
  time_of_purchase: Int
}

"""
order by sum() on columns of table "member"
"""
input member_sum_order_by {
  age: order_by
  level_of_membership: order_by
  member_id: order_by
  time_of_purchase: order_by
}

"""
update columns of table "member"
"""
enum member_update_column {
  """column name"""
  address

  """column name"""
  age

  """column name"""
  level_of_membership

  """column name"""
  member_id

  """column name"""
  membership_card

  """column name"""
  name

  """column name"""
  time_of_purchase
}

"""aggregate var_pop on columns"""
type member_var_pop_fields {
  age: Float
  level_of_membership: Float
  member_id: Float
  time_of_purchase: Float
}

"""
order by var_pop() on columns of table "member"
"""
input member_var_pop_order_by {
  age: order_by
  level_of_membership: order_by
  member_id: order_by
  time_of_purchase: order_by
}

"""aggregate var_samp on columns"""
type member_var_samp_fields {
  age: Float
  level_of_membership: Float
  member_id: Float
  time_of_purchase: Float
}

"""
order by var_samp() on columns of table "member"
"""
input member_var_samp_order_by {
  age: order_by
  level_of_membership: order_by
  member_id: order_by
  time_of_purchase: order_by
}

"""aggregate variance on columns"""
type member_variance_fields {
  age: Float
  level_of_membership: Float
  member_id: Float
  time_of_purchase: Float
}

"""
order by variance() on columns of table "member"
"""
input member_variance_order_by {
  age: order_by
  level_of_membership: order_by
  member_id: order_by
  time_of_purchase: order_by
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "happy_hour"
  """
  delete_happy_hour(
    """filter the rows which have to be deleted"""
    where: happy_hour_bool_exp!
  ): happy_hour_mutation_response

  """
  delete data from the table: "happy_hour_member"
  """
  delete_happy_hour_member(
    """filter the rows which have to be deleted"""
    where: happy_hour_member_bool_exp!
  ): happy_hour_member_mutation_response

  """
  delete data from the table: "member"
  """
  delete_member(
    """filter the rows which have to be deleted"""
    where: member_bool_exp!
  ): member_mutation_response

  """
  delete data from the table: "shop"
  """
  delete_shop(
    """filter the rows which have to be deleted"""
    where: shop_bool_exp!
  ): shop_mutation_response

  """
  insert data into the table: "happy_hour"
  """
  insert_happy_hour(
    """the rows to be inserted"""
    objects: [happy_hour_insert_input!]!

    """on conflict condition"""
    on_conflict: happy_hour_on_conflict
  ): happy_hour_mutation_response

  """
  insert data into the table: "happy_hour_member"
  """
  insert_happy_hour_member(
    """the rows to be inserted"""
    objects: [happy_hour_member_insert_input!]!

    """on conflict condition"""
    on_conflict: happy_hour_member_on_conflict
  ): happy_hour_member_mutation_response

  """
  insert a single row into the table: "happy_hour_member"
  """
  insert_happy_hour_member_one(
    """the row to be inserted"""
    object: happy_hour_member_insert_input!

    """on conflict condition"""
    on_conflict: happy_hour_member_on_conflict
  ): happy_hour_member

  """
  insert a single row into the table: "happy_hour"
  """
  insert_happy_hour_one(
    """the row to be inserted"""
    object: happy_hour_insert_input!

    """on conflict condition"""
    on_conflict: happy_hour_on_conflict
  ): happy_hour

  """
  insert data into the table: "member"
  """
  insert_member(
    """the rows to be inserted"""
    objects: [member_insert_input!]!

    """on conflict condition"""
    on_conflict: member_on_conflict
  ): member_mutation_response

  """
  insert a single row into the table: "member"
  """
  insert_member_one(
    """the row to be inserted"""
    object: member_insert_input!

    """on conflict condition"""
    on_conflict: member_on_conflict
  ): member

  """
  insert data into the table: "shop"
  """
  insert_shop(
    """the rows to be inserted"""
    objects: [shop_insert_input!]!

    """on conflict condition"""
    on_conflict: shop_on_conflict
  ): shop_mutation_response

  """
  insert a single row into the table: "shop"
  """
  insert_shop_one(
    """the row to be inserted"""
    object: shop_insert_input!

    """on conflict condition"""
    on_conflict: shop_on_conflict
  ): shop

  """
  update data of the table: "happy_hour"
  """
  update_happy_hour(
    """increments the integer columns with given value of the filtered values"""
    _inc: happy_hour_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: happy_hour_set_input

    """filter the rows which have to be updated"""
    where: happy_hour_bool_exp!
  ): happy_hour_mutation_response

  """
  update data of the table: "happy_hour_member"
  """
  update_happy_hour_member(
    """increments the integer columns with given value of the filtered values"""
    _inc: happy_hour_member_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: happy_hour_member_set_input

    """filter the rows which have to be updated"""
    where: happy_hour_member_bool_exp!
  ): happy_hour_member_mutation_response

  """
  update data of the table: "member"
  """
  update_member(
    """increments the integer columns with given value of the filtered values"""
    _inc: member_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: member_set_input

    """filter the rows which have to be updated"""
    where: member_bool_exp!
  ): member_mutation_response

  """
  update data of the table: "shop"
  """
  update_shop(
    """increments the integer columns with given value of the filtered values"""
    _inc: shop_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: shop_set_input

    """filter the rows which have to be updated"""
    where: shop_bool_exp!
  ): shop_mutation_response
}

"""column ordering options"""
enum order_by {
  """in the ascending order, nulls last"""
  asc

  """in the ascending order, nulls first"""
  asc_nulls_first

  """in the ascending order, nulls last"""
  asc_nulls_last

  """in the descending order, nulls first"""
  desc

  """in the descending order, nulls first"""
  desc_nulls_first

  """in the descending order, nulls last"""
  desc_nulls_last
}

"""query root"""
type query_root {
  """
  fetch data from the table: "happy_hour"
  """
  happy_hour(
    """distinct select on columns"""
    distinct_on: [happy_hour_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [happy_hour_order_by!]

    """filter the rows returned"""
    where: happy_hour_bool_exp
  ): [happy_hour!]!

  """
  fetch aggregated fields from the table: "happy_hour"
  """
  happy_hour_aggregate(
    """distinct select on columns"""
    distinct_on: [happy_hour_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [happy_hour_order_by!]

    """filter the rows returned"""
    where: happy_hour_bool_exp
  ): happy_hour_aggregate!

  """
  fetch data from the table: "happy_hour_member"
  """
  happy_hour_member(
    """distinct select on columns"""
    distinct_on: [happy_hour_member_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [happy_hour_member_order_by!]

    """filter the rows returned"""
    where: happy_hour_member_bool_exp
  ): [happy_hour_member!]!

  """
  fetch aggregated fields from the table: "happy_hour_member"
  """
  happy_hour_member_aggregate(
    """distinct select on columns"""
    distinct_on: [happy_hour_member_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [happy_hour_member_order_by!]

    """filter the rows returned"""
    where: happy_hour_member_bool_exp
  ): happy_hour_member_aggregate!

  """
  fetch data from the table: "member"
  """
  member(
    """distinct select on columns"""
    distinct_on: [member_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [member_order_by!]

    """filter the rows returned"""
    where: member_bool_exp
  ): [member!]!

  """
  fetch aggregated fields from the table: "member"
  """
  member_aggregate(
    """distinct select on columns"""
    distinct_on: [member_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [member_order_by!]

    """filter the rows returned"""
    where: member_bool_exp
  ): member_aggregate!

  """
  fetch data from the table: "shop"
  """
  shop(
    """distinct select on columns"""
    distinct_on: [shop_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [shop_order_by!]

    """filter the rows returned"""
    where: shop_bool_exp
  ): [shop!]!

  """
  fetch aggregated fields from the table: "shop"
  """
  shop_aggregate(
    """distinct select on columns"""
    distinct_on: [shop_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [shop_order_by!]

    """filter the rows returned"""
    where: shop_bool_exp
  ): shop_aggregate!
}

"""
columns and relationships of "shop"
"""
type shop {
  address: String

  """An array relationship"""
  happy_hours(
    """distinct select on columns"""
    distinct_on: [happy_hour_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [happy_hour_order_by!]

    """filter the rows returned"""
    where: happy_hour_bool_exp
  ): [happy_hour!]!

  """An aggregated array relationship"""
  happy_hours_aggregate(
    """distinct select on columns"""
    distinct_on: [happy_hour_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [happy_hour_order_by!]

    """filter the rows returned"""
    where: happy_hour_bool_exp
  ): happy_hour_aggregate!
  num_of_staff: Int
  open_year: String
  score: Float
  shop_id: Int
}

"""
aggregated selection of "shop"
"""
type shop_aggregate {
  aggregate: shop_aggregate_fields
  nodes: [shop!]!
}

"""
aggregate fields of "shop"
"""
type shop_aggregate_fields {
  avg: shop_avg_fields
  count(columns: [shop_select_column!], distinct: Boolean): Int
  max: shop_max_fields
  min: shop_min_fields
  stddev: shop_stddev_fields
  stddev_pop: shop_stddev_pop_fields
  stddev_samp: shop_stddev_samp_fields
  sum: shop_sum_fields
  var_pop: shop_var_pop_fields
  var_samp: shop_var_samp_fields
  variance: shop_variance_fields
}

"""
order by aggregate values of table "shop"
"""
input shop_aggregate_order_by {
  avg: shop_avg_order_by
  count: order_by
  max: shop_max_order_by
  min: shop_min_order_by
  stddev: shop_stddev_order_by
  stddev_pop: shop_stddev_pop_order_by
  stddev_samp: shop_stddev_samp_order_by
  sum: shop_sum_order_by
  var_pop: shop_var_pop_order_by
  var_samp: shop_var_samp_order_by
  variance: shop_variance_order_by
}

"""
input type for inserting array relation for remote table "shop"
"""
input shop_arr_rel_insert_input {
  data: [shop_insert_input!]!
  on_conflict: shop_on_conflict
}

"""aggregate avg on columns"""
type shop_avg_fields {
  num_of_staff: Float
  score: Float
  shop_id: Float
}

"""
order by avg() on columns of table "shop"
"""
input shop_avg_order_by {
  num_of_staff: order_by
  score: order_by
  shop_id: order_by
}

"""
Boolean expression to filter rows from the table "shop". All fields are combined with a logical 'AND'.
"""
input shop_bool_exp {
  _and: [shop_bool_exp]
  _not: shop_bool_exp
  _or: [shop_bool_exp]
  address: String_comparison_exp
  happy_hours: happy_hour_bool_exp
  num_of_staff: Int_comparison_exp
  open_year: String_comparison_exp
  score: Float_comparison_exp
  shop_id: Int_comparison_exp
}

"""
unique or primary key constraints on table "shop"
"""
enum shop_constraint {
  """unique or primary key constraint"""
  idx_25522_sqlite_autoindex_shop_1
}

"""
input type for incrementing integer column in table "shop"
"""
input shop_inc_input {
  num_of_staff: Int
  score: Float
  shop_id: Int
}

"""
input type for inserting data into table "shop"
"""
input shop_insert_input {
  address: String
  happy_hours: happy_hour_arr_rel_insert_input
  num_of_staff: Int
  open_year: String
  score: Float
  shop_id: Int
}

"""aggregate max on columns"""
type shop_max_fields {
  address: String
  num_of_staff: Int
  open_year: String
  score: Float
  shop_id: Int
}

"""
order by max() on columns of table "shop"
"""
input shop_max_order_by {
  address: order_by
  num_of_staff: order_by
  open_year: order_by
  score: order_by
  shop_id: order_by
}

"""aggregate min on columns"""
type shop_min_fields {
  address: String
  num_of_staff: Int
  open_year: String
  score: Float
  shop_id: Int
}

"""
order by min() on columns of table "shop"
"""
input shop_min_order_by {
  address: order_by
  num_of_staff: order_by
  open_year: order_by
  score: order_by
  shop_id: order_by
}

"""
response of any mutation on the table "shop"
"""
type shop_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [shop!]!
}

"""
input type for inserting object relation for remote table "shop"
"""
input shop_obj_rel_insert_input {
  data: shop_insert_input!
  on_conflict: shop_on_conflict
}

"""
on conflict condition type for table "shop"
"""
input shop_on_conflict {
  constraint: shop_constraint!
  update_columns: [shop_update_column!]!
  where: shop_bool_exp
}

"""
ordering options when selecting data from "shop"
"""
input shop_order_by {
  address: order_by
  happy_hours_aggregate: happy_hour_aggregate_order_by
  num_of_staff: order_by
  open_year: order_by
  score: order_by
  shop_id: order_by
}

"""
select columns of table "shop"
"""
enum shop_select_column {
  """column name"""
  address

  """column name"""
  num_of_staff

  """column name"""
  open_year

  """column name"""
  score

  """column name"""
  shop_id
}

"""
input type for updating data in table "shop"
"""
input shop_set_input {
  address: String
  num_of_staff: Int
  open_year: String
  score: Float
  shop_id: Int
}

"""aggregate stddev on columns"""
type shop_stddev_fields {
  num_of_staff: Float
  score: Float
  shop_id: Float
}

"""
order by stddev() on columns of table "shop"
"""
input shop_stddev_order_by {
  num_of_staff: order_by
  score: order_by
  shop_id: order_by
}

"""aggregate stddev_pop on columns"""
type shop_stddev_pop_fields {
  num_of_staff: Float
  score: Float
  shop_id: Float
}

"""
order by stddev_pop() on columns of table "shop"
"""
input shop_stddev_pop_order_by {
  num_of_staff: order_by
  score: order_by
  shop_id: order_by
}

"""aggregate stddev_samp on columns"""
type shop_stddev_samp_fields {
  num_of_staff: Float
  score: Float
  shop_id: Float
}

"""
order by stddev_samp() on columns of table "shop"
"""
input shop_stddev_samp_order_by {
  num_of_staff: order_by
  score: order_by
  shop_id: order_by
}

"""aggregate sum on columns"""
type shop_sum_fields {
  num_of_staff: Int
  score: Float
  shop_id: Int
}

"""
order by sum() on columns of table "shop"
"""
input shop_sum_order_by {
  num_of_staff: order_by
  score: order_by
  shop_id: order_by
}

"""
update columns of table "shop"
"""
enum shop_update_column {
  """column name"""
  address

  """column name"""
  num_of_staff

  """column name"""
  open_year

  """column name"""
  score

  """column name"""
  shop_id
}

"""aggregate var_pop on columns"""
type shop_var_pop_fields {
  num_of_staff: Float
  score: Float
  shop_id: Float
}

"""
order by var_pop() on columns of table "shop"
"""
input shop_var_pop_order_by {
  num_of_staff: order_by
  score: order_by
  shop_id: order_by
}

"""aggregate var_samp on columns"""
type shop_var_samp_fields {
  num_of_staff: Float
  score: Float
  shop_id: Float
}

"""
order by var_samp() on columns of table "shop"
"""
input shop_var_samp_order_by {
  num_of_staff: order_by
  score: order_by
  shop_id: order_by
}

"""aggregate variance on columns"""
type shop_variance_fields {
  num_of_staff: Float
  score: Float
  shop_id: Float
}

"""
order by variance() on columns of table "shop"
"""
input shop_variance_order_by {
  num_of_staff: order_by
  score: order_by
  shop_id: order_by
}

"""
expression to compare columns of type String. All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String
  _ilike: String
  _in: [String!]
  _is_null: Boolean
  _like: String
  _lt: String
  _lte: String
  _neq: String
  _nilike: String
  _nin: [String!]
  _nlike: String
  _nsimilar: String
  _similar: String
}

"""subscription root"""
type subscription_root {
  """
  fetch data from the table: "happy_hour"
  """
  happy_hour(
    """distinct select on columns"""
    distinct_on: [happy_hour_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [happy_hour_order_by!]

    """filter the rows returned"""
    where: happy_hour_bool_exp
  ): [happy_hour!]!

  """
  fetch aggregated fields from the table: "happy_hour"
  """
  happy_hour_aggregate(
    """distinct select on columns"""
    distinct_on: [happy_hour_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [happy_hour_order_by!]

    """filter the rows returned"""
    where: happy_hour_bool_exp
  ): happy_hour_aggregate!

  """
  fetch data from the table: "happy_hour_member"
  """
  happy_hour_member(
    """distinct select on columns"""
    distinct_on: [happy_hour_member_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [happy_hour_member_order_by!]

    """filter the rows returned"""
    where: happy_hour_member_bool_exp
  ): [happy_hour_member!]!

  """
  fetch aggregated fields from the table: "happy_hour_member"
  """
  happy_hour_member_aggregate(
    """distinct select on columns"""
    distinct_on: [happy_hour_member_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [happy_hour_member_order_by!]

    """filter the rows returned"""
    where: happy_hour_member_bool_exp
  ): happy_hour_member_aggregate!

  """
  fetch data from the table: "member"
  """
  member(
    """distinct select on columns"""
    distinct_on: [member_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [member_order_by!]

    """filter the rows returned"""
    where: member_bool_exp
  ): [member!]!

  """
  fetch aggregated fields from the table: "member"
  """
  member_aggregate(
    """distinct select on columns"""
    distinct_on: [member_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [member_order_by!]

    """filter the rows returned"""
    where: member_bool_exp
  ): member_aggregate!

  """
  fetch data from the table: "shop"
  """
  shop(
    """distinct select on columns"""
    distinct_on: [shop_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [shop_order_by!]

    """filter the rows returned"""
    where: shop_bool_exp
  ): [shop!]!

  """
  fetch aggregated fields from the table: "shop"
  """
  shop_aggregate(
    """distinct select on columns"""
    distinct_on: [shop_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [shop_order_by!]

    """filter the rows returned"""
    where: shop_bool_exp
  ): shop_aggregate!
}
