schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""
Direct the client to resolve this field locally, either from the cache or local resolvers.
"""
directive @client(
  """
  When true, the client will never use the cache for this value. See
  https://www.apollographql.com/docs/react/essentials/local-state/#forcing-resolvers-with-clientalways-true
  """
  always: Boolean
) on FIELD | FRAGMENT_DEFINITION | INLINE_FRAGMENT

"""
Export this locally resolved field as a variable to be used in the remainder of this query. See
https://www.apollographql.com/docs/react/essentials/local-state/#using-client-fields-as-variables
"""
directive @export(
  """The variable name to export this field as."""
  as: String!
) on FIELD

"""
Specify a custom store key for this result. See
https://www.apollographql.com/docs/react/advanced/caching/#the-connection-directive
"""
directive @connection(
  """Specify the store key."""
  key: String!

  """
  An array of query argument names to include in the generated custom store key.
  """
  filter: [String!]
) on FIELD

scalar bigint

"""
expression to compare columns of type bigint. All fields are combined with logical 'AND'.
"""
input bigint_comparison_exp {
  _eq: bigint
  _gt: bigint
  _gte: bigint
  _in: [bigint!]
  _is_null: Boolean
  _lt: bigint
  _lte: bigint
  _neq: bigint
  _nin: [bigint!]
}

"""
columns and relationships of "document_functional_areas"
"""
type document_functional_areas {
  """An object relationship"""
  document: documents
  document_code: String

  """An object relationship"""
  functional_area: functional_areas
  functional_area_code: String
}

"""
aggregated selection of "document_functional_areas"
"""
type document_functional_areas_aggregate {
  aggregate: document_functional_areas_aggregate_fields
  nodes: [document_functional_areas!]!
}

"""
aggregate fields of "document_functional_areas"
"""
type document_functional_areas_aggregate_fields {
  count(columns: [document_functional_areas_select_column!], distinct: Boolean): Int
  max: document_functional_areas_max_fields
  min: document_functional_areas_min_fields
}

"""
order by aggregate values of table "document_functional_areas"
"""
input document_functional_areas_aggregate_order_by {
  count: order_by
  max: document_functional_areas_max_order_by
  min: document_functional_areas_min_order_by
}

"""
input type for inserting array relation for remote table "document_functional_areas"
"""
input document_functional_areas_arr_rel_insert_input {
  data: [document_functional_areas_insert_input!]!
}

"""
Boolean expression to filter rows from the table "document_functional_areas". All fields are combined with a logical 'AND'.
"""
input document_functional_areas_bool_exp {
  _and: [document_functional_areas_bool_exp]
  _not: document_functional_areas_bool_exp
  _or: [document_functional_areas_bool_exp]
  document: documents_bool_exp
  document_code: String_comparison_exp
  functional_area: functional_areas_bool_exp
  functional_area_code: String_comparison_exp
}

"""
input type for inserting data into table "document_functional_areas"
"""
input document_functional_areas_insert_input {
  document: documents_obj_rel_insert_input
  document_code: String
  functional_area: functional_areas_obj_rel_insert_input
  functional_area_code: String
}

"""aggregate max on columns"""
type document_functional_areas_max_fields {
  document_code: String
  functional_area_code: String
}

"""
order by max() on columns of table "document_functional_areas"
"""
input document_functional_areas_max_order_by {
  document_code: order_by
  functional_area_code: order_by
}

"""aggregate min on columns"""
type document_functional_areas_min_fields {
  document_code: String
  functional_area_code: String
}

"""
order by min() on columns of table "document_functional_areas"
"""
input document_functional_areas_min_order_by {
  document_code: order_by
  functional_area_code: order_by
}

"""
response of any mutation on the table "document_functional_areas"
"""
type document_functional_areas_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [document_functional_areas!]!
}

"""
input type for inserting object relation for remote table "document_functional_areas"
"""
input document_functional_areas_obj_rel_insert_input {
  data: document_functional_areas_insert_input!
}

"""
ordering options when selecting data from "document_functional_areas"
"""
input document_functional_areas_order_by {
  document: documents_order_by
  document_code: order_by
  functional_area: functional_areas_order_by
  functional_area_code: order_by
}

"""
select columns of table "document_functional_areas"
"""
enum document_functional_areas_select_column {
  """column name"""
  document_code

  """column name"""
  functional_area_code
}

"""
input type for updating data in table "document_functional_areas"
"""
input document_functional_areas_set_input {
  document_code: String
  functional_area_code: String
}

"""
columns and relationships of "document_sections"
"""
type document_sections {
  """An object relationship"""
  document: documents
  document_code: String

  """An array relationship"""
  document_sections_images(
    """distinct select on columns"""
    distinct_on: [document_sections_images_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [document_sections_images_order_by!]

    """filter the rows returned"""
    where: document_sections_images_bool_exp
  ): [document_sections_images!]!

  """An aggregated array relationship"""
  document_sections_images_aggregate(
    """distinct select on columns"""
    distinct_on: [document_sections_images_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [document_sections_images_order_by!]

    """filter the rows returned"""
    where: document_sections_images_bool_exp
  ): document_sections_images_aggregate!
  section_code: String
  section_id: bigint!
  section_sequence: bigint
  section_title: String
}

"""
aggregated selection of "document_sections"
"""
type document_sections_aggregate {
  aggregate: document_sections_aggregate_fields
  nodes: [document_sections!]!
}

"""
aggregate fields of "document_sections"
"""
type document_sections_aggregate_fields {
  avg: document_sections_avg_fields
  count(columns: [document_sections_select_column!], distinct: Boolean): Int
  max: document_sections_max_fields
  min: document_sections_min_fields
  stddev: document_sections_stddev_fields
  stddev_pop: document_sections_stddev_pop_fields
  stddev_samp: document_sections_stddev_samp_fields
  sum: document_sections_sum_fields
  var_pop: document_sections_var_pop_fields
  var_samp: document_sections_var_samp_fields
  variance: document_sections_variance_fields
}

"""
order by aggregate values of table "document_sections"
"""
input document_sections_aggregate_order_by {
  avg: document_sections_avg_order_by
  count: order_by
  max: document_sections_max_order_by
  min: document_sections_min_order_by
  stddev: document_sections_stddev_order_by
  stddev_pop: document_sections_stddev_pop_order_by
  stddev_samp: document_sections_stddev_samp_order_by
  sum: document_sections_sum_order_by
  var_pop: document_sections_var_pop_order_by
  var_samp: document_sections_var_samp_order_by
  variance: document_sections_variance_order_by
}

"""
input type for inserting array relation for remote table "document_sections"
"""
input document_sections_arr_rel_insert_input {
  data: [document_sections_insert_input!]!
  on_conflict: document_sections_on_conflict
}

"""aggregate avg on columns"""
type document_sections_avg_fields {
  section_id: Float
  section_sequence: Float
}

"""
order by avg() on columns of table "document_sections"
"""
input document_sections_avg_order_by {
  section_id: order_by
  section_sequence: order_by
}

"""
Boolean expression to filter rows from the table "document_sections". All fields are combined with a logical 'AND'.
"""
input document_sections_bool_exp {
  _and: [document_sections_bool_exp]
  _not: document_sections_bool_exp
  _or: [document_sections_bool_exp]
  document: documents_bool_exp
  document_code: String_comparison_exp
  document_sections_images: document_sections_images_bool_exp
  section_code: String_comparison_exp
  section_id: bigint_comparison_exp
  section_sequence: bigint_comparison_exp
  section_title: String_comparison_exp
}

"""
unique or primary key constraints on table "document_sections"
"""
enum document_sections_constraint {
  """unique or primary key constraint"""
  idx_20373_document_sections_pkey
}

"""
columns and relationships of "document_sections_images"
"""
type document_sections_images {
  """An object relationship"""
  document_section: document_sections!

  """An object relationship"""
  image: images!
  image_id: bigint!
  section_id: bigint!
}

"""
aggregated selection of "document_sections_images"
"""
type document_sections_images_aggregate {
  aggregate: document_sections_images_aggregate_fields
  nodes: [document_sections_images!]!
}

"""
aggregate fields of "document_sections_images"
"""
type document_sections_images_aggregate_fields {
  avg: document_sections_images_avg_fields
  count(columns: [document_sections_images_select_column!], distinct: Boolean): Int
  max: document_sections_images_max_fields
  min: document_sections_images_min_fields
  stddev: document_sections_images_stddev_fields
  stddev_pop: document_sections_images_stddev_pop_fields
  stddev_samp: document_sections_images_stddev_samp_fields
  sum: document_sections_images_sum_fields
  var_pop: document_sections_images_var_pop_fields
  var_samp: document_sections_images_var_samp_fields
  variance: document_sections_images_variance_fields
}

"""
order by aggregate values of table "document_sections_images"
"""
input document_sections_images_aggregate_order_by {
  avg: document_sections_images_avg_order_by
  count: order_by
  max: document_sections_images_max_order_by
  min: document_sections_images_min_order_by
  stddev: document_sections_images_stddev_order_by
  stddev_pop: document_sections_images_stddev_pop_order_by
  stddev_samp: document_sections_images_stddev_samp_order_by
  sum: document_sections_images_sum_order_by
  var_pop: document_sections_images_var_pop_order_by
  var_samp: document_sections_images_var_samp_order_by
  variance: document_sections_images_variance_order_by
}

"""
input type for inserting array relation for remote table "document_sections_images"
"""
input document_sections_images_arr_rel_insert_input {
  data: [document_sections_images_insert_input!]!
  on_conflict: document_sections_images_on_conflict
}

"""aggregate avg on columns"""
type document_sections_images_avg_fields {
  image_id: Float
  section_id: Float
}

"""
order by avg() on columns of table "document_sections_images"
"""
input document_sections_images_avg_order_by {
  image_id: order_by
  section_id: order_by
}

"""
Boolean expression to filter rows from the table "document_sections_images". All fields are combined with a logical 'AND'.
"""
input document_sections_images_bool_exp {
  _and: [document_sections_images_bool_exp]
  _not: document_sections_images_bool_exp
  _or: [document_sections_images_bool_exp]
  document_section: document_sections_bool_exp
  image: images_bool_exp
  image_id: bigint_comparison_exp
  section_id: bigint_comparison_exp
}

"""
unique or primary key constraints on table "document_sections_images"
"""
enum document_sections_images_constraint {
  """unique or primary key constraint"""
  idx_20379_sqlite_autoindex_document_sections_images_1
}

"""
input type for incrementing integer column in table "document_sections_images"
"""
input document_sections_images_inc_input {
  image_id: bigint
  section_id: bigint
}

"""
input type for inserting data into table "document_sections_images"
"""
input document_sections_images_insert_input {
  document_section: document_sections_obj_rel_insert_input
  image: images_obj_rel_insert_input
  image_id: bigint
  section_id: bigint
}

"""aggregate max on columns"""
type document_sections_images_max_fields {
  image_id: bigint
  section_id: bigint
}

"""
order by max() on columns of table "document_sections_images"
"""
input document_sections_images_max_order_by {
  image_id: order_by
  section_id: order_by
}

"""aggregate min on columns"""
type document_sections_images_min_fields {
  image_id: bigint
  section_id: bigint
}

"""
order by min() on columns of table "document_sections_images"
"""
input document_sections_images_min_order_by {
  image_id: order_by
  section_id: order_by
}

"""
response of any mutation on the table "document_sections_images"
"""
type document_sections_images_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [document_sections_images!]!
}

"""
input type for inserting object relation for remote table "document_sections_images"
"""
input document_sections_images_obj_rel_insert_input {
  data: document_sections_images_insert_input!
  on_conflict: document_sections_images_on_conflict
}

"""
on conflict condition type for table "document_sections_images"
"""
input document_sections_images_on_conflict {
  constraint: document_sections_images_constraint!
  update_columns: [document_sections_images_update_column!]!
  where: document_sections_images_bool_exp
}

"""
ordering options when selecting data from "document_sections_images"
"""
input document_sections_images_order_by {
  document_section: document_sections_order_by
  image: images_order_by
  image_id: order_by
  section_id: order_by
}

"""
primary key columns input for table: "document_sections_images"
"""
input document_sections_images_pk_columns_input {
  image_id: bigint!
  section_id: bigint!
}

"""
select columns of table "document_sections_images"
"""
enum document_sections_images_select_column {
  """column name"""
  image_id

  """column name"""
  section_id
}

"""
input type for updating data in table "document_sections_images"
"""
input document_sections_images_set_input {
  image_id: bigint
  section_id: bigint
}

"""aggregate stddev on columns"""
type document_sections_images_stddev_fields {
  image_id: Float
  section_id: Float
}

"""
order by stddev() on columns of table "document_sections_images"
"""
input document_sections_images_stddev_order_by {
  image_id: order_by
  section_id: order_by
}

"""aggregate stddev_pop on columns"""
type document_sections_images_stddev_pop_fields {
  image_id: Float
  section_id: Float
}

"""
order by stddev_pop() on columns of table "document_sections_images"
"""
input document_sections_images_stddev_pop_order_by {
  image_id: order_by
  section_id: order_by
}

"""aggregate stddev_samp on columns"""
type document_sections_images_stddev_samp_fields {
  image_id: Float
  section_id: Float
}

"""
order by stddev_samp() on columns of table "document_sections_images"
"""
input document_sections_images_stddev_samp_order_by {
  image_id: order_by
  section_id: order_by
}

"""aggregate sum on columns"""
type document_sections_images_sum_fields {
  image_id: bigint
  section_id: bigint
}

"""
order by sum() on columns of table "document_sections_images"
"""
input document_sections_images_sum_order_by {
  image_id: order_by
  section_id: order_by
}

"""
update columns of table "document_sections_images"
"""
enum document_sections_images_update_column {
  """column name"""
  image_id

  """column name"""
  section_id
}

"""aggregate var_pop on columns"""
type document_sections_images_var_pop_fields {
  image_id: Float
  section_id: Float
}

"""
order by var_pop() on columns of table "document_sections_images"
"""
input document_sections_images_var_pop_order_by {
  image_id: order_by
  section_id: order_by
}

"""aggregate var_samp on columns"""
type document_sections_images_var_samp_fields {
  image_id: Float
  section_id: Float
}

"""
order by var_samp() on columns of table "document_sections_images"
"""
input document_sections_images_var_samp_order_by {
  image_id: order_by
  section_id: order_by
}

"""aggregate variance on columns"""
type document_sections_images_variance_fields {
  image_id: Float
  section_id: Float
}

"""
order by variance() on columns of table "document_sections_images"
"""
input document_sections_images_variance_order_by {
  image_id: order_by
  section_id: order_by
}

"""
input type for incrementing integer column in table "document_sections"
"""
input document_sections_inc_input {
  section_id: bigint
  section_sequence: bigint
}

"""
input type for inserting data into table "document_sections"
"""
input document_sections_insert_input {
  document: documents_obj_rel_insert_input
  document_code: String
  document_sections_images: document_sections_images_arr_rel_insert_input
  section_code: String
  section_id: bigint
  section_sequence: bigint
  section_title: String
}

"""aggregate max on columns"""
type document_sections_max_fields {
  document_code: String
  section_code: String
  section_id: bigint
  section_sequence: bigint
  section_title: String
}

"""
order by max() on columns of table "document_sections"
"""
input document_sections_max_order_by {
  document_code: order_by
  section_code: order_by
  section_id: order_by
  section_sequence: order_by
  section_title: order_by
}

"""aggregate min on columns"""
type document_sections_min_fields {
  document_code: String
  section_code: String
  section_id: bigint
  section_sequence: bigint
  section_title: String
}

"""
order by min() on columns of table "document_sections"
"""
input document_sections_min_order_by {
  document_code: order_by
  section_code: order_by
  section_id: order_by
  section_sequence: order_by
  section_title: order_by
}

"""
response of any mutation on the table "document_sections"
"""
type document_sections_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [document_sections!]!
}

"""
input type for inserting object relation for remote table "document_sections"
"""
input document_sections_obj_rel_insert_input {
  data: document_sections_insert_input!
  on_conflict: document_sections_on_conflict
}

"""
on conflict condition type for table "document_sections"
"""
input document_sections_on_conflict {
  constraint: document_sections_constraint!
  update_columns: [document_sections_update_column!]!
  where: document_sections_bool_exp
}

"""
ordering options when selecting data from "document_sections"
"""
input document_sections_order_by {
  document: documents_order_by
  document_code: order_by
  document_sections_images_aggregate: document_sections_images_aggregate_order_by
  section_code: order_by
  section_id: order_by
  section_sequence: order_by
  section_title: order_by
}

"""
primary key columns input for table: "document_sections"
"""
input document_sections_pk_columns_input {
  section_id: bigint!
}

"""
select columns of table "document_sections"
"""
enum document_sections_select_column {
  """column name"""
  document_code

  """column name"""
  section_code

  """column name"""
  section_id

  """column name"""
  section_sequence

  """column name"""
  section_title
}

"""
input type for updating data in table "document_sections"
"""
input document_sections_set_input {
  document_code: String
  section_code: String
  section_id: bigint
  section_sequence: bigint
  section_title: String
}

"""aggregate stddev on columns"""
type document_sections_stddev_fields {
  section_id: Float
  section_sequence: Float
}

"""
order by stddev() on columns of table "document_sections"
"""
input document_sections_stddev_order_by {
  section_id: order_by
  section_sequence: order_by
}

"""aggregate stddev_pop on columns"""
type document_sections_stddev_pop_fields {
  section_id: Float
  section_sequence: Float
}

"""
order by stddev_pop() on columns of table "document_sections"
"""
input document_sections_stddev_pop_order_by {
  section_id: order_by
  section_sequence: order_by
}

"""aggregate stddev_samp on columns"""
type document_sections_stddev_samp_fields {
  section_id: Float
  section_sequence: Float
}

"""
order by stddev_samp() on columns of table "document_sections"
"""
input document_sections_stddev_samp_order_by {
  section_id: order_by
  section_sequence: order_by
}

"""aggregate sum on columns"""
type document_sections_sum_fields {
  section_id: bigint
  section_sequence: bigint
}

"""
order by sum() on columns of table "document_sections"
"""
input document_sections_sum_order_by {
  section_id: order_by
  section_sequence: order_by
}

"""
update columns of table "document_sections"
"""
enum document_sections_update_column {
  """column name"""
  document_code

  """column name"""
  section_code

  """column name"""
  section_id

  """column name"""
  section_sequence

  """column name"""
  section_title
}

"""aggregate var_pop on columns"""
type document_sections_var_pop_fields {
  section_id: Float
  section_sequence: Float
}

"""
order by var_pop() on columns of table "document_sections"
"""
input document_sections_var_pop_order_by {
  section_id: order_by
  section_sequence: order_by
}

"""aggregate var_samp on columns"""
type document_sections_var_samp_fields {
  section_id: Float
  section_sequence: Float
}

"""
order by var_samp() on columns of table "document_sections"
"""
input document_sections_var_samp_order_by {
  section_id: order_by
  section_sequence: order_by
}

"""aggregate variance on columns"""
type document_sections_variance_fields {
  section_id: Float
  section_sequence: Float
}

"""
order by variance() on columns of table "document_sections"
"""
input document_sections_variance_order_by {
  section_id: order_by
  section_sequence: order_by
}

"""
columns and relationships of "document_structures"
"""
type document_structures {
  document_structure_code: String!
  document_structure_description: String

  """An array relationship"""
  documents(
    """distinct select on columns"""
    distinct_on: [documents_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [documents_order_by!]

    """filter the rows returned"""
    where: documents_bool_exp
  ): [documents!]!

  """An aggregated array relationship"""
  documents_aggregate(
    """distinct select on columns"""
    distinct_on: [documents_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [documents_order_by!]

    """filter the rows returned"""
    where: documents_bool_exp
  ): documents_aggregate!

  """An object relationship"""
  parent_document_structure: document_structures
  parent_document_structure_code: String
}

"""
aggregated selection of "document_structures"
"""
type document_structures_aggregate {
  aggregate: document_structures_aggregate_fields
  nodes: [document_structures!]!
}

"""
aggregate fields of "document_structures"
"""
type document_structures_aggregate_fields {
  count(columns: [document_structures_select_column!], distinct: Boolean): Int
  max: document_structures_max_fields
  min: document_structures_min_fields
}

"""
order by aggregate values of table "document_structures"
"""
input document_structures_aggregate_order_by {
  count: order_by
  max: document_structures_max_order_by
  min: document_structures_min_order_by
}

"""
input type for inserting array relation for remote table "document_structures"
"""
input document_structures_arr_rel_insert_input {
  data: [document_structures_insert_input!]!
  on_conflict: document_structures_on_conflict
}

"""
Boolean expression to filter rows from the table "document_structures". All fields are combined with a logical 'AND'.
"""
input document_structures_bool_exp {
  _and: [document_structures_bool_exp]
  _not: document_structures_bool_exp
  _or: [document_structures_bool_exp]
  document_structure_code: String_comparison_exp
  document_structure_description: String_comparison_exp
  documents: documents_bool_exp
  parent_document_structure: document_structures_bool_exp
  parent_document_structure_code: String_comparison_exp
}

"""
unique or primary key constraints on table "document_structures"
"""
enum document_structures_constraint {
  """unique or primary key constraint"""
  idx_20343_sqlite_autoindex_document_structures_1
}

"""
input type for inserting data into table "document_structures"
"""
input document_structures_insert_input {
  document_structure_code: String
  document_structure_description: String
  documents: documents_arr_rel_insert_input
  parent_document_structure: document_structures_obj_rel_insert_input
  parent_document_structure_code: String
}

"""aggregate max on columns"""
type document_structures_max_fields {
  document_structure_code: String
  document_structure_description: String
  parent_document_structure_code: String
}

"""
order by max() on columns of table "document_structures"
"""
input document_structures_max_order_by {
  document_structure_code: order_by
  document_structure_description: order_by
  parent_document_structure_code: order_by
}

"""aggregate min on columns"""
type document_structures_min_fields {
  document_structure_code: String
  document_structure_description: String
  parent_document_structure_code: String
}

"""
order by min() on columns of table "document_structures"
"""
input document_structures_min_order_by {
  document_structure_code: order_by
  document_structure_description: order_by
  parent_document_structure_code: order_by
}

"""
response of any mutation on the table "document_structures"
"""
type document_structures_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [document_structures!]!
}

"""
input type for inserting object relation for remote table "document_structures"
"""
input document_structures_obj_rel_insert_input {
  data: document_structures_insert_input!
  on_conflict: document_structures_on_conflict
}

"""
on conflict condition type for table "document_structures"
"""
input document_structures_on_conflict {
  constraint: document_structures_constraint!
  update_columns: [document_structures_update_column!]!
  where: document_structures_bool_exp
}

"""
ordering options when selecting data from "document_structures"
"""
input document_structures_order_by {
  document_structure_code: order_by
  document_structure_description: order_by
  documents_aggregate: documents_aggregate_order_by
  parent_document_structure: document_structures_order_by
  parent_document_structure_code: order_by
}

"""
primary key columns input for table: "document_structures"
"""
input document_structures_pk_columns_input {
  document_structure_code: String!
}

"""
select columns of table "document_structures"
"""
enum document_structures_select_column {
  """column name"""
  document_structure_code

  """column name"""
  document_structure_description

  """column name"""
  parent_document_structure_code
}

"""
input type for updating data in table "document_structures"
"""
input document_structures_set_input {
  document_structure_code: String
  document_structure_description: String
  parent_document_structure_code: String
}

"""
update columns of table "document_structures"
"""
enum document_structures_update_column {
  """column name"""
  document_structure_code

  """column name"""
  document_structure_description

  """column name"""
  parent_document_structure_code
}

"""
columns and relationships of "documents"
"""
type documents {
  access_count: bigint
  document_code: String!

  """An array relationship"""
  document_functional_areas(
    """distinct select on columns"""
    distinct_on: [document_functional_areas_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [document_functional_areas_order_by!]

    """filter the rows returned"""
    where: document_functional_areas_bool_exp
  ): [document_functional_areas!]!

  """An aggregated array relationship"""
  document_functional_areas_aggregate(
    """distinct select on columns"""
    distinct_on: [document_functional_areas_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [document_functional_areas_order_by!]

    """filter the rows returned"""
    where: document_functional_areas_bool_exp
  ): document_functional_areas_aggregate!
  document_name: String

  """An array relationship"""
  document_sections(
    """distinct select on columns"""
    distinct_on: [document_sections_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [document_sections_order_by!]

    """filter the rows returned"""
    where: document_sections_bool_exp
  ): [document_sections!]!

  """An aggregated array relationship"""
  document_sections_aggregate(
    """distinct select on columns"""
    distinct_on: [document_sections_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [document_sections_order_by!]

    """filter the rows returned"""
    where: document_sections_bool_exp
  ): document_sections_aggregate!

  """An object relationship"""
  document_structure: document_structures
  document_structure_code: String
  document_type_code: String
}

"""
aggregated selection of "documents"
"""
type documents_aggregate {
  aggregate: documents_aggregate_fields
  nodes: [documents!]!
}

"""
aggregate fields of "documents"
"""
type documents_aggregate_fields {
  avg: documents_avg_fields
  count(columns: [documents_select_column!], distinct: Boolean): Int
  max: documents_max_fields
  min: documents_min_fields
  stddev: documents_stddev_fields
  stddev_pop: documents_stddev_pop_fields
  stddev_samp: documents_stddev_samp_fields
  sum: documents_sum_fields
  var_pop: documents_var_pop_fields
  var_samp: documents_var_samp_fields
  variance: documents_variance_fields
}

"""
order by aggregate values of table "documents"
"""
input documents_aggregate_order_by {
  avg: documents_avg_order_by
  count: order_by
  max: documents_max_order_by
  min: documents_min_order_by
  stddev: documents_stddev_order_by
  stddev_pop: documents_stddev_pop_order_by
  stddev_samp: documents_stddev_samp_order_by
  sum: documents_sum_order_by
  var_pop: documents_var_pop_order_by
  var_samp: documents_var_samp_order_by
  variance: documents_variance_order_by
}

"""
input type for inserting array relation for remote table "documents"
"""
input documents_arr_rel_insert_input {
  data: [documents_insert_input!]!
  on_conflict: documents_on_conflict
}

"""aggregate avg on columns"""
type documents_avg_fields {
  access_count: Float
}

"""
order by avg() on columns of table "documents"
"""
input documents_avg_order_by {
  access_count: order_by
}

"""
Boolean expression to filter rows from the table "documents". All fields are combined with a logical 'AND'.
"""
input documents_bool_exp {
  _and: [documents_bool_exp]
  _not: documents_bool_exp
  _or: [documents_bool_exp]
  access_count: bigint_comparison_exp
  document_code: String_comparison_exp
  document_functional_areas: document_functional_areas_bool_exp
  document_name: String_comparison_exp
  document_sections: document_sections_bool_exp
  document_structure: document_structures_bool_exp
  document_structure_code: String_comparison_exp
  document_type_code: String_comparison_exp
}

"""
unique or primary key constraints on table "documents"
"""
enum documents_constraint {
  """unique or primary key constraint"""
  idx_20361_sqlite_autoindex_documents_1
}

"""
input type for incrementing integer column in table "documents"
"""
input documents_inc_input {
  access_count: bigint
}

"""
input type for inserting data into table "documents"
"""
input documents_insert_input {
  access_count: bigint
  document_code: String
  document_functional_areas: document_functional_areas_arr_rel_insert_input
  document_name: String
  document_sections: document_sections_arr_rel_insert_input
  document_structure: document_structures_obj_rel_insert_input
  document_structure_code: String
  document_type_code: String
}

"""aggregate max on columns"""
type documents_max_fields {
  access_count: bigint
  document_code: String
  document_name: String
  document_structure_code: String
  document_type_code: String
}

"""
order by max() on columns of table "documents"
"""
input documents_max_order_by {
  access_count: order_by
  document_code: order_by
  document_name: order_by
  document_structure_code: order_by
  document_type_code: order_by
}

"""aggregate min on columns"""
type documents_min_fields {
  access_count: bigint
  document_code: String
  document_name: String
  document_structure_code: String
  document_type_code: String
}

"""
order by min() on columns of table "documents"
"""
input documents_min_order_by {
  access_count: order_by
  document_code: order_by
  document_name: order_by
  document_structure_code: order_by
  document_type_code: order_by
}

"""
response of any mutation on the table "documents"
"""
type documents_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [documents!]!
}

"""
input type for inserting object relation for remote table "documents"
"""
input documents_obj_rel_insert_input {
  data: documents_insert_input!
  on_conflict: documents_on_conflict
}

"""
on conflict condition type for table "documents"
"""
input documents_on_conflict {
  constraint: documents_constraint!
  update_columns: [documents_update_column!]!
  where: documents_bool_exp
}

"""
ordering options when selecting data from "documents"
"""
input documents_order_by {
  access_count: order_by
  document_code: order_by
  document_functional_areas_aggregate: document_functional_areas_aggregate_order_by
  document_name: order_by
  document_sections_aggregate: document_sections_aggregate_order_by
  document_structure: document_structures_order_by
  document_structure_code: order_by
  document_type_code: order_by
}

"""
primary key columns input for table: "documents"
"""
input documents_pk_columns_input {
  document_code: String!
}

"""
select columns of table "documents"
"""
enum documents_select_column {
  """column name"""
  access_count

  """column name"""
  document_code

  """column name"""
  document_name

  """column name"""
  document_structure_code

  """column name"""
  document_type_code
}

"""
input type for updating data in table "documents"
"""
input documents_set_input {
  access_count: bigint
  document_code: String
  document_name: String
  document_structure_code: String
  document_type_code: String
}

"""aggregate stddev on columns"""
type documents_stddev_fields {
  access_count: Float
}

"""
order by stddev() on columns of table "documents"
"""
input documents_stddev_order_by {
  access_count: order_by
}

"""aggregate stddev_pop on columns"""
type documents_stddev_pop_fields {
  access_count: Float
}

"""
order by stddev_pop() on columns of table "documents"
"""
input documents_stddev_pop_order_by {
  access_count: order_by
}

"""aggregate stddev_samp on columns"""
type documents_stddev_samp_fields {
  access_count: Float
}

"""
order by stddev_samp() on columns of table "documents"
"""
input documents_stddev_samp_order_by {
  access_count: order_by
}

"""aggregate sum on columns"""
type documents_sum_fields {
  access_count: bigint
}

"""
order by sum() on columns of table "documents"
"""
input documents_sum_order_by {
  access_count: order_by
}

"""
update columns of table "documents"
"""
enum documents_update_column {
  """column name"""
  access_count

  """column name"""
  document_code

  """column name"""
  document_name

  """column name"""
  document_structure_code

  """column name"""
  document_type_code
}

"""aggregate var_pop on columns"""
type documents_var_pop_fields {
  access_count: Float
}

"""
order by var_pop() on columns of table "documents"
"""
input documents_var_pop_order_by {
  access_count: order_by
}

"""aggregate var_samp on columns"""
type documents_var_samp_fields {
  access_count: Float
}

"""
order by var_samp() on columns of table "documents"
"""
input documents_var_samp_order_by {
  access_count: order_by
}

"""aggregate variance on columns"""
type documents_variance_fields {
  access_count: Float
}

"""
order by variance() on columns of table "documents"
"""
input documents_variance_order_by {
  access_count: order_by
}

"""
columns and relationships of "functional_areas"
"""
type functional_areas {
  """An array relationship"""
  document_functional_areas(
    """distinct select on columns"""
    distinct_on: [document_functional_areas_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [document_functional_areas_order_by!]

    """filter the rows returned"""
    where: document_functional_areas_bool_exp
  ): [document_functional_areas!]!

  """An aggregated array relationship"""
  document_functional_areas_aggregate(
    """distinct select on columns"""
    distinct_on: [document_functional_areas_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [document_functional_areas_order_by!]

    """filter the rows returned"""
    where: document_functional_areas_bool_exp
  ): document_functional_areas_aggregate!
  functional_area_code: String!
  functional_area_description: String
  parent_functional_area_code: String
}

"""
aggregated selection of "functional_areas"
"""
type functional_areas_aggregate {
  aggregate: functional_areas_aggregate_fields
  nodes: [functional_areas!]!
}

"""
aggregate fields of "functional_areas"
"""
type functional_areas_aggregate_fields {
  count(columns: [functional_areas_select_column!], distinct: Boolean): Int
  max: functional_areas_max_fields
  min: functional_areas_min_fields
}

"""
order by aggregate values of table "functional_areas"
"""
input functional_areas_aggregate_order_by {
  count: order_by
  max: functional_areas_max_order_by
  min: functional_areas_min_order_by
}

"""
input type for inserting array relation for remote table "functional_areas"
"""
input functional_areas_arr_rel_insert_input {
  data: [functional_areas_insert_input!]!
  on_conflict: functional_areas_on_conflict
}

"""
Boolean expression to filter rows from the table "functional_areas". All fields are combined with a logical 'AND'.
"""
input functional_areas_bool_exp {
  _and: [functional_areas_bool_exp]
  _not: functional_areas_bool_exp
  _or: [functional_areas_bool_exp]
  document_functional_areas: document_functional_areas_bool_exp
  functional_area_code: String_comparison_exp
  functional_area_description: String_comparison_exp
  parent_functional_area_code: String_comparison_exp
}

"""
unique or primary key constraints on table "functional_areas"
"""
enum functional_areas_constraint {
  """unique or primary key constraint"""
  idx_20349_sqlite_autoindex_functional_areas_1
}

"""
input type for inserting data into table "functional_areas"
"""
input functional_areas_insert_input {
  document_functional_areas: document_functional_areas_arr_rel_insert_input
  functional_area_code: String
  functional_area_description: String
  parent_functional_area_code: String
}

"""aggregate max on columns"""
type functional_areas_max_fields {
  functional_area_code: String
  functional_area_description: String
  parent_functional_area_code: String
}

"""
order by max() on columns of table "functional_areas"
"""
input functional_areas_max_order_by {
  functional_area_code: order_by
  functional_area_description: order_by
  parent_functional_area_code: order_by
}

"""aggregate min on columns"""
type functional_areas_min_fields {
  functional_area_code: String
  functional_area_description: String
  parent_functional_area_code: String
}

"""
order by min() on columns of table "functional_areas"
"""
input functional_areas_min_order_by {
  functional_area_code: order_by
  functional_area_description: order_by
  parent_functional_area_code: order_by
}

"""
response of any mutation on the table "functional_areas"
"""
type functional_areas_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [functional_areas!]!
}

"""
input type for inserting object relation for remote table "functional_areas"
"""
input functional_areas_obj_rel_insert_input {
  data: functional_areas_insert_input!
  on_conflict: functional_areas_on_conflict
}

"""
on conflict condition type for table "functional_areas"
"""
input functional_areas_on_conflict {
  constraint: functional_areas_constraint!
  update_columns: [functional_areas_update_column!]!
  where: functional_areas_bool_exp
}

"""
ordering options when selecting data from "functional_areas"
"""
input functional_areas_order_by {
  document_functional_areas_aggregate: document_functional_areas_aggregate_order_by
  functional_area_code: order_by
  functional_area_description: order_by
  parent_functional_area_code: order_by
}

"""
primary key columns input for table: "functional_areas"
"""
input functional_areas_pk_columns_input {
  functional_area_code: String!
}

"""
select columns of table "functional_areas"
"""
enum functional_areas_select_column {
  """column name"""
  functional_area_code

  """column name"""
  functional_area_description

  """column name"""
  parent_functional_area_code
}

"""
input type for updating data in table "functional_areas"
"""
input functional_areas_set_input {
  functional_area_code: String
  functional_area_description: String
  parent_functional_area_code: String
}

"""
update columns of table "functional_areas"
"""
enum functional_areas_update_column {
  """column name"""
  functional_area_code

  """column name"""
  functional_area_description

  """column name"""
  parent_functional_area_code
}

"""
columns and relationships of "images"
"""
type images {
  """An array relationship"""
  document_sections_images(
    """distinct select on columns"""
    distinct_on: [document_sections_images_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [document_sections_images_order_by!]

    """filter the rows returned"""
    where: document_sections_images_bool_exp
  ): [document_sections_images!]!

  """An aggregated array relationship"""
  document_sections_images_aggregate(
    """distinct select on columns"""
    distinct_on: [document_sections_images_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [document_sections_images_order_by!]

    """filter the rows returned"""
    where: document_sections_images_bool_exp
  ): document_sections_images_aggregate!
  image_alt_text: String
  image_id: bigint!
  image_name: String
  image_url: String
}

"""
aggregated selection of "images"
"""
type images_aggregate {
  aggregate: images_aggregate_fields
  nodes: [images!]!
}

"""
aggregate fields of "images"
"""
type images_aggregate_fields {
  avg: images_avg_fields
  count(columns: [images_select_column!], distinct: Boolean): Int
  max: images_max_fields
  min: images_min_fields
  stddev: images_stddev_fields
  stddev_pop: images_stddev_pop_fields
  stddev_samp: images_stddev_samp_fields
  sum: images_sum_fields
  var_pop: images_var_pop_fields
  var_samp: images_var_samp_fields
  variance: images_variance_fields
}

"""
order by aggregate values of table "images"
"""
input images_aggregate_order_by {
  avg: images_avg_order_by
  count: order_by
  max: images_max_order_by
  min: images_min_order_by
  stddev: images_stddev_order_by
  stddev_pop: images_stddev_pop_order_by
  stddev_samp: images_stddev_samp_order_by
  sum: images_sum_order_by
  var_pop: images_var_pop_order_by
  var_samp: images_var_samp_order_by
  variance: images_variance_order_by
}

"""
input type for inserting array relation for remote table "images"
"""
input images_arr_rel_insert_input {
  data: [images_insert_input!]!
  on_conflict: images_on_conflict
}

"""aggregate avg on columns"""
type images_avg_fields {
  image_id: Float
}

"""
order by avg() on columns of table "images"
"""
input images_avg_order_by {
  image_id: order_by
}

"""
Boolean expression to filter rows from the table "images". All fields are combined with a logical 'AND'.
"""
input images_bool_exp {
  _and: [images_bool_exp]
  _not: images_bool_exp
  _or: [images_bool_exp]
  document_sections_images: document_sections_images_bool_exp
  image_alt_text: String_comparison_exp
  image_id: bigint_comparison_exp
  image_name: String_comparison_exp
  image_url: String_comparison_exp
}

"""
unique or primary key constraints on table "images"
"""
enum images_constraint {
  """unique or primary key constraint"""
  idx_20355_images_pkey
}

"""
input type for incrementing integer column in table "images"
"""
input images_inc_input {
  image_id: bigint
}

"""
input type for inserting data into table "images"
"""
input images_insert_input {
  document_sections_images: document_sections_images_arr_rel_insert_input
  image_alt_text: String
  image_id: bigint
  image_name: String
  image_url: String
}

"""aggregate max on columns"""
type images_max_fields {
  image_alt_text: String
  image_id: bigint
  image_name: String
  image_url: String
}

"""
order by max() on columns of table "images"
"""
input images_max_order_by {
  image_alt_text: order_by
  image_id: order_by
  image_name: order_by
  image_url: order_by
}

"""aggregate min on columns"""
type images_min_fields {
  image_alt_text: String
  image_id: bigint
  image_name: String
  image_url: String
}

"""
order by min() on columns of table "images"
"""
input images_min_order_by {
  image_alt_text: order_by
  image_id: order_by
  image_name: order_by
  image_url: order_by
}

"""
response of any mutation on the table "images"
"""
type images_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [images!]!
}

"""
input type for inserting object relation for remote table "images"
"""
input images_obj_rel_insert_input {
  data: images_insert_input!
  on_conflict: images_on_conflict
}

"""
on conflict condition type for table "images"
"""
input images_on_conflict {
  constraint: images_constraint!
  update_columns: [images_update_column!]!
  where: images_bool_exp
}

"""
ordering options when selecting data from "images"
"""
input images_order_by {
  document_sections_images_aggregate: document_sections_images_aggregate_order_by
  image_alt_text: order_by
  image_id: order_by
  image_name: order_by
  image_url: order_by
}

"""
primary key columns input for table: "images"
"""
input images_pk_columns_input {
  image_id: bigint!
}

"""
select columns of table "images"
"""
enum images_select_column {
  """column name"""
  image_alt_text

  """column name"""
  image_id

  """column name"""
  image_name

  """column name"""
  image_url
}

"""
input type for updating data in table "images"
"""
input images_set_input {
  image_alt_text: String
  image_id: bigint
  image_name: String
  image_url: String
}

"""aggregate stddev on columns"""
type images_stddev_fields {
  image_id: Float
}

"""
order by stddev() on columns of table "images"
"""
input images_stddev_order_by {
  image_id: order_by
}

"""aggregate stddev_pop on columns"""
type images_stddev_pop_fields {
  image_id: Float
}

"""
order by stddev_pop() on columns of table "images"
"""
input images_stddev_pop_order_by {
  image_id: order_by
}

"""aggregate stddev_samp on columns"""
type images_stddev_samp_fields {
  image_id: Float
}

"""
order by stddev_samp() on columns of table "images"
"""
input images_stddev_samp_order_by {
  image_id: order_by
}

"""aggregate sum on columns"""
type images_sum_fields {
  image_id: bigint
}

"""
order by sum() on columns of table "images"
"""
input images_sum_order_by {
  image_id: order_by
}

"""
update columns of table "images"
"""
enum images_update_column {
  """column name"""
  image_alt_text

  """column name"""
  image_id

  """column name"""
  image_name

  """column name"""
  image_url
}

"""aggregate var_pop on columns"""
type images_var_pop_fields {
  image_id: Float
}

"""
order by var_pop() on columns of table "images"
"""
input images_var_pop_order_by {
  image_id: order_by
}

"""aggregate var_samp on columns"""
type images_var_samp_fields {
  image_id: Float
}

"""
order by var_samp() on columns of table "images"
"""
input images_var_samp_order_by {
  image_id: order_by
}

"""aggregate variance on columns"""
type images_variance_fields {
  image_id: Float
}

"""
order by variance() on columns of table "images"
"""
input images_variance_order_by {
  image_id: order_by
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "document_functional_areas"
  """
  delete_document_functional_areas(
    """filter the rows which have to be deleted"""
    where: document_functional_areas_bool_exp!
  ): document_functional_areas_mutation_response

  """
  delete data from the table: "document_sections"
  """
  delete_document_sections(
    """filter the rows which have to be deleted"""
    where: document_sections_bool_exp!
  ): document_sections_mutation_response

  """
  delete single row from the table: "document_sections"
  """
  delete_document_sections_by_pk(section_id: bigint!): document_sections

  """
  delete data from the table: "document_sections_images"
  """
  delete_document_sections_images(
    """filter the rows which have to be deleted"""
    where: document_sections_images_bool_exp!
  ): document_sections_images_mutation_response

  """
  delete single row from the table: "document_sections_images"
  """
  delete_document_sections_images_by_pk(image_id: bigint!, section_id: bigint!): document_sections_images

  """
  delete data from the table: "document_structures"
  """
  delete_document_structures(
    """filter the rows which have to be deleted"""
    where: document_structures_bool_exp!
  ): document_structures_mutation_response

  """
  delete single row from the table: "document_structures"
  """
  delete_document_structures_by_pk(document_structure_code: String!): document_structures

  """
  delete data from the table: "documents"
  """
  delete_documents(
    """filter the rows which have to be deleted"""
    where: documents_bool_exp!
  ): documents_mutation_response

  """
  delete single row from the table: "documents"
  """
  delete_documents_by_pk(document_code: String!): documents

  """
  delete data from the table: "functional_areas"
  """
  delete_functional_areas(
    """filter the rows which have to be deleted"""
    where: functional_areas_bool_exp!
  ): functional_areas_mutation_response

  """
  delete single row from the table: "functional_areas"
  """
  delete_functional_areas_by_pk(functional_area_code: String!): functional_areas

  """
  delete data from the table: "images"
  """
  delete_images(
    """filter the rows which have to be deleted"""
    where: images_bool_exp!
  ): images_mutation_response

  """
  delete single row from the table: "images"
  """
  delete_images_by_pk(image_id: bigint!): images

  """
  delete data from the table: "roles"
  """
  delete_roles(
    """filter the rows which have to be deleted"""
    where: roles_bool_exp!
  ): roles_mutation_response

  """
  delete single row from the table: "roles"
  """
  delete_roles_by_pk(role_code: String!): roles

  """
  delete data from the table: "users"
  """
  delete_users(
    """filter the rows which have to be deleted"""
    where: users_bool_exp!
  ): users_mutation_response

  """
  delete single row from the table: "users"
  """
  delete_users_by_pk(user_id: bigint!): users

  """
  insert data into the table: "document_functional_areas"
  """
  insert_document_functional_areas(
    """the rows to be inserted"""
    objects: [document_functional_areas_insert_input!]!
  ): document_functional_areas_mutation_response

  """
  insert a single row into the table: "document_functional_areas"
  """
  insert_document_functional_areas_one(
    """the row to be inserted"""
    object: document_functional_areas_insert_input!
  ): document_functional_areas

  """
  insert data into the table: "document_sections"
  """
  insert_document_sections(
    """the rows to be inserted"""
    objects: [document_sections_insert_input!]!

    """on conflict condition"""
    on_conflict: document_sections_on_conflict
  ): document_sections_mutation_response

  """
  insert data into the table: "document_sections_images"
  """
  insert_document_sections_images(
    """the rows to be inserted"""
    objects: [document_sections_images_insert_input!]!

    """on conflict condition"""
    on_conflict: document_sections_images_on_conflict
  ): document_sections_images_mutation_response

  """
  insert a single row into the table: "document_sections_images"
  """
  insert_document_sections_images_one(
    """the row to be inserted"""
    object: document_sections_images_insert_input!

    """on conflict condition"""
    on_conflict: document_sections_images_on_conflict
  ): document_sections_images

  """
  insert a single row into the table: "document_sections"
  """
  insert_document_sections_one(
    """the row to be inserted"""
    object: document_sections_insert_input!

    """on conflict condition"""
    on_conflict: document_sections_on_conflict
  ): document_sections

  """
  insert data into the table: "document_structures"
  """
  insert_document_structures(
    """the rows to be inserted"""
    objects: [document_structures_insert_input!]!

    """on conflict condition"""
    on_conflict: document_structures_on_conflict
  ): document_structures_mutation_response

  """
  insert a single row into the table: "document_structures"
  """
  insert_document_structures_one(
    """the row to be inserted"""
    object: document_structures_insert_input!

    """on conflict condition"""
    on_conflict: document_structures_on_conflict
  ): document_structures

  """
  insert data into the table: "documents"
  """
  insert_documents(
    """the rows to be inserted"""
    objects: [documents_insert_input!]!

    """on conflict condition"""
    on_conflict: documents_on_conflict
  ): documents_mutation_response

  """
  insert a single row into the table: "documents"
  """
  insert_documents_one(
    """the row to be inserted"""
    object: documents_insert_input!

    """on conflict condition"""
    on_conflict: documents_on_conflict
  ): documents

  """
  insert data into the table: "functional_areas"
  """
  insert_functional_areas(
    """the rows to be inserted"""
    objects: [functional_areas_insert_input!]!

    """on conflict condition"""
    on_conflict: functional_areas_on_conflict
  ): functional_areas_mutation_response

  """
  insert a single row into the table: "functional_areas"
  """
  insert_functional_areas_one(
    """the row to be inserted"""
    object: functional_areas_insert_input!

    """on conflict condition"""
    on_conflict: functional_areas_on_conflict
  ): functional_areas

  """
  insert data into the table: "images"
  """
  insert_images(
    """the rows to be inserted"""
    objects: [images_insert_input!]!

    """on conflict condition"""
    on_conflict: images_on_conflict
  ): images_mutation_response

  """
  insert a single row into the table: "images"
  """
  insert_images_one(
    """the row to be inserted"""
    object: images_insert_input!

    """on conflict condition"""
    on_conflict: images_on_conflict
  ): images

  """
  insert data into the table: "roles"
  """
  insert_roles(
    """the rows to be inserted"""
    objects: [roles_insert_input!]!

    """on conflict condition"""
    on_conflict: roles_on_conflict
  ): roles_mutation_response

  """
  insert a single row into the table: "roles"
  """
  insert_roles_one(
    """the row to be inserted"""
    object: roles_insert_input!

    """on conflict condition"""
    on_conflict: roles_on_conflict
  ): roles

  """
  insert data into the table: "users"
  """
  insert_users(
    """the rows to be inserted"""
    objects: [users_insert_input!]!

    """on conflict condition"""
    on_conflict: users_on_conflict
  ): users_mutation_response

  """
  insert a single row into the table: "users"
  """
  insert_users_one(
    """the row to be inserted"""
    object: users_insert_input!

    """on conflict condition"""
    on_conflict: users_on_conflict
  ): users

  """
  update data of the table: "document_functional_areas"
  """
  update_document_functional_areas(
    """sets the columns of the filtered rows to the given values"""
    _set: document_functional_areas_set_input

    """filter the rows which have to be updated"""
    where: document_functional_areas_bool_exp!
  ): document_functional_areas_mutation_response

  """
  update data of the table: "document_sections"
  """
  update_document_sections(
    """increments the integer columns with given value of the filtered values"""
    _inc: document_sections_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: document_sections_set_input

    """filter the rows which have to be updated"""
    where: document_sections_bool_exp!
  ): document_sections_mutation_response

  """
  update single row of the table: "document_sections"
  """
  update_document_sections_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: document_sections_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: document_sections_set_input
    pk_columns: document_sections_pk_columns_input!
  ): document_sections

  """
  update data of the table: "document_sections_images"
  """
  update_document_sections_images(
    """increments the integer columns with given value of the filtered values"""
    _inc: document_sections_images_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: document_sections_images_set_input

    """filter the rows which have to be updated"""
    where: document_sections_images_bool_exp!
  ): document_sections_images_mutation_response

  """
  update single row of the table: "document_sections_images"
  """
  update_document_sections_images_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: document_sections_images_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: document_sections_images_set_input
    pk_columns: document_sections_images_pk_columns_input!
  ): document_sections_images

  """
  update data of the table: "document_structures"
  """
  update_document_structures(
    """sets the columns of the filtered rows to the given values"""
    _set: document_structures_set_input

    """filter the rows which have to be updated"""
    where: document_structures_bool_exp!
  ): document_structures_mutation_response

  """
  update single row of the table: "document_structures"
  """
  update_document_structures_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: document_structures_set_input
    pk_columns: document_structures_pk_columns_input!
  ): document_structures

  """
  update data of the table: "documents"
  """
  update_documents(
    """increments the integer columns with given value of the filtered values"""
    _inc: documents_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: documents_set_input

    """filter the rows which have to be updated"""
    where: documents_bool_exp!
  ): documents_mutation_response

  """
  update single row of the table: "documents"
  """
  update_documents_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: documents_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: documents_set_input
    pk_columns: documents_pk_columns_input!
  ): documents

  """
  update data of the table: "functional_areas"
  """
  update_functional_areas(
    """sets the columns of the filtered rows to the given values"""
    _set: functional_areas_set_input

    """filter the rows which have to be updated"""
    where: functional_areas_bool_exp!
  ): functional_areas_mutation_response

  """
  update single row of the table: "functional_areas"
  """
  update_functional_areas_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: functional_areas_set_input
    pk_columns: functional_areas_pk_columns_input!
  ): functional_areas

  """
  update data of the table: "images"
  """
  update_images(
    """increments the integer columns with given value of the filtered values"""
    _inc: images_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: images_set_input

    """filter the rows which have to be updated"""
    where: images_bool_exp!
  ): images_mutation_response

  """
  update single row of the table: "images"
  """
  update_images_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: images_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: images_set_input
    pk_columns: images_pk_columns_input!
  ): images

  """
  update data of the table: "roles"
  """
  update_roles(
    """sets the columns of the filtered rows to the given values"""
    _set: roles_set_input

    """filter the rows which have to be updated"""
    where: roles_bool_exp!
  ): roles_mutation_response

  """
  update single row of the table: "roles"
  """
  update_roles_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: roles_set_input
    pk_columns: roles_pk_columns_input!
  ): roles

  """
  update data of the table: "users"
  """
  update_users(
    """increments the integer columns with given value of the filtered values"""
    _inc: users_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: users_set_input

    """filter the rows which have to be updated"""
    where: users_bool_exp!
  ): users_mutation_response

  """
  update single row of the table: "users"
  """
  update_users_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: users_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: users_set_input
    pk_columns: users_pk_columns_input!
  ): users
}

"""column ordering options"""
enum order_by {
  """in the ascending order, nulls last"""
  asc

  """in the ascending order, nulls first"""
  asc_nulls_first

  """in the ascending order, nulls last"""
  asc_nulls_last

  """in the descending order, nulls first"""
  desc

  """in the descending order, nulls first"""
  desc_nulls_first

  """in the descending order, nulls last"""
  desc_nulls_last
}

"""query root"""
type query_root {
  """
  fetch data from the table: "document_functional_areas"
  """
  document_functional_areas(
    """distinct select on columns"""
    distinct_on: [document_functional_areas_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [document_functional_areas_order_by!]

    """filter the rows returned"""
    where: document_functional_areas_bool_exp
  ): [document_functional_areas!]!

  """
  fetch aggregated fields from the table: "document_functional_areas"
  """
  document_functional_areas_aggregate(
    """distinct select on columns"""
    distinct_on: [document_functional_areas_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [document_functional_areas_order_by!]

    """filter the rows returned"""
    where: document_functional_areas_bool_exp
  ): document_functional_areas_aggregate!

  """
  fetch data from the table: "document_sections"
  """
  document_sections(
    """distinct select on columns"""
    distinct_on: [document_sections_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [document_sections_order_by!]

    """filter the rows returned"""
    where: document_sections_bool_exp
  ): [document_sections!]!

  """
  fetch aggregated fields from the table: "document_sections"
  """
  document_sections_aggregate(
    """distinct select on columns"""
    distinct_on: [document_sections_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [document_sections_order_by!]

    """filter the rows returned"""
    where: document_sections_bool_exp
  ): document_sections_aggregate!

  """
  fetch data from the table: "document_sections" using primary key columns
  """
  document_sections_by_pk(section_id: bigint!): document_sections

  """
  fetch data from the table: "document_sections_images"
  """
  document_sections_images(
    """distinct select on columns"""
    distinct_on: [document_sections_images_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [document_sections_images_order_by!]

    """filter the rows returned"""
    where: document_sections_images_bool_exp
  ): [document_sections_images!]!

  """
  fetch aggregated fields from the table: "document_sections_images"
  """
  document_sections_images_aggregate(
    """distinct select on columns"""
    distinct_on: [document_sections_images_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [document_sections_images_order_by!]

    """filter the rows returned"""
    where: document_sections_images_bool_exp
  ): document_sections_images_aggregate!

  """
  fetch data from the table: "document_sections_images" using primary key columns
  """
  document_sections_images_by_pk(image_id: bigint!, section_id: bigint!): document_sections_images

  """
  fetch data from the table: "document_structures"
  """
  document_structures(
    """distinct select on columns"""
    distinct_on: [document_structures_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [document_structures_order_by!]

    """filter the rows returned"""
    where: document_structures_bool_exp
  ): [document_structures!]!

  """
  fetch aggregated fields from the table: "document_structures"
  """
  document_structures_aggregate(
    """distinct select on columns"""
    distinct_on: [document_structures_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [document_structures_order_by!]

    """filter the rows returned"""
    where: document_structures_bool_exp
  ): document_structures_aggregate!

  """
  fetch data from the table: "document_structures" using primary key columns
  """
  document_structures_by_pk(document_structure_code: String!): document_structures

  """
  fetch data from the table: "documents"
  """
  documents(
    """distinct select on columns"""
    distinct_on: [documents_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [documents_order_by!]

    """filter the rows returned"""
    where: documents_bool_exp
  ): [documents!]!

  """
  fetch aggregated fields from the table: "documents"
  """
  documents_aggregate(
    """distinct select on columns"""
    distinct_on: [documents_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [documents_order_by!]

    """filter the rows returned"""
    where: documents_bool_exp
  ): documents_aggregate!

  """fetch data from the table: "documents" using primary key columns"""
  documents_by_pk(document_code: String!): documents

  """
  fetch data from the table: "functional_areas"
  """
  functional_areas(
    """distinct select on columns"""
    distinct_on: [functional_areas_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [functional_areas_order_by!]

    """filter the rows returned"""
    where: functional_areas_bool_exp
  ): [functional_areas!]!

  """
  fetch aggregated fields from the table: "functional_areas"
  """
  functional_areas_aggregate(
    """distinct select on columns"""
    distinct_on: [functional_areas_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [functional_areas_order_by!]

    """filter the rows returned"""
    where: functional_areas_bool_exp
  ): functional_areas_aggregate!

  """
  fetch data from the table: "functional_areas" using primary key columns
  """
  functional_areas_by_pk(functional_area_code: String!): functional_areas

  """
  fetch data from the table: "images"
  """
  images(
    """distinct select on columns"""
    distinct_on: [images_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [images_order_by!]

    """filter the rows returned"""
    where: images_bool_exp
  ): [images!]!

  """
  fetch aggregated fields from the table: "images"
  """
  images_aggregate(
    """distinct select on columns"""
    distinct_on: [images_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [images_order_by!]

    """filter the rows returned"""
    where: images_bool_exp
  ): images_aggregate!

  """fetch data from the table: "images" using primary key columns"""
  images_by_pk(image_id: bigint!): images

  """
  fetch data from the table: "roles"
  """
  roles(
    """distinct select on columns"""
    distinct_on: [roles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [roles_order_by!]

    """filter the rows returned"""
    where: roles_bool_exp
  ): [roles!]!

  """
  fetch aggregated fields from the table: "roles"
  """
  roles_aggregate(
    """distinct select on columns"""
    distinct_on: [roles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [roles_order_by!]

    """filter the rows returned"""
    where: roles_bool_exp
  ): roles_aggregate!

  """fetch data from the table: "roles" using primary key columns"""
  roles_by_pk(role_code: String!): roles

  """
  fetch data from the table: "users"
  """
  users(
    """distinct select on columns"""
    distinct_on: [users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_order_by!]

    """filter the rows returned"""
    where: users_bool_exp
  ): [users!]!

  """
  fetch aggregated fields from the table: "users"
  """
  users_aggregate(
    """distinct select on columns"""
    distinct_on: [users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_order_by!]

    """filter the rows returned"""
    where: users_bool_exp
  ): users_aggregate!

  """fetch data from the table: "users" using primary key columns"""
  users_by_pk(user_id: bigint!): users
}

"""
columns and relationships of "roles"
"""
type roles {
  role_code: String!
  role_description: String

  """An array relationship"""
  users(
    """distinct select on columns"""
    distinct_on: [users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_order_by!]

    """filter the rows returned"""
    where: users_bool_exp
  ): [users!]!

  """An aggregated array relationship"""
  users_aggregate(
    """distinct select on columns"""
    distinct_on: [users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_order_by!]

    """filter the rows returned"""
    where: users_bool_exp
  ): users_aggregate!
}

"""
aggregated selection of "roles"
"""
type roles_aggregate {
  aggregate: roles_aggregate_fields
  nodes: [roles!]!
}

"""
aggregate fields of "roles"
"""
type roles_aggregate_fields {
  count(columns: [roles_select_column!], distinct: Boolean): Int
  max: roles_max_fields
  min: roles_min_fields
}

"""
order by aggregate values of table "roles"
"""
input roles_aggregate_order_by {
  count: order_by
  max: roles_max_order_by
  min: roles_min_order_by
}

"""
input type for inserting array relation for remote table "roles"
"""
input roles_arr_rel_insert_input {
  data: [roles_insert_input!]!
  on_conflict: roles_on_conflict
}

"""
Boolean expression to filter rows from the table "roles". All fields are combined with a logical 'AND'.
"""
input roles_bool_exp {
  _and: [roles_bool_exp]
  _not: roles_bool_exp
  _or: [roles_bool_exp]
  role_code: String_comparison_exp
  role_description: String_comparison_exp
  users: users_bool_exp
}

"""
unique or primary key constraints on table "roles"
"""
enum roles_constraint {
  """unique or primary key constraint"""
  idx_20331_sqlite_autoindex_roles_1
}

"""
input type for inserting data into table "roles"
"""
input roles_insert_input {
  role_code: String
  role_description: String
  users: users_arr_rel_insert_input
}

"""aggregate max on columns"""
type roles_max_fields {
  role_code: String
  role_description: String
}

"""
order by max() on columns of table "roles"
"""
input roles_max_order_by {
  role_code: order_by
  role_description: order_by
}

"""aggregate min on columns"""
type roles_min_fields {
  role_code: String
  role_description: String
}

"""
order by min() on columns of table "roles"
"""
input roles_min_order_by {
  role_code: order_by
  role_description: order_by
}

"""
response of any mutation on the table "roles"
"""
type roles_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [roles!]!
}

"""
input type for inserting object relation for remote table "roles"
"""
input roles_obj_rel_insert_input {
  data: roles_insert_input!
  on_conflict: roles_on_conflict
}

"""
on conflict condition type for table "roles"
"""
input roles_on_conflict {
  constraint: roles_constraint!
  update_columns: [roles_update_column!]!
  where: roles_bool_exp
}

"""
ordering options when selecting data from "roles"
"""
input roles_order_by {
  role_code: order_by
  role_description: order_by
  users_aggregate: users_aggregate_order_by
}

"""
primary key columns input for table: "roles"
"""
input roles_pk_columns_input {
  role_code: String!
}

"""
select columns of table "roles"
"""
enum roles_select_column {
  """column name"""
  role_code

  """column name"""
  role_description
}

"""
input type for updating data in table "roles"
"""
input roles_set_input {
  role_code: String
  role_description: String
}

"""
update columns of table "roles"
"""
enum roles_update_column {
  """column name"""
  role_code

  """column name"""
  role_description
}

"""
expression to compare columns of type String. All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String
  _ilike: String
  _in: [String!]
  _is_null: Boolean
  _like: String
  _lt: String
  _lte: String
  _neq: String
  _nilike: String
  _nin: [String!]
  _nlike: String
  _nsimilar: String
  _similar: String
}

"""subscription root"""
type subscription_root {
  """
  fetch data from the table: "document_functional_areas"
  """
  document_functional_areas(
    """distinct select on columns"""
    distinct_on: [document_functional_areas_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [document_functional_areas_order_by!]

    """filter the rows returned"""
    where: document_functional_areas_bool_exp
  ): [document_functional_areas!]!

  """
  fetch aggregated fields from the table: "document_functional_areas"
  """
  document_functional_areas_aggregate(
    """distinct select on columns"""
    distinct_on: [document_functional_areas_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [document_functional_areas_order_by!]

    """filter the rows returned"""
    where: document_functional_areas_bool_exp
  ): document_functional_areas_aggregate!

  """
  fetch data from the table: "document_sections"
  """
  document_sections(
    """distinct select on columns"""
    distinct_on: [document_sections_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [document_sections_order_by!]

    """filter the rows returned"""
    where: document_sections_bool_exp
  ): [document_sections!]!

  """
  fetch aggregated fields from the table: "document_sections"
  """
  document_sections_aggregate(
    """distinct select on columns"""
    distinct_on: [document_sections_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [document_sections_order_by!]

    """filter the rows returned"""
    where: document_sections_bool_exp
  ): document_sections_aggregate!

  """
  fetch data from the table: "document_sections" using primary key columns
  """
  document_sections_by_pk(section_id: bigint!): document_sections

  """
  fetch data from the table: "document_sections_images"
  """
  document_sections_images(
    """distinct select on columns"""
    distinct_on: [document_sections_images_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [document_sections_images_order_by!]

    """filter the rows returned"""
    where: document_sections_images_bool_exp
  ): [document_sections_images!]!

  """
  fetch aggregated fields from the table: "document_sections_images"
  """
  document_sections_images_aggregate(
    """distinct select on columns"""
    distinct_on: [document_sections_images_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [document_sections_images_order_by!]

    """filter the rows returned"""
    where: document_sections_images_bool_exp
  ): document_sections_images_aggregate!

  """
  fetch data from the table: "document_sections_images" using primary key columns
  """
  document_sections_images_by_pk(image_id: bigint!, section_id: bigint!): document_sections_images

  """
  fetch data from the table: "document_structures"
  """
  document_structures(
    """distinct select on columns"""
    distinct_on: [document_structures_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [document_structures_order_by!]

    """filter the rows returned"""
    where: document_structures_bool_exp
  ): [document_structures!]!

  """
  fetch aggregated fields from the table: "document_structures"
  """
  document_structures_aggregate(
    """distinct select on columns"""
    distinct_on: [document_structures_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [document_structures_order_by!]

    """filter the rows returned"""
    where: document_structures_bool_exp
  ): document_structures_aggregate!

  """
  fetch data from the table: "document_structures" using primary key columns
  """
  document_structures_by_pk(document_structure_code: String!): document_structures

  """
  fetch data from the table: "documents"
  """
  documents(
    """distinct select on columns"""
    distinct_on: [documents_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [documents_order_by!]

    """filter the rows returned"""
    where: documents_bool_exp
  ): [documents!]!

  """
  fetch aggregated fields from the table: "documents"
  """
  documents_aggregate(
    """distinct select on columns"""
    distinct_on: [documents_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [documents_order_by!]

    """filter the rows returned"""
    where: documents_bool_exp
  ): documents_aggregate!

  """fetch data from the table: "documents" using primary key columns"""
  documents_by_pk(document_code: String!): documents

  """
  fetch data from the table: "functional_areas"
  """
  functional_areas(
    """distinct select on columns"""
    distinct_on: [functional_areas_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [functional_areas_order_by!]

    """filter the rows returned"""
    where: functional_areas_bool_exp
  ): [functional_areas!]!

  """
  fetch aggregated fields from the table: "functional_areas"
  """
  functional_areas_aggregate(
    """distinct select on columns"""
    distinct_on: [functional_areas_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [functional_areas_order_by!]

    """filter the rows returned"""
    where: functional_areas_bool_exp
  ): functional_areas_aggregate!

  """
  fetch data from the table: "functional_areas" using primary key columns
  """
  functional_areas_by_pk(functional_area_code: String!): functional_areas

  """
  fetch data from the table: "images"
  """
  images(
    """distinct select on columns"""
    distinct_on: [images_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [images_order_by!]

    """filter the rows returned"""
    where: images_bool_exp
  ): [images!]!

  """
  fetch aggregated fields from the table: "images"
  """
  images_aggregate(
    """distinct select on columns"""
    distinct_on: [images_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [images_order_by!]

    """filter the rows returned"""
    where: images_bool_exp
  ): images_aggregate!

  """fetch data from the table: "images" using primary key columns"""
  images_by_pk(image_id: bigint!): images

  """
  fetch data from the table: "roles"
  """
  roles(
    """distinct select on columns"""
    distinct_on: [roles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [roles_order_by!]

    """filter the rows returned"""
    where: roles_bool_exp
  ): [roles!]!

  """
  fetch aggregated fields from the table: "roles"
  """
  roles_aggregate(
    """distinct select on columns"""
    distinct_on: [roles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [roles_order_by!]

    """filter the rows returned"""
    where: roles_bool_exp
  ): roles_aggregate!

  """fetch data from the table: "roles" using primary key columns"""
  roles_by_pk(role_code: String!): roles

  """
  fetch data from the table: "users"
  """
  users(
    """distinct select on columns"""
    distinct_on: [users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_order_by!]

    """filter the rows returned"""
    where: users_bool_exp
  ): [users!]!

  """
  fetch aggregated fields from the table: "users"
  """
  users_aggregate(
    """distinct select on columns"""
    distinct_on: [users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_order_by!]

    """filter the rows returned"""
    where: users_bool_exp
  ): users_aggregate!

  """fetch data from the table: "users" using primary key columns"""
  users_by_pk(user_id: bigint!): users
}

"""
columns and relationships of "users"
"""
type users {
  password: String

  """An object relationship"""
  role: roles
  role_code: String
  user_id: bigint!
  user_login: String
  user_name: String
}

"""
aggregated selection of "users"
"""
type users_aggregate {
  aggregate: users_aggregate_fields
  nodes: [users!]!
}

"""
aggregate fields of "users"
"""
type users_aggregate_fields {
  avg: users_avg_fields
  count(columns: [users_select_column!], distinct: Boolean): Int
  max: users_max_fields
  min: users_min_fields
  stddev: users_stddev_fields
  stddev_pop: users_stddev_pop_fields
  stddev_samp: users_stddev_samp_fields
  sum: users_sum_fields
  var_pop: users_var_pop_fields
  var_samp: users_var_samp_fields
  variance: users_variance_fields
}

"""
order by aggregate values of table "users"
"""
input users_aggregate_order_by {
  avg: users_avg_order_by
  count: order_by
  max: users_max_order_by
  min: users_min_order_by
  stddev: users_stddev_order_by
  stddev_pop: users_stddev_pop_order_by
  stddev_samp: users_stddev_samp_order_by
  sum: users_sum_order_by
  var_pop: users_var_pop_order_by
  var_samp: users_var_samp_order_by
  variance: users_variance_order_by
}

"""
input type for inserting array relation for remote table "users"
"""
input users_arr_rel_insert_input {
  data: [users_insert_input!]!
  on_conflict: users_on_conflict
}

"""aggregate avg on columns"""
type users_avg_fields {
  user_id: Float
}

"""
order by avg() on columns of table "users"
"""
input users_avg_order_by {
  user_id: order_by
}

"""
Boolean expression to filter rows from the table "users". All fields are combined with a logical 'AND'.
"""
input users_bool_exp {
  _and: [users_bool_exp]
  _not: users_bool_exp
  _or: [users_bool_exp]
  password: String_comparison_exp
  role: roles_bool_exp
  role_code: String_comparison_exp
  user_id: bigint_comparison_exp
  user_login: String_comparison_exp
  user_name: String_comparison_exp
}

"""
unique or primary key constraints on table "users"
"""
enum users_constraint {
  """unique or primary key constraint"""
  idx_20337_users_pkey
}

"""
input type for incrementing integer column in table "users"
"""
input users_inc_input {
  user_id: bigint
}

"""
input type for inserting data into table "users"
"""
input users_insert_input {
  password: String
  role: roles_obj_rel_insert_input
  role_code: String
  user_id: bigint
  user_login: String
  user_name: String
}

"""aggregate max on columns"""
type users_max_fields {
  password: String
  role_code: String
  user_id: bigint
  user_login: String
  user_name: String
}

"""
order by max() on columns of table "users"
"""
input users_max_order_by {
  password: order_by
  role_code: order_by
  user_id: order_by
  user_login: order_by
  user_name: order_by
}

"""aggregate min on columns"""
type users_min_fields {
  password: String
  role_code: String
  user_id: bigint
  user_login: String
  user_name: String
}

"""
order by min() on columns of table "users"
"""
input users_min_order_by {
  password: order_by
  role_code: order_by
  user_id: order_by
  user_login: order_by
  user_name: order_by
}

"""
response of any mutation on the table "users"
"""
type users_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [users!]!
}

"""
input type for inserting object relation for remote table "users"
"""
input users_obj_rel_insert_input {
  data: users_insert_input!
  on_conflict: users_on_conflict
}

"""
on conflict condition type for table "users"
"""
input users_on_conflict {
  constraint: users_constraint!
  update_columns: [users_update_column!]!
  where: users_bool_exp
}

"""
ordering options when selecting data from "users"
"""
input users_order_by {
  password: order_by
  role: roles_order_by
  role_code: order_by
  user_id: order_by
  user_login: order_by
  user_name: order_by
}

"""
primary key columns input for table: "users"
"""
input users_pk_columns_input {
  user_id: bigint!
}

"""
select columns of table "users"
"""
enum users_select_column {
  """column name"""
  password

  """column name"""
  role_code

  """column name"""
  user_id

  """column name"""
  user_login

  """column name"""
  user_name
}

"""
input type for updating data in table "users"
"""
input users_set_input {
  password: String
  role_code: String
  user_id: bigint
  user_login: String
  user_name: String
}

"""aggregate stddev on columns"""
type users_stddev_fields {
  user_id: Float
}

"""
order by stddev() on columns of table "users"
"""
input users_stddev_order_by {
  user_id: order_by
}

"""aggregate stddev_pop on columns"""
type users_stddev_pop_fields {
  user_id: Float
}

"""
order by stddev_pop() on columns of table "users"
"""
input users_stddev_pop_order_by {
  user_id: order_by
}

"""aggregate stddev_samp on columns"""
type users_stddev_samp_fields {
  user_id: Float
}

"""
order by stddev_samp() on columns of table "users"
"""
input users_stddev_samp_order_by {
  user_id: order_by
}

"""aggregate sum on columns"""
type users_sum_fields {
  user_id: bigint
}

"""
order by sum() on columns of table "users"
"""
input users_sum_order_by {
  user_id: order_by
}

"""
update columns of table "users"
"""
enum users_update_column {
  """column name"""
  password

  """column name"""
  role_code

  """column name"""
  user_id

  """column name"""
  user_login

  """column name"""
  user_name
}

"""aggregate var_pop on columns"""
type users_var_pop_fields {
  user_id: Float
}

"""
order by var_pop() on columns of table "users"
"""
input users_var_pop_order_by {
  user_id: order_by
}

"""aggregate var_samp on columns"""
type users_var_samp_fields {
  user_id: Float
}

"""
order by var_samp() on columns of table "users"
"""
input users_var_samp_order_by {
  user_id: order_by
}

"""aggregate variance on columns"""
type users_variance_fields {
  user_id: Float
}

"""
order by variance() on columns of table "users"
"""
input users_variance_order_by {
  user_id: order_by
}
