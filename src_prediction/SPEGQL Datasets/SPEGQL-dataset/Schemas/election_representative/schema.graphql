schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""
Direct the client to resolve this field locally, either from the cache or local resolvers.
"""
directive @client(
  """
  When true, the client will never use the cache for this value. See
  https://www.apollographql.com/docs/react/essentials/local-state/#forcing-resolvers-with-clientalways-true
  """
  always: Boolean
) on FIELD | FRAGMENT_DEFINITION | INLINE_FRAGMENT

"""
Export this locally resolved field as a variable to be used in the remainder of this query. See
https://www.apollographql.com/docs/react/essentials/local-state/#using-client-fields-as-variables
"""
directive @export(
  """The variable name to export this field as."""
  as: String!
) on FIELD

"""
Specify a custom store key for this result. See
https://www.apollographql.com/docs/react/advanced/caching/#the-connection-directive
"""
directive @connection(
  """Specify the store key."""
  key: String!

  """
  An array of query argument names to include in the generated custom store key.
  """
  filter: [String!]
) on FIELD

"""
columns and relationships of "election"
"""
type election {
  date: String
  election_id: Int
  place: Float

  """An object relationship"""
  representative: representative
  representative_id: Int
  seats: Float
  vote_percent: Float
  votes: Float
}

"""
aggregated selection of "election"
"""
type election_aggregate {
  aggregate: election_aggregate_fields
  nodes: [election!]!
}

"""
aggregate fields of "election"
"""
type election_aggregate_fields {
  avg: election_avg_fields
  count(columns: [election_select_column!], distinct: Boolean): Int
  max: election_max_fields
  min: election_min_fields
  stddev: election_stddev_fields
  stddev_pop: election_stddev_pop_fields
  stddev_samp: election_stddev_samp_fields
  sum: election_sum_fields
  var_pop: election_var_pop_fields
  var_samp: election_var_samp_fields
  variance: election_variance_fields
}

"""
order by aggregate values of table "election"
"""
input election_aggregate_order_by {
  avg: election_avg_order_by
  count: order_by
  max: election_max_order_by
  min: election_min_order_by
  stddev: election_stddev_order_by
  stddev_pop: election_stddev_pop_order_by
  stddev_samp: election_stddev_samp_order_by
  sum: election_sum_order_by
  var_pop: election_var_pop_order_by
  var_samp: election_var_samp_order_by
  variance: election_variance_order_by
}

"""
input type for inserting array relation for remote table "election"
"""
input election_arr_rel_insert_input {
  data: [election_insert_input!]!
  on_conflict: election_on_conflict
}

"""aggregate avg on columns"""
type election_avg_fields {
  election_id: Float
  place: Float
  representative_id: Float
  seats: Float
  vote_percent: Float
  votes: Float
}

"""
order by avg() on columns of table "election"
"""
input election_avg_order_by {
  election_id: order_by
  place: order_by
  representative_id: order_by
  seats: order_by
  vote_percent: order_by
  votes: order_by
}

"""
Boolean expression to filter rows from the table "election". All fields are combined with a logical 'AND'.
"""
input election_bool_exp {
  _and: [election_bool_exp]
  _not: election_bool_exp
  _or: [election_bool_exp]
  date: String_comparison_exp
  election_id: Int_comparison_exp
  place: Float_comparison_exp
  representative: representative_bool_exp
  representative_id: Int_comparison_exp
  seats: Float_comparison_exp
  vote_percent: Float_comparison_exp
  votes: Float_comparison_exp
}

"""
unique or primary key constraints on table "election"
"""
enum election_constraint {
  """unique or primary key constraint"""
  idx_22590_sqlite_autoindex_election_1
}

"""
input type for incrementing integer column in table "election"
"""
input election_inc_input {
  election_id: Int
  place: Float
  representative_id: Int
  seats: Float
  vote_percent: Float
  votes: Float
}

"""
input type for inserting data into table "election"
"""
input election_insert_input {
  date: String
  election_id: Int
  place: Float
  representative: representative_obj_rel_insert_input
  representative_id: Int
  seats: Float
  vote_percent: Float
  votes: Float
}

"""aggregate max on columns"""
type election_max_fields {
  date: String
  election_id: Int
  place: Float
  representative_id: Int
  seats: Float
  vote_percent: Float
  votes: Float
}

"""
order by max() on columns of table "election"
"""
input election_max_order_by {
  date: order_by
  election_id: order_by
  place: order_by
  representative_id: order_by
  seats: order_by
  vote_percent: order_by
  votes: order_by
}

"""aggregate min on columns"""
type election_min_fields {
  date: String
  election_id: Int
  place: Float
  representative_id: Int
  seats: Float
  vote_percent: Float
  votes: Float
}

"""
order by min() on columns of table "election"
"""
input election_min_order_by {
  date: order_by
  election_id: order_by
  place: order_by
  representative_id: order_by
  seats: order_by
  vote_percent: order_by
  votes: order_by
}

"""
response of any mutation on the table "election"
"""
type election_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [election!]!
}

"""
input type for inserting object relation for remote table "election"
"""
input election_obj_rel_insert_input {
  data: election_insert_input!
  on_conflict: election_on_conflict
}

"""
on conflict condition type for table "election"
"""
input election_on_conflict {
  constraint: election_constraint!
  update_columns: [election_update_column!]!
  where: election_bool_exp
}

"""
ordering options when selecting data from "election"
"""
input election_order_by {
  date: order_by
  election_id: order_by
  place: order_by
  representative: representative_order_by
  representative_id: order_by
  seats: order_by
  vote_percent: order_by
  votes: order_by
}

"""
select columns of table "election"
"""
enum election_select_column {
  """column name"""
  date

  """column name"""
  election_id

  """column name"""
  place

  """column name"""
  representative_id

  """column name"""
  seats

  """column name"""
  vote_percent

  """column name"""
  votes
}

"""
input type for updating data in table "election"
"""
input election_set_input {
  date: String
  election_id: Int
  place: Float
  representative_id: Int
  seats: Float
  vote_percent: Float
  votes: Float
}

"""aggregate stddev on columns"""
type election_stddev_fields {
  election_id: Float
  place: Float
  representative_id: Float
  seats: Float
  vote_percent: Float
  votes: Float
}

"""
order by stddev() on columns of table "election"
"""
input election_stddev_order_by {
  election_id: order_by
  place: order_by
  representative_id: order_by
  seats: order_by
  vote_percent: order_by
  votes: order_by
}

"""aggregate stddev_pop on columns"""
type election_stddev_pop_fields {
  election_id: Float
  place: Float
  representative_id: Float
  seats: Float
  vote_percent: Float
  votes: Float
}

"""
order by stddev_pop() on columns of table "election"
"""
input election_stddev_pop_order_by {
  election_id: order_by
  place: order_by
  representative_id: order_by
  seats: order_by
  vote_percent: order_by
  votes: order_by
}

"""aggregate stddev_samp on columns"""
type election_stddev_samp_fields {
  election_id: Float
  place: Float
  representative_id: Float
  seats: Float
  vote_percent: Float
  votes: Float
}

"""
order by stddev_samp() on columns of table "election"
"""
input election_stddev_samp_order_by {
  election_id: order_by
  place: order_by
  representative_id: order_by
  seats: order_by
  vote_percent: order_by
  votes: order_by
}

"""aggregate sum on columns"""
type election_sum_fields {
  election_id: Int
  place: Float
  representative_id: Int
  seats: Float
  vote_percent: Float
  votes: Float
}

"""
order by sum() on columns of table "election"
"""
input election_sum_order_by {
  election_id: order_by
  place: order_by
  representative_id: order_by
  seats: order_by
  vote_percent: order_by
  votes: order_by
}

"""
update columns of table "election"
"""
enum election_update_column {
  """column name"""
  date

  """column name"""
  election_id

  """column name"""
  place

  """column name"""
  representative_id

  """column name"""
  seats

  """column name"""
  vote_percent

  """column name"""
  votes
}

"""aggregate var_pop on columns"""
type election_var_pop_fields {
  election_id: Float
  place: Float
  representative_id: Float
  seats: Float
  vote_percent: Float
  votes: Float
}

"""
order by var_pop() on columns of table "election"
"""
input election_var_pop_order_by {
  election_id: order_by
  place: order_by
  representative_id: order_by
  seats: order_by
  vote_percent: order_by
  votes: order_by
}

"""aggregate var_samp on columns"""
type election_var_samp_fields {
  election_id: Float
  place: Float
  representative_id: Float
  seats: Float
  vote_percent: Float
  votes: Float
}

"""
order by var_samp() on columns of table "election"
"""
input election_var_samp_order_by {
  election_id: order_by
  place: order_by
  representative_id: order_by
  seats: order_by
  vote_percent: order_by
  votes: order_by
}

"""aggregate variance on columns"""
type election_variance_fields {
  election_id: Float
  place: Float
  representative_id: Float
  seats: Float
  vote_percent: Float
  votes: Float
}

"""
order by variance() on columns of table "election"
"""
input election_variance_order_by {
  election_id: order_by
  place: order_by
  representative_id: order_by
  seats: order_by
  vote_percent: order_by
  votes: order_by
}

"""
expression to compare columns of type Float. All fields are combined with logical 'AND'.
"""
input Float_comparison_exp {
  _eq: Float
  _gt: Float
  _gte: Float
  _in: [Float!]
  _is_null: Boolean
  _lt: Float
  _lte: Float
  _neq: Float
  _nin: [Float!]
}

"""
expression to compare columns of type Int. All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "election"
  """
  delete_election(
    """filter the rows which have to be deleted"""
    where: election_bool_exp!
  ): election_mutation_response

  """
  delete data from the table: "representative"
  """
  delete_representative(
    """filter the rows which have to be deleted"""
    where: representative_bool_exp!
  ): representative_mutation_response

  """
  insert data into the table: "election"
  """
  insert_election(
    """the rows to be inserted"""
    objects: [election_insert_input!]!

    """on conflict condition"""
    on_conflict: election_on_conflict
  ): election_mutation_response

  """
  insert a single row into the table: "election"
  """
  insert_election_one(
    """the row to be inserted"""
    object: election_insert_input!

    """on conflict condition"""
    on_conflict: election_on_conflict
  ): election

  """
  insert data into the table: "representative"
  """
  insert_representative(
    """the rows to be inserted"""
    objects: [representative_insert_input!]!

    """on conflict condition"""
    on_conflict: representative_on_conflict
  ): representative_mutation_response

  """
  insert a single row into the table: "representative"
  """
  insert_representative_one(
    """the row to be inserted"""
    object: representative_insert_input!

    """on conflict condition"""
    on_conflict: representative_on_conflict
  ): representative

  """
  update data of the table: "election"
  """
  update_election(
    """increments the integer columns with given value of the filtered values"""
    _inc: election_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: election_set_input

    """filter the rows which have to be updated"""
    where: election_bool_exp!
  ): election_mutation_response

  """
  update data of the table: "representative"
  """
  update_representative(
    """increments the integer columns with given value of the filtered values"""
    _inc: representative_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: representative_set_input

    """filter the rows which have to be updated"""
    where: representative_bool_exp!
  ): representative_mutation_response
}

"""column ordering options"""
enum order_by {
  """in the ascending order, nulls last"""
  asc

  """in the ascending order, nulls first"""
  asc_nulls_first

  """in the ascending order, nulls last"""
  asc_nulls_last

  """in the descending order, nulls first"""
  desc

  """in the descending order, nulls first"""
  desc_nulls_first

  """in the descending order, nulls last"""
  desc_nulls_last
}

"""query root"""
type query_root {
  """
  fetch data from the table: "election"
  """
  election(
    """distinct select on columns"""
    distinct_on: [election_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [election_order_by!]

    """filter the rows returned"""
    where: election_bool_exp
  ): [election!]!

  """
  fetch aggregated fields from the table: "election"
  """
  election_aggregate(
    """distinct select on columns"""
    distinct_on: [election_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [election_order_by!]

    """filter the rows returned"""
    where: election_bool_exp
  ): election_aggregate!

  """
  fetch data from the table: "representative"
  """
  representative(
    """distinct select on columns"""
    distinct_on: [representative_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [representative_order_by!]

    """filter the rows returned"""
    where: representative_bool_exp
  ): [representative!]!

  """
  fetch aggregated fields from the table: "representative"
  """
  representative_aggregate(
    """distinct select on columns"""
    distinct_on: [representative_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [representative_order_by!]

    """filter the rows returned"""
    where: representative_bool_exp
  ): representative_aggregate!
}

"""
columns and relationships of "representative"
"""
type representative {
  """An array relationship"""
  elections(
    """distinct select on columns"""
    distinct_on: [election_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [election_order_by!]

    """filter the rows returned"""
    where: election_bool_exp
  ): [election!]!

  """An aggregated array relationship"""
  elections_aggregate(
    """distinct select on columns"""
    distinct_on: [election_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [election_order_by!]

    """filter the rows returned"""
    where: election_bool_exp
  ): election_aggregate!
  lifespan: String
  name: String
  party: String
  representative_id: Int
  state: String
}

"""
aggregated selection of "representative"
"""
type representative_aggregate {
  aggregate: representative_aggregate_fields
  nodes: [representative!]!
}

"""
aggregate fields of "representative"
"""
type representative_aggregate_fields {
  avg: representative_avg_fields
  count(columns: [representative_select_column!], distinct: Boolean): Int
  max: representative_max_fields
  min: representative_min_fields
  stddev: representative_stddev_fields
  stddev_pop: representative_stddev_pop_fields
  stddev_samp: representative_stddev_samp_fields
  sum: representative_sum_fields
  var_pop: representative_var_pop_fields
  var_samp: representative_var_samp_fields
  variance: representative_variance_fields
}

"""
order by aggregate values of table "representative"
"""
input representative_aggregate_order_by {
  avg: representative_avg_order_by
  count: order_by
  max: representative_max_order_by
  min: representative_min_order_by
  stddev: representative_stddev_order_by
  stddev_pop: representative_stddev_pop_order_by
  stddev_samp: representative_stddev_samp_order_by
  sum: representative_sum_order_by
  var_pop: representative_var_pop_order_by
  var_samp: representative_var_samp_order_by
  variance: representative_variance_order_by
}

"""
input type for inserting array relation for remote table "representative"
"""
input representative_arr_rel_insert_input {
  data: [representative_insert_input!]!
  on_conflict: representative_on_conflict
}

"""aggregate avg on columns"""
type representative_avg_fields {
  representative_id: Float
}

"""
order by avg() on columns of table "representative"
"""
input representative_avg_order_by {
  representative_id: order_by
}

"""
Boolean expression to filter rows from the table "representative". All fields are combined with a logical 'AND'.
"""
input representative_bool_exp {
  _and: [representative_bool_exp]
  _not: representative_bool_exp
  _or: [representative_bool_exp]
  elections: election_bool_exp
  lifespan: String_comparison_exp
  name: String_comparison_exp
  party: String_comparison_exp
  representative_id: Int_comparison_exp
  state: String_comparison_exp
}

"""
unique or primary key constraints on table "representative"
"""
enum representative_constraint {
  """unique or primary key constraint"""
  idx_22596_sqlite_autoindex_representative_1
}

"""
input type for incrementing integer column in table "representative"
"""
input representative_inc_input {
  representative_id: Int
}

"""
input type for inserting data into table "representative"
"""
input representative_insert_input {
  elections: election_arr_rel_insert_input
  lifespan: String
  name: String
  party: String
  representative_id: Int
  state: String
}

"""aggregate max on columns"""
type representative_max_fields {
  lifespan: String
  name: String
  party: String
  representative_id: Int
  state: String
}

"""
order by max() on columns of table "representative"
"""
input representative_max_order_by {
  lifespan: order_by
  name: order_by
  party: order_by
  representative_id: order_by
  state: order_by
}

"""aggregate min on columns"""
type representative_min_fields {
  lifespan: String
  name: String
  party: String
  representative_id: Int
  state: String
}

"""
order by min() on columns of table "representative"
"""
input representative_min_order_by {
  lifespan: order_by
  name: order_by
  party: order_by
  representative_id: order_by
  state: order_by
}

"""
response of any mutation on the table "representative"
"""
type representative_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [representative!]!
}

"""
input type for inserting object relation for remote table "representative"
"""
input representative_obj_rel_insert_input {
  data: representative_insert_input!
  on_conflict: representative_on_conflict
}

"""
on conflict condition type for table "representative"
"""
input representative_on_conflict {
  constraint: representative_constraint!
  update_columns: [representative_update_column!]!
  where: representative_bool_exp
}

"""
ordering options when selecting data from "representative"
"""
input representative_order_by {
  elections_aggregate: election_aggregate_order_by
  lifespan: order_by
  name: order_by
  party: order_by
  representative_id: order_by
  state: order_by
}

"""
select columns of table "representative"
"""
enum representative_select_column {
  """column name"""
  lifespan

  """column name"""
  name

  """column name"""
  party

  """column name"""
  representative_id

  """column name"""
  state
}

"""
input type for updating data in table "representative"
"""
input representative_set_input {
  lifespan: String
  name: String
  party: String
  representative_id: Int
  state: String
}

"""aggregate stddev on columns"""
type representative_stddev_fields {
  representative_id: Float
}

"""
order by stddev() on columns of table "representative"
"""
input representative_stddev_order_by {
  representative_id: order_by
}

"""aggregate stddev_pop on columns"""
type representative_stddev_pop_fields {
  representative_id: Float
}

"""
order by stddev_pop() on columns of table "representative"
"""
input representative_stddev_pop_order_by {
  representative_id: order_by
}

"""aggregate stddev_samp on columns"""
type representative_stddev_samp_fields {
  representative_id: Float
}

"""
order by stddev_samp() on columns of table "representative"
"""
input representative_stddev_samp_order_by {
  representative_id: order_by
}

"""aggregate sum on columns"""
type representative_sum_fields {
  representative_id: Int
}

"""
order by sum() on columns of table "representative"
"""
input representative_sum_order_by {
  representative_id: order_by
}

"""
update columns of table "representative"
"""
enum representative_update_column {
  """column name"""
  lifespan

  """column name"""
  name

  """column name"""
  party

  """column name"""
  representative_id

  """column name"""
  state
}

"""aggregate var_pop on columns"""
type representative_var_pop_fields {
  representative_id: Float
}

"""
order by var_pop() on columns of table "representative"
"""
input representative_var_pop_order_by {
  representative_id: order_by
}

"""aggregate var_samp on columns"""
type representative_var_samp_fields {
  representative_id: Float
}

"""
order by var_samp() on columns of table "representative"
"""
input representative_var_samp_order_by {
  representative_id: order_by
}

"""aggregate variance on columns"""
type representative_variance_fields {
  representative_id: Float
}

"""
order by variance() on columns of table "representative"
"""
input representative_variance_order_by {
  representative_id: order_by
}

"""
expression to compare columns of type String. All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String
  _ilike: String
  _in: [String!]
  _is_null: Boolean
  _like: String
  _lt: String
  _lte: String
  _neq: String
  _nilike: String
  _nin: [String!]
  _nlike: String
  _nsimilar: String
  _similar: String
}

"""subscription root"""
type subscription_root {
  """
  fetch data from the table: "election"
  """
  election(
    """distinct select on columns"""
    distinct_on: [election_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [election_order_by!]

    """filter the rows returned"""
    where: election_bool_exp
  ): [election!]!

  """
  fetch aggregated fields from the table: "election"
  """
  election_aggregate(
    """distinct select on columns"""
    distinct_on: [election_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [election_order_by!]

    """filter the rows returned"""
    where: election_bool_exp
  ): election_aggregate!

  """
  fetch data from the table: "representative"
  """
  representative(
    """distinct select on columns"""
    distinct_on: [representative_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [representative_order_by!]

    """filter the rows returned"""
    where: representative_bool_exp
  ): [representative!]!

  """
  fetch aggregated fields from the table: "representative"
  """
  representative_aggregate(
    """distinct select on columns"""
    distinct_on: [representative_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [representative_order_by!]

    """filter the rows returned"""
    where: representative_bool_exp
  ): representative_aggregate!
}
