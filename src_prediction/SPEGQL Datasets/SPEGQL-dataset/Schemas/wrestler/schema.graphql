schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""
Direct the client to resolve this field locally, either from the cache or local resolvers.
"""
directive @client(
  """
  When true, the client will never use the cache for this value. See
  https://www.apollographql.com/docs/react/essentials/local-state/#forcing-resolvers-with-clientalways-true
  """
  always: Boolean
) on FIELD | FRAGMENT_DEFINITION | INLINE_FRAGMENT

"""
Export this locally resolved field as a variable to be used in the remainder of this query. See
https://www.apollographql.com/docs/react/essentials/local-state/#using-client-fields-as-variables
"""
directive @export(
  """The variable name to export this field as."""
  as: String!
) on FIELD

"""
Specify a custom store key for this result. See
https://www.apollographql.com/docs/react/advanced/caching/#the-connection-directive
"""
directive @connection(
  """Specify the store key."""
  key: String!

  """
  An array of query argument names to include in the generated custom store key.
  """
  filter: [String!]
) on FIELD

"""
columns and relationships of "elimination"
"""
type elimination {
  eliminated_by: String
  elimination_id: String
  elimination_move: String
  team: String
  time: String

  """An object relationship"""
  wrestler: wrestler
  wrestler_id: Int
}

"""
aggregated selection of "elimination"
"""
type elimination_aggregate {
  aggregate: elimination_aggregate_fields
  nodes: [elimination!]!
}

"""
aggregate fields of "elimination"
"""
type elimination_aggregate_fields {
  avg: elimination_avg_fields
  count(columns: [elimination_select_column!], distinct: Boolean): Int
  max: elimination_max_fields
  min: elimination_min_fields
  stddev: elimination_stddev_fields
  stddev_pop: elimination_stddev_pop_fields
  stddev_samp: elimination_stddev_samp_fields
  sum: elimination_sum_fields
  var_pop: elimination_var_pop_fields
  var_samp: elimination_var_samp_fields
  variance: elimination_variance_fields
}

"""
order by aggregate values of table "elimination"
"""
input elimination_aggregate_order_by {
  avg: elimination_avg_order_by
  count: order_by
  max: elimination_max_order_by
  min: elimination_min_order_by
  stddev: elimination_stddev_order_by
  stddev_pop: elimination_stddev_pop_order_by
  stddev_samp: elimination_stddev_samp_order_by
  sum: elimination_sum_order_by
  var_pop: elimination_var_pop_order_by
  var_samp: elimination_var_samp_order_by
  variance: elimination_variance_order_by
}

"""
input type for inserting array relation for remote table "elimination"
"""
input elimination_arr_rel_insert_input {
  data: [elimination_insert_input!]!
  on_conflict: elimination_on_conflict
}

"""aggregate avg on columns"""
type elimination_avg_fields {
  wrestler_id: Float
}

"""
order by avg() on columns of table "elimination"
"""
input elimination_avg_order_by {
  wrestler_id: order_by
}

"""
Boolean expression to filter rows from the table "elimination". All fields are combined with a logical 'AND'.
"""
input elimination_bool_exp {
  _and: [elimination_bool_exp]
  _not: elimination_bool_exp
  _or: [elimination_bool_exp]
  eliminated_by: String_comparison_exp
  elimination_id: String_comparison_exp
  elimination_move: String_comparison_exp
  team: String_comparison_exp
  time: String_comparison_exp
  wrestler: wrestler_bool_exp
  wrestler_id: Int_comparison_exp
}

"""
unique or primary key constraints on table "elimination"
"""
enum elimination_constraint {
  """unique or primary key constraint"""
  idx_21087_sqlite_autoindex_elimination_1
}

"""
input type for incrementing integer column in table "elimination"
"""
input elimination_inc_input {
  wrestler_id: Int
}

"""
input type for inserting data into table "elimination"
"""
input elimination_insert_input {
  eliminated_by: String
  elimination_id: String
  elimination_move: String
  team: String
  time: String
  wrestler: wrestler_obj_rel_insert_input
  wrestler_id: Int
}

"""aggregate max on columns"""
type elimination_max_fields {
  eliminated_by: String
  elimination_id: String
  elimination_move: String
  team: String
  time: String
  wrestler_id: Int
}

"""
order by max() on columns of table "elimination"
"""
input elimination_max_order_by {
  eliminated_by: order_by
  elimination_id: order_by
  elimination_move: order_by
  team: order_by
  time: order_by
  wrestler_id: order_by
}

"""aggregate min on columns"""
type elimination_min_fields {
  eliminated_by: String
  elimination_id: String
  elimination_move: String
  team: String
  time: String
  wrestler_id: Int
}

"""
order by min() on columns of table "elimination"
"""
input elimination_min_order_by {
  eliminated_by: order_by
  elimination_id: order_by
  elimination_move: order_by
  team: order_by
  time: order_by
  wrestler_id: order_by
}

"""
response of any mutation on the table "elimination"
"""
type elimination_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [elimination!]!
}

"""
input type for inserting object relation for remote table "elimination"
"""
input elimination_obj_rel_insert_input {
  data: elimination_insert_input!
  on_conflict: elimination_on_conflict
}

"""
on conflict condition type for table "elimination"
"""
input elimination_on_conflict {
  constraint: elimination_constraint!
  update_columns: [elimination_update_column!]!
  where: elimination_bool_exp
}

"""
ordering options when selecting data from "elimination"
"""
input elimination_order_by {
  eliminated_by: order_by
  elimination_id: order_by
  elimination_move: order_by
  team: order_by
  time: order_by
  wrestler: wrestler_order_by
  wrestler_id: order_by
}

"""
select columns of table "elimination"
"""
enum elimination_select_column {
  """column name"""
  eliminated_by

  """column name"""
  elimination_id

  """column name"""
  elimination_move

  """column name"""
  team

  """column name"""
  time

  """column name"""
  wrestler_id
}

"""
input type for updating data in table "elimination"
"""
input elimination_set_input {
  eliminated_by: String
  elimination_id: String
  elimination_move: String
  team: String
  time: String
  wrestler_id: Int
}

"""aggregate stddev on columns"""
type elimination_stddev_fields {
  wrestler_id: Float
}

"""
order by stddev() on columns of table "elimination"
"""
input elimination_stddev_order_by {
  wrestler_id: order_by
}

"""aggregate stddev_pop on columns"""
type elimination_stddev_pop_fields {
  wrestler_id: Float
}

"""
order by stddev_pop() on columns of table "elimination"
"""
input elimination_stddev_pop_order_by {
  wrestler_id: order_by
}

"""aggregate stddev_samp on columns"""
type elimination_stddev_samp_fields {
  wrestler_id: Float
}

"""
order by stddev_samp() on columns of table "elimination"
"""
input elimination_stddev_samp_order_by {
  wrestler_id: order_by
}

"""aggregate sum on columns"""
type elimination_sum_fields {
  wrestler_id: Int
}

"""
order by sum() on columns of table "elimination"
"""
input elimination_sum_order_by {
  wrestler_id: order_by
}

"""
update columns of table "elimination"
"""
enum elimination_update_column {
  """column name"""
  eliminated_by

  """column name"""
  elimination_id

  """column name"""
  elimination_move

  """column name"""
  team

  """column name"""
  time

  """column name"""
  wrestler_id
}

"""aggregate var_pop on columns"""
type elimination_var_pop_fields {
  wrestler_id: Float
}

"""
order by var_pop() on columns of table "elimination"
"""
input elimination_var_pop_order_by {
  wrestler_id: order_by
}

"""aggregate var_samp on columns"""
type elimination_var_samp_fields {
  wrestler_id: Float
}

"""
order by var_samp() on columns of table "elimination"
"""
input elimination_var_samp_order_by {
  wrestler_id: order_by
}

"""aggregate variance on columns"""
type elimination_variance_fields {
  wrestler_id: Float
}

"""
order by variance() on columns of table "elimination"
"""
input elimination_variance_order_by {
  wrestler_id: order_by
}

"""
expression to compare columns of type Int. All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "elimination"
  """
  delete_elimination(
    """filter the rows which have to be deleted"""
    where: elimination_bool_exp!
  ): elimination_mutation_response

  """
  delete data from the table: "wrestler"
  """
  delete_wrestler(
    """filter the rows which have to be deleted"""
    where: wrestler_bool_exp!
  ): wrestler_mutation_response

  """
  insert data into the table: "elimination"
  """
  insert_elimination(
    """the rows to be inserted"""
    objects: [elimination_insert_input!]!

    """on conflict condition"""
    on_conflict: elimination_on_conflict
  ): elimination_mutation_response

  """
  insert a single row into the table: "elimination"
  """
  insert_elimination_one(
    """the row to be inserted"""
    object: elimination_insert_input!

    """on conflict condition"""
    on_conflict: elimination_on_conflict
  ): elimination

  """
  insert data into the table: "wrestler"
  """
  insert_wrestler(
    """the rows to be inserted"""
    objects: [wrestler_insert_input!]!

    """on conflict condition"""
    on_conflict: wrestler_on_conflict
  ): wrestler_mutation_response

  """
  insert a single row into the table: "wrestler"
  """
  insert_wrestler_one(
    """the row to be inserted"""
    object: wrestler_insert_input!

    """on conflict condition"""
    on_conflict: wrestler_on_conflict
  ): wrestler

  """
  update data of the table: "elimination"
  """
  update_elimination(
    """increments the integer columns with given value of the filtered values"""
    _inc: elimination_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: elimination_set_input

    """filter the rows which have to be updated"""
    where: elimination_bool_exp!
  ): elimination_mutation_response

  """
  update data of the table: "wrestler"
  """
  update_wrestler(
    """increments the integer columns with given value of the filtered values"""
    _inc: wrestler_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: wrestler_set_input

    """filter the rows which have to be updated"""
    where: wrestler_bool_exp!
  ): wrestler_mutation_response
}

"""column ordering options"""
enum order_by {
  """in the ascending order, nulls last"""
  asc

  """in the ascending order, nulls first"""
  asc_nulls_first

  """in the ascending order, nulls last"""
  asc_nulls_last

  """in the descending order, nulls first"""
  desc

  """in the descending order, nulls first"""
  desc_nulls_first

  """in the descending order, nulls last"""
  desc_nulls_last
}

"""query root"""
type query_root {
  """
  fetch data from the table: "elimination"
  """
  elimination(
    """distinct select on columns"""
    distinct_on: [elimination_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [elimination_order_by!]

    """filter the rows returned"""
    where: elimination_bool_exp
  ): [elimination!]!

  """
  fetch aggregated fields from the table: "elimination"
  """
  elimination_aggregate(
    """distinct select on columns"""
    distinct_on: [elimination_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [elimination_order_by!]

    """filter the rows returned"""
    where: elimination_bool_exp
  ): elimination_aggregate!

  """
  fetch data from the table: "wrestler"
  """
  wrestler(
    """distinct select on columns"""
    distinct_on: [wrestler_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [wrestler_order_by!]

    """filter the rows returned"""
    where: wrestler_bool_exp
  ): [wrestler!]!

  """
  fetch aggregated fields from the table: "wrestler"
  """
  wrestler_aggregate(
    """distinct select on columns"""
    distinct_on: [wrestler_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [wrestler_order_by!]

    """filter the rows returned"""
    where: wrestler_bool_exp
  ): wrestler_aggregate!
}

"""
expression to compare columns of type String. All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String
  _ilike: String
  _in: [String!]
  _is_null: Boolean
  _like: String
  _lt: String
  _lte: String
  _neq: String
  _nilike: String
  _nin: [String!]
  _nlike: String
  _nsimilar: String
  _similar: String
}

"""subscription root"""
type subscription_root {
  """
  fetch data from the table: "elimination"
  """
  elimination(
    """distinct select on columns"""
    distinct_on: [elimination_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [elimination_order_by!]

    """filter the rows returned"""
    where: elimination_bool_exp
  ): [elimination!]!

  """
  fetch aggregated fields from the table: "elimination"
  """
  elimination_aggregate(
    """distinct select on columns"""
    distinct_on: [elimination_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [elimination_order_by!]

    """filter the rows returned"""
    where: elimination_bool_exp
  ): elimination_aggregate!

  """
  fetch data from the table: "wrestler"
  """
  wrestler(
    """distinct select on columns"""
    distinct_on: [wrestler_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [wrestler_order_by!]

    """filter the rows returned"""
    where: wrestler_bool_exp
  ): [wrestler!]!

  """
  fetch aggregated fields from the table: "wrestler"
  """
  wrestler_aggregate(
    """distinct select on columns"""
    distinct_on: [wrestler_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [wrestler_order_by!]

    """filter the rows returned"""
    where: wrestler_bool_exp
  ): wrestler_aggregate!
}

"""
columns and relationships of "wrestler"
"""
type wrestler {
  days_held: String

  """An array relationship"""
  eliminations(
    """distinct select on columns"""
    distinct_on: [elimination_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [elimination_order_by!]

    """filter the rows returned"""
    where: elimination_bool_exp
  ): [elimination!]!

  """An aggregated array relationship"""
  eliminations_aggregate(
    """distinct select on columns"""
    distinct_on: [elimination_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [elimination_order_by!]

    """filter the rows returned"""
    where: elimination_bool_exp
  ): elimination_aggregate!
  event: String
  location: String
  name: String
  reign: String
  wrestler_id: Int
}

"""
aggregated selection of "wrestler"
"""
type wrestler_aggregate {
  aggregate: wrestler_aggregate_fields
  nodes: [wrestler!]!
}

"""
aggregate fields of "wrestler"
"""
type wrestler_aggregate_fields {
  avg: wrestler_avg_fields
  count(columns: [wrestler_select_column!], distinct: Boolean): Int
  max: wrestler_max_fields
  min: wrestler_min_fields
  stddev: wrestler_stddev_fields
  stddev_pop: wrestler_stddev_pop_fields
  stddev_samp: wrestler_stddev_samp_fields
  sum: wrestler_sum_fields
  var_pop: wrestler_var_pop_fields
  var_samp: wrestler_var_samp_fields
  variance: wrestler_variance_fields
}

"""
order by aggregate values of table "wrestler"
"""
input wrestler_aggregate_order_by {
  avg: wrestler_avg_order_by
  count: order_by
  max: wrestler_max_order_by
  min: wrestler_min_order_by
  stddev: wrestler_stddev_order_by
  stddev_pop: wrestler_stddev_pop_order_by
  stddev_samp: wrestler_stddev_samp_order_by
  sum: wrestler_sum_order_by
  var_pop: wrestler_var_pop_order_by
  var_samp: wrestler_var_samp_order_by
  variance: wrestler_variance_order_by
}

"""
input type for inserting array relation for remote table "wrestler"
"""
input wrestler_arr_rel_insert_input {
  data: [wrestler_insert_input!]!
  on_conflict: wrestler_on_conflict
}

"""aggregate avg on columns"""
type wrestler_avg_fields {
  wrestler_id: Float
}

"""
order by avg() on columns of table "wrestler"
"""
input wrestler_avg_order_by {
  wrestler_id: order_by
}

"""
Boolean expression to filter rows from the table "wrestler". All fields are combined with a logical 'AND'.
"""
input wrestler_bool_exp {
  _and: [wrestler_bool_exp]
  _not: wrestler_bool_exp
  _or: [wrestler_bool_exp]
  days_held: String_comparison_exp
  eliminations: elimination_bool_exp
  event: String_comparison_exp
  location: String_comparison_exp
  name: String_comparison_exp
  reign: String_comparison_exp
  wrestler_id: Int_comparison_exp
}

"""
unique or primary key constraints on table "wrestler"
"""
enum wrestler_constraint {
  """unique or primary key constraint"""
  idx_21081_sqlite_autoindex_wrestler_1
}

"""
input type for incrementing integer column in table "wrestler"
"""
input wrestler_inc_input {
  wrestler_id: Int
}

"""
input type for inserting data into table "wrestler"
"""
input wrestler_insert_input {
  days_held: String
  eliminations: elimination_arr_rel_insert_input
  event: String
  location: String
  name: String
  reign: String
  wrestler_id: Int
}

"""aggregate max on columns"""
type wrestler_max_fields {
  days_held: String
  event: String
  location: String
  name: String
  reign: String
  wrestler_id: Int
}

"""
order by max() on columns of table "wrestler"
"""
input wrestler_max_order_by {
  days_held: order_by
  event: order_by
  location: order_by
  name: order_by
  reign: order_by
  wrestler_id: order_by
}

"""aggregate min on columns"""
type wrestler_min_fields {
  days_held: String
  event: String
  location: String
  name: String
  reign: String
  wrestler_id: Int
}

"""
order by min() on columns of table "wrestler"
"""
input wrestler_min_order_by {
  days_held: order_by
  event: order_by
  location: order_by
  name: order_by
  reign: order_by
  wrestler_id: order_by
}

"""
response of any mutation on the table "wrestler"
"""
type wrestler_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [wrestler!]!
}

"""
input type for inserting object relation for remote table "wrestler"
"""
input wrestler_obj_rel_insert_input {
  data: wrestler_insert_input!
  on_conflict: wrestler_on_conflict
}

"""
on conflict condition type for table "wrestler"
"""
input wrestler_on_conflict {
  constraint: wrestler_constraint!
  update_columns: [wrestler_update_column!]!
  where: wrestler_bool_exp
}

"""
ordering options when selecting data from "wrestler"
"""
input wrestler_order_by {
  days_held: order_by
  eliminations_aggregate: elimination_aggregate_order_by
  event: order_by
  location: order_by
  name: order_by
  reign: order_by
  wrestler_id: order_by
}

"""
select columns of table "wrestler"
"""
enum wrestler_select_column {
  """column name"""
  days_held

  """column name"""
  event

  """column name"""
  location

  """column name"""
  name

  """column name"""
  reign

  """column name"""
  wrestler_id
}

"""
input type for updating data in table "wrestler"
"""
input wrestler_set_input {
  days_held: String
  event: String
  location: String
  name: String
  reign: String
  wrestler_id: Int
}

"""aggregate stddev on columns"""
type wrestler_stddev_fields {
  wrestler_id: Float
}

"""
order by stddev() on columns of table "wrestler"
"""
input wrestler_stddev_order_by {
  wrestler_id: order_by
}

"""aggregate stddev_pop on columns"""
type wrestler_stddev_pop_fields {
  wrestler_id: Float
}

"""
order by stddev_pop() on columns of table "wrestler"
"""
input wrestler_stddev_pop_order_by {
  wrestler_id: order_by
}

"""aggregate stddev_samp on columns"""
type wrestler_stddev_samp_fields {
  wrestler_id: Float
}

"""
order by stddev_samp() on columns of table "wrestler"
"""
input wrestler_stddev_samp_order_by {
  wrestler_id: order_by
}

"""aggregate sum on columns"""
type wrestler_sum_fields {
  wrestler_id: Int
}

"""
order by sum() on columns of table "wrestler"
"""
input wrestler_sum_order_by {
  wrestler_id: order_by
}

"""
update columns of table "wrestler"
"""
enum wrestler_update_column {
  """column name"""
  days_held

  """column name"""
  event

  """column name"""
  location

  """column name"""
  name

  """column name"""
  reign

  """column name"""
  wrestler_id
}

"""aggregate var_pop on columns"""
type wrestler_var_pop_fields {
  wrestler_id: Float
}

"""
order by var_pop() on columns of table "wrestler"
"""
input wrestler_var_pop_order_by {
  wrestler_id: order_by
}

"""aggregate var_samp on columns"""
type wrestler_var_samp_fields {
  wrestler_id: Float
}

"""
order by var_samp() on columns of table "wrestler"
"""
input wrestler_var_samp_order_by {
  wrestler_id: order_by
}

"""aggregate variance on columns"""
type wrestler_variance_fields {
  wrestler_id: Float
}

"""
order by variance() on columns of table "wrestler"
"""
input wrestler_variance_order_by {
  wrestler_id: order_by
}
