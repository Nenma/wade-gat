schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""
Direct the client to resolve this field locally, either from the cache or local resolvers.
"""
directive @client(
  """
  When true, the client will never use the cache for this value. See
  https://www.apollographql.com/docs/react/essentials/local-state/#forcing-resolvers-with-clientalways-true
  """
  always: Boolean
) on FIELD | FRAGMENT_DEFINITION | INLINE_FRAGMENT

"""
Export this locally resolved field as a variable to be used in the remainder of this query. See
https://www.apollographql.com/docs/react/essentials/local-state/#using-client-fields-as-variables
"""
directive @export(
  """The variable name to export this field as."""
  as: String!
) on FIELD

"""
Specify a custom store key for this result. See
https://www.apollographql.com/docs/react/advanced/caching/#the-connection-directive
"""
directive @connection(
  """Specify the store key."""
  key: String!

  """
  An array of query argument names to include in the generated custom store key.
  """
  filter: [String!]
) on FIELD

scalar bigint

"""
expression to compare columns of type bigint. All fields are combined with logical 'AND'.
"""
input bigint_comparison_exp {
  _eq: bigint
  _gt: bigint
  _gte: bigint
  _in: [bigint!]
  _is_null: Boolean
  _lt: bigint
  _lte: bigint
  _neq: bigint
  _nin: [bigint!]
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "plays_games"
  """
  delete_plays_games(
    """filter the rows which have to be deleted"""
    where: plays_games_bool_exp!
  ): plays_games_mutation_response

  """
  delete data from the table: "sportsinfo"
  """
  delete_sportsinfo(
    """filter the rows which have to be deleted"""
    where: sportsinfo_bool_exp!
  ): sportsinfo_mutation_response

  """
  delete data from the table: "student"
  """
  delete_student(
    """filter the rows which have to be deleted"""
    where: student_bool_exp!
  ): student_mutation_response

  """
  delete single row from the table: "student"
  """
  delete_student_by_pk(stuid: bigint!): student

  """
  delete data from the table: "video_games"
  """
  delete_video_games(
    """filter the rows which have to be deleted"""
    where: video_games_bool_exp!
  ): video_games_mutation_response

  """
  delete single row from the table: "video_games"
  """
  delete_video_games_by_pk(gameid: bigint!): video_games

  """
  insert data into the table: "plays_games"
  """
  insert_plays_games(
    """the rows to be inserted"""
    objects: [plays_games_insert_input!]!
  ): plays_games_mutation_response

  """
  insert a single row into the table: "plays_games"
  """
  insert_plays_games_one(
    """the row to be inserted"""
    object: plays_games_insert_input!
  ): plays_games

  """
  insert data into the table: "sportsinfo"
  """
  insert_sportsinfo(
    """the rows to be inserted"""
    objects: [sportsinfo_insert_input!]!
  ): sportsinfo_mutation_response

  """
  insert a single row into the table: "sportsinfo"
  """
  insert_sportsinfo_one(
    """the row to be inserted"""
    object: sportsinfo_insert_input!
  ): sportsinfo

  """
  insert data into the table: "student"
  """
  insert_student(
    """the rows to be inserted"""
    objects: [student_insert_input!]!

    """on conflict condition"""
    on_conflict: student_on_conflict
  ): student_mutation_response

  """
  insert a single row into the table: "student"
  """
  insert_student_one(
    """the row to be inserted"""
    object: student_insert_input!

    """on conflict condition"""
    on_conflict: student_on_conflict
  ): student

  """
  insert data into the table: "video_games"
  """
  insert_video_games(
    """the rows to be inserted"""
    objects: [video_games_insert_input!]!

    """on conflict condition"""
    on_conflict: video_games_on_conflict
  ): video_games_mutation_response

  """
  insert a single row into the table: "video_games"
  """
  insert_video_games_one(
    """the row to be inserted"""
    object: video_games_insert_input!

    """on conflict condition"""
    on_conflict: video_games_on_conflict
  ): video_games

  """
  update data of the table: "plays_games"
  """
  update_plays_games(
    """increments the integer columns with given value of the filtered values"""
    _inc: plays_games_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: plays_games_set_input

    """filter the rows which have to be updated"""
    where: plays_games_bool_exp!
  ): plays_games_mutation_response

  """
  update data of the table: "sportsinfo"
  """
  update_sportsinfo(
    """increments the integer columns with given value of the filtered values"""
    _inc: sportsinfo_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: sportsinfo_set_input

    """filter the rows which have to be updated"""
    where: sportsinfo_bool_exp!
  ): sportsinfo_mutation_response

  """
  update data of the table: "student"
  """
  update_student(
    """increments the integer columns with given value of the filtered values"""
    _inc: student_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: student_set_input

    """filter the rows which have to be updated"""
    where: student_bool_exp!
  ): student_mutation_response

  """
  update single row of the table: "student"
  """
  update_student_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: student_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: student_set_input
    pk_columns: student_pk_columns_input!
  ): student

  """
  update data of the table: "video_games"
  """
  update_video_games(
    """increments the integer columns with given value of the filtered values"""
    _inc: video_games_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: video_games_set_input

    """filter the rows which have to be updated"""
    where: video_games_bool_exp!
  ): video_games_mutation_response

  """
  update single row of the table: "video_games"
  """
  update_video_games_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: video_games_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: video_games_set_input
    pk_columns: video_games_pk_columns_input!
  ): video_games
}

"""column ordering options"""
enum order_by {
  """in the ascending order, nulls last"""
  asc

  """in the ascending order, nulls first"""
  asc_nulls_first

  """in the ascending order, nulls last"""
  asc_nulls_last

  """in the descending order, nulls first"""
  desc

  """in the descending order, nulls first"""
  desc_nulls_first

  """in the descending order, nulls last"""
  desc_nulls_last
}

"""
columns and relationships of "plays_games"
"""
type plays_games {
  gameid: bigint
  hours_played: bigint

  """An object relationship"""
  student: student
  stuid: bigint

  """An object relationship"""
  video_game: video_games
}

"""
aggregated selection of "plays_games"
"""
type plays_games_aggregate {
  aggregate: plays_games_aggregate_fields
  nodes: [plays_games!]!
}

"""
aggregate fields of "plays_games"
"""
type plays_games_aggregate_fields {
  avg: plays_games_avg_fields
  count(columns: [plays_games_select_column!], distinct: Boolean): Int
  max: plays_games_max_fields
  min: plays_games_min_fields
  stddev: plays_games_stddev_fields
  stddev_pop: plays_games_stddev_pop_fields
  stddev_samp: plays_games_stddev_samp_fields
  sum: plays_games_sum_fields
  var_pop: plays_games_var_pop_fields
  var_samp: plays_games_var_samp_fields
  variance: plays_games_variance_fields
}

"""
order by aggregate values of table "plays_games"
"""
input plays_games_aggregate_order_by {
  avg: plays_games_avg_order_by
  count: order_by
  max: plays_games_max_order_by
  min: plays_games_min_order_by
  stddev: plays_games_stddev_order_by
  stddev_pop: plays_games_stddev_pop_order_by
  stddev_samp: plays_games_stddev_samp_order_by
  sum: plays_games_sum_order_by
  var_pop: plays_games_var_pop_order_by
  var_samp: plays_games_var_samp_order_by
  variance: plays_games_variance_order_by
}

"""
input type for inserting array relation for remote table "plays_games"
"""
input plays_games_arr_rel_insert_input {
  data: [plays_games_insert_input!]!
}

"""aggregate avg on columns"""
type plays_games_avg_fields {
  gameid: Float
  hours_played: Float
  stuid: Float
}

"""
order by avg() on columns of table "plays_games"
"""
input plays_games_avg_order_by {
  gameid: order_by
  hours_played: order_by
  stuid: order_by
}

"""
Boolean expression to filter rows from the table "plays_games". All fields are combined with a logical 'AND'.
"""
input plays_games_bool_exp {
  _and: [plays_games_bool_exp]
  _not: plays_games_bool_exp
  _or: [plays_games_bool_exp]
  gameid: bigint_comparison_exp
  hours_played: bigint_comparison_exp
  student: student_bool_exp
  stuid: bigint_comparison_exp
  video_game: video_games_bool_exp
}

"""
input type for incrementing integer column in table "plays_games"
"""
input plays_games_inc_input {
  gameid: bigint
  hours_played: bigint
  stuid: bigint
}

"""
input type for inserting data into table "plays_games"
"""
input plays_games_insert_input {
  gameid: bigint
  hours_played: bigint
  student: student_obj_rel_insert_input
  stuid: bigint
  video_game: video_games_obj_rel_insert_input
}

"""aggregate max on columns"""
type plays_games_max_fields {
  gameid: bigint
  hours_played: bigint
  stuid: bigint
}

"""
order by max() on columns of table "plays_games"
"""
input plays_games_max_order_by {
  gameid: order_by
  hours_played: order_by
  stuid: order_by
}

"""aggregate min on columns"""
type plays_games_min_fields {
  gameid: bigint
  hours_played: bigint
  stuid: bigint
}

"""
order by min() on columns of table "plays_games"
"""
input plays_games_min_order_by {
  gameid: order_by
  hours_played: order_by
  stuid: order_by
}

"""
response of any mutation on the table "plays_games"
"""
type plays_games_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [plays_games!]!
}

"""
input type for inserting object relation for remote table "plays_games"
"""
input plays_games_obj_rel_insert_input {
  data: plays_games_insert_input!
}

"""
ordering options when selecting data from "plays_games"
"""
input plays_games_order_by {
  gameid: order_by
  hours_played: order_by
  student: student_order_by
  stuid: order_by
  video_game: video_games_order_by
}

"""
select columns of table "plays_games"
"""
enum plays_games_select_column {
  """column name"""
  gameid

  """column name"""
  hours_played

  """column name"""
  stuid
}

"""
input type for updating data in table "plays_games"
"""
input plays_games_set_input {
  gameid: bigint
  hours_played: bigint
  stuid: bigint
}

"""aggregate stddev on columns"""
type plays_games_stddev_fields {
  gameid: Float
  hours_played: Float
  stuid: Float
}

"""
order by stddev() on columns of table "plays_games"
"""
input plays_games_stddev_order_by {
  gameid: order_by
  hours_played: order_by
  stuid: order_by
}

"""aggregate stddev_pop on columns"""
type plays_games_stddev_pop_fields {
  gameid: Float
  hours_played: Float
  stuid: Float
}

"""
order by stddev_pop() on columns of table "plays_games"
"""
input plays_games_stddev_pop_order_by {
  gameid: order_by
  hours_played: order_by
  stuid: order_by
}

"""aggregate stddev_samp on columns"""
type plays_games_stddev_samp_fields {
  gameid: Float
  hours_played: Float
  stuid: Float
}

"""
order by stddev_samp() on columns of table "plays_games"
"""
input plays_games_stddev_samp_order_by {
  gameid: order_by
  hours_played: order_by
  stuid: order_by
}

"""aggregate sum on columns"""
type plays_games_sum_fields {
  gameid: bigint
  hours_played: bigint
  stuid: bigint
}

"""
order by sum() on columns of table "plays_games"
"""
input plays_games_sum_order_by {
  gameid: order_by
  hours_played: order_by
  stuid: order_by
}

"""aggregate var_pop on columns"""
type plays_games_var_pop_fields {
  gameid: Float
  hours_played: Float
  stuid: Float
}

"""
order by var_pop() on columns of table "plays_games"
"""
input plays_games_var_pop_order_by {
  gameid: order_by
  hours_played: order_by
  stuid: order_by
}

"""aggregate var_samp on columns"""
type plays_games_var_samp_fields {
  gameid: Float
  hours_played: Float
  stuid: Float
}

"""
order by var_samp() on columns of table "plays_games"
"""
input plays_games_var_samp_order_by {
  gameid: order_by
  hours_played: order_by
  stuid: order_by
}

"""aggregate variance on columns"""
type plays_games_variance_fields {
  gameid: Float
  hours_played: Float
  stuid: Float
}

"""
order by variance() on columns of table "plays_games"
"""
input plays_games_variance_order_by {
  gameid: order_by
  hours_played: order_by
  stuid: order_by
}

"""query root"""
type query_root {
  """
  fetch data from the table: "plays_games"
  """
  plays_games(
    """distinct select on columns"""
    distinct_on: [plays_games_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [plays_games_order_by!]

    """filter the rows returned"""
    where: plays_games_bool_exp
  ): [plays_games!]!

  """
  fetch aggregated fields from the table: "plays_games"
  """
  plays_games_aggregate(
    """distinct select on columns"""
    distinct_on: [plays_games_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [plays_games_order_by!]

    """filter the rows returned"""
    where: plays_games_bool_exp
  ): plays_games_aggregate!

  """
  fetch data from the table: "sportsinfo"
  """
  sportsinfo(
    """distinct select on columns"""
    distinct_on: [sportsinfo_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [sportsinfo_order_by!]

    """filter the rows returned"""
    where: sportsinfo_bool_exp
  ): [sportsinfo!]!

  """
  fetch aggregated fields from the table: "sportsinfo"
  """
  sportsinfo_aggregate(
    """distinct select on columns"""
    distinct_on: [sportsinfo_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [sportsinfo_order_by!]

    """filter the rows returned"""
    where: sportsinfo_bool_exp
  ): sportsinfo_aggregate!

  """
  fetch data from the table: "student"
  """
  student(
    """distinct select on columns"""
    distinct_on: [student_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [student_order_by!]

    """filter the rows returned"""
    where: student_bool_exp
  ): [student!]!

  """
  fetch aggregated fields from the table: "student"
  """
  student_aggregate(
    """distinct select on columns"""
    distinct_on: [student_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [student_order_by!]

    """filter the rows returned"""
    where: student_bool_exp
  ): student_aggregate!

  """fetch data from the table: "student" using primary key columns"""
  student_by_pk(stuid: bigint!): student

  """
  fetch data from the table: "video_games"
  """
  video_games(
    """distinct select on columns"""
    distinct_on: [video_games_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [video_games_order_by!]

    """filter the rows returned"""
    where: video_games_bool_exp
  ): [video_games!]!

  """
  fetch aggregated fields from the table: "video_games"
  """
  video_games_aggregate(
    """distinct select on columns"""
    distinct_on: [video_games_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [video_games_order_by!]

    """filter the rows returned"""
    where: video_games_bool_exp
  ): video_games_aggregate!

  """fetch data from the table: "video_games" using primary key columns"""
  video_games_by_pk(gameid: bigint!): video_games
}

"""
columns and relationships of "sportsinfo"
"""
type sportsinfo {
  gamesplayed: bigint
  hoursperweek: bigint
  onscholarship: String
  sportname: String

  """An object relationship"""
  student: student
  stuid: bigint
}

"""
aggregated selection of "sportsinfo"
"""
type sportsinfo_aggregate {
  aggregate: sportsinfo_aggregate_fields
  nodes: [sportsinfo!]!
}

"""
aggregate fields of "sportsinfo"
"""
type sportsinfo_aggregate_fields {
  avg: sportsinfo_avg_fields
  count(columns: [sportsinfo_select_column!], distinct: Boolean): Int
  max: sportsinfo_max_fields
  min: sportsinfo_min_fields
  stddev: sportsinfo_stddev_fields
  stddev_pop: sportsinfo_stddev_pop_fields
  stddev_samp: sportsinfo_stddev_samp_fields
  sum: sportsinfo_sum_fields
  var_pop: sportsinfo_var_pop_fields
  var_samp: sportsinfo_var_samp_fields
  variance: sportsinfo_variance_fields
}

"""
order by aggregate values of table "sportsinfo"
"""
input sportsinfo_aggregate_order_by {
  avg: sportsinfo_avg_order_by
  count: order_by
  max: sportsinfo_max_order_by
  min: sportsinfo_min_order_by
  stddev: sportsinfo_stddev_order_by
  stddev_pop: sportsinfo_stddev_pop_order_by
  stddev_samp: sportsinfo_stddev_samp_order_by
  sum: sportsinfo_sum_order_by
  var_pop: sportsinfo_var_pop_order_by
  var_samp: sportsinfo_var_samp_order_by
  variance: sportsinfo_variance_order_by
}

"""
input type for inserting array relation for remote table "sportsinfo"
"""
input sportsinfo_arr_rel_insert_input {
  data: [sportsinfo_insert_input!]!
}

"""aggregate avg on columns"""
type sportsinfo_avg_fields {
  gamesplayed: Float
  hoursperweek: Float
  stuid: Float
}

"""
order by avg() on columns of table "sportsinfo"
"""
input sportsinfo_avg_order_by {
  gamesplayed: order_by
  hoursperweek: order_by
  stuid: order_by
}

"""
Boolean expression to filter rows from the table "sportsinfo". All fields are combined with a logical 'AND'.
"""
input sportsinfo_bool_exp {
  _and: [sportsinfo_bool_exp]
  _not: sportsinfo_bool_exp
  _or: [sportsinfo_bool_exp]
  gamesplayed: bigint_comparison_exp
  hoursperweek: bigint_comparison_exp
  onscholarship: String_comparison_exp
  sportname: String_comparison_exp
  student: student_bool_exp
  stuid: bigint_comparison_exp
}

"""
input type for incrementing integer column in table "sportsinfo"
"""
input sportsinfo_inc_input {
  gamesplayed: bigint
  hoursperweek: bigint
  stuid: bigint
}

"""
input type for inserting data into table "sportsinfo"
"""
input sportsinfo_insert_input {
  gamesplayed: bigint
  hoursperweek: bigint
  onscholarship: String
  sportname: String
  student: student_obj_rel_insert_input
  stuid: bigint
}

"""aggregate max on columns"""
type sportsinfo_max_fields {
  gamesplayed: bigint
  hoursperweek: bigint
  onscholarship: String
  sportname: String
  stuid: bigint
}

"""
order by max() on columns of table "sportsinfo"
"""
input sportsinfo_max_order_by {
  gamesplayed: order_by
  hoursperweek: order_by
  onscholarship: order_by
  sportname: order_by
  stuid: order_by
}

"""aggregate min on columns"""
type sportsinfo_min_fields {
  gamesplayed: bigint
  hoursperweek: bigint
  onscholarship: String
  sportname: String
  stuid: bigint
}

"""
order by min() on columns of table "sportsinfo"
"""
input sportsinfo_min_order_by {
  gamesplayed: order_by
  hoursperweek: order_by
  onscholarship: order_by
  sportname: order_by
  stuid: order_by
}

"""
response of any mutation on the table "sportsinfo"
"""
type sportsinfo_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [sportsinfo!]!
}

"""
input type for inserting object relation for remote table "sportsinfo"
"""
input sportsinfo_obj_rel_insert_input {
  data: sportsinfo_insert_input!
}

"""
ordering options when selecting data from "sportsinfo"
"""
input sportsinfo_order_by {
  gamesplayed: order_by
  hoursperweek: order_by
  onscholarship: order_by
  sportname: order_by
  student: student_order_by
  stuid: order_by
}

"""
select columns of table "sportsinfo"
"""
enum sportsinfo_select_column {
  """column name"""
  gamesplayed

  """column name"""
  hoursperweek

  """column name"""
  onscholarship

  """column name"""
  sportname

  """column name"""
  stuid
}

"""
input type for updating data in table "sportsinfo"
"""
input sportsinfo_set_input {
  gamesplayed: bigint
  hoursperweek: bigint
  onscholarship: String
  sportname: String
  stuid: bigint
}

"""aggregate stddev on columns"""
type sportsinfo_stddev_fields {
  gamesplayed: Float
  hoursperweek: Float
  stuid: Float
}

"""
order by stddev() on columns of table "sportsinfo"
"""
input sportsinfo_stddev_order_by {
  gamesplayed: order_by
  hoursperweek: order_by
  stuid: order_by
}

"""aggregate stddev_pop on columns"""
type sportsinfo_stddev_pop_fields {
  gamesplayed: Float
  hoursperweek: Float
  stuid: Float
}

"""
order by stddev_pop() on columns of table "sportsinfo"
"""
input sportsinfo_stddev_pop_order_by {
  gamesplayed: order_by
  hoursperweek: order_by
  stuid: order_by
}

"""aggregate stddev_samp on columns"""
type sportsinfo_stddev_samp_fields {
  gamesplayed: Float
  hoursperweek: Float
  stuid: Float
}

"""
order by stddev_samp() on columns of table "sportsinfo"
"""
input sportsinfo_stddev_samp_order_by {
  gamesplayed: order_by
  hoursperweek: order_by
  stuid: order_by
}

"""aggregate sum on columns"""
type sportsinfo_sum_fields {
  gamesplayed: bigint
  hoursperweek: bigint
  stuid: bigint
}

"""
order by sum() on columns of table "sportsinfo"
"""
input sportsinfo_sum_order_by {
  gamesplayed: order_by
  hoursperweek: order_by
  stuid: order_by
}

"""aggregate var_pop on columns"""
type sportsinfo_var_pop_fields {
  gamesplayed: Float
  hoursperweek: Float
  stuid: Float
}

"""
order by var_pop() on columns of table "sportsinfo"
"""
input sportsinfo_var_pop_order_by {
  gamesplayed: order_by
  hoursperweek: order_by
  stuid: order_by
}

"""aggregate var_samp on columns"""
type sportsinfo_var_samp_fields {
  gamesplayed: Float
  hoursperweek: Float
  stuid: Float
}

"""
order by var_samp() on columns of table "sportsinfo"
"""
input sportsinfo_var_samp_order_by {
  gamesplayed: order_by
  hoursperweek: order_by
  stuid: order_by
}

"""aggregate variance on columns"""
type sportsinfo_variance_fields {
  gamesplayed: Float
  hoursperweek: Float
  stuid: Float
}

"""
order by variance() on columns of table "sportsinfo"
"""
input sportsinfo_variance_order_by {
  gamesplayed: order_by
  hoursperweek: order_by
  stuid: order_by
}

"""
expression to compare columns of type String. All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String
  _ilike: String
  _in: [String!]
  _is_null: Boolean
  _like: String
  _lt: String
  _lte: String
  _neq: String
  _nilike: String
  _nin: [String!]
  _nlike: String
  _nsimilar: String
  _similar: String
}

"""
columns and relationships of "student"
"""
type student {
  advisor: bigint
  age: bigint
  city_code: String
  fname: String
  lname: String
  major: bigint

  """An array relationship"""
  plays_games(
    """distinct select on columns"""
    distinct_on: [plays_games_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [plays_games_order_by!]

    """filter the rows returned"""
    where: plays_games_bool_exp
  ): [plays_games!]!

  """An aggregated array relationship"""
  plays_games_aggregate(
    """distinct select on columns"""
    distinct_on: [plays_games_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [plays_games_order_by!]

    """filter the rows returned"""
    where: plays_games_bool_exp
  ): plays_games_aggregate!
  sex: String

  """An array relationship"""
  sportsinfos(
    """distinct select on columns"""
    distinct_on: [sportsinfo_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [sportsinfo_order_by!]

    """filter the rows returned"""
    where: sportsinfo_bool_exp
  ): [sportsinfo!]!

  """An aggregated array relationship"""
  sportsinfos_aggregate(
    """distinct select on columns"""
    distinct_on: [sportsinfo_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [sportsinfo_order_by!]

    """filter the rows returned"""
    where: sportsinfo_bool_exp
  ): sportsinfo_aggregate!
  stuid: bigint!
}

"""
aggregated selection of "student"
"""
type student_aggregate {
  aggregate: student_aggregate_fields
  nodes: [student!]!
}

"""
aggregate fields of "student"
"""
type student_aggregate_fields {
  avg: student_avg_fields
  count(columns: [student_select_column!], distinct: Boolean): Int
  max: student_max_fields
  min: student_min_fields
  stddev: student_stddev_fields
  stddev_pop: student_stddev_pop_fields
  stddev_samp: student_stddev_samp_fields
  sum: student_sum_fields
  var_pop: student_var_pop_fields
  var_samp: student_var_samp_fields
  variance: student_variance_fields
}

"""
order by aggregate values of table "student"
"""
input student_aggregate_order_by {
  avg: student_avg_order_by
  count: order_by
  max: student_max_order_by
  min: student_min_order_by
  stddev: student_stddev_order_by
  stddev_pop: student_stddev_pop_order_by
  stddev_samp: student_stddev_samp_order_by
  sum: student_sum_order_by
  var_pop: student_var_pop_order_by
  var_samp: student_var_samp_order_by
  variance: student_variance_order_by
}

"""
input type for inserting array relation for remote table "student"
"""
input student_arr_rel_insert_input {
  data: [student_insert_input!]!
  on_conflict: student_on_conflict
}

"""aggregate avg on columns"""
type student_avg_fields {
  advisor: Float
  age: Float
  major: Float
  stuid: Float
}

"""
order by avg() on columns of table "student"
"""
input student_avg_order_by {
  advisor: order_by
  age: order_by
  major: order_by
  stuid: order_by
}

"""
Boolean expression to filter rows from the table "student". All fields are combined with a logical 'AND'.
"""
input student_bool_exp {
  _and: [student_bool_exp]
  _not: student_bool_exp
  _or: [student_bool_exp]
  advisor: bigint_comparison_exp
  age: bigint_comparison_exp
  city_code: String_comparison_exp
  fname: String_comparison_exp
  lname: String_comparison_exp
  major: bigint_comparison_exp
  plays_games: plays_games_bool_exp
  sex: String_comparison_exp
  sportsinfos: sportsinfo_bool_exp
  stuid: bigint_comparison_exp
}

"""
unique or primary key constraints on table "student"
"""
enum student_constraint {
  """unique or primary key constraint"""
  idx_23898_student_pkey
}

"""
input type for incrementing integer column in table "student"
"""
input student_inc_input {
  advisor: bigint
  age: bigint
  major: bigint
  stuid: bigint
}

"""
input type for inserting data into table "student"
"""
input student_insert_input {
  advisor: bigint
  age: bigint
  city_code: String
  fname: String
  lname: String
  major: bigint
  plays_games: plays_games_arr_rel_insert_input
  sex: String
  sportsinfos: sportsinfo_arr_rel_insert_input
  stuid: bigint
}

"""aggregate max on columns"""
type student_max_fields {
  advisor: bigint
  age: bigint
  city_code: String
  fname: String
  lname: String
  major: bigint
  sex: String
  stuid: bigint
}

"""
order by max() on columns of table "student"
"""
input student_max_order_by {
  advisor: order_by
  age: order_by
  city_code: order_by
  fname: order_by
  lname: order_by
  major: order_by
  sex: order_by
  stuid: order_by
}

"""aggregate min on columns"""
type student_min_fields {
  advisor: bigint
  age: bigint
  city_code: String
  fname: String
  lname: String
  major: bigint
  sex: String
  stuid: bigint
}

"""
order by min() on columns of table "student"
"""
input student_min_order_by {
  advisor: order_by
  age: order_by
  city_code: order_by
  fname: order_by
  lname: order_by
  major: order_by
  sex: order_by
  stuid: order_by
}

"""
response of any mutation on the table "student"
"""
type student_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [student!]!
}

"""
input type for inserting object relation for remote table "student"
"""
input student_obj_rel_insert_input {
  data: student_insert_input!
  on_conflict: student_on_conflict
}

"""
on conflict condition type for table "student"
"""
input student_on_conflict {
  constraint: student_constraint!
  update_columns: [student_update_column!]!
  where: student_bool_exp
}

"""
ordering options when selecting data from "student"
"""
input student_order_by {
  advisor: order_by
  age: order_by
  city_code: order_by
  fname: order_by
  lname: order_by
  major: order_by
  plays_games_aggregate: plays_games_aggregate_order_by
  sex: order_by
  sportsinfos_aggregate: sportsinfo_aggregate_order_by
  stuid: order_by
}

"""
primary key columns input for table: "student"
"""
input student_pk_columns_input {
  stuid: bigint!
}

"""
select columns of table "student"
"""
enum student_select_column {
  """column name"""
  advisor

  """column name"""
  age

  """column name"""
  city_code

  """column name"""
  fname

  """column name"""
  lname

  """column name"""
  major

  """column name"""
  sex

  """column name"""
  stuid
}

"""
input type for updating data in table "student"
"""
input student_set_input {
  advisor: bigint
  age: bigint
  city_code: String
  fname: String
  lname: String
  major: bigint
  sex: String
  stuid: bigint
}

"""aggregate stddev on columns"""
type student_stddev_fields {
  advisor: Float
  age: Float
  major: Float
  stuid: Float
}

"""
order by stddev() on columns of table "student"
"""
input student_stddev_order_by {
  advisor: order_by
  age: order_by
  major: order_by
  stuid: order_by
}

"""aggregate stddev_pop on columns"""
type student_stddev_pop_fields {
  advisor: Float
  age: Float
  major: Float
  stuid: Float
}

"""
order by stddev_pop() on columns of table "student"
"""
input student_stddev_pop_order_by {
  advisor: order_by
  age: order_by
  major: order_by
  stuid: order_by
}

"""aggregate stddev_samp on columns"""
type student_stddev_samp_fields {
  advisor: Float
  age: Float
  major: Float
  stuid: Float
}

"""
order by stddev_samp() on columns of table "student"
"""
input student_stddev_samp_order_by {
  advisor: order_by
  age: order_by
  major: order_by
  stuid: order_by
}

"""aggregate sum on columns"""
type student_sum_fields {
  advisor: bigint
  age: bigint
  major: bigint
  stuid: bigint
}

"""
order by sum() on columns of table "student"
"""
input student_sum_order_by {
  advisor: order_by
  age: order_by
  major: order_by
  stuid: order_by
}

"""
update columns of table "student"
"""
enum student_update_column {
  """column name"""
  advisor

  """column name"""
  age

  """column name"""
  city_code

  """column name"""
  fname

  """column name"""
  lname

  """column name"""
  major

  """column name"""
  sex

  """column name"""
  stuid
}

"""aggregate var_pop on columns"""
type student_var_pop_fields {
  advisor: Float
  age: Float
  major: Float
  stuid: Float
}

"""
order by var_pop() on columns of table "student"
"""
input student_var_pop_order_by {
  advisor: order_by
  age: order_by
  major: order_by
  stuid: order_by
}

"""aggregate var_samp on columns"""
type student_var_samp_fields {
  advisor: Float
  age: Float
  major: Float
  stuid: Float
}

"""
order by var_samp() on columns of table "student"
"""
input student_var_samp_order_by {
  advisor: order_by
  age: order_by
  major: order_by
  stuid: order_by
}

"""aggregate variance on columns"""
type student_variance_fields {
  advisor: Float
  age: Float
  major: Float
  stuid: Float
}

"""
order by variance() on columns of table "student"
"""
input student_variance_order_by {
  advisor: order_by
  age: order_by
  major: order_by
  stuid: order_by
}

"""subscription root"""
type subscription_root {
  """
  fetch data from the table: "plays_games"
  """
  plays_games(
    """distinct select on columns"""
    distinct_on: [plays_games_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [plays_games_order_by!]

    """filter the rows returned"""
    where: plays_games_bool_exp
  ): [plays_games!]!

  """
  fetch aggregated fields from the table: "plays_games"
  """
  plays_games_aggregate(
    """distinct select on columns"""
    distinct_on: [plays_games_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [plays_games_order_by!]

    """filter the rows returned"""
    where: plays_games_bool_exp
  ): plays_games_aggregate!

  """
  fetch data from the table: "sportsinfo"
  """
  sportsinfo(
    """distinct select on columns"""
    distinct_on: [sportsinfo_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [sportsinfo_order_by!]

    """filter the rows returned"""
    where: sportsinfo_bool_exp
  ): [sportsinfo!]!

  """
  fetch aggregated fields from the table: "sportsinfo"
  """
  sportsinfo_aggregate(
    """distinct select on columns"""
    distinct_on: [sportsinfo_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [sportsinfo_order_by!]

    """filter the rows returned"""
    where: sportsinfo_bool_exp
  ): sportsinfo_aggregate!

  """
  fetch data from the table: "student"
  """
  student(
    """distinct select on columns"""
    distinct_on: [student_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [student_order_by!]

    """filter the rows returned"""
    where: student_bool_exp
  ): [student!]!

  """
  fetch aggregated fields from the table: "student"
  """
  student_aggregate(
    """distinct select on columns"""
    distinct_on: [student_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [student_order_by!]

    """filter the rows returned"""
    where: student_bool_exp
  ): student_aggregate!

  """fetch data from the table: "student" using primary key columns"""
  student_by_pk(stuid: bigint!): student

  """
  fetch data from the table: "video_games"
  """
  video_games(
    """distinct select on columns"""
    distinct_on: [video_games_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [video_games_order_by!]

    """filter the rows returned"""
    where: video_games_bool_exp
  ): [video_games!]!

  """
  fetch aggregated fields from the table: "video_games"
  """
  video_games_aggregate(
    """distinct select on columns"""
    distinct_on: [video_games_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [video_games_order_by!]

    """filter the rows returned"""
    where: video_games_bool_exp
  ): video_games_aggregate!

  """fetch data from the table: "video_games" using primary key columns"""
  video_games_by_pk(gameid: bigint!): video_games
}

"""
columns and relationships of "video_games"
"""
type video_games {
  gameid: bigint!
  gname: String
  gtype: String

  """An array relationship"""
  plays_games(
    """distinct select on columns"""
    distinct_on: [plays_games_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [plays_games_order_by!]

    """filter the rows returned"""
    where: plays_games_bool_exp
  ): [plays_games!]!

  """An aggregated array relationship"""
  plays_games_aggregate(
    """distinct select on columns"""
    distinct_on: [plays_games_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [plays_games_order_by!]

    """filter the rows returned"""
    where: plays_games_bool_exp
  ): plays_games_aggregate!
}

"""
aggregated selection of "video_games"
"""
type video_games_aggregate {
  aggregate: video_games_aggregate_fields
  nodes: [video_games!]!
}

"""
aggregate fields of "video_games"
"""
type video_games_aggregate_fields {
  avg: video_games_avg_fields
  count(columns: [video_games_select_column!], distinct: Boolean): Int
  max: video_games_max_fields
  min: video_games_min_fields
  stddev: video_games_stddev_fields
  stddev_pop: video_games_stddev_pop_fields
  stddev_samp: video_games_stddev_samp_fields
  sum: video_games_sum_fields
  var_pop: video_games_var_pop_fields
  var_samp: video_games_var_samp_fields
  variance: video_games_variance_fields
}

"""
order by aggregate values of table "video_games"
"""
input video_games_aggregate_order_by {
  avg: video_games_avg_order_by
  count: order_by
  max: video_games_max_order_by
  min: video_games_min_order_by
  stddev: video_games_stddev_order_by
  stddev_pop: video_games_stddev_pop_order_by
  stddev_samp: video_games_stddev_samp_order_by
  sum: video_games_sum_order_by
  var_pop: video_games_var_pop_order_by
  var_samp: video_games_var_samp_order_by
  variance: video_games_variance_order_by
}

"""
input type for inserting array relation for remote table "video_games"
"""
input video_games_arr_rel_insert_input {
  data: [video_games_insert_input!]!
  on_conflict: video_games_on_conflict
}

"""aggregate avg on columns"""
type video_games_avg_fields {
  gameid: Float
}

"""
order by avg() on columns of table "video_games"
"""
input video_games_avg_order_by {
  gameid: order_by
}

"""
Boolean expression to filter rows from the table "video_games". All fields are combined with a logical 'AND'.
"""
input video_games_bool_exp {
  _and: [video_games_bool_exp]
  _not: video_games_bool_exp
  _or: [video_games_bool_exp]
  gameid: bigint_comparison_exp
  gname: String_comparison_exp
  gtype: String_comparison_exp
  plays_games: plays_games_bool_exp
}

"""
unique or primary key constraints on table "video_games"
"""
enum video_games_constraint {
  """unique or primary key constraint"""
  idx_23904_video_games_pkey
}

"""
input type for incrementing integer column in table "video_games"
"""
input video_games_inc_input {
  gameid: bigint
}

"""
input type for inserting data into table "video_games"
"""
input video_games_insert_input {
  gameid: bigint
  gname: String
  gtype: String
  plays_games: plays_games_arr_rel_insert_input
}

"""aggregate max on columns"""
type video_games_max_fields {
  gameid: bigint
  gname: String
  gtype: String
}

"""
order by max() on columns of table "video_games"
"""
input video_games_max_order_by {
  gameid: order_by
  gname: order_by
  gtype: order_by
}

"""aggregate min on columns"""
type video_games_min_fields {
  gameid: bigint
  gname: String
  gtype: String
}

"""
order by min() on columns of table "video_games"
"""
input video_games_min_order_by {
  gameid: order_by
  gname: order_by
  gtype: order_by
}

"""
response of any mutation on the table "video_games"
"""
type video_games_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [video_games!]!
}

"""
input type for inserting object relation for remote table "video_games"
"""
input video_games_obj_rel_insert_input {
  data: video_games_insert_input!
  on_conflict: video_games_on_conflict
}

"""
on conflict condition type for table "video_games"
"""
input video_games_on_conflict {
  constraint: video_games_constraint!
  update_columns: [video_games_update_column!]!
  where: video_games_bool_exp
}

"""
ordering options when selecting data from "video_games"
"""
input video_games_order_by {
  gameid: order_by
  gname: order_by
  gtype: order_by
  plays_games_aggregate: plays_games_aggregate_order_by
}

"""
primary key columns input for table: "video_games"
"""
input video_games_pk_columns_input {
  gameid: bigint!
}

"""
select columns of table "video_games"
"""
enum video_games_select_column {
  """column name"""
  gameid

  """column name"""
  gname

  """column name"""
  gtype
}

"""
input type for updating data in table "video_games"
"""
input video_games_set_input {
  gameid: bigint
  gname: String
  gtype: String
}

"""aggregate stddev on columns"""
type video_games_stddev_fields {
  gameid: Float
}

"""
order by stddev() on columns of table "video_games"
"""
input video_games_stddev_order_by {
  gameid: order_by
}

"""aggregate stddev_pop on columns"""
type video_games_stddev_pop_fields {
  gameid: Float
}

"""
order by stddev_pop() on columns of table "video_games"
"""
input video_games_stddev_pop_order_by {
  gameid: order_by
}

"""aggregate stddev_samp on columns"""
type video_games_stddev_samp_fields {
  gameid: Float
}

"""
order by stddev_samp() on columns of table "video_games"
"""
input video_games_stddev_samp_order_by {
  gameid: order_by
}

"""aggregate sum on columns"""
type video_games_sum_fields {
  gameid: bigint
}

"""
order by sum() on columns of table "video_games"
"""
input video_games_sum_order_by {
  gameid: order_by
}

"""
update columns of table "video_games"
"""
enum video_games_update_column {
  """column name"""
  gameid

  """column name"""
  gname

  """column name"""
  gtype
}

"""aggregate var_pop on columns"""
type video_games_var_pop_fields {
  gameid: Float
}

"""
order by var_pop() on columns of table "video_games"
"""
input video_games_var_pop_order_by {
  gameid: order_by
}

"""aggregate var_samp on columns"""
type video_games_var_samp_fields {
  gameid: Float
}

"""
order by var_samp() on columns of table "video_games"
"""
input video_games_var_samp_order_by {
  gameid: order_by
}

"""aggregate variance on columns"""
type video_games_variance_fields {
  gameid: Float
}

"""
order by variance() on columns of table "video_games"
"""
input video_games_variance_order_by {
  gameid: order_by
}
