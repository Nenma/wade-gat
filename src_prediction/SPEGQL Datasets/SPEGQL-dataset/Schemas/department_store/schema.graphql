schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""
Direct the client to resolve this field locally, either from the cache or local resolvers.
"""
directive @client(
  """
  When true, the client will never use the cache for this value. See
  https://www.apollographql.com/docs/react/essentials/local-state/#forcing-resolvers-with-clientalways-true
  """
  always: Boolean
) on FIELD | FRAGMENT_DEFINITION | INLINE_FRAGMENT

"""
Export this locally resolved field as a variable to be used in the remainder of this query. See
https://www.apollographql.com/docs/react/essentials/local-state/#using-client-fields-as-variables
"""
directive @export(
  """The variable name to export this field as."""
  as: String!
) on FIELD

"""
Specify a custom store key for this result. See
https://www.apollographql.com/docs/react/advanced/caching/#the-connection-directive
"""
directive @connection(
  """Specify the store key."""
  key: String!

  """
  An array of query argument names to include in the generated custom store key.
  """
  filter: [String!]
) on FIELD

"""
columns and relationships of "addresses"
"""
type addresses {
  address_details: String
  address_id: bigint!

  """An array relationship"""
  customer_addresses(
    """distinct select on columns"""
    distinct_on: [customer_addresses_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [customer_addresses_order_by!]

    """filter the rows returned"""
    where: customer_addresses_bool_exp
  ): [customer_addresses!]!

  """An aggregated array relationship"""
  customer_addresses_aggregate(
    """distinct select on columns"""
    distinct_on: [customer_addresses_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [customer_addresses_order_by!]

    """filter the rows returned"""
    where: customer_addresses_bool_exp
  ): customer_addresses_aggregate!

  """An array relationship"""
  supplier_addresses(
    """distinct select on columns"""
    distinct_on: [supplier_addresses_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [supplier_addresses_order_by!]

    """filter the rows returned"""
    where: supplier_addresses_bool_exp
  ): [supplier_addresses!]!

  """An aggregated array relationship"""
  supplier_addresses_aggregate(
    """distinct select on columns"""
    distinct_on: [supplier_addresses_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [supplier_addresses_order_by!]

    """filter the rows returned"""
    where: supplier_addresses_bool_exp
  ): supplier_addresses_aggregate!
}

"""
aggregated selection of "addresses"
"""
type addresses_aggregate {
  aggregate: addresses_aggregate_fields
  nodes: [addresses!]!
}

"""
aggregate fields of "addresses"
"""
type addresses_aggregate_fields {
  avg: addresses_avg_fields
  count(columns: [addresses_select_column!], distinct: Boolean): Int
  max: addresses_max_fields
  min: addresses_min_fields
  stddev: addresses_stddev_fields
  stddev_pop: addresses_stddev_pop_fields
  stddev_samp: addresses_stddev_samp_fields
  sum: addresses_sum_fields
  var_pop: addresses_var_pop_fields
  var_samp: addresses_var_samp_fields
  variance: addresses_variance_fields
}

"""
order by aggregate values of table "addresses"
"""
input addresses_aggregate_order_by {
  avg: addresses_avg_order_by
  count: order_by
  max: addresses_max_order_by
  min: addresses_min_order_by
  stddev: addresses_stddev_order_by
  stddev_pop: addresses_stddev_pop_order_by
  stddev_samp: addresses_stddev_samp_order_by
  sum: addresses_sum_order_by
  var_pop: addresses_var_pop_order_by
  var_samp: addresses_var_samp_order_by
  variance: addresses_variance_order_by
}

"""
input type for inserting array relation for remote table "addresses"
"""
input addresses_arr_rel_insert_input {
  data: [addresses_insert_input!]!
  on_conflict: addresses_on_conflict
}

"""aggregate avg on columns"""
type addresses_avg_fields {
  address_id: Float
}

"""
order by avg() on columns of table "addresses"
"""
input addresses_avg_order_by {
  address_id: order_by
}

"""
Boolean expression to filter rows from the table "addresses". All fields are combined with a logical 'AND'.
"""
input addresses_bool_exp {
  _and: [addresses_bool_exp]
  _not: addresses_bool_exp
  _or: [addresses_bool_exp]
  address_details: String_comparison_exp
  address_id: bigint_comparison_exp
  customer_addresses: customer_addresses_bool_exp
  supplier_addresses: supplier_addresses_bool_exp
}

"""
unique or primary key constraints on table "addresses"
"""
enum addresses_constraint {
  """unique or primary key constraint"""
  idx_21794_addresses_pkey
}

"""
input type for incrementing integer column in table "addresses"
"""
input addresses_inc_input {
  address_id: bigint
}

"""
input type for inserting data into table "addresses"
"""
input addresses_insert_input {
  address_details: String
  address_id: bigint
  customer_addresses: customer_addresses_arr_rel_insert_input
  supplier_addresses: supplier_addresses_arr_rel_insert_input
}

"""aggregate max on columns"""
type addresses_max_fields {
  address_details: String
  address_id: bigint
}

"""
order by max() on columns of table "addresses"
"""
input addresses_max_order_by {
  address_details: order_by
  address_id: order_by
}

"""aggregate min on columns"""
type addresses_min_fields {
  address_details: String
  address_id: bigint
}

"""
order by min() on columns of table "addresses"
"""
input addresses_min_order_by {
  address_details: order_by
  address_id: order_by
}

"""
response of any mutation on the table "addresses"
"""
type addresses_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [addresses!]!
}

"""
input type for inserting object relation for remote table "addresses"
"""
input addresses_obj_rel_insert_input {
  data: addresses_insert_input!
  on_conflict: addresses_on_conflict
}

"""
on conflict condition type for table "addresses"
"""
input addresses_on_conflict {
  constraint: addresses_constraint!
  update_columns: [addresses_update_column!]!
  where: addresses_bool_exp
}

"""
ordering options when selecting data from "addresses"
"""
input addresses_order_by {
  address_details: order_by
  address_id: order_by
  customer_addresses_aggregate: customer_addresses_aggregate_order_by
  supplier_addresses_aggregate: supplier_addresses_aggregate_order_by
}

"""
primary key columns input for table: "addresses"
"""
input addresses_pk_columns_input {
  address_id: bigint!
}

"""
select columns of table "addresses"
"""
enum addresses_select_column {
  """column name"""
  address_details

  """column name"""
  address_id
}

"""
input type for updating data in table "addresses"
"""
input addresses_set_input {
  address_details: String
  address_id: bigint
}

"""aggregate stddev on columns"""
type addresses_stddev_fields {
  address_id: Float
}

"""
order by stddev() on columns of table "addresses"
"""
input addresses_stddev_order_by {
  address_id: order_by
}

"""aggregate stddev_pop on columns"""
type addresses_stddev_pop_fields {
  address_id: Float
}

"""
order by stddev_pop() on columns of table "addresses"
"""
input addresses_stddev_pop_order_by {
  address_id: order_by
}

"""aggregate stddev_samp on columns"""
type addresses_stddev_samp_fields {
  address_id: Float
}

"""
order by stddev_samp() on columns of table "addresses"
"""
input addresses_stddev_samp_order_by {
  address_id: order_by
}

"""aggregate sum on columns"""
type addresses_sum_fields {
  address_id: bigint
}

"""
order by sum() on columns of table "addresses"
"""
input addresses_sum_order_by {
  address_id: order_by
}

"""
update columns of table "addresses"
"""
enum addresses_update_column {
  """column name"""
  address_details

  """column name"""
  address_id
}

"""aggregate var_pop on columns"""
type addresses_var_pop_fields {
  address_id: Float
}

"""
order by var_pop() on columns of table "addresses"
"""
input addresses_var_pop_order_by {
  address_id: order_by
}

"""aggregate var_samp on columns"""
type addresses_var_samp_fields {
  address_id: Float
}

"""
order by var_samp() on columns of table "addresses"
"""
input addresses_var_samp_order_by {
  address_id: order_by
}

"""aggregate variance on columns"""
type addresses_variance_fields {
  address_id: Float
}

"""
order by variance() on columns of table "addresses"
"""
input addresses_variance_order_by {
  address_id: order_by
}

scalar bigint

"""
expression to compare columns of type bigint. All fields are combined with logical 'AND'.
"""
input bigint_comparison_exp {
  _eq: bigint
  _gt: bigint
  _gte: bigint
  _in: [bigint!]
  _is_null: Boolean
  _lt: bigint
  _lte: bigint
  _neq: bigint
  _nin: [bigint!]
}

"""
columns and relationships of "customer_addresses"
"""
type customer_addresses {
  """An object relationship"""
  address: addresses!
  address_id: bigint!

  """An object relationship"""
  customer: customers!
  customer_id: bigint!
  date_from: timestamptz
  date_to: timestamptz
}

"""
aggregated selection of "customer_addresses"
"""
type customer_addresses_aggregate {
  aggregate: customer_addresses_aggregate_fields
  nodes: [customer_addresses!]!
}

"""
aggregate fields of "customer_addresses"
"""
type customer_addresses_aggregate_fields {
  avg: customer_addresses_avg_fields
  count(columns: [customer_addresses_select_column!], distinct: Boolean): Int
  max: customer_addresses_max_fields
  min: customer_addresses_min_fields
  stddev: customer_addresses_stddev_fields
  stddev_pop: customer_addresses_stddev_pop_fields
  stddev_samp: customer_addresses_stddev_samp_fields
  sum: customer_addresses_sum_fields
  var_pop: customer_addresses_var_pop_fields
  var_samp: customer_addresses_var_samp_fields
  variance: customer_addresses_variance_fields
}

"""
order by aggregate values of table "customer_addresses"
"""
input customer_addresses_aggregate_order_by {
  avg: customer_addresses_avg_order_by
  count: order_by
  max: customer_addresses_max_order_by
  min: customer_addresses_min_order_by
  stddev: customer_addresses_stddev_order_by
  stddev_pop: customer_addresses_stddev_pop_order_by
  stddev_samp: customer_addresses_stddev_samp_order_by
  sum: customer_addresses_sum_order_by
  var_pop: customer_addresses_var_pop_order_by
  var_samp: customer_addresses_var_samp_order_by
  variance: customer_addresses_variance_order_by
}

"""
input type for inserting array relation for remote table "customer_addresses"
"""
input customer_addresses_arr_rel_insert_input {
  data: [customer_addresses_insert_input!]!
  on_conflict: customer_addresses_on_conflict
}

"""aggregate avg on columns"""
type customer_addresses_avg_fields {
  address_id: Float
  customer_id: Float
}

"""
order by avg() on columns of table "customer_addresses"
"""
input customer_addresses_avg_order_by {
  address_id: order_by
  customer_id: order_by
}

"""
Boolean expression to filter rows from the table "customer_addresses". All fields are combined with a logical 'AND'.
"""
input customer_addresses_bool_exp {
  _and: [customer_addresses_bool_exp]
  _not: customer_addresses_bool_exp
  _or: [customer_addresses_bool_exp]
  address: addresses_bool_exp
  address_id: bigint_comparison_exp
  customer: customers_bool_exp
  customer_id: bigint_comparison_exp
  date_from: timestamptz_comparison_exp
  date_to: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "customer_addresses"
"""
enum customer_addresses_constraint {
  """unique or primary key constraint"""
  idx_21833_sqlite_autoindex_customer_addresses_1
}

"""
input type for incrementing integer column in table "customer_addresses"
"""
input customer_addresses_inc_input {
  address_id: bigint
  customer_id: bigint
}

"""
input type for inserting data into table "customer_addresses"
"""
input customer_addresses_insert_input {
  address: addresses_obj_rel_insert_input
  address_id: bigint
  customer: customers_obj_rel_insert_input
  customer_id: bigint
  date_from: timestamptz
  date_to: timestamptz
}

"""aggregate max on columns"""
type customer_addresses_max_fields {
  address_id: bigint
  customer_id: bigint
  date_from: timestamptz
  date_to: timestamptz
}

"""
order by max() on columns of table "customer_addresses"
"""
input customer_addresses_max_order_by {
  address_id: order_by
  customer_id: order_by
  date_from: order_by
  date_to: order_by
}

"""aggregate min on columns"""
type customer_addresses_min_fields {
  address_id: bigint
  customer_id: bigint
  date_from: timestamptz
  date_to: timestamptz
}

"""
order by min() on columns of table "customer_addresses"
"""
input customer_addresses_min_order_by {
  address_id: order_by
  customer_id: order_by
  date_from: order_by
  date_to: order_by
}

"""
response of any mutation on the table "customer_addresses"
"""
type customer_addresses_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [customer_addresses!]!
}

"""
input type for inserting object relation for remote table "customer_addresses"
"""
input customer_addresses_obj_rel_insert_input {
  data: customer_addresses_insert_input!
  on_conflict: customer_addresses_on_conflict
}

"""
on conflict condition type for table "customer_addresses"
"""
input customer_addresses_on_conflict {
  constraint: customer_addresses_constraint!
  update_columns: [customer_addresses_update_column!]!
  where: customer_addresses_bool_exp
}

"""
ordering options when selecting data from "customer_addresses"
"""
input customer_addresses_order_by {
  address: addresses_order_by
  address_id: order_by
  customer: customers_order_by
  customer_id: order_by
  date_from: order_by
  date_to: order_by
}

"""
primary key columns input for table: "customer_addresses"
"""
input customer_addresses_pk_columns_input {
  address_id: bigint!
  customer_id: bigint!
}

"""
select columns of table "customer_addresses"
"""
enum customer_addresses_select_column {
  """column name"""
  address_id

  """column name"""
  customer_id

  """column name"""
  date_from

  """column name"""
  date_to
}

"""
input type for updating data in table "customer_addresses"
"""
input customer_addresses_set_input {
  address_id: bigint
  customer_id: bigint
  date_from: timestamptz
  date_to: timestamptz
}

"""aggregate stddev on columns"""
type customer_addresses_stddev_fields {
  address_id: Float
  customer_id: Float
}

"""
order by stddev() on columns of table "customer_addresses"
"""
input customer_addresses_stddev_order_by {
  address_id: order_by
  customer_id: order_by
}

"""aggregate stddev_pop on columns"""
type customer_addresses_stddev_pop_fields {
  address_id: Float
  customer_id: Float
}

"""
order by stddev_pop() on columns of table "customer_addresses"
"""
input customer_addresses_stddev_pop_order_by {
  address_id: order_by
  customer_id: order_by
}

"""aggregate stddev_samp on columns"""
type customer_addresses_stddev_samp_fields {
  address_id: Float
  customer_id: Float
}

"""
order by stddev_samp() on columns of table "customer_addresses"
"""
input customer_addresses_stddev_samp_order_by {
  address_id: order_by
  customer_id: order_by
}

"""aggregate sum on columns"""
type customer_addresses_sum_fields {
  address_id: bigint
  customer_id: bigint
}

"""
order by sum() on columns of table "customer_addresses"
"""
input customer_addresses_sum_order_by {
  address_id: order_by
  customer_id: order_by
}

"""
update columns of table "customer_addresses"
"""
enum customer_addresses_update_column {
  """column name"""
  address_id

  """column name"""
  customer_id

  """column name"""
  date_from

  """column name"""
  date_to
}

"""aggregate var_pop on columns"""
type customer_addresses_var_pop_fields {
  address_id: Float
  customer_id: Float
}

"""
order by var_pop() on columns of table "customer_addresses"
"""
input customer_addresses_var_pop_order_by {
  address_id: order_by
  customer_id: order_by
}

"""aggregate var_samp on columns"""
type customer_addresses_var_samp_fields {
  address_id: Float
  customer_id: Float
}

"""
order by var_samp() on columns of table "customer_addresses"
"""
input customer_addresses_var_samp_order_by {
  address_id: order_by
  customer_id: order_by
}

"""aggregate variance on columns"""
type customer_addresses_variance_fields {
  address_id: Float
  customer_id: Float
}

"""
order by variance() on columns of table "customer_addresses"
"""
input customer_addresses_variance_order_by {
  address_id: order_by
  customer_id: order_by
}

"""
columns and relationships of "customer_orders"
"""
type customer_orders {
  """An object relationship"""
  customer: customers
  customer_id: bigint
  order_date: timestamptz
  order_id: bigint!

  """An array relationship"""
  order_items(
    """distinct select on columns"""
    distinct_on: [order_items_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [order_items_order_by!]

    """filter the rows returned"""
    where: order_items_bool_exp
  ): [order_items!]!

  """An aggregated array relationship"""
  order_items_aggregate(
    """distinct select on columns"""
    distinct_on: [order_items_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [order_items_order_by!]

    """filter the rows returned"""
    where: order_items_bool_exp
  ): order_items_aggregate!
  order_status_code: String
}

"""
aggregated selection of "customer_orders"
"""
type customer_orders_aggregate {
  aggregate: customer_orders_aggregate_fields
  nodes: [customer_orders!]!
}

"""
aggregate fields of "customer_orders"
"""
type customer_orders_aggregate_fields {
  avg: customer_orders_avg_fields
  count(columns: [customer_orders_select_column!], distinct: Boolean): Int
  max: customer_orders_max_fields
  min: customer_orders_min_fields
  stddev: customer_orders_stddev_fields
  stddev_pop: customer_orders_stddev_pop_fields
  stddev_samp: customer_orders_stddev_samp_fields
  sum: customer_orders_sum_fields
  var_pop: customer_orders_var_pop_fields
  var_samp: customer_orders_var_samp_fields
  variance: customer_orders_variance_fields
}

"""
order by aggregate values of table "customer_orders"
"""
input customer_orders_aggregate_order_by {
  avg: customer_orders_avg_order_by
  count: order_by
  max: customer_orders_max_order_by
  min: customer_orders_min_order_by
  stddev: customer_orders_stddev_order_by
  stddev_pop: customer_orders_stddev_pop_order_by
  stddev_samp: customer_orders_stddev_samp_order_by
  sum: customer_orders_sum_order_by
  var_pop: customer_orders_var_pop_order_by
  var_samp: customer_orders_var_samp_order_by
  variance: customer_orders_variance_order_by
}

"""
input type for inserting array relation for remote table "customer_orders"
"""
input customer_orders_arr_rel_insert_input {
  data: [customer_orders_insert_input!]!
  on_conflict: customer_orders_on_conflict
}

"""aggregate avg on columns"""
type customer_orders_avg_fields {
  customer_id: Float
  order_id: Float
}

"""
order by avg() on columns of table "customer_orders"
"""
input customer_orders_avg_order_by {
  customer_id: order_by
  order_id: order_by
}

"""
Boolean expression to filter rows from the table "customer_orders". All fields are combined with a logical 'AND'.
"""
input customer_orders_bool_exp {
  _and: [customer_orders_bool_exp]
  _not: customer_orders_bool_exp
  _or: [customer_orders_bool_exp]
  customer: customers_bool_exp
  customer_id: bigint_comparison_exp
  order_date: timestamptz_comparison_exp
  order_id: bigint_comparison_exp
  order_items: order_items_bool_exp
  order_status_code: String_comparison_exp
}

"""
unique or primary key constraints on table "customer_orders"
"""
enum customer_orders_constraint {
  """unique or primary key constraint"""
  idx_21836_customer_orders_pkey
}

"""
input type for incrementing integer column in table "customer_orders"
"""
input customer_orders_inc_input {
  customer_id: bigint
  order_id: bigint
}

"""
input type for inserting data into table "customer_orders"
"""
input customer_orders_insert_input {
  customer: customers_obj_rel_insert_input
  customer_id: bigint
  order_date: timestamptz
  order_id: bigint
  order_items: order_items_arr_rel_insert_input
  order_status_code: String
}

"""aggregate max on columns"""
type customer_orders_max_fields {
  customer_id: bigint
  order_date: timestamptz
  order_id: bigint
  order_status_code: String
}

"""
order by max() on columns of table "customer_orders"
"""
input customer_orders_max_order_by {
  customer_id: order_by
  order_date: order_by
  order_id: order_by
  order_status_code: order_by
}

"""aggregate min on columns"""
type customer_orders_min_fields {
  customer_id: bigint
  order_date: timestamptz
  order_id: bigint
  order_status_code: String
}

"""
order by min() on columns of table "customer_orders"
"""
input customer_orders_min_order_by {
  customer_id: order_by
  order_date: order_by
  order_id: order_by
  order_status_code: order_by
}

"""
response of any mutation on the table "customer_orders"
"""
type customer_orders_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [customer_orders!]!
}

"""
input type for inserting object relation for remote table "customer_orders"
"""
input customer_orders_obj_rel_insert_input {
  data: customer_orders_insert_input!
  on_conflict: customer_orders_on_conflict
}

"""
on conflict condition type for table "customer_orders"
"""
input customer_orders_on_conflict {
  constraint: customer_orders_constraint!
  update_columns: [customer_orders_update_column!]!
  where: customer_orders_bool_exp
}

"""
ordering options when selecting data from "customer_orders"
"""
input customer_orders_order_by {
  customer: customers_order_by
  customer_id: order_by
  order_date: order_by
  order_id: order_by
  order_items_aggregate: order_items_aggregate_order_by
  order_status_code: order_by
}

"""
primary key columns input for table: "customer_orders"
"""
input customer_orders_pk_columns_input {
  order_id: bigint!
}

"""
select columns of table "customer_orders"
"""
enum customer_orders_select_column {
  """column name"""
  customer_id

  """column name"""
  order_date

  """column name"""
  order_id

  """column name"""
  order_status_code
}

"""
input type for updating data in table "customer_orders"
"""
input customer_orders_set_input {
  customer_id: bigint
  order_date: timestamptz
  order_id: bigint
  order_status_code: String
}

"""aggregate stddev on columns"""
type customer_orders_stddev_fields {
  customer_id: Float
  order_id: Float
}

"""
order by stddev() on columns of table "customer_orders"
"""
input customer_orders_stddev_order_by {
  customer_id: order_by
  order_id: order_by
}

"""aggregate stddev_pop on columns"""
type customer_orders_stddev_pop_fields {
  customer_id: Float
  order_id: Float
}

"""
order by stddev_pop() on columns of table "customer_orders"
"""
input customer_orders_stddev_pop_order_by {
  customer_id: order_by
  order_id: order_by
}

"""aggregate stddev_samp on columns"""
type customer_orders_stddev_samp_fields {
  customer_id: Float
  order_id: Float
}

"""
order by stddev_samp() on columns of table "customer_orders"
"""
input customer_orders_stddev_samp_order_by {
  customer_id: order_by
  order_id: order_by
}

"""aggregate sum on columns"""
type customer_orders_sum_fields {
  customer_id: bigint
  order_id: bigint
}

"""
order by sum() on columns of table "customer_orders"
"""
input customer_orders_sum_order_by {
  customer_id: order_by
  order_id: order_by
}

"""
update columns of table "customer_orders"
"""
enum customer_orders_update_column {
  """column name"""
  customer_id

  """column name"""
  order_date

  """column name"""
  order_id

  """column name"""
  order_status_code
}

"""aggregate var_pop on columns"""
type customer_orders_var_pop_fields {
  customer_id: Float
  order_id: Float
}

"""
order by var_pop() on columns of table "customer_orders"
"""
input customer_orders_var_pop_order_by {
  customer_id: order_by
  order_id: order_by
}

"""aggregate var_samp on columns"""
type customer_orders_var_samp_fields {
  customer_id: Float
  order_id: Float
}

"""
order by var_samp() on columns of table "customer_orders"
"""
input customer_orders_var_samp_order_by {
  customer_id: order_by
  order_id: order_by
}

"""aggregate variance on columns"""
type customer_orders_variance_fields {
  customer_id: Float
  order_id: Float
}

"""
order by variance() on columns of table "customer_orders"
"""
input customer_orders_variance_order_by {
  customer_id: order_by
  order_id: order_by
}

"""
columns and relationships of "customers"
"""
type customers {
  customer_address: String

  """An array relationship"""
  customer_addresses(
    """distinct select on columns"""
    distinct_on: [customer_addresses_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [customer_addresses_order_by!]

    """filter the rows returned"""
    where: customer_addresses_bool_exp
  ): [customer_addresses!]!

  """An aggregated array relationship"""
  customer_addresses_aggregate(
    """distinct select on columns"""
    distinct_on: [customer_addresses_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [customer_addresses_order_by!]

    """filter the rows returned"""
    where: customer_addresses_bool_exp
  ): customer_addresses_aggregate!
  customer_code: String
  customer_email: String
  customer_id: bigint!
  customer_name: String

  """An array relationship"""
  customer_orders(
    """distinct select on columns"""
    distinct_on: [customer_orders_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [customer_orders_order_by!]

    """filter the rows returned"""
    where: customer_orders_bool_exp
  ): [customer_orders!]!

  """An aggregated array relationship"""
  customer_orders_aggregate(
    """distinct select on columns"""
    distinct_on: [customer_orders_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [customer_orders_order_by!]

    """filter the rows returned"""
    where: customer_orders_bool_exp
  ): customer_orders_aggregate!
  customer_phone: String
  payment_method_code: String
}

"""
aggregated selection of "customers"
"""
type customers_aggregate {
  aggregate: customers_aggregate_fields
  nodes: [customers!]!
}

"""
aggregate fields of "customers"
"""
type customers_aggregate_fields {
  avg: customers_avg_fields
  count(columns: [customers_select_column!], distinct: Boolean): Int
  max: customers_max_fields
  min: customers_min_fields
  stddev: customers_stddev_fields
  stddev_pop: customers_stddev_pop_fields
  stddev_samp: customers_stddev_samp_fields
  sum: customers_sum_fields
  var_pop: customers_var_pop_fields
  var_samp: customers_var_samp_fields
  variance: customers_variance_fields
}

"""
order by aggregate values of table "customers"
"""
input customers_aggregate_order_by {
  avg: customers_avg_order_by
  count: order_by
  max: customers_max_order_by
  min: customers_min_order_by
  stddev: customers_stddev_order_by
  stddev_pop: customers_stddev_pop_order_by
  stddev_samp: customers_stddev_samp_order_by
  sum: customers_sum_order_by
  var_pop: customers_var_pop_order_by
  var_samp: customers_var_samp_order_by
  variance: customers_variance_order_by
}

"""
input type for inserting array relation for remote table "customers"
"""
input customers_arr_rel_insert_input {
  data: [customers_insert_input!]!
  on_conflict: customers_on_conflict
}

"""aggregate avg on columns"""
type customers_avg_fields {
  customer_id: Float
}

"""
order by avg() on columns of table "customers"
"""
input customers_avg_order_by {
  customer_id: order_by
}

"""
Boolean expression to filter rows from the table "customers". All fields are combined with a logical 'AND'.
"""
input customers_bool_exp {
  _and: [customers_bool_exp]
  _not: customers_bool_exp
  _or: [customers_bool_exp]
  customer_address: String_comparison_exp
  customer_addresses: customer_addresses_bool_exp
  customer_code: String_comparison_exp
  customer_email: String_comparison_exp
  customer_id: bigint_comparison_exp
  customer_name: String_comparison_exp
  customer_orders: customer_orders_bool_exp
  customer_phone: String_comparison_exp
  payment_method_code: String_comparison_exp
}

"""
unique or primary key constraints on table "customers"
"""
enum customers_constraint {
  """unique or primary key constraint"""
  idx_21818_customers_pkey
}

"""
input type for incrementing integer column in table "customers"
"""
input customers_inc_input {
  customer_id: bigint
}

"""
input type for inserting data into table "customers"
"""
input customers_insert_input {
  customer_address: String
  customer_addresses: customer_addresses_arr_rel_insert_input
  customer_code: String
  customer_email: String
  customer_id: bigint
  customer_name: String
  customer_orders: customer_orders_arr_rel_insert_input
  customer_phone: String
  payment_method_code: String
}

"""aggregate max on columns"""
type customers_max_fields {
  customer_address: String
  customer_code: String
  customer_email: String
  customer_id: bigint
  customer_name: String
  customer_phone: String
  payment_method_code: String
}

"""
order by max() on columns of table "customers"
"""
input customers_max_order_by {
  customer_address: order_by
  customer_code: order_by
  customer_email: order_by
  customer_id: order_by
  customer_name: order_by
  customer_phone: order_by
  payment_method_code: order_by
}

"""aggregate min on columns"""
type customers_min_fields {
  customer_address: String
  customer_code: String
  customer_email: String
  customer_id: bigint
  customer_name: String
  customer_phone: String
  payment_method_code: String
}

"""
order by min() on columns of table "customers"
"""
input customers_min_order_by {
  customer_address: order_by
  customer_code: order_by
  customer_email: order_by
  customer_id: order_by
  customer_name: order_by
  customer_phone: order_by
  payment_method_code: order_by
}

"""
response of any mutation on the table "customers"
"""
type customers_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [customers!]!
}

"""
input type for inserting object relation for remote table "customers"
"""
input customers_obj_rel_insert_input {
  data: customers_insert_input!
  on_conflict: customers_on_conflict
}

"""
on conflict condition type for table "customers"
"""
input customers_on_conflict {
  constraint: customers_constraint!
  update_columns: [customers_update_column!]!
  where: customers_bool_exp
}

"""
ordering options when selecting data from "customers"
"""
input customers_order_by {
  customer_address: order_by
  customer_addresses_aggregate: customer_addresses_aggregate_order_by
  customer_code: order_by
  customer_email: order_by
  customer_id: order_by
  customer_name: order_by
  customer_orders_aggregate: customer_orders_aggregate_order_by
  customer_phone: order_by
  payment_method_code: order_by
}

"""
primary key columns input for table: "customers"
"""
input customers_pk_columns_input {
  customer_id: bigint!
}

"""
select columns of table "customers"
"""
enum customers_select_column {
  """column name"""
  customer_address

  """column name"""
  customer_code

  """column name"""
  customer_email

  """column name"""
  customer_id

  """column name"""
  customer_name

  """column name"""
  customer_phone

  """column name"""
  payment_method_code
}

"""
input type for updating data in table "customers"
"""
input customers_set_input {
  customer_address: String
  customer_code: String
  customer_email: String
  customer_id: bigint
  customer_name: String
  customer_phone: String
  payment_method_code: String
}

"""aggregate stddev on columns"""
type customers_stddev_fields {
  customer_id: Float
}

"""
order by stddev() on columns of table "customers"
"""
input customers_stddev_order_by {
  customer_id: order_by
}

"""aggregate stddev_pop on columns"""
type customers_stddev_pop_fields {
  customer_id: Float
}

"""
order by stddev_pop() on columns of table "customers"
"""
input customers_stddev_pop_order_by {
  customer_id: order_by
}

"""aggregate stddev_samp on columns"""
type customers_stddev_samp_fields {
  customer_id: Float
}

"""
order by stddev_samp() on columns of table "customers"
"""
input customers_stddev_samp_order_by {
  customer_id: order_by
}

"""aggregate sum on columns"""
type customers_sum_fields {
  customer_id: bigint
}

"""
order by sum() on columns of table "customers"
"""
input customers_sum_order_by {
  customer_id: order_by
}

"""
update columns of table "customers"
"""
enum customers_update_column {
  """column name"""
  customer_address

  """column name"""
  customer_code

  """column name"""
  customer_email

  """column name"""
  customer_id

  """column name"""
  customer_name

  """column name"""
  customer_phone

  """column name"""
  payment_method_code
}

"""aggregate var_pop on columns"""
type customers_var_pop_fields {
  customer_id: Float
}

"""
order by var_pop() on columns of table "customers"
"""
input customers_var_pop_order_by {
  customer_id: order_by
}

"""aggregate var_samp on columns"""
type customers_var_samp_fields {
  customer_id: Float
}

"""
order by var_samp() on columns of table "customers"
"""
input customers_var_samp_order_by {
  customer_id: order_by
}

"""aggregate variance on columns"""
type customers_variance_fields {
  customer_id: Float
}

"""
order by variance() on columns of table "customers"
"""
input customers_variance_order_by {
  customer_id: order_by
}

"""
columns and relationships of "department_store_chain"
"""
type department_store_chain {
  """An array relationship"""
  department_stores(
    """distinct select on columns"""
    distinct_on: [department_stores_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [department_stores_order_by!]

    """filter the rows returned"""
    where: department_stores_bool_exp
  ): [department_stores!]!

  """An aggregated array relationship"""
  department_stores_aggregate(
    """distinct select on columns"""
    distinct_on: [department_stores_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [department_stores_order_by!]

    """filter the rows returned"""
    where: department_stores_bool_exp
  ): department_stores_aggregate!
  dept_store_chain_id: bigint!
  dept_store_chain_name: String
}

"""
aggregated selection of "department_store_chain"
"""
type department_store_chain_aggregate {
  aggregate: department_store_chain_aggregate_fields
  nodes: [department_store_chain!]!
}

"""
aggregate fields of "department_store_chain"
"""
type department_store_chain_aggregate_fields {
  avg: department_store_chain_avg_fields
  count(columns: [department_store_chain_select_column!], distinct: Boolean): Int
  max: department_store_chain_max_fields
  min: department_store_chain_min_fields
  stddev: department_store_chain_stddev_fields
  stddev_pop: department_store_chain_stddev_pop_fields
  stddev_samp: department_store_chain_stddev_samp_fields
  sum: department_store_chain_sum_fields
  var_pop: department_store_chain_var_pop_fields
  var_samp: department_store_chain_var_samp_fields
  variance: department_store_chain_variance_fields
}

"""
order by aggregate values of table "department_store_chain"
"""
input department_store_chain_aggregate_order_by {
  avg: department_store_chain_avg_order_by
  count: order_by
  max: department_store_chain_max_order_by
  min: department_store_chain_min_order_by
  stddev: department_store_chain_stddev_order_by
  stddev_pop: department_store_chain_stddev_pop_order_by
  stddev_samp: department_store_chain_stddev_samp_order_by
  sum: department_store_chain_sum_order_by
  var_pop: department_store_chain_var_pop_order_by
  var_samp: department_store_chain_var_samp_order_by
  variance: department_store_chain_variance_order_by
}

"""
input type for inserting array relation for remote table "department_store_chain"
"""
input department_store_chain_arr_rel_insert_input {
  data: [department_store_chain_insert_input!]!
  on_conflict: department_store_chain_on_conflict
}

"""aggregate avg on columns"""
type department_store_chain_avg_fields {
  dept_store_chain_id: Float
}

"""
order by avg() on columns of table "department_store_chain"
"""
input department_store_chain_avg_order_by {
  dept_store_chain_id: order_by
}

"""
Boolean expression to filter rows from the table "department_store_chain". All fields are combined with a logical 'AND'.
"""
input department_store_chain_bool_exp {
  _and: [department_store_chain_bool_exp]
  _not: department_store_chain_bool_exp
  _or: [department_store_chain_bool_exp]
  department_stores: department_stores_bool_exp
  dept_store_chain_id: bigint_comparison_exp
  dept_store_chain_name: String_comparison_exp
}

"""
unique or primary key constraints on table "department_store_chain"
"""
enum department_store_chain_constraint {
  """unique or primary key constraint"""
  idx_21812_department_store_chain_pkey
}

"""
input type for incrementing integer column in table "department_store_chain"
"""
input department_store_chain_inc_input {
  dept_store_chain_id: bigint
}

"""
input type for inserting data into table "department_store_chain"
"""
input department_store_chain_insert_input {
  department_stores: department_stores_arr_rel_insert_input
  dept_store_chain_id: bigint
  dept_store_chain_name: String
}

"""aggregate max on columns"""
type department_store_chain_max_fields {
  dept_store_chain_id: bigint
  dept_store_chain_name: String
}

"""
order by max() on columns of table "department_store_chain"
"""
input department_store_chain_max_order_by {
  dept_store_chain_id: order_by
  dept_store_chain_name: order_by
}

"""aggregate min on columns"""
type department_store_chain_min_fields {
  dept_store_chain_id: bigint
  dept_store_chain_name: String
}

"""
order by min() on columns of table "department_store_chain"
"""
input department_store_chain_min_order_by {
  dept_store_chain_id: order_by
  dept_store_chain_name: order_by
}

"""
response of any mutation on the table "department_store_chain"
"""
type department_store_chain_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [department_store_chain!]!
}

"""
input type for inserting object relation for remote table "department_store_chain"
"""
input department_store_chain_obj_rel_insert_input {
  data: department_store_chain_insert_input!
  on_conflict: department_store_chain_on_conflict
}

"""
on conflict condition type for table "department_store_chain"
"""
input department_store_chain_on_conflict {
  constraint: department_store_chain_constraint!
  update_columns: [department_store_chain_update_column!]!
  where: department_store_chain_bool_exp
}

"""
ordering options when selecting data from "department_store_chain"
"""
input department_store_chain_order_by {
  department_stores_aggregate: department_stores_aggregate_order_by
  dept_store_chain_id: order_by
  dept_store_chain_name: order_by
}

"""
primary key columns input for table: "department_store_chain"
"""
input department_store_chain_pk_columns_input {
  dept_store_chain_id: bigint!
}

"""
select columns of table "department_store_chain"
"""
enum department_store_chain_select_column {
  """column name"""
  dept_store_chain_id

  """column name"""
  dept_store_chain_name
}

"""
input type for updating data in table "department_store_chain"
"""
input department_store_chain_set_input {
  dept_store_chain_id: bigint
  dept_store_chain_name: String
}

"""aggregate stddev on columns"""
type department_store_chain_stddev_fields {
  dept_store_chain_id: Float
}

"""
order by stddev() on columns of table "department_store_chain"
"""
input department_store_chain_stddev_order_by {
  dept_store_chain_id: order_by
}

"""aggregate stddev_pop on columns"""
type department_store_chain_stddev_pop_fields {
  dept_store_chain_id: Float
}

"""
order by stddev_pop() on columns of table "department_store_chain"
"""
input department_store_chain_stddev_pop_order_by {
  dept_store_chain_id: order_by
}

"""aggregate stddev_samp on columns"""
type department_store_chain_stddev_samp_fields {
  dept_store_chain_id: Float
}

"""
order by stddev_samp() on columns of table "department_store_chain"
"""
input department_store_chain_stddev_samp_order_by {
  dept_store_chain_id: order_by
}

"""aggregate sum on columns"""
type department_store_chain_sum_fields {
  dept_store_chain_id: bigint
}

"""
order by sum() on columns of table "department_store_chain"
"""
input department_store_chain_sum_order_by {
  dept_store_chain_id: order_by
}

"""
update columns of table "department_store_chain"
"""
enum department_store_chain_update_column {
  """column name"""
  dept_store_chain_id

  """column name"""
  dept_store_chain_name
}

"""aggregate var_pop on columns"""
type department_store_chain_var_pop_fields {
  dept_store_chain_id: Float
}

"""
order by var_pop() on columns of table "department_store_chain"
"""
input department_store_chain_var_pop_order_by {
  dept_store_chain_id: order_by
}

"""aggregate var_samp on columns"""
type department_store_chain_var_samp_fields {
  dept_store_chain_id: Float
}

"""
order by var_samp() on columns of table "department_store_chain"
"""
input department_store_chain_var_samp_order_by {
  dept_store_chain_id: order_by
}

"""aggregate variance on columns"""
type department_store_chain_variance_fields {
  dept_store_chain_id: Float
}

"""
order by variance() on columns of table "department_store_chain"
"""
input department_store_chain_variance_order_by {
  dept_store_chain_id: order_by
}

"""
columns and relationships of "department_stores"
"""
type department_stores {
  """An object relationship"""
  department_store_chain: department_store_chain

  """An array relationship"""
  departments(
    """distinct select on columns"""
    distinct_on: [departments_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [departments_order_by!]

    """filter the rows returned"""
    where: departments_bool_exp
  ): [departments!]!

  """An aggregated array relationship"""
  departments_aggregate(
    """distinct select on columns"""
    distinct_on: [departments_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [departments_order_by!]

    """filter the rows returned"""
    where: departments_bool_exp
  ): departments_aggregate!
  dept_store_chain_id: bigint
  dept_store_id: bigint!
  store_address: String
  store_email: String
  store_name: String
  store_phone: String
}

"""
aggregated selection of "department_stores"
"""
type department_stores_aggregate {
  aggregate: department_stores_aggregate_fields
  nodes: [department_stores!]!
}

"""
aggregate fields of "department_stores"
"""
type department_stores_aggregate_fields {
  avg: department_stores_avg_fields
  count(columns: [department_stores_select_column!], distinct: Boolean): Int
  max: department_stores_max_fields
  min: department_stores_min_fields
  stddev: department_stores_stddev_fields
  stddev_pop: department_stores_stddev_pop_fields
  stddev_samp: department_stores_stddev_samp_fields
  sum: department_stores_sum_fields
  var_pop: department_stores_var_pop_fields
  var_samp: department_stores_var_samp_fields
  variance: department_stores_variance_fields
}

"""
order by aggregate values of table "department_stores"
"""
input department_stores_aggregate_order_by {
  avg: department_stores_avg_order_by
  count: order_by
  max: department_stores_max_order_by
  min: department_stores_min_order_by
  stddev: department_stores_stddev_order_by
  stddev_pop: department_stores_stddev_pop_order_by
  stddev_samp: department_stores_stddev_samp_order_by
  sum: department_stores_sum_order_by
  var_pop: department_stores_var_pop_order_by
  var_samp: department_stores_var_samp_order_by
  variance: department_stores_variance_order_by
}

"""
input type for inserting array relation for remote table "department_stores"
"""
input department_stores_arr_rel_insert_input {
  data: [department_stores_insert_input!]!
  on_conflict: department_stores_on_conflict
}

"""aggregate avg on columns"""
type department_stores_avg_fields {
  dept_store_chain_id: Float
  dept_store_id: Float
}

"""
order by avg() on columns of table "department_stores"
"""
input department_stores_avg_order_by {
  dept_store_chain_id: order_by
  dept_store_id: order_by
}

"""
Boolean expression to filter rows from the table "department_stores". All fields are combined with a logical 'AND'.
"""
input department_stores_bool_exp {
  _and: [department_stores_bool_exp]
  _not: department_stores_bool_exp
  _or: [department_stores_bool_exp]
  department_store_chain: department_store_chain_bool_exp
  departments: departments_bool_exp
  dept_store_chain_id: bigint_comparison_exp
  dept_store_id: bigint_comparison_exp
  store_address: String_comparison_exp
  store_email: String_comparison_exp
  store_name: String_comparison_exp
  store_phone: String_comparison_exp
}

"""
unique or primary key constraints on table "department_stores"
"""
enum department_stores_constraint {
  """unique or primary key constraint"""
  idx_21842_department_stores_pkey
}

"""
input type for incrementing integer column in table "department_stores"
"""
input department_stores_inc_input {
  dept_store_chain_id: bigint
  dept_store_id: bigint
}

"""
input type for inserting data into table "department_stores"
"""
input department_stores_insert_input {
  department_store_chain: department_store_chain_obj_rel_insert_input
  departments: departments_arr_rel_insert_input
  dept_store_chain_id: bigint
  dept_store_id: bigint
  store_address: String
  store_email: String
  store_name: String
  store_phone: String
}

"""aggregate max on columns"""
type department_stores_max_fields {
  dept_store_chain_id: bigint
  dept_store_id: bigint
  store_address: String
  store_email: String
  store_name: String
  store_phone: String
}

"""
order by max() on columns of table "department_stores"
"""
input department_stores_max_order_by {
  dept_store_chain_id: order_by
  dept_store_id: order_by
  store_address: order_by
  store_email: order_by
  store_name: order_by
  store_phone: order_by
}

"""aggregate min on columns"""
type department_stores_min_fields {
  dept_store_chain_id: bigint
  dept_store_id: bigint
  store_address: String
  store_email: String
  store_name: String
  store_phone: String
}

"""
order by min() on columns of table "department_stores"
"""
input department_stores_min_order_by {
  dept_store_chain_id: order_by
  dept_store_id: order_by
  store_address: order_by
  store_email: order_by
  store_name: order_by
  store_phone: order_by
}

"""
response of any mutation on the table "department_stores"
"""
type department_stores_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [department_stores!]!
}

"""
input type for inserting object relation for remote table "department_stores"
"""
input department_stores_obj_rel_insert_input {
  data: department_stores_insert_input!
  on_conflict: department_stores_on_conflict
}

"""
on conflict condition type for table "department_stores"
"""
input department_stores_on_conflict {
  constraint: department_stores_constraint!
  update_columns: [department_stores_update_column!]!
  where: department_stores_bool_exp
}

"""
ordering options when selecting data from "department_stores"
"""
input department_stores_order_by {
  department_store_chain: department_store_chain_order_by
  departments_aggregate: departments_aggregate_order_by
  dept_store_chain_id: order_by
  dept_store_id: order_by
  store_address: order_by
  store_email: order_by
  store_name: order_by
  store_phone: order_by
}

"""
primary key columns input for table: "department_stores"
"""
input department_stores_pk_columns_input {
  dept_store_id: bigint!
}

"""
select columns of table "department_stores"
"""
enum department_stores_select_column {
  """column name"""
  dept_store_chain_id

  """column name"""
  dept_store_id

  """column name"""
  store_address

  """column name"""
  store_email

  """column name"""
  store_name

  """column name"""
  store_phone
}

"""
input type for updating data in table "department_stores"
"""
input department_stores_set_input {
  dept_store_chain_id: bigint
  dept_store_id: bigint
  store_address: String
  store_email: String
  store_name: String
  store_phone: String
}

"""aggregate stddev on columns"""
type department_stores_stddev_fields {
  dept_store_chain_id: Float
  dept_store_id: Float
}

"""
order by stddev() on columns of table "department_stores"
"""
input department_stores_stddev_order_by {
  dept_store_chain_id: order_by
  dept_store_id: order_by
}

"""aggregate stddev_pop on columns"""
type department_stores_stddev_pop_fields {
  dept_store_chain_id: Float
  dept_store_id: Float
}

"""
order by stddev_pop() on columns of table "department_stores"
"""
input department_stores_stddev_pop_order_by {
  dept_store_chain_id: order_by
  dept_store_id: order_by
}

"""aggregate stddev_samp on columns"""
type department_stores_stddev_samp_fields {
  dept_store_chain_id: Float
  dept_store_id: Float
}

"""
order by stddev_samp() on columns of table "department_stores"
"""
input department_stores_stddev_samp_order_by {
  dept_store_chain_id: order_by
  dept_store_id: order_by
}

"""aggregate sum on columns"""
type department_stores_sum_fields {
  dept_store_chain_id: bigint
  dept_store_id: bigint
}

"""
order by sum() on columns of table "department_stores"
"""
input department_stores_sum_order_by {
  dept_store_chain_id: order_by
  dept_store_id: order_by
}

"""
update columns of table "department_stores"
"""
enum department_stores_update_column {
  """column name"""
  dept_store_chain_id

  """column name"""
  dept_store_id

  """column name"""
  store_address

  """column name"""
  store_email

  """column name"""
  store_name

  """column name"""
  store_phone
}

"""aggregate var_pop on columns"""
type department_stores_var_pop_fields {
  dept_store_chain_id: Float
  dept_store_id: Float
}

"""
order by var_pop() on columns of table "department_stores"
"""
input department_stores_var_pop_order_by {
  dept_store_chain_id: order_by
  dept_store_id: order_by
}

"""aggregate var_samp on columns"""
type department_stores_var_samp_fields {
  dept_store_chain_id: Float
  dept_store_id: Float
}

"""
order by var_samp() on columns of table "department_stores"
"""
input department_stores_var_samp_order_by {
  dept_store_chain_id: order_by
  dept_store_id: order_by
}

"""aggregate variance on columns"""
type department_stores_variance_fields {
  dept_store_chain_id: Float
  dept_store_id: Float
}

"""
order by variance() on columns of table "department_stores"
"""
input department_stores_variance_order_by {
  dept_store_chain_id: order_by
  dept_store_id: order_by
}

"""
columns and relationships of "departments"
"""
type departments {
  department_id: bigint!
  department_name: String

  """An object relationship"""
  department_store: department_stores
  dept_store_id: bigint

  """An array relationship"""
  staff_department_assignments(
    """distinct select on columns"""
    distinct_on: [staff_department_assignments_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [staff_department_assignments_order_by!]

    """filter the rows returned"""
    where: staff_department_assignments_bool_exp
  ): [staff_department_assignments!]!

  """An aggregated array relationship"""
  staff_department_assignments_aggregate(
    """distinct select on columns"""
    distinct_on: [staff_department_assignments_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [staff_department_assignments_order_by!]

    """filter the rows returned"""
    where: staff_department_assignments_bool_exp
  ): staff_department_assignments_aggregate!
}

"""
aggregated selection of "departments"
"""
type departments_aggregate {
  aggregate: departments_aggregate_fields
  nodes: [departments!]!
}

"""
aggregate fields of "departments"
"""
type departments_aggregate_fields {
  avg: departments_avg_fields
  count(columns: [departments_select_column!], distinct: Boolean): Int
  max: departments_max_fields
  min: departments_min_fields
  stddev: departments_stddev_fields
  stddev_pop: departments_stddev_pop_fields
  stddev_samp: departments_stddev_samp_fields
  sum: departments_sum_fields
  var_pop: departments_var_pop_fields
  var_samp: departments_var_samp_fields
  variance: departments_variance_fields
}

"""
order by aggregate values of table "departments"
"""
input departments_aggregate_order_by {
  avg: departments_avg_order_by
  count: order_by
  max: departments_max_order_by
  min: departments_min_order_by
  stddev: departments_stddev_order_by
  stddev_pop: departments_stddev_pop_order_by
  stddev_samp: departments_stddev_samp_order_by
  sum: departments_sum_order_by
  var_pop: departments_var_pop_order_by
  var_samp: departments_var_samp_order_by
  variance: departments_variance_order_by
}

"""
input type for inserting array relation for remote table "departments"
"""
input departments_arr_rel_insert_input {
  data: [departments_insert_input!]!
  on_conflict: departments_on_conflict
}

"""aggregate avg on columns"""
type departments_avg_fields {
  department_id: Float
  dept_store_id: Float
}

"""
order by avg() on columns of table "departments"
"""
input departments_avg_order_by {
  department_id: order_by
  dept_store_id: order_by
}

"""
Boolean expression to filter rows from the table "departments". All fields are combined with a logical 'AND'.
"""
input departments_bool_exp {
  _and: [departments_bool_exp]
  _not: departments_bool_exp
  _or: [departments_bool_exp]
  department_id: bigint_comparison_exp
  department_name: String_comparison_exp
  department_store: department_stores_bool_exp
  dept_store_id: bigint_comparison_exp
  staff_department_assignments: staff_department_assignments_bool_exp
}

"""
unique or primary key constraints on table "departments"
"""
enum departments_constraint {
  """unique or primary key constraint"""
  idx_21848_departments_pkey
}

"""
input type for incrementing integer column in table "departments"
"""
input departments_inc_input {
  department_id: bigint
  dept_store_id: bigint
}

"""
input type for inserting data into table "departments"
"""
input departments_insert_input {
  department_id: bigint
  department_name: String
  department_store: department_stores_obj_rel_insert_input
  dept_store_id: bigint
  staff_department_assignments: staff_department_assignments_arr_rel_insert_input
}

"""aggregate max on columns"""
type departments_max_fields {
  department_id: bigint
  department_name: String
  dept_store_id: bigint
}

"""
order by max() on columns of table "departments"
"""
input departments_max_order_by {
  department_id: order_by
  department_name: order_by
  dept_store_id: order_by
}

"""aggregate min on columns"""
type departments_min_fields {
  department_id: bigint
  department_name: String
  dept_store_id: bigint
}

"""
order by min() on columns of table "departments"
"""
input departments_min_order_by {
  department_id: order_by
  department_name: order_by
  dept_store_id: order_by
}

"""
response of any mutation on the table "departments"
"""
type departments_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [departments!]!
}

"""
input type for inserting object relation for remote table "departments"
"""
input departments_obj_rel_insert_input {
  data: departments_insert_input!
  on_conflict: departments_on_conflict
}

"""
on conflict condition type for table "departments"
"""
input departments_on_conflict {
  constraint: departments_constraint!
  update_columns: [departments_update_column!]!
  where: departments_bool_exp
}

"""
ordering options when selecting data from "departments"
"""
input departments_order_by {
  department_id: order_by
  department_name: order_by
  department_store: department_stores_order_by
  dept_store_id: order_by
  staff_department_assignments_aggregate: staff_department_assignments_aggregate_order_by
}

"""
primary key columns input for table: "departments"
"""
input departments_pk_columns_input {
  department_id: bigint!
}

"""
select columns of table "departments"
"""
enum departments_select_column {
  """column name"""
  department_id

  """column name"""
  department_name

  """column name"""
  dept_store_id
}

"""
input type for updating data in table "departments"
"""
input departments_set_input {
  department_id: bigint
  department_name: String
  dept_store_id: bigint
}

"""aggregate stddev on columns"""
type departments_stddev_fields {
  department_id: Float
  dept_store_id: Float
}

"""
order by stddev() on columns of table "departments"
"""
input departments_stddev_order_by {
  department_id: order_by
  dept_store_id: order_by
}

"""aggregate stddev_pop on columns"""
type departments_stddev_pop_fields {
  department_id: Float
  dept_store_id: Float
}

"""
order by stddev_pop() on columns of table "departments"
"""
input departments_stddev_pop_order_by {
  department_id: order_by
  dept_store_id: order_by
}

"""aggregate stddev_samp on columns"""
type departments_stddev_samp_fields {
  department_id: Float
  dept_store_id: Float
}

"""
order by stddev_samp() on columns of table "departments"
"""
input departments_stddev_samp_order_by {
  department_id: order_by
  dept_store_id: order_by
}

"""aggregate sum on columns"""
type departments_sum_fields {
  department_id: bigint
  dept_store_id: bigint
}

"""
order by sum() on columns of table "departments"
"""
input departments_sum_order_by {
  department_id: order_by
  dept_store_id: order_by
}

"""
update columns of table "departments"
"""
enum departments_update_column {
  """column name"""
  department_id

  """column name"""
  department_name

  """column name"""
  dept_store_id
}

"""aggregate var_pop on columns"""
type departments_var_pop_fields {
  department_id: Float
  dept_store_id: Float
}

"""
order by var_pop() on columns of table "departments"
"""
input departments_var_pop_order_by {
  department_id: order_by
  dept_store_id: order_by
}

"""aggregate var_samp on columns"""
type departments_var_samp_fields {
  department_id: Float
  dept_store_id: Float
}

"""
order by var_samp() on columns of table "departments"
"""
input departments_var_samp_order_by {
  department_id: order_by
  dept_store_id: order_by
}

"""aggregate variance on columns"""
type departments_variance_fields {
  department_id: Float
  dept_store_id: Float
}

"""
order by variance() on columns of table "departments"
"""
input departments_variance_order_by {
  department_id: order_by
  dept_store_id: order_by
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "addresses"
  """
  delete_addresses(
    """filter the rows which have to be deleted"""
    where: addresses_bool_exp!
  ): addresses_mutation_response

  """
  delete single row from the table: "addresses"
  """
  delete_addresses_by_pk(address_id: bigint!): addresses

  """
  delete data from the table: "customer_addresses"
  """
  delete_customer_addresses(
    """filter the rows which have to be deleted"""
    where: customer_addresses_bool_exp!
  ): customer_addresses_mutation_response

  """
  delete single row from the table: "customer_addresses"
  """
  delete_customer_addresses_by_pk(address_id: bigint!, customer_id: bigint!): customer_addresses

  """
  delete data from the table: "customer_orders"
  """
  delete_customer_orders(
    """filter the rows which have to be deleted"""
    where: customer_orders_bool_exp!
  ): customer_orders_mutation_response

  """
  delete single row from the table: "customer_orders"
  """
  delete_customer_orders_by_pk(order_id: bigint!): customer_orders

  """
  delete data from the table: "customers"
  """
  delete_customers(
    """filter the rows which have to be deleted"""
    where: customers_bool_exp!
  ): customers_mutation_response

  """
  delete single row from the table: "customers"
  """
  delete_customers_by_pk(customer_id: bigint!): customers

  """
  delete data from the table: "department_store_chain"
  """
  delete_department_store_chain(
    """filter the rows which have to be deleted"""
    where: department_store_chain_bool_exp!
  ): department_store_chain_mutation_response

  """
  delete single row from the table: "department_store_chain"
  """
  delete_department_store_chain_by_pk(dept_store_chain_id: bigint!): department_store_chain

  """
  delete data from the table: "department_stores"
  """
  delete_department_stores(
    """filter the rows which have to be deleted"""
    where: department_stores_bool_exp!
  ): department_stores_mutation_response

  """
  delete single row from the table: "department_stores"
  """
  delete_department_stores_by_pk(dept_store_id: bigint!): department_stores

  """
  delete data from the table: "departments"
  """
  delete_departments(
    """filter the rows which have to be deleted"""
    where: departments_bool_exp!
  ): departments_mutation_response

  """
  delete single row from the table: "departments"
  """
  delete_departments_by_pk(department_id: bigint!): departments

  """
  delete data from the table: "order_items"
  """
  delete_order_items(
    """filter the rows which have to be deleted"""
    where: order_items_bool_exp!
  ): order_items_mutation_response

  """
  delete single row from the table: "order_items"
  """
  delete_order_items_by_pk(order_item_id: bigint!): order_items

  """
  delete data from the table: "product_suppliers"
  """
  delete_product_suppliers(
    """filter the rows which have to be deleted"""
    where: product_suppliers_bool_exp!
  ): product_suppliers_mutation_response

  """
  delete single row from the table: "product_suppliers"
  """
  delete_product_suppliers_by_pk(product_id: bigint!, supplier_id: bigint!): product_suppliers

  """
  delete data from the table: "products"
  """
  delete_products(
    """filter the rows which have to be deleted"""
    where: products_bool_exp!
  ): products_mutation_response

  """
  delete single row from the table: "products"
  """
  delete_products_by_pk(product_id: bigint!): products

  """
  delete data from the table: "staff"
  """
  delete_staff(
    """filter the rows which have to be deleted"""
    where: staff_bool_exp!
  ): staff_mutation_response

  """
  delete single row from the table: "staff"
  """
  delete_staff_by_pk(staff_id: bigint!): staff

  """
  delete data from the table: "staff_department_assignments"
  """
  delete_staff_department_assignments(
    """filter the rows which have to be deleted"""
    where: staff_department_assignments_bool_exp!
  ): staff_department_assignments_mutation_response

  """
  delete single row from the table: "staff_department_assignments"
  """
  delete_staff_department_assignments_by_pk(department_id: bigint!, staff_id: bigint!): staff_department_assignments

  """
  delete data from the table: "supplier_addresses"
  """
  delete_supplier_addresses(
    """filter the rows which have to be deleted"""
    where: supplier_addresses_bool_exp!
  ): supplier_addresses_mutation_response

  """
  delete single row from the table: "supplier_addresses"
  """
  delete_supplier_addresses_by_pk(address_id: bigint!, supplier_id: bigint!): supplier_addresses

  """
  delete data from the table: "suppliers"
  """
  delete_suppliers(
    """filter the rows which have to be deleted"""
    where: suppliers_bool_exp!
  ): suppliers_mutation_response

  """
  delete single row from the table: "suppliers"
  """
  delete_suppliers_by_pk(supplier_id: bigint!): suppliers

  """
  insert data into the table: "addresses"
  """
  insert_addresses(
    """the rows to be inserted"""
    objects: [addresses_insert_input!]!

    """on conflict condition"""
    on_conflict: addresses_on_conflict
  ): addresses_mutation_response

  """
  insert a single row into the table: "addresses"
  """
  insert_addresses_one(
    """the row to be inserted"""
    object: addresses_insert_input!

    """on conflict condition"""
    on_conflict: addresses_on_conflict
  ): addresses

  """
  insert data into the table: "customer_addresses"
  """
  insert_customer_addresses(
    """the rows to be inserted"""
    objects: [customer_addresses_insert_input!]!

    """on conflict condition"""
    on_conflict: customer_addresses_on_conflict
  ): customer_addresses_mutation_response

  """
  insert a single row into the table: "customer_addresses"
  """
  insert_customer_addresses_one(
    """the row to be inserted"""
    object: customer_addresses_insert_input!

    """on conflict condition"""
    on_conflict: customer_addresses_on_conflict
  ): customer_addresses

  """
  insert data into the table: "customer_orders"
  """
  insert_customer_orders(
    """the rows to be inserted"""
    objects: [customer_orders_insert_input!]!

    """on conflict condition"""
    on_conflict: customer_orders_on_conflict
  ): customer_orders_mutation_response

  """
  insert a single row into the table: "customer_orders"
  """
  insert_customer_orders_one(
    """the row to be inserted"""
    object: customer_orders_insert_input!

    """on conflict condition"""
    on_conflict: customer_orders_on_conflict
  ): customer_orders

  """
  insert data into the table: "customers"
  """
  insert_customers(
    """the rows to be inserted"""
    objects: [customers_insert_input!]!

    """on conflict condition"""
    on_conflict: customers_on_conflict
  ): customers_mutation_response

  """
  insert a single row into the table: "customers"
  """
  insert_customers_one(
    """the row to be inserted"""
    object: customers_insert_input!

    """on conflict condition"""
    on_conflict: customers_on_conflict
  ): customers

  """
  insert data into the table: "department_store_chain"
  """
  insert_department_store_chain(
    """the rows to be inserted"""
    objects: [department_store_chain_insert_input!]!

    """on conflict condition"""
    on_conflict: department_store_chain_on_conflict
  ): department_store_chain_mutation_response

  """
  insert a single row into the table: "department_store_chain"
  """
  insert_department_store_chain_one(
    """the row to be inserted"""
    object: department_store_chain_insert_input!

    """on conflict condition"""
    on_conflict: department_store_chain_on_conflict
  ): department_store_chain

  """
  insert data into the table: "department_stores"
  """
  insert_department_stores(
    """the rows to be inserted"""
    objects: [department_stores_insert_input!]!

    """on conflict condition"""
    on_conflict: department_stores_on_conflict
  ): department_stores_mutation_response

  """
  insert a single row into the table: "department_stores"
  """
  insert_department_stores_one(
    """the row to be inserted"""
    object: department_stores_insert_input!

    """on conflict condition"""
    on_conflict: department_stores_on_conflict
  ): department_stores

  """
  insert data into the table: "departments"
  """
  insert_departments(
    """the rows to be inserted"""
    objects: [departments_insert_input!]!

    """on conflict condition"""
    on_conflict: departments_on_conflict
  ): departments_mutation_response

  """
  insert a single row into the table: "departments"
  """
  insert_departments_one(
    """the row to be inserted"""
    object: departments_insert_input!

    """on conflict condition"""
    on_conflict: departments_on_conflict
  ): departments

  """
  insert data into the table: "order_items"
  """
  insert_order_items(
    """the rows to be inserted"""
    objects: [order_items_insert_input!]!

    """on conflict condition"""
    on_conflict: order_items_on_conflict
  ): order_items_mutation_response

  """
  insert a single row into the table: "order_items"
  """
  insert_order_items_one(
    """the row to be inserted"""
    object: order_items_insert_input!

    """on conflict condition"""
    on_conflict: order_items_on_conflict
  ): order_items

  """
  insert data into the table: "product_suppliers"
  """
  insert_product_suppliers(
    """the rows to be inserted"""
    objects: [product_suppliers_insert_input!]!

    """on conflict condition"""
    on_conflict: product_suppliers_on_conflict
  ): product_suppliers_mutation_response

  """
  insert a single row into the table: "product_suppliers"
  """
  insert_product_suppliers_one(
    """the row to be inserted"""
    object: product_suppliers_insert_input!

    """on conflict condition"""
    on_conflict: product_suppliers_on_conflict
  ): product_suppliers

  """
  insert data into the table: "products"
  """
  insert_products(
    """the rows to be inserted"""
    objects: [products_insert_input!]!

    """on conflict condition"""
    on_conflict: products_on_conflict
  ): products_mutation_response

  """
  insert a single row into the table: "products"
  """
  insert_products_one(
    """the row to be inserted"""
    object: products_insert_input!

    """on conflict condition"""
    on_conflict: products_on_conflict
  ): products

  """
  insert data into the table: "staff"
  """
  insert_staff(
    """the rows to be inserted"""
    objects: [staff_insert_input!]!

    """on conflict condition"""
    on_conflict: staff_on_conflict
  ): staff_mutation_response

  """
  insert data into the table: "staff_department_assignments"
  """
  insert_staff_department_assignments(
    """the rows to be inserted"""
    objects: [staff_department_assignments_insert_input!]!

    """on conflict condition"""
    on_conflict: staff_department_assignments_on_conflict
  ): staff_department_assignments_mutation_response

  """
  insert a single row into the table: "staff_department_assignments"
  """
  insert_staff_department_assignments_one(
    """the row to be inserted"""
    object: staff_department_assignments_insert_input!

    """on conflict condition"""
    on_conflict: staff_department_assignments_on_conflict
  ): staff_department_assignments

  """
  insert a single row into the table: "staff"
  """
  insert_staff_one(
    """the row to be inserted"""
    object: staff_insert_input!

    """on conflict condition"""
    on_conflict: staff_on_conflict
  ): staff

  """
  insert data into the table: "supplier_addresses"
  """
  insert_supplier_addresses(
    """the rows to be inserted"""
    objects: [supplier_addresses_insert_input!]!

    """on conflict condition"""
    on_conflict: supplier_addresses_on_conflict
  ): supplier_addresses_mutation_response

  """
  insert a single row into the table: "supplier_addresses"
  """
  insert_supplier_addresses_one(
    """the row to be inserted"""
    object: supplier_addresses_insert_input!

    """on conflict condition"""
    on_conflict: supplier_addresses_on_conflict
  ): supplier_addresses

  """
  insert data into the table: "suppliers"
  """
  insert_suppliers(
    """the rows to be inserted"""
    objects: [suppliers_insert_input!]!

    """on conflict condition"""
    on_conflict: suppliers_on_conflict
  ): suppliers_mutation_response

  """
  insert a single row into the table: "suppliers"
  """
  insert_suppliers_one(
    """the row to be inserted"""
    object: suppliers_insert_input!

    """on conflict condition"""
    on_conflict: suppliers_on_conflict
  ): suppliers

  """
  update data of the table: "addresses"
  """
  update_addresses(
    """increments the integer columns with given value of the filtered values"""
    _inc: addresses_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: addresses_set_input

    """filter the rows which have to be updated"""
    where: addresses_bool_exp!
  ): addresses_mutation_response

  """
  update single row of the table: "addresses"
  """
  update_addresses_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: addresses_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: addresses_set_input
    pk_columns: addresses_pk_columns_input!
  ): addresses

  """
  update data of the table: "customer_addresses"
  """
  update_customer_addresses(
    """increments the integer columns with given value of the filtered values"""
    _inc: customer_addresses_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: customer_addresses_set_input

    """filter the rows which have to be updated"""
    where: customer_addresses_bool_exp!
  ): customer_addresses_mutation_response

  """
  update single row of the table: "customer_addresses"
  """
  update_customer_addresses_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: customer_addresses_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: customer_addresses_set_input
    pk_columns: customer_addresses_pk_columns_input!
  ): customer_addresses

  """
  update data of the table: "customer_orders"
  """
  update_customer_orders(
    """increments the integer columns with given value of the filtered values"""
    _inc: customer_orders_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: customer_orders_set_input

    """filter the rows which have to be updated"""
    where: customer_orders_bool_exp!
  ): customer_orders_mutation_response

  """
  update single row of the table: "customer_orders"
  """
  update_customer_orders_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: customer_orders_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: customer_orders_set_input
    pk_columns: customer_orders_pk_columns_input!
  ): customer_orders

  """
  update data of the table: "customers"
  """
  update_customers(
    """increments the integer columns with given value of the filtered values"""
    _inc: customers_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: customers_set_input

    """filter the rows which have to be updated"""
    where: customers_bool_exp!
  ): customers_mutation_response

  """
  update single row of the table: "customers"
  """
  update_customers_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: customers_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: customers_set_input
    pk_columns: customers_pk_columns_input!
  ): customers

  """
  update data of the table: "department_store_chain"
  """
  update_department_store_chain(
    """increments the integer columns with given value of the filtered values"""
    _inc: department_store_chain_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: department_store_chain_set_input

    """filter the rows which have to be updated"""
    where: department_store_chain_bool_exp!
  ): department_store_chain_mutation_response

  """
  update single row of the table: "department_store_chain"
  """
  update_department_store_chain_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: department_store_chain_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: department_store_chain_set_input
    pk_columns: department_store_chain_pk_columns_input!
  ): department_store_chain

  """
  update data of the table: "department_stores"
  """
  update_department_stores(
    """increments the integer columns with given value of the filtered values"""
    _inc: department_stores_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: department_stores_set_input

    """filter the rows which have to be updated"""
    where: department_stores_bool_exp!
  ): department_stores_mutation_response

  """
  update single row of the table: "department_stores"
  """
  update_department_stores_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: department_stores_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: department_stores_set_input
    pk_columns: department_stores_pk_columns_input!
  ): department_stores

  """
  update data of the table: "departments"
  """
  update_departments(
    """increments the integer columns with given value of the filtered values"""
    _inc: departments_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: departments_set_input

    """filter the rows which have to be updated"""
    where: departments_bool_exp!
  ): departments_mutation_response

  """
  update single row of the table: "departments"
  """
  update_departments_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: departments_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: departments_set_input
    pk_columns: departments_pk_columns_input!
  ): departments

  """
  update data of the table: "order_items"
  """
  update_order_items(
    """increments the integer columns with given value of the filtered values"""
    _inc: order_items_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: order_items_set_input

    """filter the rows which have to be updated"""
    where: order_items_bool_exp!
  ): order_items_mutation_response

  """
  update single row of the table: "order_items"
  """
  update_order_items_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: order_items_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: order_items_set_input
    pk_columns: order_items_pk_columns_input!
  ): order_items

  """
  update data of the table: "product_suppliers"
  """
  update_product_suppliers(
    """increments the integer columns with given value of the filtered values"""
    _inc: product_suppliers_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: product_suppliers_set_input

    """filter the rows which have to be updated"""
    where: product_suppliers_bool_exp!
  ): product_suppliers_mutation_response

  """
  update single row of the table: "product_suppliers"
  """
  update_product_suppliers_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: product_suppliers_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: product_suppliers_set_input
    pk_columns: product_suppliers_pk_columns_input!
  ): product_suppliers

  """
  update data of the table: "products"
  """
  update_products(
    """increments the integer columns with given value of the filtered values"""
    _inc: products_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: products_set_input

    """filter the rows which have to be updated"""
    where: products_bool_exp!
  ): products_mutation_response

  """
  update single row of the table: "products"
  """
  update_products_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: products_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: products_set_input
    pk_columns: products_pk_columns_input!
  ): products

  """
  update data of the table: "staff"
  """
  update_staff(
    """increments the integer columns with given value of the filtered values"""
    _inc: staff_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: staff_set_input

    """filter the rows which have to be updated"""
    where: staff_bool_exp!
  ): staff_mutation_response

  """
  update single row of the table: "staff"
  """
  update_staff_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: staff_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: staff_set_input
    pk_columns: staff_pk_columns_input!
  ): staff

  """
  update data of the table: "staff_department_assignments"
  """
  update_staff_department_assignments(
    """increments the integer columns with given value of the filtered values"""
    _inc: staff_department_assignments_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: staff_department_assignments_set_input

    """filter the rows which have to be updated"""
    where: staff_department_assignments_bool_exp!
  ): staff_department_assignments_mutation_response

  """
  update single row of the table: "staff_department_assignments"
  """
  update_staff_department_assignments_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: staff_department_assignments_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: staff_department_assignments_set_input
    pk_columns: staff_department_assignments_pk_columns_input!
  ): staff_department_assignments

  """
  update data of the table: "supplier_addresses"
  """
  update_supplier_addresses(
    """increments the integer columns with given value of the filtered values"""
    _inc: supplier_addresses_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: supplier_addresses_set_input

    """filter the rows which have to be updated"""
    where: supplier_addresses_bool_exp!
  ): supplier_addresses_mutation_response

  """
  update single row of the table: "supplier_addresses"
  """
  update_supplier_addresses_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: supplier_addresses_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: supplier_addresses_set_input
    pk_columns: supplier_addresses_pk_columns_input!
  ): supplier_addresses

  """
  update data of the table: "suppliers"
  """
  update_suppliers(
    """increments the integer columns with given value of the filtered values"""
    _inc: suppliers_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: suppliers_set_input

    """filter the rows which have to be updated"""
    where: suppliers_bool_exp!
  ): suppliers_mutation_response

  """
  update single row of the table: "suppliers"
  """
  update_suppliers_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: suppliers_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: suppliers_set_input
    pk_columns: suppliers_pk_columns_input!
  ): suppliers
}

scalar numeric

"""
expression to compare columns of type numeric. All fields are combined with logical 'AND'.
"""
input numeric_comparison_exp {
  _eq: numeric
  _gt: numeric
  _gte: numeric
  _in: [numeric!]
  _is_null: Boolean
  _lt: numeric
  _lte: numeric
  _neq: numeric
  _nin: [numeric!]
}

"""column ordering options"""
enum order_by {
  """in the ascending order, nulls last"""
  asc

  """in the ascending order, nulls first"""
  asc_nulls_first

  """in the ascending order, nulls last"""
  asc_nulls_last

  """in the descending order, nulls first"""
  desc

  """in the descending order, nulls first"""
  desc_nulls_first

  """in the descending order, nulls last"""
  desc_nulls_last
}

"""
columns and relationships of "order_items"
"""
type order_items {
  """An object relationship"""
  customer_order: customer_orders
  order_id: bigint
  order_item_id: bigint!

  """An object relationship"""
  product: products
  product_id: bigint
}

"""
aggregated selection of "order_items"
"""
type order_items_aggregate {
  aggregate: order_items_aggregate_fields
  nodes: [order_items!]!
}

"""
aggregate fields of "order_items"
"""
type order_items_aggregate_fields {
  avg: order_items_avg_fields
  count(columns: [order_items_select_column!], distinct: Boolean): Int
  max: order_items_max_fields
  min: order_items_min_fields
  stddev: order_items_stddev_fields
  stddev_pop: order_items_stddev_pop_fields
  stddev_samp: order_items_stddev_samp_fields
  sum: order_items_sum_fields
  var_pop: order_items_var_pop_fields
  var_samp: order_items_var_samp_fields
  variance: order_items_variance_fields
}

"""
order by aggregate values of table "order_items"
"""
input order_items_aggregate_order_by {
  avg: order_items_avg_order_by
  count: order_by
  max: order_items_max_order_by
  min: order_items_min_order_by
  stddev: order_items_stddev_order_by
  stddev_pop: order_items_stddev_pop_order_by
  stddev_samp: order_items_stddev_samp_order_by
  sum: order_items_sum_order_by
  var_pop: order_items_var_pop_order_by
  var_samp: order_items_var_samp_order_by
  variance: order_items_variance_order_by
}

"""
input type for inserting array relation for remote table "order_items"
"""
input order_items_arr_rel_insert_input {
  data: [order_items_insert_input!]!
  on_conflict: order_items_on_conflict
}

"""aggregate avg on columns"""
type order_items_avg_fields {
  order_id: Float
  order_item_id: Float
  product_id: Float
}

"""
order by avg() on columns of table "order_items"
"""
input order_items_avg_order_by {
  order_id: order_by
  order_item_id: order_by
  product_id: order_by
}

"""
Boolean expression to filter rows from the table "order_items". All fields are combined with a logical 'AND'.
"""
input order_items_bool_exp {
  _and: [order_items_bool_exp]
  _not: order_items_bool_exp
  _or: [order_items_bool_exp]
  customer_order: customer_orders_bool_exp
  order_id: bigint_comparison_exp
  order_item_id: bigint_comparison_exp
  product: products_bool_exp
  product_id: bigint_comparison_exp
}

"""
unique or primary key constraints on table "order_items"
"""
enum order_items_constraint {
  """unique or primary key constraint"""
  idx_21854_order_items_pkey
}

"""
input type for incrementing integer column in table "order_items"
"""
input order_items_inc_input {
  order_id: bigint
  order_item_id: bigint
  product_id: bigint
}

"""
input type for inserting data into table "order_items"
"""
input order_items_insert_input {
  customer_order: customer_orders_obj_rel_insert_input
  order_id: bigint
  order_item_id: bigint
  product: products_obj_rel_insert_input
  product_id: bigint
}

"""aggregate max on columns"""
type order_items_max_fields {
  order_id: bigint
  order_item_id: bigint
  product_id: bigint
}

"""
order by max() on columns of table "order_items"
"""
input order_items_max_order_by {
  order_id: order_by
  order_item_id: order_by
  product_id: order_by
}

"""aggregate min on columns"""
type order_items_min_fields {
  order_id: bigint
  order_item_id: bigint
  product_id: bigint
}

"""
order by min() on columns of table "order_items"
"""
input order_items_min_order_by {
  order_id: order_by
  order_item_id: order_by
  product_id: order_by
}

"""
response of any mutation on the table "order_items"
"""
type order_items_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [order_items!]!
}

"""
input type for inserting object relation for remote table "order_items"
"""
input order_items_obj_rel_insert_input {
  data: order_items_insert_input!
  on_conflict: order_items_on_conflict
}

"""
on conflict condition type for table "order_items"
"""
input order_items_on_conflict {
  constraint: order_items_constraint!
  update_columns: [order_items_update_column!]!
  where: order_items_bool_exp
}

"""
ordering options when selecting data from "order_items"
"""
input order_items_order_by {
  customer_order: customer_orders_order_by
  order_id: order_by
  order_item_id: order_by
  product: products_order_by
  product_id: order_by
}

"""
primary key columns input for table: "order_items"
"""
input order_items_pk_columns_input {
  order_item_id: bigint!
}

"""
select columns of table "order_items"
"""
enum order_items_select_column {
  """column name"""
  order_id

  """column name"""
  order_item_id

  """column name"""
  product_id
}

"""
input type for updating data in table "order_items"
"""
input order_items_set_input {
  order_id: bigint
  order_item_id: bigint
  product_id: bigint
}

"""aggregate stddev on columns"""
type order_items_stddev_fields {
  order_id: Float
  order_item_id: Float
  product_id: Float
}

"""
order by stddev() on columns of table "order_items"
"""
input order_items_stddev_order_by {
  order_id: order_by
  order_item_id: order_by
  product_id: order_by
}

"""aggregate stddev_pop on columns"""
type order_items_stddev_pop_fields {
  order_id: Float
  order_item_id: Float
  product_id: Float
}

"""
order by stddev_pop() on columns of table "order_items"
"""
input order_items_stddev_pop_order_by {
  order_id: order_by
  order_item_id: order_by
  product_id: order_by
}

"""aggregate stddev_samp on columns"""
type order_items_stddev_samp_fields {
  order_id: Float
  order_item_id: Float
  product_id: Float
}

"""
order by stddev_samp() on columns of table "order_items"
"""
input order_items_stddev_samp_order_by {
  order_id: order_by
  order_item_id: order_by
  product_id: order_by
}

"""aggregate sum on columns"""
type order_items_sum_fields {
  order_id: bigint
  order_item_id: bigint
  product_id: bigint
}

"""
order by sum() on columns of table "order_items"
"""
input order_items_sum_order_by {
  order_id: order_by
  order_item_id: order_by
  product_id: order_by
}

"""
update columns of table "order_items"
"""
enum order_items_update_column {
  """column name"""
  order_id

  """column name"""
  order_item_id

  """column name"""
  product_id
}

"""aggregate var_pop on columns"""
type order_items_var_pop_fields {
  order_id: Float
  order_item_id: Float
  product_id: Float
}

"""
order by var_pop() on columns of table "order_items"
"""
input order_items_var_pop_order_by {
  order_id: order_by
  order_item_id: order_by
  product_id: order_by
}

"""aggregate var_samp on columns"""
type order_items_var_samp_fields {
  order_id: Float
  order_item_id: Float
  product_id: Float
}

"""
order by var_samp() on columns of table "order_items"
"""
input order_items_var_samp_order_by {
  order_id: order_by
  order_item_id: order_by
  product_id: order_by
}

"""aggregate variance on columns"""
type order_items_variance_fields {
  order_id: Float
  order_item_id: Float
  product_id: Float
}

"""
order by variance() on columns of table "order_items"
"""
input order_items_variance_order_by {
  order_id: order_by
  order_item_id: order_by
  product_id: order_by
}

"""
columns and relationships of "product_suppliers"
"""
type product_suppliers {
  date_supplied_from: timestamptz
  date_supplied_to: timestamptz

  """An object relationship"""
  product: products!
  product_id: bigint!

  """An object relationship"""
  supplier: suppliers!
  supplier_id: bigint!
  total_amount_purchased: String
  total_value_purchased: numeric
}

"""
aggregated selection of "product_suppliers"
"""
type product_suppliers_aggregate {
  aggregate: product_suppliers_aggregate_fields
  nodes: [product_suppliers!]!
}

"""
aggregate fields of "product_suppliers"
"""
type product_suppliers_aggregate_fields {
  avg: product_suppliers_avg_fields
  count(columns: [product_suppliers_select_column!], distinct: Boolean): Int
  max: product_suppliers_max_fields
  min: product_suppliers_min_fields
  stddev: product_suppliers_stddev_fields
  stddev_pop: product_suppliers_stddev_pop_fields
  stddev_samp: product_suppliers_stddev_samp_fields
  sum: product_suppliers_sum_fields
  var_pop: product_suppliers_var_pop_fields
  var_samp: product_suppliers_var_samp_fields
  variance: product_suppliers_variance_fields
}

"""
order by aggregate values of table "product_suppliers"
"""
input product_suppliers_aggregate_order_by {
  avg: product_suppliers_avg_order_by
  count: order_by
  max: product_suppliers_max_order_by
  min: product_suppliers_min_order_by
  stddev: product_suppliers_stddev_order_by
  stddev_pop: product_suppliers_stddev_pop_order_by
  stddev_samp: product_suppliers_stddev_samp_order_by
  sum: product_suppliers_sum_order_by
  var_pop: product_suppliers_var_pop_order_by
  var_samp: product_suppliers_var_samp_order_by
  variance: product_suppliers_variance_order_by
}

"""
input type for inserting array relation for remote table "product_suppliers"
"""
input product_suppliers_arr_rel_insert_input {
  data: [product_suppliers_insert_input!]!
  on_conflict: product_suppliers_on_conflict
}

"""aggregate avg on columns"""
type product_suppliers_avg_fields {
  product_id: Float
  supplier_id: Float
  total_value_purchased: Float
}

"""
order by avg() on columns of table "product_suppliers"
"""
input product_suppliers_avg_order_by {
  product_id: order_by
  supplier_id: order_by
  total_value_purchased: order_by
}

"""
Boolean expression to filter rows from the table "product_suppliers". All fields are combined with a logical 'AND'.
"""
input product_suppliers_bool_exp {
  _and: [product_suppliers_bool_exp]
  _not: product_suppliers_bool_exp
  _or: [product_suppliers_bool_exp]
  date_supplied_from: timestamptz_comparison_exp
  date_supplied_to: timestamptz_comparison_exp
  product: products_bool_exp
  product_id: bigint_comparison_exp
  supplier: suppliers_bool_exp
  supplier_id: bigint_comparison_exp
  total_amount_purchased: String_comparison_exp
  total_value_purchased: numeric_comparison_exp
}

"""
unique or primary key constraints on table "product_suppliers"
"""
enum product_suppliers_constraint {
  """unique or primary key constraint"""
  idx_21857_sqlite_autoindex_product_suppliers_1
}

"""
input type for incrementing integer column in table "product_suppliers"
"""
input product_suppliers_inc_input {
  product_id: bigint
  supplier_id: bigint
  total_value_purchased: numeric
}

"""
input type for inserting data into table "product_suppliers"
"""
input product_suppliers_insert_input {
  date_supplied_from: timestamptz
  date_supplied_to: timestamptz
  product: products_obj_rel_insert_input
  product_id: bigint
  supplier: suppliers_obj_rel_insert_input
  supplier_id: bigint
  total_amount_purchased: String
  total_value_purchased: numeric
}

"""aggregate max on columns"""
type product_suppliers_max_fields {
  date_supplied_from: timestamptz
  date_supplied_to: timestamptz
  product_id: bigint
  supplier_id: bigint
  total_amount_purchased: String
  total_value_purchased: numeric
}

"""
order by max() on columns of table "product_suppliers"
"""
input product_suppliers_max_order_by {
  date_supplied_from: order_by
  date_supplied_to: order_by
  product_id: order_by
  supplier_id: order_by
  total_amount_purchased: order_by
  total_value_purchased: order_by
}

"""aggregate min on columns"""
type product_suppliers_min_fields {
  date_supplied_from: timestamptz
  date_supplied_to: timestamptz
  product_id: bigint
  supplier_id: bigint
  total_amount_purchased: String
  total_value_purchased: numeric
}

"""
order by min() on columns of table "product_suppliers"
"""
input product_suppliers_min_order_by {
  date_supplied_from: order_by
  date_supplied_to: order_by
  product_id: order_by
  supplier_id: order_by
  total_amount_purchased: order_by
  total_value_purchased: order_by
}

"""
response of any mutation on the table "product_suppliers"
"""
type product_suppliers_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [product_suppliers!]!
}

"""
input type for inserting object relation for remote table "product_suppliers"
"""
input product_suppliers_obj_rel_insert_input {
  data: product_suppliers_insert_input!
  on_conflict: product_suppliers_on_conflict
}

"""
on conflict condition type for table "product_suppliers"
"""
input product_suppliers_on_conflict {
  constraint: product_suppliers_constraint!
  update_columns: [product_suppliers_update_column!]!
  where: product_suppliers_bool_exp
}

"""
ordering options when selecting data from "product_suppliers"
"""
input product_suppliers_order_by {
  date_supplied_from: order_by
  date_supplied_to: order_by
  product: products_order_by
  product_id: order_by
  supplier: suppliers_order_by
  supplier_id: order_by
  total_amount_purchased: order_by
  total_value_purchased: order_by
}

"""
primary key columns input for table: "product_suppliers"
"""
input product_suppliers_pk_columns_input {
  product_id: bigint!
  supplier_id: bigint!
}

"""
select columns of table "product_suppliers"
"""
enum product_suppliers_select_column {
  """column name"""
  date_supplied_from

  """column name"""
  date_supplied_to

  """column name"""
  product_id

  """column name"""
  supplier_id

  """column name"""
  total_amount_purchased

  """column name"""
  total_value_purchased
}

"""
input type for updating data in table "product_suppliers"
"""
input product_suppliers_set_input {
  date_supplied_from: timestamptz
  date_supplied_to: timestamptz
  product_id: bigint
  supplier_id: bigint
  total_amount_purchased: String
  total_value_purchased: numeric
}

"""aggregate stddev on columns"""
type product_suppliers_stddev_fields {
  product_id: Float
  supplier_id: Float
  total_value_purchased: Float
}

"""
order by stddev() on columns of table "product_suppliers"
"""
input product_suppliers_stddev_order_by {
  product_id: order_by
  supplier_id: order_by
  total_value_purchased: order_by
}

"""aggregate stddev_pop on columns"""
type product_suppliers_stddev_pop_fields {
  product_id: Float
  supplier_id: Float
  total_value_purchased: Float
}

"""
order by stddev_pop() on columns of table "product_suppliers"
"""
input product_suppliers_stddev_pop_order_by {
  product_id: order_by
  supplier_id: order_by
  total_value_purchased: order_by
}

"""aggregate stddev_samp on columns"""
type product_suppliers_stddev_samp_fields {
  product_id: Float
  supplier_id: Float
  total_value_purchased: Float
}

"""
order by stddev_samp() on columns of table "product_suppliers"
"""
input product_suppliers_stddev_samp_order_by {
  product_id: order_by
  supplier_id: order_by
  total_value_purchased: order_by
}

"""aggregate sum on columns"""
type product_suppliers_sum_fields {
  product_id: bigint
  supplier_id: bigint
  total_value_purchased: numeric
}

"""
order by sum() on columns of table "product_suppliers"
"""
input product_suppliers_sum_order_by {
  product_id: order_by
  supplier_id: order_by
  total_value_purchased: order_by
}

"""
update columns of table "product_suppliers"
"""
enum product_suppliers_update_column {
  """column name"""
  date_supplied_from

  """column name"""
  date_supplied_to

  """column name"""
  product_id

  """column name"""
  supplier_id

  """column name"""
  total_amount_purchased

  """column name"""
  total_value_purchased
}

"""aggregate var_pop on columns"""
type product_suppliers_var_pop_fields {
  product_id: Float
  supplier_id: Float
  total_value_purchased: Float
}

"""
order by var_pop() on columns of table "product_suppliers"
"""
input product_suppliers_var_pop_order_by {
  product_id: order_by
  supplier_id: order_by
  total_value_purchased: order_by
}

"""aggregate var_samp on columns"""
type product_suppliers_var_samp_fields {
  product_id: Float
  supplier_id: Float
  total_value_purchased: Float
}

"""
order by var_samp() on columns of table "product_suppliers"
"""
input product_suppliers_var_samp_order_by {
  product_id: order_by
  supplier_id: order_by
  total_value_purchased: order_by
}

"""aggregate variance on columns"""
type product_suppliers_variance_fields {
  product_id: Float
  supplier_id: Float
  total_value_purchased: Float
}

"""
order by variance() on columns of table "product_suppliers"
"""
input product_suppliers_variance_order_by {
  product_id: order_by
  supplier_id: order_by
  total_value_purchased: order_by
}

"""
columns and relationships of "products"
"""
type products {
  """An array relationship"""
  order_items(
    """distinct select on columns"""
    distinct_on: [order_items_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [order_items_order_by!]

    """filter the rows returned"""
    where: order_items_bool_exp
  ): [order_items!]!

  """An aggregated array relationship"""
  order_items_aggregate(
    """distinct select on columns"""
    distinct_on: [order_items_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [order_items_order_by!]

    """filter the rows returned"""
    where: order_items_bool_exp
  ): order_items_aggregate!
  product_id: bigint!
  product_name: String
  product_price: numeric

  """An array relationship"""
  product_suppliers(
    """distinct select on columns"""
    distinct_on: [product_suppliers_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [product_suppliers_order_by!]

    """filter the rows returned"""
    where: product_suppliers_bool_exp
  ): [product_suppliers!]!

  """An aggregated array relationship"""
  product_suppliers_aggregate(
    """distinct select on columns"""
    distinct_on: [product_suppliers_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [product_suppliers_order_by!]

    """filter the rows returned"""
    where: product_suppliers_bool_exp
  ): product_suppliers_aggregate!
  product_type_code: String
}

"""
aggregated selection of "products"
"""
type products_aggregate {
  aggregate: products_aggregate_fields
  nodes: [products!]!
}

"""
aggregate fields of "products"
"""
type products_aggregate_fields {
  avg: products_avg_fields
  count(columns: [products_select_column!], distinct: Boolean): Int
  max: products_max_fields
  min: products_min_fields
  stddev: products_stddev_fields
  stddev_pop: products_stddev_pop_fields
  stddev_samp: products_stddev_samp_fields
  sum: products_sum_fields
  var_pop: products_var_pop_fields
  var_samp: products_var_samp_fields
  variance: products_variance_fields
}

"""
order by aggregate values of table "products"
"""
input products_aggregate_order_by {
  avg: products_avg_order_by
  count: order_by
  max: products_max_order_by
  min: products_min_order_by
  stddev: products_stddev_order_by
  stddev_pop: products_stddev_pop_order_by
  stddev_samp: products_stddev_samp_order_by
  sum: products_sum_order_by
  var_pop: products_var_pop_order_by
  var_samp: products_var_samp_order_by
  variance: products_variance_order_by
}

"""
input type for inserting array relation for remote table "products"
"""
input products_arr_rel_insert_input {
  data: [products_insert_input!]!
  on_conflict: products_on_conflict
}

"""aggregate avg on columns"""
type products_avg_fields {
  product_id: Float
  product_price: Float
}

"""
order by avg() on columns of table "products"
"""
input products_avg_order_by {
  product_id: order_by
  product_price: order_by
}

"""
Boolean expression to filter rows from the table "products". All fields are combined with a logical 'AND'.
"""
input products_bool_exp {
  _and: [products_bool_exp]
  _not: products_bool_exp
  _or: [products_bool_exp]
  order_items: order_items_bool_exp
  product_id: bigint_comparison_exp
  product_name: String_comparison_exp
  product_price: numeric_comparison_exp
  product_suppliers: product_suppliers_bool_exp
  product_type_code: String_comparison_exp
}

"""
unique or primary key constraints on table "products"
"""
enum products_constraint {
  """unique or primary key constraint"""
  idx_21824_products_pkey
}

"""
input type for incrementing integer column in table "products"
"""
input products_inc_input {
  product_id: bigint
  product_price: numeric
}

"""
input type for inserting data into table "products"
"""
input products_insert_input {
  order_items: order_items_arr_rel_insert_input
  product_id: bigint
  product_name: String
  product_price: numeric
  product_suppliers: product_suppliers_arr_rel_insert_input
  product_type_code: String
}

"""aggregate max on columns"""
type products_max_fields {
  product_id: bigint
  product_name: String
  product_price: numeric
  product_type_code: String
}

"""
order by max() on columns of table "products"
"""
input products_max_order_by {
  product_id: order_by
  product_name: order_by
  product_price: order_by
  product_type_code: order_by
}

"""aggregate min on columns"""
type products_min_fields {
  product_id: bigint
  product_name: String
  product_price: numeric
  product_type_code: String
}

"""
order by min() on columns of table "products"
"""
input products_min_order_by {
  product_id: order_by
  product_name: order_by
  product_price: order_by
  product_type_code: order_by
}

"""
response of any mutation on the table "products"
"""
type products_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [products!]!
}

"""
input type for inserting object relation for remote table "products"
"""
input products_obj_rel_insert_input {
  data: products_insert_input!
  on_conflict: products_on_conflict
}

"""
on conflict condition type for table "products"
"""
input products_on_conflict {
  constraint: products_constraint!
  update_columns: [products_update_column!]!
  where: products_bool_exp
}

"""
ordering options when selecting data from "products"
"""
input products_order_by {
  order_items_aggregate: order_items_aggregate_order_by
  product_id: order_by
  product_name: order_by
  product_price: order_by
  product_suppliers_aggregate: product_suppliers_aggregate_order_by
  product_type_code: order_by
}

"""
primary key columns input for table: "products"
"""
input products_pk_columns_input {
  product_id: bigint!
}

"""
select columns of table "products"
"""
enum products_select_column {
  """column name"""
  product_id

  """column name"""
  product_name

  """column name"""
  product_price

  """column name"""
  product_type_code
}

"""
input type for updating data in table "products"
"""
input products_set_input {
  product_id: bigint
  product_name: String
  product_price: numeric
  product_type_code: String
}

"""aggregate stddev on columns"""
type products_stddev_fields {
  product_id: Float
  product_price: Float
}

"""
order by stddev() on columns of table "products"
"""
input products_stddev_order_by {
  product_id: order_by
  product_price: order_by
}

"""aggregate stddev_pop on columns"""
type products_stddev_pop_fields {
  product_id: Float
  product_price: Float
}

"""
order by stddev_pop() on columns of table "products"
"""
input products_stddev_pop_order_by {
  product_id: order_by
  product_price: order_by
}

"""aggregate stddev_samp on columns"""
type products_stddev_samp_fields {
  product_id: Float
  product_price: Float
}

"""
order by stddev_samp() on columns of table "products"
"""
input products_stddev_samp_order_by {
  product_id: order_by
  product_price: order_by
}

"""aggregate sum on columns"""
type products_sum_fields {
  product_id: bigint
  product_price: numeric
}

"""
order by sum() on columns of table "products"
"""
input products_sum_order_by {
  product_id: order_by
  product_price: order_by
}

"""
update columns of table "products"
"""
enum products_update_column {
  """column name"""
  product_id

  """column name"""
  product_name

  """column name"""
  product_price

  """column name"""
  product_type_code
}

"""aggregate var_pop on columns"""
type products_var_pop_fields {
  product_id: Float
  product_price: Float
}

"""
order by var_pop() on columns of table "products"
"""
input products_var_pop_order_by {
  product_id: order_by
  product_price: order_by
}

"""aggregate var_samp on columns"""
type products_var_samp_fields {
  product_id: Float
  product_price: Float
}

"""
order by var_samp() on columns of table "products"
"""
input products_var_samp_order_by {
  product_id: order_by
  product_price: order_by
}

"""aggregate variance on columns"""
type products_variance_fields {
  product_id: Float
  product_price: Float
}

"""
order by variance() on columns of table "products"
"""
input products_variance_order_by {
  product_id: order_by
  product_price: order_by
}

"""query root"""
type query_root {
  """
  fetch data from the table: "addresses"
  """
  addresses(
    """distinct select on columns"""
    distinct_on: [addresses_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [addresses_order_by!]

    """filter the rows returned"""
    where: addresses_bool_exp
  ): [addresses!]!

  """
  fetch aggregated fields from the table: "addresses"
  """
  addresses_aggregate(
    """distinct select on columns"""
    distinct_on: [addresses_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [addresses_order_by!]

    """filter the rows returned"""
    where: addresses_bool_exp
  ): addresses_aggregate!

  """fetch data from the table: "addresses" using primary key columns"""
  addresses_by_pk(address_id: bigint!): addresses

  """
  fetch data from the table: "customer_addresses"
  """
  customer_addresses(
    """distinct select on columns"""
    distinct_on: [customer_addresses_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [customer_addresses_order_by!]

    """filter the rows returned"""
    where: customer_addresses_bool_exp
  ): [customer_addresses!]!

  """
  fetch aggregated fields from the table: "customer_addresses"
  """
  customer_addresses_aggregate(
    """distinct select on columns"""
    distinct_on: [customer_addresses_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [customer_addresses_order_by!]

    """filter the rows returned"""
    where: customer_addresses_bool_exp
  ): customer_addresses_aggregate!

  """
  fetch data from the table: "customer_addresses" using primary key columns
  """
  customer_addresses_by_pk(address_id: bigint!, customer_id: bigint!): customer_addresses

  """
  fetch data from the table: "customer_orders"
  """
  customer_orders(
    """distinct select on columns"""
    distinct_on: [customer_orders_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [customer_orders_order_by!]

    """filter the rows returned"""
    where: customer_orders_bool_exp
  ): [customer_orders!]!

  """
  fetch aggregated fields from the table: "customer_orders"
  """
  customer_orders_aggregate(
    """distinct select on columns"""
    distinct_on: [customer_orders_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [customer_orders_order_by!]

    """filter the rows returned"""
    where: customer_orders_bool_exp
  ): customer_orders_aggregate!

  """fetch data from the table: "customer_orders" using primary key columns"""
  customer_orders_by_pk(order_id: bigint!): customer_orders

  """
  fetch data from the table: "customers"
  """
  customers(
    """distinct select on columns"""
    distinct_on: [customers_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [customers_order_by!]

    """filter the rows returned"""
    where: customers_bool_exp
  ): [customers!]!

  """
  fetch aggregated fields from the table: "customers"
  """
  customers_aggregate(
    """distinct select on columns"""
    distinct_on: [customers_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [customers_order_by!]

    """filter the rows returned"""
    where: customers_bool_exp
  ): customers_aggregate!

  """fetch data from the table: "customers" using primary key columns"""
  customers_by_pk(customer_id: bigint!): customers

  """
  fetch data from the table: "department_store_chain"
  """
  department_store_chain(
    """distinct select on columns"""
    distinct_on: [department_store_chain_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [department_store_chain_order_by!]

    """filter the rows returned"""
    where: department_store_chain_bool_exp
  ): [department_store_chain!]!

  """
  fetch aggregated fields from the table: "department_store_chain"
  """
  department_store_chain_aggregate(
    """distinct select on columns"""
    distinct_on: [department_store_chain_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [department_store_chain_order_by!]

    """filter the rows returned"""
    where: department_store_chain_bool_exp
  ): department_store_chain_aggregate!

  """
  fetch data from the table: "department_store_chain" using primary key columns
  """
  department_store_chain_by_pk(dept_store_chain_id: bigint!): department_store_chain

  """
  fetch data from the table: "department_stores"
  """
  department_stores(
    """distinct select on columns"""
    distinct_on: [department_stores_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [department_stores_order_by!]

    """filter the rows returned"""
    where: department_stores_bool_exp
  ): [department_stores!]!

  """
  fetch aggregated fields from the table: "department_stores"
  """
  department_stores_aggregate(
    """distinct select on columns"""
    distinct_on: [department_stores_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [department_stores_order_by!]

    """filter the rows returned"""
    where: department_stores_bool_exp
  ): department_stores_aggregate!

  """
  fetch data from the table: "department_stores" using primary key columns
  """
  department_stores_by_pk(dept_store_id: bigint!): department_stores

  """
  fetch data from the table: "departments"
  """
  departments(
    """distinct select on columns"""
    distinct_on: [departments_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [departments_order_by!]

    """filter the rows returned"""
    where: departments_bool_exp
  ): [departments!]!

  """
  fetch aggregated fields from the table: "departments"
  """
  departments_aggregate(
    """distinct select on columns"""
    distinct_on: [departments_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [departments_order_by!]

    """filter the rows returned"""
    where: departments_bool_exp
  ): departments_aggregate!

  """fetch data from the table: "departments" using primary key columns"""
  departments_by_pk(department_id: bigint!): departments

  """
  fetch data from the table: "order_items"
  """
  order_items(
    """distinct select on columns"""
    distinct_on: [order_items_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [order_items_order_by!]

    """filter the rows returned"""
    where: order_items_bool_exp
  ): [order_items!]!

  """
  fetch aggregated fields from the table: "order_items"
  """
  order_items_aggregate(
    """distinct select on columns"""
    distinct_on: [order_items_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [order_items_order_by!]

    """filter the rows returned"""
    where: order_items_bool_exp
  ): order_items_aggregate!

  """fetch data from the table: "order_items" using primary key columns"""
  order_items_by_pk(order_item_id: bigint!): order_items

  """
  fetch data from the table: "product_suppliers"
  """
  product_suppliers(
    """distinct select on columns"""
    distinct_on: [product_suppliers_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [product_suppliers_order_by!]

    """filter the rows returned"""
    where: product_suppliers_bool_exp
  ): [product_suppliers!]!

  """
  fetch aggregated fields from the table: "product_suppliers"
  """
  product_suppliers_aggregate(
    """distinct select on columns"""
    distinct_on: [product_suppliers_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [product_suppliers_order_by!]

    """filter the rows returned"""
    where: product_suppliers_bool_exp
  ): product_suppliers_aggregate!

  """
  fetch data from the table: "product_suppliers" using primary key columns
  """
  product_suppliers_by_pk(product_id: bigint!, supplier_id: bigint!): product_suppliers

  """
  fetch data from the table: "products"
  """
  products(
    """distinct select on columns"""
    distinct_on: [products_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [products_order_by!]

    """filter the rows returned"""
    where: products_bool_exp
  ): [products!]!

  """
  fetch aggregated fields from the table: "products"
  """
  products_aggregate(
    """distinct select on columns"""
    distinct_on: [products_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [products_order_by!]

    """filter the rows returned"""
    where: products_bool_exp
  ): products_aggregate!

  """fetch data from the table: "products" using primary key columns"""
  products_by_pk(product_id: bigint!): products

  """
  fetch data from the table: "staff"
  """
  staff(
    """distinct select on columns"""
    distinct_on: [staff_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [staff_order_by!]

    """filter the rows returned"""
    where: staff_bool_exp
  ): [staff!]!

  """
  fetch aggregated fields from the table: "staff"
  """
  staff_aggregate(
    """distinct select on columns"""
    distinct_on: [staff_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [staff_order_by!]

    """filter the rows returned"""
    where: staff_bool_exp
  ): staff_aggregate!

  """fetch data from the table: "staff" using primary key columns"""
  staff_by_pk(staff_id: bigint!): staff

  """
  fetch data from the table: "staff_department_assignments"
  """
  staff_department_assignments(
    """distinct select on columns"""
    distinct_on: [staff_department_assignments_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [staff_department_assignments_order_by!]

    """filter the rows returned"""
    where: staff_department_assignments_bool_exp
  ): [staff_department_assignments!]!

  """
  fetch aggregated fields from the table: "staff_department_assignments"
  """
  staff_department_assignments_aggregate(
    """distinct select on columns"""
    distinct_on: [staff_department_assignments_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [staff_department_assignments_order_by!]

    """filter the rows returned"""
    where: staff_department_assignments_bool_exp
  ): staff_department_assignments_aggregate!

  """
  fetch data from the table: "staff_department_assignments" using primary key columns
  """
  staff_department_assignments_by_pk(department_id: bigint!, staff_id: bigint!): staff_department_assignments

  """
  fetch data from the table: "supplier_addresses"
  """
  supplier_addresses(
    """distinct select on columns"""
    distinct_on: [supplier_addresses_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [supplier_addresses_order_by!]

    """filter the rows returned"""
    where: supplier_addresses_bool_exp
  ): [supplier_addresses!]!

  """
  fetch aggregated fields from the table: "supplier_addresses"
  """
  supplier_addresses_aggregate(
    """distinct select on columns"""
    distinct_on: [supplier_addresses_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [supplier_addresses_order_by!]

    """filter the rows returned"""
    where: supplier_addresses_bool_exp
  ): supplier_addresses_aggregate!

  """
  fetch data from the table: "supplier_addresses" using primary key columns
  """
  supplier_addresses_by_pk(address_id: bigint!, supplier_id: bigint!): supplier_addresses

  """
  fetch data from the table: "suppliers"
  """
  suppliers(
    """distinct select on columns"""
    distinct_on: [suppliers_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [suppliers_order_by!]

    """filter the rows returned"""
    where: suppliers_bool_exp
  ): [suppliers!]!

  """
  fetch aggregated fields from the table: "suppliers"
  """
  suppliers_aggregate(
    """distinct select on columns"""
    distinct_on: [suppliers_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [suppliers_order_by!]

    """filter the rows returned"""
    where: suppliers_bool_exp
  ): suppliers_aggregate!

  """fetch data from the table: "suppliers" using primary key columns"""
  suppliers_by_pk(supplier_id: bigint!): suppliers
}

"""
columns and relationships of "staff"
"""
type staff {
  """An array relationship"""
  staff_department_assignments(
    """distinct select on columns"""
    distinct_on: [staff_department_assignments_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [staff_department_assignments_order_by!]

    """filter the rows returned"""
    where: staff_department_assignments_bool_exp
  ): [staff_department_assignments!]!

  """An aggregated array relationship"""
  staff_department_assignments_aggregate(
    """distinct select on columns"""
    distinct_on: [staff_department_assignments_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [staff_department_assignments_order_by!]

    """filter the rows returned"""
    where: staff_department_assignments_bool_exp
  ): staff_department_assignments_aggregate!
  staff_gender: String
  staff_id: bigint!
  staff_name: String
}

"""
aggregated selection of "staff"
"""
type staff_aggregate {
  aggregate: staff_aggregate_fields
  nodes: [staff!]!
}

"""
aggregate fields of "staff"
"""
type staff_aggregate_fields {
  avg: staff_avg_fields
  count(columns: [staff_select_column!], distinct: Boolean): Int
  max: staff_max_fields
  min: staff_min_fields
  stddev: staff_stddev_fields
  stddev_pop: staff_stddev_pop_fields
  stddev_samp: staff_stddev_samp_fields
  sum: staff_sum_fields
  var_pop: staff_var_pop_fields
  var_samp: staff_var_samp_fields
  variance: staff_variance_fields
}

"""
order by aggregate values of table "staff"
"""
input staff_aggregate_order_by {
  avg: staff_avg_order_by
  count: order_by
  max: staff_max_order_by
  min: staff_min_order_by
  stddev: staff_stddev_order_by
  stddev_pop: staff_stddev_pop_order_by
  stddev_samp: staff_stddev_samp_order_by
  sum: staff_sum_order_by
  var_pop: staff_var_pop_order_by
  var_samp: staff_var_samp_order_by
  variance: staff_variance_order_by
}

"""
input type for inserting array relation for remote table "staff"
"""
input staff_arr_rel_insert_input {
  data: [staff_insert_input!]!
  on_conflict: staff_on_conflict
}

"""aggregate avg on columns"""
type staff_avg_fields {
  staff_id: Float
}

"""
order by avg() on columns of table "staff"
"""
input staff_avg_order_by {
  staff_id: order_by
}

"""
Boolean expression to filter rows from the table "staff". All fields are combined with a logical 'AND'.
"""
input staff_bool_exp {
  _and: [staff_bool_exp]
  _not: staff_bool_exp
  _or: [staff_bool_exp]
  staff_department_assignments: staff_department_assignments_bool_exp
  staff_gender: String_comparison_exp
  staff_id: bigint_comparison_exp
  staff_name: String_comparison_exp
}

"""
unique or primary key constraints on table "staff"
"""
enum staff_constraint {
  """unique or primary key constraint"""
  idx_21800_staff_pkey
}

"""
columns and relationships of "staff_department_assignments"
"""
type staff_department_assignments {
  date_assigned_from: timestamptz
  date_assigned_to: timestamptz

  """An object relationship"""
  department: departments!
  department_id: bigint!
  job_title_code: String

  """An object relationship"""
  staff: staff!
  staff_id: bigint!
}

"""
aggregated selection of "staff_department_assignments"
"""
type staff_department_assignments_aggregate {
  aggregate: staff_department_assignments_aggregate_fields
  nodes: [staff_department_assignments!]!
}

"""
aggregate fields of "staff_department_assignments"
"""
type staff_department_assignments_aggregate_fields {
  avg: staff_department_assignments_avg_fields
  count(columns: [staff_department_assignments_select_column!], distinct: Boolean): Int
  max: staff_department_assignments_max_fields
  min: staff_department_assignments_min_fields
  stddev: staff_department_assignments_stddev_fields
  stddev_pop: staff_department_assignments_stddev_pop_fields
  stddev_samp: staff_department_assignments_stddev_samp_fields
  sum: staff_department_assignments_sum_fields
  var_pop: staff_department_assignments_var_pop_fields
  var_samp: staff_department_assignments_var_samp_fields
  variance: staff_department_assignments_variance_fields
}

"""
order by aggregate values of table "staff_department_assignments"
"""
input staff_department_assignments_aggregate_order_by {
  avg: staff_department_assignments_avg_order_by
  count: order_by
  max: staff_department_assignments_max_order_by
  min: staff_department_assignments_min_order_by
  stddev: staff_department_assignments_stddev_order_by
  stddev_pop: staff_department_assignments_stddev_pop_order_by
  stddev_samp: staff_department_assignments_stddev_samp_order_by
  sum: staff_department_assignments_sum_order_by
  var_pop: staff_department_assignments_var_pop_order_by
  var_samp: staff_department_assignments_var_samp_order_by
  variance: staff_department_assignments_variance_order_by
}

"""
input type for inserting array relation for remote table "staff_department_assignments"
"""
input staff_department_assignments_arr_rel_insert_input {
  data: [staff_department_assignments_insert_input!]!
  on_conflict: staff_department_assignments_on_conflict
}

"""aggregate avg on columns"""
type staff_department_assignments_avg_fields {
  department_id: Float
  staff_id: Float
}

"""
order by avg() on columns of table "staff_department_assignments"
"""
input staff_department_assignments_avg_order_by {
  department_id: order_by
  staff_id: order_by
}

"""
Boolean expression to filter rows from the table "staff_department_assignments".
All fields are combined with a logical 'AND'.
"""
input staff_department_assignments_bool_exp {
  _and: [staff_department_assignments_bool_exp]
  _not: staff_department_assignments_bool_exp
  _or: [staff_department_assignments_bool_exp]
  date_assigned_from: timestamptz_comparison_exp
  date_assigned_to: timestamptz_comparison_exp
  department: departments_bool_exp
  department_id: bigint_comparison_exp
  job_title_code: String_comparison_exp
  staff: staff_bool_exp
  staff_id: bigint_comparison_exp
}

"""
unique or primary key constraints on table "staff_department_assignments"
"""
enum staff_department_assignments_constraint {
  """unique or primary key constraint"""
  idx_21863_sqlite_autoindex_staff_department_assignments_1
}

"""
input type for incrementing integer column in table "staff_department_assignments"
"""
input staff_department_assignments_inc_input {
  department_id: bigint
  staff_id: bigint
}

"""
input type for inserting data into table "staff_department_assignments"
"""
input staff_department_assignments_insert_input {
  date_assigned_from: timestamptz
  date_assigned_to: timestamptz
  department: departments_obj_rel_insert_input
  department_id: bigint
  job_title_code: String
  staff: staff_obj_rel_insert_input
  staff_id: bigint
}

"""aggregate max on columns"""
type staff_department_assignments_max_fields {
  date_assigned_from: timestamptz
  date_assigned_to: timestamptz
  department_id: bigint
  job_title_code: String
  staff_id: bigint
}

"""
order by max() on columns of table "staff_department_assignments"
"""
input staff_department_assignments_max_order_by {
  date_assigned_from: order_by
  date_assigned_to: order_by
  department_id: order_by
  job_title_code: order_by
  staff_id: order_by
}

"""aggregate min on columns"""
type staff_department_assignments_min_fields {
  date_assigned_from: timestamptz
  date_assigned_to: timestamptz
  department_id: bigint
  job_title_code: String
  staff_id: bigint
}

"""
order by min() on columns of table "staff_department_assignments"
"""
input staff_department_assignments_min_order_by {
  date_assigned_from: order_by
  date_assigned_to: order_by
  department_id: order_by
  job_title_code: order_by
  staff_id: order_by
}

"""
response of any mutation on the table "staff_department_assignments"
"""
type staff_department_assignments_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [staff_department_assignments!]!
}

"""
input type for inserting object relation for remote table "staff_department_assignments"
"""
input staff_department_assignments_obj_rel_insert_input {
  data: staff_department_assignments_insert_input!
  on_conflict: staff_department_assignments_on_conflict
}

"""
on conflict condition type for table "staff_department_assignments"
"""
input staff_department_assignments_on_conflict {
  constraint: staff_department_assignments_constraint!
  update_columns: [staff_department_assignments_update_column!]!
  where: staff_department_assignments_bool_exp
}

"""
ordering options when selecting data from "staff_department_assignments"
"""
input staff_department_assignments_order_by {
  date_assigned_from: order_by
  date_assigned_to: order_by
  department: departments_order_by
  department_id: order_by
  job_title_code: order_by
  staff: staff_order_by
  staff_id: order_by
}

"""
primary key columns input for table: "staff_department_assignments"
"""
input staff_department_assignments_pk_columns_input {
  department_id: bigint!
  staff_id: bigint!
}

"""
select columns of table "staff_department_assignments"
"""
enum staff_department_assignments_select_column {
  """column name"""
  date_assigned_from

  """column name"""
  date_assigned_to

  """column name"""
  department_id

  """column name"""
  job_title_code

  """column name"""
  staff_id
}

"""
input type for updating data in table "staff_department_assignments"
"""
input staff_department_assignments_set_input {
  date_assigned_from: timestamptz
  date_assigned_to: timestamptz
  department_id: bigint
  job_title_code: String
  staff_id: bigint
}

"""aggregate stddev on columns"""
type staff_department_assignments_stddev_fields {
  department_id: Float
  staff_id: Float
}

"""
order by stddev() on columns of table "staff_department_assignments"
"""
input staff_department_assignments_stddev_order_by {
  department_id: order_by
  staff_id: order_by
}

"""aggregate stddev_pop on columns"""
type staff_department_assignments_stddev_pop_fields {
  department_id: Float
  staff_id: Float
}

"""
order by stddev_pop() on columns of table "staff_department_assignments"
"""
input staff_department_assignments_stddev_pop_order_by {
  department_id: order_by
  staff_id: order_by
}

"""aggregate stddev_samp on columns"""
type staff_department_assignments_stddev_samp_fields {
  department_id: Float
  staff_id: Float
}

"""
order by stddev_samp() on columns of table "staff_department_assignments"
"""
input staff_department_assignments_stddev_samp_order_by {
  department_id: order_by
  staff_id: order_by
}

"""aggregate sum on columns"""
type staff_department_assignments_sum_fields {
  department_id: bigint
  staff_id: bigint
}

"""
order by sum() on columns of table "staff_department_assignments"
"""
input staff_department_assignments_sum_order_by {
  department_id: order_by
  staff_id: order_by
}

"""
update columns of table "staff_department_assignments"
"""
enum staff_department_assignments_update_column {
  """column name"""
  date_assigned_from

  """column name"""
  date_assigned_to

  """column name"""
  department_id

  """column name"""
  job_title_code

  """column name"""
  staff_id
}

"""aggregate var_pop on columns"""
type staff_department_assignments_var_pop_fields {
  department_id: Float
  staff_id: Float
}

"""
order by var_pop() on columns of table "staff_department_assignments"
"""
input staff_department_assignments_var_pop_order_by {
  department_id: order_by
  staff_id: order_by
}

"""aggregate var_samp on columns"""
type staff_department_assignments_var_samp_fields {
  department_id: Float
  staff_id: Float
}

"""
order by var_samp() on columns of table "staff_department_assignments"
"""
input staff_department_assignments_var_samp_order_by {
  department_id: order_by
  staff_id: order_by
}

"""aggregate variance on columns"""
type staff_department_assignments_variance_fields {
  department_id: Float
  staff_id: Float
}

"""
order by variance() on columns of table "staff_department_assignments"
"""
input staff_department_assignments_variance_order_by {
  department_id: order_by
  staff_id: order_by
}

"""
input type for incrementing integer column in table "staff"
"""
input staff_inc_input {
  staff_id: bigint
}

"""
input type for inserting data into table "staff"
"""
input staff_insert_input {
  staff_department_assignments: staff_department_assignments_arr_rel_insert_input
  staff_gender: String
  staff_id: bigint
  staff_name: String
}

"""aggregate max on columns"""
type staff_max_fields {
  staff_gender: String
  staff_id: bigint
  staff_name: String
}

"""
order by max() on columns of table "staff"
"""
input staff_max_order_by {
  staff_gender: order_by
  staff_id: order_by
  staff_name: order_by
}

"""aggregate min on columns"""
type staff_min_fields {
  staff_gender: String
  staff_id: bigint
  staff_name: String
}

"""
order by min() on columns of table "staff"
"""
input staff_min_order_by {
  staff_gender: order_by
  staff_id: order_by
  staff_name: order_by
}

"""
response of any mutation on the table "staff"
"""
type staff_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [staff!]!
}

"""
input type for inserting object relation for remote table "staff"
"""
input staff_obj_rel_insert_input {
  data: staff_insert_input!
  on_conflict: staff_on_conflict
}

"""
on conflict condition type for table "staff"
"""
input staff_on_conflict {
  constraint: staff_constraint!
  update_columns: [staff_update_column!]!
  where: staff_bool_exp
}

"""
ordering options when selecting data from "staff"
"""
input staff_order_by {
  staff_department_assignments_aggregate: staff_department_assignments_aggregate_order_by
  staff_gender: order_by
  staff_id: order_by
  staff_name: order_by
}

"""
primary key columns input for table: "staff"
"""
input staff_pk_columns_input {
  staff_id: bigint!
}

"""
select columns of table "staff"
"""
enum staff_select_column {
  """column name"""
  staff_gender

  """column name"""
  staff_id

  """column name"""
  staff_name
}

"""
input type for updating data in table "staff"
"""
input staff_set_input {
  staff_gender: String
  staff_id: bigint
  staff_name: String
}

"""aggregate stddev on columns"""
type staff_stddev_fields {
  staff_id: Float
}

"""
order by stddev() on columns of table "staff"
"""
input staff_stddev_order_by {
  staff_id: order_by
}

"""aggregate stddev_pop on columns"""
type staff_stddev_pop_fields {
  staff_id: Float
}

"""
order by stddev_pop() on columns of table "staff"
"""
input staff_stddev_pop_order_by {
  staff_id: order_by
}

"""aggregate stddev_samp on columns"""
type staff_stddev_samp_fields {
  staff_id: Float
}

"""
order by stddev_samp() on columns of table "staff"
"""
input staff_stddev_samp_order_by {
  staff_id: order_by
}

"""aggregate sum on columns"""
type staff_sum_fields {
  staff_id: bigint
}

"""
order by sum() on columns of table "staff"
"""
input staff_sum_order_by {
  staff_id: order_by
}

"""
update columns of table "staff"
"""
enum staff_update_column {
  """column name"""
  staff_gender

  """column name"""
  staff_id

  """column name"""
  staff_name
}

"""aggregate var_pop on columns"""
type staff_var_pop_fields {
  staff_id: Float
}

"""
order by var_pop() on columns of table "staff"
"""
input staff_var_pop_order_by {
  staff_id: order_by
}

"""aggregate var_samp on columns"""
type staff_var_samp_fields {
  staff_id: Float
}

"""
order by var_samp() on columns of table "staff"
"""
input staff_var_samp_order_by {
  staff_id: order_by
}

"""aggregate variance on columns"""
type staff_variance_fields {
  staff_id: Float
}

"""
order by variance() on columns of table "staff"
"""
input staff_variance_order_by {
  staff_id: order_by
}

"""
expression to compare columns of type String. All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String
  _ilike: String
  _in: [String!]
  _is_null: Boolean
  _like: String
  _lt: String
  _lte: String
  _neq: String
  _nilike: String
  _nin: [String!]
  _nlike: String
  _nsimilar: String
  _similar: String
}

"""subscription root"""
type subscription_root {
  """
  fetch data from the table: "addresses"
  """
  addresses(
    """distinct select on columns"""
    distinct_on: [addresses_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [addresses_order_by!]

    """filter the rows returned"""
    where: addresses_bool_exp
  ): [addresses!]!

  """
  fetch aggregated fields from the table: "addresses"
  """
  addresses_aggregate(
    """distinct select on columns"""
    distinct_on: [addresses_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [addresses_order_by!]

    """filter the rows returned"""
    where: addresses_bool_exp
  ): addresses_aggregate!

  """fetch data from the table: "addresses" using primary key columns"""
  addresses_by_pk(address_id: bigint!): addresses

  """
  fetch data from the table: "customer_addresses"
  """
  customer_addresses(
    """distinct select on columns"""
    distinct_on: [customer_addresses_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [customer_addresses_order_by!]

    """filter the rows returned"""
    where: customer_addresses_bool_exp
  ): [customer_addresses!]!

  """
  fetch aggregated fields from the table: "customer_addresses"
  """
  customer_addresses_aggregate(
    """distinct select on columns"""
    distinct_on: [customer_addresses_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [customer_addresses_order_by!]

    """filter the rows returned"""
    where: customer_addresses_bool_exp
  ): customer_addresses_aggregate!

  """
  fetch data from the table: "customer_addresses" using primary key columns
  """
  customer_addresses_by_pk(address_id: bigint!, customer_id: bigint!): customer_addresses

  """
  fetch data from the table: "customer_orders"
  """
  customer_orders(
    """distinct select on columns"""
    distinct_on: [customer_orders_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [customer_orders_order_by!]

    """filter the rows returned"""
    where: customer_orders_bool_exp
  ): [customer_orders!]!

  """
  fetch aggregated fields from the table: "customer_orders"
  """
  customer_orders_aggregate(
    """distinct select on columns"""
    distinct_on: [customer_orders_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [customer_orders_order_by!]

    """filter the rows returned"""
    where: customer_orders_bool_exp
  ): customer_orders_aggregate!

  """fetch data from the table: "customer_orders" using primary key columns"""
  customer_orders_by_pk(order_id: bigint!): customer_orders

  """
  fetch data from the table: "customers"
  """
  customers(
    """distinct select on columns"""
    distinct_on: [customers_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [customers_order_by!]

    """filter the rows returned"""
    where: customers_bool_exp
  ): [customers!]!

  """
  fetch aggregated fields from the table: "customers"
  """
  customers_aggregate(
    """distinct select on columns"""
    distinct_on: [customers_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [customers_order_by!]

    """filter the rows returned"""
    where: customers_bool_exp
  ): customers_aggregate!

  """fetch data from the table: "customers" using primary key columns"""
  customers_by_pk(customer_id: bigint!): customers

  """
  fetch data from the table: "department_store_chain"
  """
  department_store_chain(
    """distinct select on columns"""
    distinct_on: [department_store_chain_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [department_store_chain_order_by!]

    """filter the rows returned"""
    where: department_store_chain_bool_exp
  ): [department_store_chain!]!

  """
  fetch aggregated fields from the table: "department_store_chain"
  """
  department_store_chain_aggregate(
    """distinct select on columns"""
    distinct_on: [department_store_chain_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [department_store_chain_order_by!]

    """filter the rows returned"""
    where: department_store_chain_bool_exp
  ): department_store_chain_aggregate!

  """
  fetch data from the table: "department_store_chain" using primary key columns
  """
  department_store_chain_by_pk(dept_store_chain_id: bigint!): department_store_chain

  """
  fetch data from the table: "department_stores"
  """
  department_stores(
    """distinct select on columns"""
    distinct_on: [department_stores_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [department_stores_order_by!]

    """filter the rows returned"""
    where: department_stores_bool_exp
  ): [department_stores!]!

  """
  fetch aggregated fields from the table: "department_stores"
  """
  department_stores_aggregate(
    """distinct select on columns"""
    distinct_on: [department_stores_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [department_stores_order_by!]

    """filter the rows returned"""
    where: department_stores_bool_exp
  ): department_stores_aggregate!

  """
  fetch data from the table: "department_stores" using primary key columns
  """
  department_stores_by_pk(dept_store_id: bigint!): department_stores

  """
  fetch data from the table: "departments"
  """
  departments(
    """distinct select on columns"""
    distinct_on: [departments_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [departments_order_by!]

    """filter the rows returned"""
    where: departments_bool_exp
  ): [departments!]!

  """
  fetch aggregated fields from the table: "departments"
  """
  departments_aggregate(
    """distinct select on columns"""
    distinct_on: [departments_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [departments_order_by!]

    """filter the rows returned"""
    where: departments_bool_exp
  ): departments_aggregate!

  """fetch data from the table: "departments" using primary key columns"""
  departments_by_pk(department_id: bigint!): departments

  """
  fetch data from the table: "order_items"
  """
  order_items(
    """distinct select on columns"""
    distinct_on: [order_items_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [order_items_order_by!]

    """filter the rows returned"""
    where: order_items_bool_exp
  ): [order_items!]!

  """
  fetch aggregated fields from the table: "order_items"
  """
  order_items_aggregate(
    """distinct select on columns"""
    distinct_on: [order_items_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [order_items_order_by!]

    """filter the rows returned"""
    where: order_items_bool_exp
  ): order_items_aggregate!

  """fetch data from the table: "order_items" using primary key columns"""
  order_items_by_pk(order_item_id: bigint!): order_items

  """
  fetch data from the table: "product_suppliers"
  """
  product_suppliers(
    """distinct select on columns"""
    distinct_on: [product_suppliers_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [product_suppliers_order_by!]

    """filter the rows returned"""
    where: product_suppliers_bool_exp
  ): [product_suppliers!]!

  """
  fetch aggregated fields from the table: "product_suppliers"
  """
  product_suppliers_aggregate(
    """distinct select on columns"""
    distinct_on: [product_suppliers_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [product_suppliers_order_by!]

    """filter the rows returned"""
    where: product_suppliers_bool_exp
  ): product_suppliers_aggregate!

  """
  fetch data from the table: "product_suppliers" using primary key columns
  """
  product_suppliers_by_pk(product_id: bigint!, supplier_id: bigint!): product_suppliers

  """
  fetch data from the table: "products"
  """
  products(
    """distinct select on columns"""
    distinct_on: [products_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [products_order_by!]

    """filter the rows returned"""
    where: products_bool_exp
  ): [products!]!

  """
  fetch aggregated fields from the table: "products"
  """
  products_aggregate(
    """distinct select on columns"""
    distinct_on: [products_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [products_order_by!]

    """filter the rows returned"""
    where: products_bool_exp
  ): products_aggregate!

  """fetch data from the table: "products" using primary key columns"""
  products_by_pk(product_id: bigint!): products

  """
  fetch data from the table: "staff"
  """
  staff(
    """distinct select on columns"""
    distinct_on: [staff_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [staff_order_by!]

    """filter the rows returned"""
    where: staff_bool_exp
  ): [staff!]!

  """
  fetch aggregated fields from the table: "staff"
  """
  staff_aggregate(
    """distinct select on columns"""
    distinct_on: [staff_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [staff_order_by!]

    """filter the rows returned"""
    where: staff_bool_exp
  ): staff_aggregate!

  """fetch data from the table: "staff" using primary key columns"""
  staff_by_pk(staff_id: bigint!): staff

  """
  fetch data from the table: "staff_department_assignments"
  """
  staff_department_assignments(
    """distinct select on columns"""
    distinct_on: [staff_department_assignments_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [staff_department_assignments_order_by!]

    """filter the rows returned"""
    where: staff_department_assignments_bool_exp
  ): [staff_department_assignments!]!

  """
  fetch aggregated fields from the table: "staff_department_assignments"
  """
  staff_department_assignments_aggregate(
    """distinct select on columns"""
    distinct_on: [staff_department_assignments_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [staff_department_assignments_order_by!]

    """filter the rows returned"""
    where: staff_department_assignments_bool_exp
  ): staff_department_assignments_aggregate!

  """
  fetch data from the table: "staff_department_assignments" using primary key columns
  """
  staff_department_assignments_by_pk(department_id: bigint!, staff_id: bigint!): staff_department_assignments

  """
  fetch data from the table: "supplier_addresses"
  """
  supplier_addresses(
    """distinct select on columns"""
    distinct_on: [supplier_addresses_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [supplier_addresses_order_by!]

    """filter the rows returned"""
    where: supplier_addresses_bool_exp
  ): [supplier_addresses!]!

  """
  fetch aggregated fields from the table: "supplier_addresses"
  """
  supplier_addresses_aggregate(
    """distinct select on columns"""
    distinct_on: [supplier_addresses_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [supplier_addresses_order_by!]

    """filter the rows returned"""
    where: supplier_addresses_bool_exp
  ): supplier_addresses_aggregate!

  """
  fetch data from the table: "supplier_addresses" using primary key columns
  """
  supplier_addresses_by_pk(address_id: bigint!, supplier_id: bigint!): supplier_addresses

  """
  fetch data from the table: "suppliers"
  """
  suppliers(
    """distinct select on columns"""
    distinct_on: [suppliers_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [suppliers_order_by!]

    """filter the rows returned"""
    where: suppliers_bool_exp
  ): [suppliers!]!

  """
  fetch aggregated fields from the table: "suppliers"
  """
  suppliers_aggregate(
    """distinct select on columns"""
    distinct_on: [suppliers_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [suppliers_order_by!]

    """filter the rows returned"""
    where: suppliers_bool_exp
  ): suppliers_aggregate!

  """fetch data from the table: "suppliers" using primary key columns"""
  suppliers_by_pk(supplier_id: bigint!): suppliers
}

"""
columns and relationships of "supplier_addresses"
"""
type supplier_addresses {
  """An object relationship"""
  address: addresses!
  address_id: bigint!
  date_from: timestamptz
  date_to: timestamptz

  """An object relationship"""
  supplier: suppliers!
  supplier_id: bigint!
}

"""
aggregated selection of "supplier_addresses"
"""
type supplier_addresses_aggregate {
  aggregate: supplier_addresses_aggregate_fields
  nodes: [supplier_addresses!]!
}

"""
aggregate fields of "supplier_addresses"
"""
type supplier_addresses_aggregate_fields {
  avg: supplier_addresses_avg_fields
  count(columns: [supplier_addresses_select_column!], distinct: Boolean): Int
  max: supplier_addresses_max_fields
  min: supplier_addresses_min_fields
  stddev: supplier_addresses_stddev_fields
  stddev_pop: supplier_addresses_stddev_pop_fields
  stddev_samp: supplier_addresses_stddev_samp_fields
  sum: supplier_addresses_sum_fields
  var_pop: supplier_addresses_var_pop_fields
  var_samp: supplier_addresses_var_samp_fields
  variance: supplier_addresses_variance_fields
}

"""
order by aggregate values of table "supplier_addresses"
"""
input supplier_addresses_aggregate_order_by {
  avg: supplier_addresses_avg_order_by
  count: order_by
  max: supplier_addresses_max_order_by
  min: supplier_addresses_min_order_by
  stddev: supplier_addresses_stddev_order_by
  stddev_pop: supplier_addresses_stddev_pop_order_by
  stddev_samp: supplier_addresses_stddev_samp_order_by
  sum: supplier_addresses_sum_order_by
  var_pop: supplier_addresses_var_pop_order_by
  var_samp: supplier_addresses_var_samp_order_by
  variance: supplier_addresses_variance_order_by
}

"""
input type for inserting array relation for remote table "supplier_addresses"
"""
input supplier_addresses_arr_rel_insert_input {
  data: [supplier_addresses_insert_input!]!
  on_conflict: supplier_addresses_on_conflict
}

"""aggregate avg on columns"""
type supplier_addresses_avg_fields {
  address_id: Float
  supplier_id: Float
}

"""
order by avg() on columns of table "supplier_addresses"
"""
input supplier_addresses_avg_order_by {
  address_id: order_by
  supplier_id: order_by
}

"""
Boolean expression to filter rows from the table "supplier_addresses". All fields are combined with a logical 'AND'.
"""
input supplier_addresses_bool_exp {
  _and: [supplier_addresses_bool_exp]
  _not: supplier_addresses_bool_exp
  _or: [supplier_addresses_bool_exp]
  address: addresses_bool_exp
  address_id: bigint_comparison_exp
  date_from: timestamptz_comparison_exp
  date_to: timestamptz_comparison_exp
  supplier: suppliers_bool_exp
  supplier_id: bigint_comparison_exp
}

"""
unique or primary key constraints on table "supplier_addresses"
"""
enum supplier_addresses_constraint {
  """unique or primary key constraint"""
  idx_21830_sqlite_autoindex_supplier_addresses_1
}

"""
input type for incrementing integer column in table "supplier_addresses"
"""
input supplier_addresses_inc_input {
  address_id: bigint
  supplier_id: bigint
}

"""
input type for inserting data into table "supplier_addresses"
"""
input supplier_addresses_insert_input {
  address: addresses_obj_rel_insert_input
  address_id: bigint
  date_from: timestamptz
  date_to: timestamptz
  supplier: suppliers_obj_rel_insert_input
  supplier_id: bigint
}

"""aggregate max on columns"""
type supplier_addresses_max_fields {
  address_id: bigint
  date_from: timestamptz
  date_to: timestamptz
  supplier_id: bigint
}

"""
order by max() on columns of table "supplier_addresses"
"""
input supplier_addresses_max_order_by {
  address_id: order_by
  date_from: order_by
  date_to: order_by
  supplier_id: order_by
}

"""aggregate min on columns"""
type supplier_addresses_min_fields {
  address_id: bigint
  date_from: timestamptz
  date_to: timestamptz
  supplier_id: bigint
}

"""
order by min() on columns of table "supplier_addresses"
"""
input supplier_addresses_min_order_by {
  address_id: order_by
  date_from: order_by
  date_to: order_by
  supplier_id: order_by
}

"""
response of any mutation on the table "supplier_addresses"
"""
type supplier_addresses_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [supplier_addresses!]!
}

"""
input type for inserting object relation for remote table "supplier_addresses"
"""
input supplier_addresses_obj_rel_insert_input {
  data: supplier_addresses_insert_input!
  on_conflict: supplier_addresses_on_conflict
}

"""
on conflict condition type for table "supplier_addresses"
"""
input supplier_addresses_on_conflict {
  constraint: supplier_addresses_constraint!
  update_columns: [supplier_addresses_update_column!]!
  where: supplier_addresses_bool_exp
}

"""
ordering options when selecting data from "supplier_addresses"
"""
input supplier_addresses_order_by {
  address: addresses_order_by
  address_id: order_by
  date_from: order_by
  date_to: order_by
  supplier: suppliers_order_by
  supplier_id: order_by
}

"""
primary key columns input for table: "supplier_addresses"
"""
input supplier_addresses_pk_columns_input {
  address_id: bigint!
  supplier_id: bigint!
}

"""
select columns of table "supplier_addresses"
"""
enum supplier_addresses_select_column {
  """column name"""
  address_id

  """column name"""
  date_from

  """column name"""
  date_to

  """column name"""
  supplier_id
}

"""
input type for updating data in table "supplier_addresses"
"""
input supplier_addresses_set_input {
  address_id: bigint
  date_from: timestamptz
  date_to: timestamptz
  supplier_id: bigint
}

"""aggregate stddev on columns"""
type supplier_addresses_stddev_fields {
  address_id: Float
  supplier_id: Float
}

"""
order by stddev() on columns of table "supplier_addresses"
"""
input supplier_addresses_stddev_order_by {
  address_id: order_by
  supplier_id: order_by
}

"""aggregate stddev_pop on columns"""
type supplier_addresses_stddev_pop_fields {
  address_id: Float
  supplier_id: Float
}

"""
order by stddev_pop() on columns of table "supplier_addresses"
"""
input supplier_addresses_stddev_pop_order_by {
  address_id: order_by
  supplier_id: order_by
}

"""aggregate stddev_samp on columns"""
type supplier_addresses_stddev_samp_fields {
  address_id: Float
  supplier_id: Float
}

"""
order by stddev_samp() on columns of table "supplier_addresses"
"""
input supplier_addresses_stddev_samp_order_by {
  address_id: order_by
  supplier_id: order_by
}

"""aggregate sum on columns"""
type supplier_addresses_sum_fields {
  address_id: bigint
  supplier_id: bigint
}

"""
order by sum() on columns of table "supplier_addresses"
"""
input supplier_addresses_sum_order_by {
  address_id: order_by
  supplier_id: order_by
}

"""
update columns of table "supplier_addresses"
"""
enum supplier_addresses_update_column {
  """column name"""
  address_id

  """column name"""
  date_from

  """column name"""
  date_to

  """column name"""
  supplier_id
}

"""aggregate var_pop on columns"""
type supplier_addresses_var_pop_fields {
  address_id: Float
  supplier_id: Float
}

"""
order by var_pop() on columns of table "supplier_addresses"
"""
input supplier_addresses_var_pop_order_by {
  address_id: order_by
  supplier_id: order_by
}

"""aggregate var_samp on columns"""
type supplier_addresses_var_samp_fields {
  address_id: Float
  supplier_id: Float
}

"""
order by var_samp() on columns of table "supplier_addresses"
"""
input supplier_addresses_var_samp_order_by {
  address_id: order_by
  supplier_id: order_by
}

"""aggregate variance on columns"""
type supplier_addresses_variance_fields {
  address_id: Float
  supplier_id: Float
}

"""
order by variance() on columns of table "supplier_addresses"
"""
input supplier_addresses_variance_order_by {
  address_id: order_by
  supplier_id: order_by
}

"""
columns and relationships of "suppliers"
"""
type suppliers {
  """An array relationship"""
  product_suppliers(
    """distinct select on columns"""
    distinct_on: [product_suppliers_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [product_suppliers_order_by!]

    """filter the rows returned"""
    where: product_suppliers_bool_exp
  ): [product_suppliers!]!

  """An aggregated array relationship"""
  product_suppliers_aggregate(
    """distinct select on columns"""
    distinct_on: [product_suppliers_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [product_suppliers_order_by!]

    """filter the rows returned"""
    where: product_suppliers_bool_exp
  ): product_suppliers_aggregate!

  """An array relationship"""
  supplier_addresses(
    """distinct select on columns"""
    distinct_on: [supplier_addresses_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [supplier_addresses_order_by!]

    """filter the rows returned"""
    where: supplier_addresses_bool_exp
  ): [supplier_addresses!]!

  """An aggregated array relationship"""
  supplier_addresses_aggregate(
    """distinct select on columns"""
    distinct_on: [supplier_addresses_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [supplier_addresses_order_by!]

    """filter the rows returned"""
    where: supplier_addresses_bool_exp
  ): supplier_addresses_aggregate!
  supplier_id: bigint!
  supplier_name: String
  supplier_phone: String
}

"""
aggregated selection of "suppliers"
"""
type suppliers_aggregate {
  aggregate: suppliers_aggregate_fields
  nodes: [suppliers!]!
}

"""
aggregate fields of "suppliers"
"""
type suppliers_aggregate_fields {
  avg: suppliers_avg_fields
  count(columns: [suppliers_select_column!], distinct: Boolean): Int
  max: suppliers_max_fields
  min: suppliers_min_fields
  stddev: suppliers_stddev_fields
  stddev_pop: suppliers_stddev_pop_fields
  stddev_samp: suppliers_stddev_samp_fields
  sum: suppliers_sum_fields
  var_pop: suppliers_var_pop_fields
  var_samp: suppliers_var_samp_fields
  variance: suppliers_variance_fields
}

"""
order by aggregate values of table "suppliers"
"""
input suppliers_aggregate_order_by {
  avg: suppliers_avg_order_by
  count: order_by
  max: suppliers_max_order_by
  min: suppliers_min_order_by
  stddev: suppliers_stddev_order_by
  stddev_pop: suppliers_stddev_pop_order_by
  stddev_samp: suppliers_stddev_samp_order_by
  sum: suppliers_sum_order_by
  var_pop: suppliers_var_pop_order_by
  var_samp: suppliers_var_samp_order_by
  variance: suppliers_variance_order_by
}

"""
input type for inserting array relation for remote table "suppliers"
"""
input suppliers_arr_rel_insert_input {
  data: [suppliers_insert_input!]!
  on_conflict: suppliers_on_conflict
}

"""aggregate avg on columns"""
type suppliers_avg_fields {
  supplier_id: Float
}

"""
order by avg() on columns of table "suppliers"
"""
input suppliers_avg_order_by {
  supplier_id: order_by
}

"""
Boolean expression to filter rows from the table "suppliers". All fields are combined with a logical 'AND'.
"""
input suppliers_bool_exp {
  _and: [suppliers_bool_exp]
  _not: suppliers_bool_exp
  _or: [suppliers_bool_exp]
  product_suppliers: product_suppliers_bool_exp
  supplier_addresses: supplier_addresses_bool_exp
  supplier_id: bigint_comparison_exp
  supplier_name: String_comparison_exp
  supplier_phone: String_comparison_exp
}

"""
unique or primary key constraints on table "suppliers"
"""
enum suppliers_constraint {
  """unique or primary key constraint"""
  idx_21806_suppliers_pkey
}

"""
input type for incrementing integer column in table "suppliers"
"""
input suppliers_inc_input {
  supplier_id: bigint
}

"""
input type for inserting data into table "suppliers"
"""
input suppliers_insert_input {
  product_suppliers: product_suppliers_arr_rel_insert_input
  supplier_addresses: supplier_addresses_arr_rel_insert_input
  supplier_id: bigint
  supplier_name: String
  supplier_phone: String
}

"""aggregate max on columns"""
type suppliers_max_fields {
  supplier_id: bigint
  supplier_name: String
  supplier_phone: String
}

"""
order by max() on columns of table "suppliers"
"""
input suppliers_max_order_by {
  supplier_id: order_by
  supplier_name: order_by
  supplier_phone: order_by
}

"""aggregate min on columns"""
type suppliers_min_fields {
  supplier_id: bigint
  supplier_name: String
  supplier_phone: String
}

"""
order by min() on columns of table "suppliers"
"""
input suppliers_min_order_by {
  supplier_id: order_by
  supplier_name: order_by
  supplier_phone: order_by
}

"""
response of any mutation on the table "suppliers"
"""
type suppliers_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [suppliers!]!
}

"""
input type for inserting object relation for remote table "suppliers"
"""
input suppliers_obj_rel_insert_input {
  data: suppliers_insert_input!
  on_conflict: suppliers_on_conflict
}

"""
on conflict condition type for table "suppliers"
"""
input suppliers_on_conflict {
  constraint: suppliers_constraint!
  update_columns: [suppliers_update_column!]!
  where: suppliers_bool_exp
}

"""
ordering options when selecting data from "suppliers"
"""
input suppliers_order_by {
  product_suppliers_aggregate: product_suppliers_aggregate_order_by
  supplier_addresses_aggregate: supplier_addresses_aggregate_order_by
  supplier_id: order_by
  supplier_name: order_by
  supplier_phone: order_by
}

"""
primary key columns input for table: "suppliers"
"""
input suppliers_pk_columns_input {
  supplier_id: bigint!
}

"""
select columns of table "suppliers"
"""
enum suppliers_select_column {
  """column name"""
  supplier_id

  """column name"""
  supplier_name

  """column name"""
  supplier_phone
}

"""
input type for updating data in table "suppliers"
"""
input suppliers_set_input {
  supplier_id: bigint
  supplier_name: String
  supplier_phone: String
}

"""aggregate stddev on columns"""
type suppliers_stddev_fields {
  supplier_id: Float
}

"""
order by stddev() on columns of table "suppliers"
"""
input suppliers_stddev_order_by {
  supplier_id: order_by
}

"""aggregate stddev_pop on columns"""
type suppliers_stddev_pop_fields {
  supplier_id: Float
}

"""
order by stddev_pop() on columns of table "suppliers"
"""
input suppliers_stddev_pop_order_by {
  supplier_id: order_by
}

"""aggregate stddev_samp on columns"""
type suppliers_stddev_samp_fields {
  supplier_id: Float
}

"""
order by stddev_samp() on columns of table "suppliers"
"""
input suppliers_stddev_samp_order_by {
  supplier_id: order_by
}

"""aggregate sum on columns"""
type suppliers_sum_fields {
  supplier_id: bigint
}

"""
order by sum() on columns of table "suppliers"
"""
input suppliers_sum_order_by {
  supplier_id: order_by
}

"""
update columns of table "suppliers"
"""
enum suppliers_update_column {
  """column name"""
  supplier_id

  """column name"""
  supplier_name

  """column name"""
  supplier_phone
}

"""aggregate var_pop on columns"""
type suppliers_var_pop_fields {
  supplier_id: Float
}

"""
order by var_pop() on columns of table "suppliers"
"""
input suppliers_var_pop_order_by {
  supplier_id: order_by
}

"""aggregate var_samp on columns"""
type suppliers_var_samp_fields {
  supplier_id: Float
}

"""
order by var_samp() on columns of table "suppliers"
"""
input suppliers_var_samp_order_by {
  supplier_id: order_by
}

"""aggregate variance on columns"""
type suppliers_variance_fields {
  supplier_id: Float
}

"""
order by variance() on columns of table "suppliers"
"""
input suppliers_variance_order_by {
  supplier_id: order_by
}

scalar timestamptz

"""
expression to compare columns of type timestamptz. All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}
