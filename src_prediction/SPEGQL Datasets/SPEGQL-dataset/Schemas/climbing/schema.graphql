schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""
Direct the client to resolve this field locally, either from the cache or local resolvers.
"""
directive @client(
  """
  When true, the client will never use the cache for this value. See
  https://www.apollographql.com/docs/react/essentials/local-state/#forcing-resolvers-with-clientalways-true
  """
  always: Boolean
) on FIELD | FRAGMENT_DEFINITION | INLINE_FRAGMENT

"""
Export this locally resolved field as a variable to be used in the remainder of this query. See
https://www.apollographql.com/docs/react/essentials/local-state/#using-client-fields-as-variables
"""
directive @export(
  """The variable name to export this field as."""
  as: String!
) on FIELD

"""
Specify a custom store key for this result. See
https://www.apollographql.com/docs/react/advanced/caching/#the-connection-directive
"""
directive @connection(
  """Specify the store key."""
  key: String!

  """
  An array of query argument names to include in the generated custom store key.
  """
  filter: [String!]
) on FIELD

"""
columns and relationships of "climber"
"""
type climber {
  climber_id: Int
  country: String

  """An object relationship"""
  mountain: mountain
  mountain_id: Int
  name: String
  points: Float
  time: String
}

"""
aggregated selection of "climber"
"""
type climber_aggregate {
  aggregate: climber_aggregate_fields
  nodes: [climber!]!
}

"""
aggregate fields of "climber"
"""
type climber_aggregate_fields {
  avg: climber_avg_fields
  count(columns: [climber_select_column!], distinct: Boolean): Int
  max: climber_max_fields
  min: climber_min_fields
  stddev: climber_stddev_fields
  stddev_pop: climber_stddev_pop_fields
  stddev_samp: climber_stddev_samp_fields
  sum: climber_sum_fields
  var_pop: climber_var_pop_fields
  var_samp: climber_var_samp_fields
  variance: climber_variance_fields
}

"""
order by aggregate values of table "climber"
"""
input climber_aggregate_order_by {
  avg: climber_avg_order_by
  count: order_by
  max: climber_max_order_by
  min: climber_min_order_by
  stddev: climber_stddev_order_by
  stddev_pop: climber_stddev_pop_order_by
  stddev_samp: climber_stddev_samp_order_by
  sum: climber_sum_order_by
  var_pop: climber_var_pop_order_by
  var_samp: climber_var_samp_order_by
  variance: climber_variance_order_by
}

"""
input type for inserting array relation for remote table "climber"
"""
input climber_arr_rel_insert_input {
  data: [climber_insert_input!]!
  on_conflict: climber_on_conflict
}

"""aggregate avg on columns"""
type climber_avg_fields {
  climber_id: Float
  mountain_id: Float
  points: Float
}

"""
order by avg() on columns of table "climber"
"""
input climber_avg_order_by {
  climber_id: order_by
  mountain_id: order_by
  points: order_by
}

"""
Boolean expression to filter rows from the table "climber". All fields are combined with a logical 'AND'.
"""
input climber_bool_exp {
  _and: [climber_bool_exp]
  _not: climber_bool_exp
  _or: [climber_bool_exp]
  climber_id: Int_comparison_exp
  country: String_comparison_exp
  mountain: mountain_bool_exp
  mountain_id: Int_comparison_exp
  name: String_comparison_exp
  points: Float_comparison_exp
  time: String_comparison_exp
}

"""
unique or primary key constraints on table "climber"
"""
enum climber_constraint {
  """unique or primary key constraint"""
  idx_23658_sqlite_autoindex_climber_1
}

"""
input type for incrementing integer column in table "climber"
"""
input climber_inc_input {
  climber_id: Int
  mountain_id: Int
  points: Float
}

"""
input type for inserting data into table "climber"
"""
input climber_insert_input {
  climber_id: Int
  country: String
  mountain: mountain_obj_rel_insert_input
  mountain_id: Int
  name: String
  points: Float
  time: String
}

"""aggregate max on columns"""
type climber_max_fields {
  climber_id: Int
  country: String
  mountain_id: Int
  name: String
  points: Float
  time: String
}

"""
order by max() on columns of table "climber"
"""
input climber_max_order_by {
  climber_id: order_by
  country: order_by
  mountain_id: order_by
  name: order_by
  points: order_by
  time: order_by
}

"""aggregate min on columns"""
type climber_min_fields {
  climber_id: Int
  country: String
  mountain_id: Int
  name: String
  points: Float
  time: String
}

"""
order by min() on columns of table "climber"
"""
input climber_min_order_by {
  climber_id: order_by
  country: order_by
  mountain_id: order_by
  name: order_by
  points: order_by
  time: order_by
}

"""
response of any mutation on the table "climber"
"""
type climber_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [climber!]!
}

"""
input type for inserting object relation for remote table "climber"
"""
input climber_obj_rel_insert_input {
  data: climber_insert_input!
  on_conflict: climber_on_conflict
}

"""
on conflict condition type for table "climber"
"""
input climber_on_conflict {
  constraint: climber_constraint!
  update_columns: [climber_update_column!]!
  where: climber_bool_exp
}

"""
ordering options when selecting data from "climber"
"""
input climber_order_by {
  climber_id: order_by
  country: order_by
  mountain: mountain_order_by
  mountain_id: order_by
  name: order_by
  points: order_by
  time: order_by
}

"""
select columns of table "climber"
"""
enum climber_select_column {
  """column name"""
  climber_id

  """column name"""
  country

  """column name"""
  mountain_id

  """column name"""
  name

  """column name"""
  points

  """column name"""
  time
}

"""
input type for updating data in table "climber"
"""
input climber_set_input {
  climber_id: Int
  country: String
  mountain_id: Int
  name: String
  points: Float
  time: String
}

"""aggregate stddev on columns"""
type climber_stddev_fields {
  climber_id: Float
  mountain_id: Float
  points: Float
}

"""
order by stddev() on columns of table "climber"
"""
input climber_stddev_order_by {
  climber_id: order_by
  mountain_id: order_by
  points: order_by
}

"""aggregate stddev_pop on columns"""
type climber_stddev_pop_fields {
  climber_id: Float
  mountain_id: Float
  points: Float
}

"""
order by stddev_pop() on columns of table "climber"
"""
input climber_stddev_pop_order_by {
  climber_id: order_by
  mountain_id: order_by
  points: order_by
}

"""aggregate stddev_samp on columns"""
type climber_stddev_samp_fields {
  climber_id: Float
  mountain_id: Float
  points: Float
}

"""
order by stddev_samp() on columns of table "climber"
"""
input climber_stddev_samp_order_by {
  climber_id: order_by
  mountain_id: order_by
  points: order_by
}

"""aggregate sum on columns"""
type climber_sum_fields {
  climber_id: Int
  mountain_id: Int
  points: Float
}

"""
order by sum() on columns of table "climber"
"""
input climber_sum_order_by {
  climber_id: order_by
  mountain_id: order_by
  points: order_by
}

"""
update columns of table "climber"
"""
enum climber_update_column {
  """column name"""
  climber_id

  """column name"""
  country

  """column name"""
  mountain_id

  """column name"""
  name

  """column name"""
  points

  """column name"""
  time
}

"""aggregate var_pop on columns"""
type climber_var_pop_fields {
  climber_id: Float
  mountain_id: Float
  points: Float
}

"""
order by var_pop() on columns of table "climber"
"""
input climber_var_pop_order_by {
  climber_id: order_by
  mountain_id: order_by
  points: order_by
}

"""aggregate var_samp on columns"""
type climber_var_samp_fields {
  climber_id: Float
  mountain_id: Float
  points: Float
}

"""
order by var_samp() on columns of table "climber"
"""
input climber_var_samp_order_by {
  climber_id: order_by
  mountain_id: order_by
  points: order_by
}

"""aggregate variance on columns"""
type climber_variance_fields {
  climber_id: Float
  mountain_id: Float
  points: Float
}

"""
order by variance() on columns of table "climber"
"""
input climber_variance_order_by {
  climber_id: order_by
  mountain_id: order_by
  points: order_by
}

"""
expression to compare columns of type Float. All fields are combined with logical 'AND'.
"""
input Float_comparison_exp {
  _eq: Float
  _gt: Float
  _gte: Float
  _in: [Float!]
  _is_null: Boolean
  _lt: Float
  _lte: Float
  _neq: Float
  _nin: [Float!]
}

"""
expression to compare columns of type Int. All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""
columns and relationships of "mountain"
"""
type mountain {
  """An array relationship"""
  climbers(
    """distinct select on columns"""
    distinct_on: [climber_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [climber_order_by!]

    """filter the rows returned"""
    where: climber_bool_exp
  ): [climber!]!

  """An aggregated array relationship"""
  climbers_aggregate(
    """distinct select on columns"""
    distinct_on: [climber_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [climber_order_by!]

    """filter the rows returned"""
    where: climber_bool_exp
  ): climber_aggregate!
  country: String
  height: Float
  mountain_id: Int
  name: String
  prominence: Float
  range: String
}

"""
aggregated selection of "mountain"
"""
type mountain_aggregate {
  aggregate: mountain_aggregate_fields
  nodes: [mountain!]!
}

"""
aggregate fields of "mountain"
"""
type mountain_aggregate_fields {
  avg: mountain_avg_fields
  count(columns: [mountain_select_column!], distinct: Boolean): Int
  max: mountain_max_fields
  min: mountain_min_fields
  stddev: mountain_stddev_fields
  stddev_pop: mountain_stddev_pop_fields
  stddev_samp: mountain_stddev_samp_fields
  sum: mountain_sum_fields
  var_pop: mountain_var_pop_fields
  var_samp: mountain_var_samp_fields
  variance: mountain_variance_fields
}

"""
order by aggregate values of table "mountain"
"""
input mountain_aggregate_order_by {
  avg: mountain_avg_order_by
  count: order_by
  max: mountain_max_order_by
  min: mountain_min_order_by
  stddev: mountain_stddev_order_by
  stddev_pop: mountain_stddev_pop_order_by
  stddev_samp: mountain_stddev_samp_order_by
  sum: mountain_sum_order_by
  var_pop: mountain_var_pop_order_by
  var_samp: mountain_var_samp_order_by
  variance: mountain_variance_order_by
}

"""
input type for inserting array relation for remote table "mountain"
"""
input mountain_arr_rel_insert_input {
  data: [mountain_insert_input!]!
  on_conflict: mountain_on_conflict
}

"""aggregate avg on columns"""
type mountain_avg_fields {
  height: Float
  mountain_id: Float
  prominence: Float
}

"""
order by avg() on columns of table "mountain"
"""
input mountain_avg_order_by {
  height: order_by
  mountain_id: order_by
  prominence: order_by
}

"""
Boolean expression to filter rows from the table "mountain". All fields are combined with a logical 'AND'.
"""
input mountain_bool_exp {
  _and: [mountain_bool_exp]
  _not: mountain_bool_exp
  _or: [mountain_bool_exp]
  climbers: climber_bool_exp
  country: String_comparison_exp
  height: Float_comparison_exp
  mountain_id: Int_comparison_exp
  name: String_comparison_exp
  prominence: Float_comparison_exp
  range: String_comparison_exp
}

"""
unique or primary key constraints on table "mountain"
"""
enum mountain_constraint {
  """unique or primary key constraint"""
  idx_23652_sqlite_autoindex_mountain_1
}

"""
input type for incrementing integer column in table "mountain"
"""
input mountain_inc_input {
  height: Float
  mountain_id: Int
  prominence: Float
}

"""
input type for inserting data into table "mountain"
"""
input mountain_insert_input {
  climbers: climber_arr_rel_insert_input
  country: String
  height: Float
  mountain_id: Int
  name: String
  prominence: Float
  range: String
}

"""aggregate max on columns"""
type mountain_max_fields {
  country: String
  height: Float
  mountain_id: Int
  name: String
  prominence: Float
  range: String
}

"""
order by max() on columns of table "mountain"
"""
input mountain_max_order_by {
  country: order_by
  height: order_by
  mountain_id: order_by
  name: order_by
  prominence: order_by
  range: order_by
}

"""aggregate min on columns"""
type mountain_min_fields {
  country: String
  height: Float
  mountain_id: Int
  name: String
  prominence: Float
  range: String
}

"""
order by min() on columns of table "mountain"
"""
input mountain_min_order_by {
  country: order_by
  height: order_by
  mountain_id: order_by
  name: order_by
  prominence: order_by
  range: order_by
}

"""
response of any mutation on the table "mountain"
"""
type mountain_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [mountain!]!
}

"""
input type for inserting object relation for remote table "mountain"
"""
input mountain_obj_rel_insert_input {
  data: mountain_insert_input!
  on_conflict: mountain_on_conflict
}

"""
on conflict condition type for table "mountain"
"""
input mountain_on_conflict {
  constraint: mountain_constraint!
  update_columns: [mountain_update_column!]!
  where: mountain_bool_exp
}

"""
ordering options when selecting data from "mountain"
"""
input mountain_order_by {
  climbers_aggregate: climber_aggregate_order_by
  country: order_by
  height: order_by
  mountain_id: order_by
  name: order_by
  prominence: order_by
  range: order_by
}

"""
select columns of table "mountain"
"""
enum mountain_select_column {
  """column name"""
  country

  """column name"""
  height

  """column name"""
  mountain_id

  """column name"""
  name

  """column name"""
  prominence

  """column name"""
  range
}

"""
input type for updating data in table "mountain"
"""
input mountain_set_input {
  country: String
  height: Float
  mountain_id: Int
  name: String
  prominence: Float
  range: String
}

"""aggregate stddev on columns"""
type mountain_stddev_fields {
  height: Float
  mountain_id: Float
  prominence: Float
}

"""
order by stddev() on columns of table "mountain"
"""
input mountain_stddev_order_by {
  height: order_by
  mountain_id: order_by
  prominence: order_by
}

"""aggregate stddev_pop on columns"""
type mountain_stddev_pop_fields {
  height: Float
  mountain_id: Float
  prominence: Float
}

"""
order by stddev_pop() on columns of table "mountain"
"""
input mountain_stddev_pop_order_by {
  height: order_by
  mountain_id: order_by
  prominence: order_by
}

"""aggregate stddev_samp on columns"""
type mountain_stddev_samp_fields {
  height: Float
  mountain_id: Float
  prominence: Float
}

"""
order by stddev_samp() on columns of table "mountain"
"""
input mountain_stddev_samp_order_by {
  height: order_by
  mountain_id: order_by
  prominence: order_by
}

"""aggregate sum on columns"""
type mountain_sum_fields {
  height: Float
  mountain_id: Int
  prominence: Float
}

"""
order by sum() on columns of table "mountain"
"""
input mountain_sum_order_by {
  height: order_by
  mountain_id: order_by
  prominence: order_by
}

"""
update columns of table "mountain"
"""
enum mountain_update_column {
  """column name"""
  country

  """column name"""
  height

  """column name"""
  mountain_id

  """column name"""
  name

  """column name"""
  prominence

  """column name"""
  range
}

"""aggregate var_pop on columns"""
type mountain_var_pop_fields {
  height: Float
  mountain_id: Float
  prominence: Float
}

"""
order by var_pop() on columns of table "mountain"
"""
input mountain_var_pop_order_by {
  height: order_by
  mountain_id: order_by
  prominence: order_by
}

"""aggregate var_samp on columns"""
type mountain_var_samp_fields {
  height: Float
  mountain_id: Float
  prominence: Float
}

"""
order by var_samp() on columns of table "mountain"
"""
input mountain_var_samp_order_by {
  height: order_by
  mountain_id: order_by
  prominence: order_by
}

"""aggregate variance on columns"""
type mountain_variance_fields {
  height: Float
  mountain_id: Float
  prominence: Float
}

"""
order by variance() on columns of table "mountain"
"""
input mountain_variance_order_by {
  height: order_by
  mountain_id: order_by
  prominence: order_by
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "climber"
  """
  delete_climber(
    """filter the rows which have to be deleted"""
    where: climber_bool_exp!
  ): climber_mutation_response

  """
  delete data from the table: "mountain"
  """
  delete_mountain(
    """filter the rows which have to be deleted"""
    where: mountain_bool_exp!
  ): mountain_mutation_response

  """
  insert data into the table: "climber"
  """
  insert_climber(
    """the rows to be inserted"""
    objects: [climber_insert_input!]!

    """on conflict condition"""
    on_conflict: climber_on_conflict
  ): climber_mutation_response

  """
  insert a single row into the table: "climber"
  """
  insert_climber_one(
    """the row to be inserted"""
    object: climber_insert_input!

    """on conflict condition"""
    on_conflict: climber_on_conflict
  ): climber

  """
  insert data into the table: "mountain"
  """
  insert_mountain(
    """the rows to be inserted"""
    objects: [mountain_insert_input!]!

    """on conflict condition"""
    on_conflict: mountain_on_conflict
  ): mountain_mutation_response

  """
  insert a single row into the table: "mountain"
  """
  insert_mountain_one(
    """the row to be inserted"""
    object: mountain_insert_input!

    """on conflict condition"""
    on_conflict: mountain_on_conflict
  ): mountain

  """
  update data of the table: "climber"
  """
  update_climber(
    """increments the integer columns with given value of the filtered values"""
    _inc: climber_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: climber_set_input

    """filter the rows which have to be updated"""
    where: climber_bool_exp!
  ): climber_mutation_response

  """
  update data of the table: "mountain"
  """
  update_mountain(
    """increments the integer columns with given value of the filtered values"""
    _inc: mountain_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: mountain_set_input

    """filter the rows which have to be updated"""
    where: mountain_bool_exp!
  ): mountain_mutation_response
}

"""column ordering options"""
enum order_by {
  """in the ascending order, nulls last"""
  asc

  """in the ascending order, nulls first"""
  asc_nulls_first

  """in the ascending order, nulls last"""
  asc_nulls_last

  """in the descending order, nulls first"""
  desc

  """in the descending order, nulls first"""
  desc_nulls_first

  """in the descending order, nulls last"""
  desc_nulls_last
}

"""query root"""
type query_root {
  """
  fetch data from the table: "climber"
  """
  climber(
    """distinct select on columns"""
    distinct_on: [climber_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [climber_order_by!]

    """filter the rows returned"""
    where: climber_bool_exp
  ): [climber!]!

  """
  fetch aggregated fields from the table: "climber"
  """
  climber_aggregate(
    """distinct select on columns"""
    distinct_on: [climber_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [climber_order_by!]

    """filter the rows returned"""
    where: climber_bool_exp
  ): climber_aggregate!

  """
  fetch data from the table: "mountain"
  """
  mountain(
    """distinct select on columns"""
    distinct_on: [mountain_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [mountain_order_by!]

    """filter the rows returned"""
    where: mountain_bool_exp
  ): [mountain!]!

  """
  fetch aggregated fields from the table: "mountain"
  """
  mountain_aggregate(
    """distinct select on columns"""
    distinct_on: [mountain_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [mountain_order_by!]

    """filter the rows returned"""
    where: mountain_bool_exp
  ): mountain_aggregate!
}

"""
expression to compare columns of type String. All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String
  _ilike: String
  _in: [String!]
  _is_null: Boolean
  _like: String
  _lt: String
  _lte: String
  _neq: String
  _nilike: String
  _nin: [String!]
  _nlike: String
  _nsimilar: String
  _similar: String
}

"""subscription root"""
type subscription_root {
  """
  fetch data from the table: "climber"
  """
  climber(
    """distinct select on columns"""
    distinct_on: [climber_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [climber_order_by!]

    """filter the rows returned"""
    where: climber_bool_exp
  ): [climber!]!

  """
  fetch aggregated fields from the table: "climber"
  """
  climber_aggregate(
    """distinct select on columns"""
    distinct_on: [climber_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [climber_order_by!]

    """filter the rows returned"""
    where: climber_bool_exp
  ): climber_aggregate!

  """
  fetch data from the table: "mountain"
  """
  mountain(
    """distinct select on columns"""
    distinct_on: [mountain_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [mountain_order_by!]

    """filter the rows returned"""
    where: mountain_bool_exp
  ): [mountain!]!

  """
  fetch aggregated fields from the table: "mountain"
  """
  mountain_aggregate(
    """distinct select on columns"""
    distinct_on: [mountain_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [mountain_order_by!]

    """filter the rows returned"""
    where: mountain_bool_exp
  ): mountain_aggregate!
}
