schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""
Direct the client to resolve this field locally, either from the cache or local resolvers.
"""
directive @client(
  """
  When true, the client will never use the cache for this value. See
  https://www.apollographql.com/docs/react/essentials/local-state/#forcing-resolvers-with-clientalways-true
  """
  always: Boolean
) on FIELD | FRAGMENT_DEFINITION | INLINE_FRAGMENT

"""
Export this locally resolved field as a variable to be used in the remainder of this query. See
https://www.apollographql.com/docs/react/essentials/local-state/#using-client-fields-as-variables
"""
directive @export(
  """The variable name to export this field as."""
  as: String!
) on FIELD

"""
Specify a custom store key for this result. See
https://www.apollographql.com/docs/react/advanced/caching/#the-connection-directive
"""
directive @connection(
  """Specify the store key."""
  key: String!

  """
  An array of query argument names to include in the generated custom store key.
  """
  filter: [String!]
) on FIELD

"""
columns and relationships of "city"
"""
type city {
  amerindian: Float
  asian: Float
  black: Float
  city_id: Int
  county_id: Int

  """An object relationship"""
  county_public_safety: county_public_safety
  hispanic: Float
  multiracial: Float
  name: String
  white: Float
}

"""
aggregated selection of "city"
"""
type city_aggregate {
  aggregate: city_aggregate_fields
  nodes: [city!]!
}

"""
aggregate fields of "city"
"""
type city_aggregate_fields {
  avg: city_avg_fields
  count(columns: [city_select_column!], distinct: Boolean): Int
  max: city_max_fields
  min: city_min_fields
  stddev: city_stddev_fields
  stddev_pop: city_stddev_pop_fields
  stddev_samp: city_stddev_samp_fields
  sum: city_sum_fields
  var_pop: city_var_pop_fields
  var_samp: city_var_samp_fields
  variance: city_variance_fields
}

"""
order by aggregate values of table "city"
"""
input city_aggregate_order_by {
  avg: city_avg_order_by
  count: order_by
  max: city_max_order_by
  min: city_min_order_by
  stddev: city_stddev_order_by
  stddev_pop: city_stddev_pop_order_by
  stddev_samp: city_stddev_samp_order_by
  sum: city_sum_order_by
  var_pop: city_var_pop_order_by
  var_samp: city_var_samp_order_by
  variance: city_variance_order_by
}

"""
input type for inserting array relation for remote table "city"
"""
input city_arr_rel_insert_input {
  data: [city_insert_input!]!
  on_conflict: city_on_conflict
}

"""aggregate avg on columns"""
type city_avg_fields {
  amerindian: Float
  asian: Float
  black: Float
  city_id: Float
  county_id: Float
  hispanic: Float
  multiracial: Float
  white: Float
}

"""
order by avg() on columns of table "city"
"""
input city_avg_order_by {
  amerindian: order_by
  asian: order_by
  black: order_by
  city_id: order_by
  county_id: order_by
  hispanic: order_by
  multiracial: order_by
  white: order_by
}

"""
Boolean expression to filter rows from the table "city". All fields are combined with a logical 'AND'.
"""
input city_bool_exp {
  _and: [city_bool_exp]
  _not: city_bool_exp
  _or: [city_bool_exp]
  amerindian: Float_comparison_exp
  asian: Float_comparison_exp
  black: Float_comparison_exp
  city_id: Int_comparison_exp
  county_id: Int_comparison_exp
  county_public_safety: county_public_safety_bool_exp
  hispanic: Float_comparison_exp
  multiracial: Float_comparison_exp
  name: String_comparison_exp
  white: Float_comparison_exp
}

"""
unique or primary key constraints on table "city"
"""
enum city_constraint {
  """unique or primary key constraint"""
  idx_23194_sqlite_autoindex_city_1
}

"""
input type for incrementing integer column in table "city"
"""
input city_inc_input {
  amerindian: Float
  asian: Float
  black: Float
  city_id: Int
  county_id: Int
  hispanic: Float
  multiracial: Float
  white: Float
}

"""
input type for inserting data into table "city"
"""
input city_insert_input {
  amerindian: Float
  asian: Float
  black: Float
  city_id: Int
  county_id: Int
  county_public_safety: county_public_safety_obj_rel_insert_input
  hispanic: Float
  multiracial: Float
  name: String
  white: Float
}

"""aggregate max on columns"""
type city_max_fields {
  amerindian: Float
  asian: Float
  black: Float
  city_id: Int
  county_id: Int
  hispanic: Float
  multiracial: Float
  name: String
  white: Float
}

"""
order by max() on columns of table "city"
"""
input city_max_order_by {
  amerindian: order_by
  asian: order_by
  black: order_by
  city_id: order_by
  county_id: order_by
  hispanic: order_by
  multiracial: order_by
  name: order_by
  white: order_by
}

"""aggregate min on columns"""
type city_min_fields {
  amerindian: Float
  asian: Float
  black: Float
  city_id: Int
  county_id: Int
  hispanic: Float
  multiracial: Float
  name: String
  white: Float
}

"""
order by min() on columns of table "city"
"""
input city_min_order_by {
  amerindian: order_by
  asian: order_by
  black: order_by
  city_id: order_by
  county_id: order_by
  hispanic: order_by
  multiracial: order_by
  name: order_by
  white: order_by
}

"""
response of any mutation on the table "city"
"""
type city_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [city!]!
}

"""
input type for inserting object relation for remote table "city"
"""
input city_obj_rel_insert_input {
  data: city_insert_input!
  on_conflict: city_on_conflict
}

"""
on conflict condition type for table "city"
"""
input city_on_conflict {
  constraint: city_constraint!
  update_columns: [city_update_column!]!
  where: city_bool_exp
}

"""
ordering options when selecting data from "city"
"""
input city_order_by {
  amerindian: order_by
  asian: order_by
  black: order_by
  city_id: order_by
  county_id: order_by
  county_public_safety: county_public_safety_order_by
  hispanic: order_by
  multiracial: order_by
  name: order_by
  white: order_by
}

"""
select columns of table "city"
"""
enum city_select_column {
  """column name"""
  amerindian

  """column name"""
  asian

  """column name"""
  black

  """column name"""
  city_id

  """column name"""
  county_id

  """column name"""
  hispanic

  """column name"""
  multiracial

  """column name"""
  name

  """column name"""
  white
}

"""
input type for updating data in table "city"
"""
input city_set_input {
  amerindian: Float
  asian: Float
  black: Float
  city_id: Int
  county_id: Int
  hispanic: Float
  multiracial: Float
  name: String
  white: Float
}

"""aggregate stddev on columns"""
type city_stddev_fields {
  amerindian: Float
  asian: Float
  black: Float
  city_id: Float
  county_id: Float
  hispanic: Float
  multiracial: Float
  white: Float
}

"""
order by stddev() on columns of table "city"
"""
input city_stddev_order_by {
  amerindian: order_by
  asian: order_by
  black: order_by
  city_id: order_by
  county_id: order_by
  hispanic: order_by
  multiracial: order_by
  white: order_by
}

"""aggregate stddev_pop on columns"""
type city_stddev_pop_fields {
  amerindian: Float
  asian: Float
  black: Float
  city_id: Float
  county_id: Float
  hispanic: Float
  multiracial: Float
  white: Float
}

"""
order by stddev_pop() on columns of table "city"
"""
input city_stddev_pop_order_by {
  amerindian: order_by
  asian: order_by
  black: order_by
  city_id: order_by
  county_id: order_by
  hispanic: order_by
  multiracial: order_by
  white: order_by
}

"""aggregate stddev_samp on columns"""
type city_stddev_samp_fields {
  amerindian: Float
  asian: Float
  black: Float
  city_id: Float
  county_id: Float
  hispanic: Float
  multiracial: Float
  white: Float
}

"""
order by stddev_samp() on columns of table "city"
"""
input city_stddev_samp_order_by {
  amerindian: order_by
  asian: order_by
  black: order_by
  city_id: order_by
  county_id: order_by
  hispanic: order_by
  multiracial: order_by
  white: order_by
}

"""aggregate sum on columns"""
type city_sum_fields {
  amerindian: Float
  asian: Float
  black: Float
  city_id: Int
  county_id: Int
  hispanic: Float
  multiracial: Float
  white: Float
}

"""
order by sum() on columns of table "city"
"""
input city_sum_order_by {
  amerindian: order_by
  asian: order_by
  black: order_by
  city_id: order_by
  county_id: order_by
  hispanic: order_by
  multiracial: order_by
  white: order_by
}

"""
update columns of table "city"
"""
enum city_update_column {
  """column name"""
  amerindian

  """column name"""
  asian

  """column name"""
  black

  """column name"""
  city_id

  """column name"""
  county_id

  """column name"""
  hispanic

  """column name"""
  multiracial

  """column name"""
  name

  """column name"""
  white
}

"""aggregate var_pop on columns"""
type city_var_pop_fields {
  amerindian: Float
  asian: Float
  black: Float
  city_id: Float
  county_id: Float
  hispanic: Float
  multiracial: Float
  white: Float
}

"""
order by var_pop() on columns of table "city"
"""
input city_var_pop_order_by {
  amerindian: order_by
  asian: order_by
  black: order_by
  city_id: order_by
  county_id: order_by
  hispanic: order_by
  multiracial: order_by
  white: order_by
}

"""aggregate var_samp on columns"""
type city_var_samp_fields {
  amerindian: Float
  asian: Float
  black: Float
  city_id: Float
  county_id: Float
  hispanic: Float
  multiracial: Float
  white: Float
}

"""
order by var_samp() on columns of table "city"
"""
input city_var_samp_order_by {
  amerindian: order_by
  asian: order_by
  black: order_by
  city_id: order_by
  county_id: order_by
  hispanic: order_by
  multiracial: order_by
  white: order_by
}

"""aggregate variance on columns"""
type city_variance_fields {
  amerindian: Float
  asian: Float
  black: Float
  city_id: Float
  county_id: Float
  hispanic: Float
  multiracial: Float
  white: Float
}

"""
order by variance() on columns of table "city"
"""
input city_variance_order_by {
  amerindian: order_by
  asian: order_by
  black: order_by
  city_id: order_by
  county_id: order_by
  hispanic: order_by
  multiracial: order_by
  white: order_by
}

"""
columns and relationships of "county_public_safety"
"""
type county_public_safety {
  case_burden: Int

  """An array relationship"""
  cities(
    """distinct select on columns"""
    distinct_on: [city_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [city_order_by!]

    """filter the rows returned"""
    where: city_bool_exp
  ): [city!]!

  """An aggregated array relationship"""
  cities_aggregate(
    """distinct select on columns"""
    distinct_on: [city_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [city_order_by!]

    """filter the rows returned"""
    where: city_bool_exp
  ): city_aggregate!
  county_id: Int
  crime_rate: Float
  location: String
  name: String
  police_force: String
  police_officers: Int
  population: Int
  residents_per_officer: Int
}

"""
aggregated selection of "county_public_safety"
"""
type county_public_safety_aggregate {
  aggregate: county_public_safety_aggregate_fields
  nodes: [county_public_safety!]!
}

"""
aggregate fields of "county_public_safety"
"""
type county_public_safety_aggregate_fields {
  avg: county_public_safety_avg_fields
  count(columns: [county_public_safety_select_column!], distinct: Boolean): Int
  max: county_public_safety_max_fields
  min: county_public_safety_min_fields
  stddev: county_public_safety_stddev_fields
  stddev_pop: county_public_safety_stddev_pop_fields
  stddev_samp: county_public_safety_stddev_samp_fields
  sum: county_public_safety_sum_fields
  var_pop: county_public_safety_var_pop_fields
  var_samp: county_public_safety_var_samp_fields
  variance: county_public_safety_variance_fields
}

"""
order by aggregate values of table "county_public_safety"
"""
input county_public_safety_aggregate_order_by {
  avg: county_public_safety_avg_order_by
  count: order_by
  max: county_public_safety_max_order_by
  min: county_public_safety_min_order_by
  stddev: county_public_safety_stddev_order_by
  stddev_pop: county_public_safety_stddev_pop_order_by
  stddev_samp: county_public_safety_stddev_samp_order_by
  sum: county_public_safety_sum_order_by
  var_pop: county_public_safety_var_pop_order_by
  var_samp: county_public_safety_var_samp_order_by
  variance: county_public_safety_variance_order_by
}

"""
input type for inserting array relation for remote table "county_public_safety"
"""
input county_public_safety_arr_rel_insert_input {
  data: [county_public_safety_insert_input!]!
  on_conflict: county_public_safety_on_conflict
}

"""aggregate avg on columns"""
type county_public_safety_avg_fields {
  case_burden: Float
  county_id: Float
  crime_rate: Float
  police_officers: Float
  population: Float
  residents_per_officer: Float
}

"""
order by avg() on columns of table "county_public_safety"
"""
input county_public_safety_avg_order_by {
  case_burden: order_by
  county_id: order_by
  crime_rate: order_by
  police_officers: order_by
  population: order_by
  residents_per_officer: order_by
}

"""
Boolean expression to filter rows from the table "county_public_safety". All fields are combined with a logical 'AND'.
"""
input county_public_safety_bool_exp {
  _and: [county_public_safety_bool_exp]
  _not: county_public_safety_bool_exp
  _or: [county_public_safety_bool_exp]
  case_burden: Int_comparison_exp
  cities: city_bool_exp
  county_id: Int_comparison_exp
  crime_rate: Float_comparison_exp
  location: String_comparison_exp
  name: String_comparison_exp
  police_force: String_comparison_exp
  police_officers: Int_comparison_exp
  population: Int_comparison_exp
  residents_per_officer: Int_comparison_exp
}

"""
unique or primary key constraints on table "county_public_safety"
"""
enum county_public_safety_constraint {
  """unique or primary key constraint"""
  idx_23188_sqlite_autoindex_county_public_safety_1
}

"""
input type for incrementing integer column in table "county_public_safety"
"""
input county_public_safety_inc_input {
  case_burden: Int
  county_id: Int
  crime_rate: Float
  police_officers: Int
  population: Int
  residents_per_officer: Int
}

"""
input type for inserting data into table "county_public_safety"
"""
input county_public_safety_insert_input {
  case_burden: Int
  cities: city_arr_rel_insert_input
  county_id: Int
  crime_rate: Float
  location: String
  name: String
  police_force: String
  police_officers: Int
  population: Int
  residents_per_officer: Int
}

"""aggregate max on columns"""
type county_public_safety_max_fields {
  case_burden: Int
  county_id: Int
  crime_rate: Float
  location: String
  name: String
  police_force: String
  police_officers: Int
  population: Int
  residents_per_officer: Int
}

"""
order by max() on columns of table "county_public_safety"
"""
input county_public_safety_max_order_by {
  case_burden: order_by
  county_id: order_by
  crime_rate: order_by
  location: order_by
  name: order_by
  police_force: order_by
  police_officers: order_by
  population: order_by
  residents_per_officer: order_by
}

"""aggregate min on columns"""
type county_public_safety_min_fields {
  case_burden: Int
  county_id: Int
  crime_rate: Float
  location: String
  name: String
  police_force: String
  police_officers: Int
  population: Int
  residents_per_officer: Int
}

"""
order by min() on columns of table "county_public_safety"
"""
input county_public_safety_min_order_by {
  case_burden: order_by
  county_id: order_by
  crime_rate: order_by
  location: order_by
  name: order_by
  police_force: order_by
  police_officers: order_by
  population: order_by
  residents_per_officer: order_by
}

"""
response of any mutation on the table "county_public_safety"
"""
type county_public_safety_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [county_public_safety!]!
}

"""
input type for inserting object relation for remote table "county_public_safety"
"""
input county_public_safety_obj_rel_insert_input {
  data: county_public_safety_insert_input!
  on_conflict: county_public_safety_on_conflict
}

"""
on conflict condition type for table "county_public_safety"
"""
input county_public_safety_on_conflict {
  constraint: county_public_safety_constraint!
  update_columns: [county_public_safety_update_column!]!
  where: county_public_safety_bool_exp
}

"""
ordering options when selecting data from "county_public_safety"
"""
input county_public_safety_order_by {
  case_burden: order_by
  cities_aggregate: city_aggregate_order_by
  county_id: order_by
  crime_rate: order_by
  location: order_by
  name: order_by
  police_force: order_by
  police_officers: order_by
  population: order_by
  residents_per_officer: order_by
}

"""
select columns of table "county_public_safety"
"""
enum county_public_safety_select_column {
  """column name"""
  case_burden

  """column name"""
  county_id

  """column name"""
  crime_rate

  """column name"""
  location

  """column name"""
  name

  """column name"""
  police_force

  """column name"""
  police_officers

  """column name"""
  population

  """column name"""
  residents_per_officer
}

"""
input type for updating data in table "county_public_safety"
"""
input county_public_safety_set_input {
  case_burden: Int
  county_id: Int
  crime_rate: Float
  location: String
  name: String
  police_force: String
  police_officers: Int
  population: Int
  residents_per_officer: Int
}

"""aggregate stddev on columns"""
type county_public_safety_stddev_fields {
  case_burden: Float
  county_id: Float
  crime_rate: Float
  police_officers: Float
  population: Float
  residents_per_officer: Float
}

"""
order by stddev() on columns of table "county_public_safety"
"""
input county_public_safety_stddev_order_by {
  case_burden: order_by
  county_id: order_by
  crime_rate: order_by
  police_officers: order_by
  population: order_by
  residents_per_officer: order_by
}

"""aggregate stddev_pop on columns"""
type county_public_safety_stddev_pop_fields {
  case_burden: Float
  county_id: Float
  crime_rate: Float
  police_officers: Float
  population: Float
  residents_per_officer: Float
}

"""
order by stddev_pop() on columns of table "county_public_safety"
"""
input county_public_safety_stddev_pop_order_by {
  case_burden: order_by
  county_id: order_by
  crime_rate: order_by
  police_officers: order_by
  population: order_by
  residents_per_officer: order_by
}

"""aggregate stddev_samp on columns"""
type county_public_safety_stddev_samp_fields {
  case_burden: Float
  county_id: Float
  crime_rate: Float
  police_officers: Float
  population: Float
  residents_per_officer: Float
}

"""
order by stddev_samp() on columns of table "county_public_safety"
"""
input county_public_safety_stddev_samp_order_by {
  case_burden: order_by
  county_id: order_by
  crime_rate: order_by
  police_officers: order_by
  population: order_by
  residents_per_officer: order_by
}

"""aggregate sum on columns"""
type county_public_safety_sum_fields {
  case_burden: Int
  county_id: Int
  crime_rate: Float
  police_officers: Int
  population: Int
  residents_per_officer: Int
}

"""
order by sum() on columns of table "county_public_safety"
"""
input county_public_safety_sum_order_by {
  case_burden: order_by
  county_id: order_by
  crime_rate: order_by
  police_officers: order_by
  population: order_by
  residents_per_officer: order_by
}

"""
update columns of table "county_public_safety"
"""
enum county_public_safety_update_column {
  """column name"""
  case_burden

  """column name"""
  county_id

  """column name"""
  crime_rate

  """column name"""
  location

  """column name"""
  name

  """column name"""
  police_force

  """column name"""
  police_officers

  """column name"""
  population

  """column name"""
  residents_per_officer
}

"""aggregate var_pop on columns"""
type county_public_safety_var_pop_fields {
  case_burden: Float
  county_id: Float
  crime_rate: Float
  police_officers: Float
  population: Float
  residents_per_officer: Float
}

"""
order by var_pop() on columns of table "county_public_safety"
"""
input county_public_safety_var_pop_order_by {
  case_burden: order_by
  county_id: order_by
  crime_rate: order_by
  police_officers: order_by
  population: order_by
  residents_per_officer: order_by
}

"""aggregate var_samp on columns"""
type county_public_safety_var_samp_fields {
  case_burden: Float
  county_id: Float
  crime_rate: Float
  police_officers: Float
  population: Float
  residents_per_officer: Float
}

"""
order by var_samp() on columns of table "county_public_safety"
"""
input county_public_safety_var_samp_order_by {
  case_burden: order_by
  county_id: order_by
  crime_rate: order_by
  police_officers: order_by
  population: order_by
  residents_per_officer: order_by
}

"""aggregate variance on columns"""
type county_public_safety_variance_fields {
  case_burden: Float
  county_id: Float
  crime_rate: Float
  police_officers: Float
  population: Float
  residents_per_officer: Float
}

"""
order by variance() on columns of table "county_public_safety"
"""
input county_public_safety_variance_order_by {
  case_burden: order_by
  county_id: order_by
  crime_rate: order_by
  police_officers: order_by
  population: order_by
  residents_per_officer: order_by
}

"""
expression to compare columns of type Float. All fields are combined with logical 'AND'.
"""
input Float_comparison_exp {
  _eq: Float
  _gt: Float
  _gte: Float
  _in: [Float!]
  _is_null: Boolean
  _lt: Float
  _lte: Float
  _neq: Float
  _nin: [Float!]
}

"""
expression to compare columns of type Int. All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "city"
  """
  delete_city(
    """filter the rows which have to be deleted"""
    where: city_bool_exp!
  ): city_mutation_response

  """
  delete data from the table: "county_public_safety"
  """
  delete_county_public_safety(
    """filter the rows which have to be deleted"""
    where: county_public_safety_bool_exp!
  ): county_public_safety_mutation_response

  """
  insert data into the table: "city"
  """
  insert_city(
    """the rows to be inserted"""
    objects: [city_insert_input!]!

    """on conflict condition"""
    on_conflict: city_on_conflict
  ): city_mutation_response

  """
  insert a single row into the table: "city"
  """
  insert_city_one(
    """the row to be inserted"""
    object: city_insert_input!

    """on conflict condition"""
    on_conflict: city_on_conflict
  ): city

  """
  insert data into the table: "county_public_safety"
  """
  insert_county_public_safety(
    """the rows to be inserted"""
    objects: [county_public_safety_insert_input!]!

    """on conflict condition"""
    on_conflict: county_public_safety_on_conflict
  ): county_public_safety_mutation_response

  """
  insert a single row into the table: "county_public_safety"
  """
  insert_county_public_safety_one(
    """the row to be inserted"""
    object: county_public_safety_insert_input!

    """on conflict condition"""
    on_conflict: county_public_safety_on_conflict
  ): county_public_safety

  """
  update data of the table: "city"
  """
  update_city(
    """increments the integer columns with given value of the filtered values"""
    _inc: city_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: city_set_input

    """filter the rows which have to be updated"""
    where: city_bool_exp!
  ): city_mutation_response

  """
  update data of the table: "county_public_safety"
  """
  update_county_public_safety(
    """increments the integer columns with given value of the filtered values"""
    _inc: county_public_safety_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: county_public_safety_set_input

    """filter the rows which have to be updated"""
    where: county_public_safety_bool_exp!
  ): county_public_safety_mutation_response
}

"""column ordering options"""
enum order_by {
  """in the ascending order, nulls last"""
  asc

  """in the ascending order, nulls first"""
  asc_nulls_first

  """in the ascending order, nulls last"""
  asc_nulls_last

  """in the descending order, nulls first"""
  desc

  """in the descending order, nulls first"""
  desc_nulls_first

  """in the descending order, nulls last"""
  desc_nulls_last
}

"""query root"""
type query_root {
  """
  fetch data from the table: "city"
  """
  city(
    """distinct select on columns"""
    distinct_on: [city_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [city_order_by!]

    """filter the rows returned"""
    where: city_bool_exp
  ): [city!]!

  """
  fetch aggregated fields from the table: "city"
  """
  city_aggregate(
    """distinct select on columns"""
    distinct_on: [city_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [city_order_by!]

    """filter the rows returned"""
    where: city_bool_exp
  ): city_aggregate!

  """
  fetch data from the table: "county_public_safety"
  """
  county_public_safety(
    """distinct select on columns"""
    distinct_on: [county_public_safety_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [county_public_safety_order_by!]

    """filter the rows returned"""
    where: county_public_safety_bool_exp
  ): [county_public_safety!]!

  """
  fetch aggregated fields from the table: "county_public_safety"
  """
  county_public_safety_aggregate(
    """distinct select on columns"""
    distinct_on: [county_public_safety_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [county_public_safety_order_by!]

    """filter the rows returned"""
    where: county_public_safety_bool_exp
  ): county_public_safety_aggregate!
}

"""
expression to compare columns of type String. All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String
  _ilike: String
  _in: [String!]
  _is_null: Boolean
  _like: String
  _lt: String
  _lte: String
  _neq: String
  _nilike: String
  _nin: [String!]
  _nlike: String
  _nsimilar: String
  _similar: String
}

"""subscription root"""
type subscription_root {
  """
  fetch data from the table: "city"
  """
  city(
    """distinct select on columns"""
    distinct_on: [city_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [city_order_by!]

    """filter the rows returned"""
    where: city_bool_exp
  ): [city!]!

  """
  fetch aggregated fields from the table: "city"
  """
  city_aggregate(
    """distinct select on columns"""
    distinct_on: [city_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [city_order_by!]

    """filter the rows returned"""
    where: city_bool_exp
  ): city_aggregate!

  """
  fetch data from the table: "county_public_safety"
  """
  county_public_safety(
    """distinct select on columns"""
    distinct_on: [county_public_safety_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [county_public_safety_order_by!]

    """filter the rows returned"""
    where: county_public_safety_bool_exp
  ): [county_public_safety!]!

  """
  fetch aggregated fields from the table: "county_public_safety"
  """
  county_public_safety_aggregate(
    """distinct select on columns"""
    distinct_on: [county_public_safety_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [county_public_safety_order_by!]

    """filter the rows returned"""
    where: county_public_safety_bool_exp
  ): county_public_safety_aggregate!
}
