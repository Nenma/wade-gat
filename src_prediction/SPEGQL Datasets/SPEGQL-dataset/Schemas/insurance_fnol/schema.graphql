schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""
Direct the client to resolve this field locally, either from the cache or local resolvers.
"""
directive @client(
  """
  When true, the client will never use the cache for this value. See
  https://www.apollographql.com/docs/react/essentials/local-state/#forcing-resolvers-with-clientalways-true
  """
  always: Boolean
) on FIELD | FRAGMENT_DEFINITION | INLINE_FRAGMENT

"""
Export this locally resolved field as a variable to be used in the remainder of this query. See
https://www.apollographql.com/docs/react/essentials/local-state/#using-client-fields-as-variables
"""
directive @export(
  """The variable name to export this field as."""
  as: String!
) on FIELD

"""
Specify a custom store key for this result. See
https://www.apollographql.com/docs/react/advanced/caching/#the-connection-directive
"""
directive @connection(
  """Specify the store key."""
  key: String!

  """
  An array of query argument names to include in the generated custom store key.
  """
  filter: [String!]
) on FIELD

"""
columns and relationships of "available_policies"
"""
type available_policies {
  customer_phone: String

  """An array relationship"""
  customers_policies(
    """distinct select on columns"""
    distinct_on: [customers_policies_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [customers_policies_order_by!]

    """filter the rows returned"""
    where: customers_policies_bool_exp
  ): [customers_policies!]!

  """An aggregated array relationship"""
  customers_policies_aggregate(
    """distinct select on columns"""
    distinct_on: [customers_policies_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [customers_policies_order_by!]

    """filter the rows returned"""
    where: customers_policies_bool_exp
  ): customers_policies_aggregate!
  policy_id: bigint!
  policy_type_code: String
}

"""
aggregated selection of "available_policies"
"""
type available_policies_aggregate {
  aggregate: available_policies_aggregate_fields
  nodes: [available_policies!]!
}

"""
aggregate fields of "available_policies"
"""
type available_policies_aggregate_fields {
  avg: available_policies_avg_fields
  count(columns: [available_policies_select_column!], distinct: Boolean): Int
  max: available_policies_max_fields
  min: available_policies_min_fields
  stddev: available_policies_stddev_fields
  stddev_pop: available_policies_stddev_pop_fields
  stddev_samp: available_policies_stddev_samp_fields
  sum: available_policies_sum_fields
  var_pop: available_policies_var_pop_fields
  var_samp: available_policies_var_samp_fields
  variance: available_policies_variance_fields
}

"""
order by aggregate values of table "available_policies"
"""
input available_policies_aggregate_order_by {
  avg: available_policies_avg_order_by
  count: order_by
  max: available_policies_max_order_by
  min: available_policies_min_order_by
  stddev: available_policies_stddev_order_by
  stddev_pop: available_policies_stddev_pop_order_by
  stddev_samp: available_policies_stddev_samp_order_by
  sum: available_policies_sum_order_by
  var_pop: available_policies_var_pop_order_by
  var_samp: available_policies_var_samp_order_by
  variance: available_policies_variance_order_by
}

"""
input type for inserting array relation for remote table "available_policies"
"""
input available_policies_arr_rel_insert_input {
  data: [available_policies_insert_input!]!
  on_conflict: available_policies_on_conflict
}

"""aggregate avg on columns"""
type available_policies_avg_fields {
  policy_id: Float
}

"""
order by avg() on columns of table "available_policies"
"""
input available_policies_avg_order_by {
  policy_id: order_by
}

"""
Boolean expression to filter rows from the table "available_policies". All fields are combined with a logical 'AND'.
"""
input available_policies_bool_exp {
  _and: [available_policies_bool_exp]
  _not: available_policies_bool_exp
  _or: [available_policies_bool_exp]
  customer_phone: String_comparison_exp
  customers_policies: customers_policies_bool_exp
  policy_id: bigint_comparison_exp
  policy_type_code: String_comparison_exp
}

"""
unique or primary key constraints on table "available_policies"
"""
enum available_policies_constraint {
  """unique or primary key constraint"""
  idx_26605_available_policies_pkey

  """unique or primary key constraint"""
  idx_26605_sqlite_autoindex_available_policies_1
}

"""
input type for incrementing integer column in table "available_policies"
"""
input available_policies_inc_input {
  policy_id: bigint
}

"""
input type for inserting data into table "available_policies"
"""
input available_policies_insert_input {
  customer_phone: String
  customers_policies: customers_policies_arr_rel_insert_input
  policy_id: bigint
  policy_type_code: String
}

"""aggregate max on columns"""
type available_policies_max_fields {
  customer_phone: String
  policy_id: bigint
  policy_type_code: String
}

"""
order by max() on columns of table "available_policies"
"""
input available_policies_max_order_by {
  customer_phone: order_by
  policy_id: order_by
  policy_type_code: order_by
}

"""aggregate min on columns"""
type available_policies_min_fields {
  customer_phone: String
  policy_id: bigint
  policy_type_code: String
}

"""
order by min() on columns of table "available_policies"
"""
input available_policies_min_order_by {
  customer_phone: order_by
  policy_id: order_by
  policy_type_code: order_by
}

"""
response of any mutation on the table "available_policies"
"""
type available_policies_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [available_policies!]!
}

"""
input type for inserting object relation for remote table "available_policies"
"""
input available_policies_obj_rel_insert_input {
  data: available_policies_insert_input!
  on_conflict: available_policies_on_conflict
}

"""
on conflict condition type for table "available_policies"
"""
input available_policies_on_conflict {
  constraint: available_policies_constraint!
  update_columns: [available_policies_update_column!]!
  where: available_policies_bool_exp
}

"""
ordering options when selecting data from "available_policies"
"""
input available_policies_order_by {
  customer_phone: order_by
  customers_policies_aggregate: customers_policies_aggregate_order_by
  policy_id: order_by
  policy_type_code: order_by
}

"""
primary key columns input for table: "available_policies"
"""
input available_policies_pk_columns_input {
  policy_id: bigint!
}

"""
select columns of table "available_policies"
"""
enum available_policies_select_column {
  """column name"""
  customer_phone

  """column name"""
  policy_id

  """column name"""
  policy_type_code
}

"""
input type for updating data in table "available_policies"
"""
input available_policies_set_input {
  customer_phone: String
  policy_id: bigint
  policy_type_code: String
}

"""aggregate stddev on columns"""
type available_policies_stddev_fields {
  policy_id: Float
}

"""
order by stddev() on columns of table "available_policies"
"""
input available_policies_stddev_order_by {
  policy_id: order_by
}

"""aggregate stddev_pop on columns"""
type available_policies_stddev_pop_fields {
  policy_id: Float
}

"""
order by stddev_pop() on columns of table "available_policies"
"""
input available_policies_stddev_pop_order_by {
  policy_id: order_by
}

"""aggregate stddev_samp on columns"""
type available_policies_stddev_samp_fields {
  policy_id: Float
}

"""
order by stddev_samp() on columns of table "available_policies"
"""
input available_policies_stddev_samp_order_by {
  policy_id: order_by
}

"""aggregate sum on columns"""
type available_policies_sum_fields {
  policy_id: bigint
}

"""
order by sum() on columns of table "available_policies"
"""
input available_policies_sum_order_by {
  policy_id: order_by
}

"""
update columns of table "available_policies"
"""
enum available_policies_update_column {
  """column name"""
  customer_phone

  """column name"""
  policy_id

  """column name"""
  policy_type_code
}

"""aggregate var_pop on columns"""
type available_policies_var_pop_fields {
  policy_id: Float
}

"""
order by var_pop() on columns of table "available_policies"
"""
input available_policies_var_pop_order_by {
  policy_id: order_by
}

"""aggregate var_samp on columns"""
type available_policies_var_samp_fields {
  policy_id: Float
}

"""
order by var_samp() on columns of table "available_policies"
"""
input available_policies_var_samp_order_by {
  policy_id: order_by
}

"""aggregate variance on columns"""
type available_policies_variance_fields {
  policy_id: Float
}

"""
order by variance() on columns of table "available_policies"
"""
input available_policies_variance_order_by {
  policy_id: order_by
}

scalar bigint

"""
expression to compare columns of type bigint. All fields are combined with logical 'AND'.
"""
input bigint_comparison_exp {
  _eq: bigint
  _gt: bigint
  _gte: bigint
  _in: [bigint!]
  _is_null: Boolean
  _lt: bigint
  _lte: bigint
  _neq: bigint
  _nin: [bigint!]
}

"""
columns and relationships of "claims"
"""
type claims {
  claim_id: bigint!
  effective_date: date

  """An object relationship"""
  first_notification_of_loss: first_notification_of_loss
  fnol_id: bigint

  """An array relationship"""
  settlements(
    """distinct select on columns"""
    distinct_on: [settlements_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [settlements_order_by!]

    """filter the rows returned"""
    where: settlements_bool_exp
  ): [settlements!]!

  """An aggregated array relationship"""
  settlements_aggregate(
    """distinct select on columns"""
    distinct_on: [settlements_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [settlements_order_by!]

    """filter the rows returned"""
    where: settlements_bool_exp
  ): settlements_aggregate!
}

"""
aggregated selection of "claims"
"""
type claims_aggregate {
  aggregate: claims_aggregate_fields
  nodes: [claims!]!
}

"""
aggregate fields of "claims"
"""
type claims_aggregate_fields {
  avg: claims_avg_fields
  count(columns: [claims_select_column!], distinct: Boolean): Int
  max: claims_max_fields
  min: claims_min_fields
  stddev: claims_stddev_fields
  stddev_pop: claims_stddev_pop_fields
  stddev_samp: claims_stddev_samp_fields
  sum: claims_sum_fields
  var_pop: claims_var_pop_fields
  var_samp: claims_var_samp_fields
  variance: claims_variance_fields
}

"""
order by aggregate values of table "claims"
"""
input claims_aggregate_order_by {
  avg: claims_avg_order_by
  count: order_by
  max: claims_max_order_by
  min: claims_min_order_by
  stddev: claims_stddev_order_by
  stddev_pop: claims_stddev_pop_order_by
  stddev_samp: claims_stddev_samp_order_by
  sum: claims_sum_order_by
  var_pop: claims_var_pop_order_by
  var_samp: claims_var_samp_order_by
  variance: claims_variance_order_by
}

"""
input type for inserting array relation for remote table "claims"
"""
input claims_arr_rel_insert_input {
  data: [claims_insert_input!]!
  on_conflict: claims_on_conflict
}

"""aggregate avg on columns"""
type claims_avg_fields {
  claim_id: Float
  fnol_id: Float
}

"""
order by avg() on columns of table "claims"
"""
input claims_avg_order_by {
  claim_id: order_by
  fnol_id: order_by
}

"""
Boolean expression to filter rows from the table "claims". All fields are combined with a logical 'AND'.
"""
input claims_bool_exp {
  _and: [claims_bool_exp]
  _not: claims_bool_exp
  _or: [claims_bool_exp]
  claim_id: bigint_comparison_exp
  effective_date: date_comparison_exp
  first_notification_of_loss: first_notification_of_loss_bool_exp
  fnol_id: bigint_comparison_exp
  settlements: settlements_bool_exp
}

"""
unique or primary key constraints on table "claims"
"""
enum claims_constraint {
  """unique or primary key constraint"""
  idx_26617_claims_pkey

  """unique or primary key constraint"""
  idx_26617_sqlite_autoindex_claims_1
}

"""
input type for incrementing integer column in table "claims"
"""
input claims_inc_input {
  claim_id: bigint
  fnol_id: bigint
}

"""
input type for inserting data into table "claims"
"""
input claims_insert_input {
  claim_id: bigint
  effective_date: date
  first_notification_of_loss: first_notification_of_loss_obj_rel_insert_input
  fnol_id: bigint
  settlements: settlements_arr_rel_insert_input
}

"""aggregate max on columns"""
type claims_max_fields {
  claim_id: bigint
  effective_date: date
  fnol_id: bigint
}

"""
order by max() on columns of table "claims"
"""
input claims_max_order_by {
  claim_id: order_by
  effective_date: order_by
  fnol_id: order_by
}

"""aggregate min on columns"""
type claims_min_fields {
  claim_id: bigint
  effective_date: date
  fnol_id: bigint
}

"""
order by min() on columns of table "claims"
"""
input claims_min_order_by {
  claim_id: order_by
  effective_date: order_by
  fnol_id: order_by
}

"""
response of any mutation on the table "claims"
"""
type claims_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [claims!]!
}

"""
input type for inserting object relation for remote table "claims"
"""
input claims_obj_rel_insert_input {
  data: claims_insert_input!
  on_conflict: claims_on_conflict
}

"""
on conflict condition type for table "claims"
"""
input claims_on_conflict {
  constraint: claims_constraint!
  update_columns: [claims_update_column!]!
  where: claims_bool_exp
}

"""
ordering options when selecting data from "claims"
"""
input claims_order_by {
  claim_id: order_by
  effective_date: order_by
  first_notification_of_loss: first_notification_of_loss_order_by
  fnol_id: order_by
  settlements_aggregate: settlements_aggregate_order_by
}

"""
primary key columns input for table: "claims"
"""
input claims_pk_columns_input {
  claim_id: bigint!
}

"""
select columns of table "claims"
"""
enum claims_select_column {
  """column name"""
  claim_id

  """column name"""
  effective_date

  """column name"""
  fnol_id
}

"""
input type for updating data in table "claims"
"""
input claims_set_input {
  claim_id: bigint
  effective_date: date
  fnol_id: bigint
}

"""aggregate stddev on columns"""
type claims_stddev_fields {
  claim_id: Float
  fnol_id: Float
}

"""
order by stddev() on columns of table "claims"
"""
input claims_stddev_order_by {
  claim_id: order_by
  fnol_id: order_by
}

"""aggregate stddev_pop on columns"""
type claims_stddev_pop_fields {
  claim_id: Float
  fnol_id: Float
}

"""
order by stddev_pop() on columns of table "claims"
"""
input claims_stddev_pop_order_by {
  claim_id: order_by
  fnol_id: order_by
}

"""aggregate stddev_samp on columns"""
type claims_stddev_samp_fields {
  claim_id: Float
  fnol_id: Float
}

"""
order by stddev_samp() on columns of table "claims"
"""
input claims_stddev_samp_order_by {
  claim_id: order_by
  fnol_id: order_by
}

"""aggregate sum on columns"""
type claims_sum_fields {
  claim_id: bigint
  fnol_id: bigint
}

"""
order by sum() on columns of table "claims"
"""
input claims_sum_order_by {
  claim_id: order_by
  fnol_id: order_by
}

"""
update columns of table "claims"
"""
enum claims_update_column {
  """column name"""
  claim_id

  """column name"""
  effective_date

  """column name"""
  fnol_id
}

"""aggregate var_pop on columns"""
type claims_var_pop_fields {
  claim_id: Float
  fnol_id: Float
}

"""
order by var_pop() on columns of table "claims"
"""
input claims_var_pop_order_by {
  claim_id: order_by
  fnol_id: order_by
}

"""aggregate var_samp on columns"""
type claims_var_samp_fields {
  claim_id: Float
  fnol_id: Float
}

"""
order by var_samp() on columns of table "claims"
"""
input claims_var_samp_order_by {
  claim_id: order_by
  fnol_id: order_by
}

"""aggregate variance on columns"""
type claims_variance_fields {
  claim_id: Float
  fnol_id: Float
}

"""
order by variance() on columns of table "claims"
"""
input claims_variance_order_by {
  claim_id: order_by
  fnol_id: order_by
}

"""
columns and relationships of "customers"
"""
type customers {
  customer_id: bigint!
  customer_name: String

  """An array relationship"""
  customers_policies(
    """distinct select on columns"""
    distinct_on: [customers_policies_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [customers_policies_order_by!]

    """filter the rows returned"""
    where: customers_policies_bool_exp
  ): [customers_policies!]!

  """An aggregated array relationship"""
  customers_policies_aggregate(
    """distinct select on columns"""
    distinct_on: [customers_policies_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [customers_policies_order_by!]

    """filter the rows returned"""
    where: customers_policies_bool_exp
  ): customers_policies_aggregate!

  """An array relationship"""
  first_notification_of_losses(
    """distinct select on columns"""
    distinct_on: [first_notification_of_loss_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [first_notification_of_loss_order_by!]

    """filter the rows returned"""
    where: first_notification_of_loss_bool_exp
  ): [first_notification_of_loss!]!

  """An aggregated array relationship"""
  first_notification_of_losses_aggregate(
    """distinct select on columns"""
    distinct_on: [first_notification_of_loss_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [first_notification_of_loss_order_by!]

    """filter the rows returned"""
    where: first_notification_of_loss_bool_exp
  ): first_notification_of_loss_aggregate!
}

"""
aggregated selection of "customers"
"""
type customers_aggregate {
  aggregate: customers_aggregate_fields
  nodes: [customers!]!
}

"""
aggregate fields of "customers"
"""
type customers_aggregate_fields {
  avg: customers_avg_fields
  count(columns: [customers_select_column!], distinct: Boolean): Int
  max: customers_max_fields
  min: customers_min_fields
  stddev: customers_stddev_fields
  stddev_pop: customers_stddev_pop_fields
  stddev_samp: customers_stddev_samp_fields
  sum: customers_sum_fields
  var_pop: customers_var_pop_fields
  var_samp: customers_var_samp_fields
  variance: customers_variance_fields
}

"""
order by aggregate values of table "customers"
"""
input customers_aggregate_order_by {
  avg: customers_avg_order_by
  count: order_by
  max: customers_max_order_by
  min: customers_min_order_by
  stddev: customers_stddev_order_by
  stddev_pop: customers_stddev_pop_order_by
  stddev_samp: customers_stddev_samp_order_by
  sum: customers_sum_order_by
  var_pop: customers_var_pop_order_by
  var_samp: customers_var_samp_order_by
  variance: customers_variance_order_by
}

"""
input type for inserting array relation for remote table "customers"
"""
input customers_arr_rel_insert_input {
  data: [customers_insert_input!]!
  on_conflict: customers_on_conflict
}

"""aggregate avg on columns"""
type customers_avg_fields {
  customer_id: Float
}

"""
order by avg() on columns of table "customers"
"""
input customers_avg_order_by {
  customer_id: order_by
}

"""
Boolean expression to filter rows from the table "customers". All fields are combined with a logical 'AND'.
"""
input customers_bool_exp {
  _and: [customers_bool_exp]
  _not: customers_bool_exp
  _or: [customers_bool_exp]
  customer_id: bigint_comparison_exp
  customer_name: String_comparison_exp
  customers_policies: customers_policies_bool_exp
  first_notification_of_losses: first_notification_of_loss_bool_exp
}

"""
unique or primary key constraints on table "customers"
"""
enum customers_constraint {
  """unique or primary key constraint"""
  idx_26593_customers_pkey
}

"""
input type for incrementing integer column in table "customers"
"""
input customers_inc_input {
  customer_id: bigint
}

"""
input type for inserting data into table "customers"
"""
input customers_insert_input {
  customer_id: bigint
  customer_name: String
  customers_policies: customers_policies_arr_rel_insert_input
  first_notification_of_losses: first_notification_of_loss_arr_rel_insert_input
}

"""aggregate max on columns"""
type customers_max_fields {
  customer_id: bigint
  customer_name: String
}

"""
order by max() on columns of table "customers"
"""
input customers_max_order_by {
  customer_id: order_by
  customer_name: order_by
}

"""aggregate min on columns"""
type customers_min_fields {
  customer_id: bigint
  customer_name: String
}

"""
order by min() on columns of table "customers"
"""
input customers_min_order_by {
  customer_id: order_by
  customer_name: order_by
}

"""
response of any mutation on the table "customers"
"""
type customers_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [customers!]!
}

"""
input type for inserting object relation for remote table "customers"
"""
input customers_obj_rel_insert_input {
  data: customers_insert_input!
  on_conflict: customers_on_conflict
}

"""
on conflict condition type for table "customers"
"""
input customers_on_conflict {
  constraint: customers_constraint!
  update_columns: [customers_update_column!]!
  where: customers_bool_exp
}

"""
ordering options when selecting data from "customers"
"""
input customers_order_by {
  customer_id: order_by
  customer_name: order_by
  customers_policies_aggregate: customers_policies_aggregate_order_by
  first_notification_of_losses_aggregate: first_notification_of_loss_aggregate_order_by
}

"""
primary key columns input for table: "customers"
"""
input customers_pk_columns_input {
  customer_id: bigint!
}

"""
columns and relationships of "customers_policies"
"""
type customers_policies {
  """An object relationship"""
  available_policy: available_policies!

  """An object relationship"""
  customer: customers!
  customer_id: bigint!
  date_closed: date
  date_opened: date

  """An array relationship"""
  first_notification_of_losses(
    """distinct select on columns"""
    distinct_on: [first_notification_of_loss_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [first_notification_of_loss_order_by!]

    """filter the rows returned"""
    where: first_notification_of_loss_bool_exp
  ): [first_notification_of_loss!]!

  """An aggregated array relationship"""
  first_notification_of_losses_aggregate(
    """distinct select on columns"""
    distinct_on: [first_notification_of_loss_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [first_notification_of_loss_order_by!]

    """filter the rows returned"""
    where: first_notification_of_loss_bool_exp
  ): first_notification_of_loss_aggregate!
  policy_id: bigint!
}

"""
aggregated selection of "customers_policies"
"""
type customers_policies_aggregate {
  aggregate: customers_policies_aggregate_fields
  nodes: [customers_policies!]!
}

"""
aggregate fields of "customers_policies"
"""
type customers_policies_aggregate_fields {
  avg: customers_policies_avg_fields
  count(columns: [customers_policies_select_column!], distinct: Boolean): Int
  max: customers_policies_max_fields
  min: customers_policies_min_fields
  stddev: customers_policies_stddev_fields
  stddev_pop: customers_policies_stddev_pop_fields
  stddev_samp: customers_policies_stddev_samp_fields
  sum: customers_policies_sum_fields
  var_pop: customers_policies_var_pop_fields
  var_samp: customers_policies_var_samp_fields
  variance: customers_policies_variance_fields
}

"""
order by aggregate values of table "customers_policies"
"""
input customers_policies_aggregate_order_by {
  avg: customers_policies_avg_order_by
  count: order_by
  max: customers_policies_max_order_by
  min: customers_policies_min_order_by
  stddev: customers_policies_stddev_order_by
  stddev_pop: customers_policies_stddev_pop_order_by
  stddev_samp: customers_policies_stddev_samp_order_by
  sum: customers_policies_sum_order_by
  var_pop: customers_policies_var_pop_order_by
  var_samp: customers_policies_var_samp_order_by
  variance: customers_policies_variance_order_by
}

"""
input type for inserting array relation for remote table "customers_policies"
"""
input customers_policies_arr_rel_insert_input {
  data: [customers_policies_insert_input!]!
  on_conflict: customers_policies_on_conflict
}

"""aggregate avg on columns"""
type customers_policies_avg_fields {
  customer_id: Float
  policy_id: Float
}

"""
order by avg() on columns of table "customers_policies"
"""
input customers_policies_avg_order_by {
  customer_id: order_by
  policy_id: order_by
}

"""
Boolean expression to filter rows from the table "customers_policies". All fields are combined with a logical 'AND'.
"""
input customers_policies_bool_exp {
  _and: [customers_policies_bool_exp]
  _not: customers_policies_bool_exp
  _or: [customers_policies_bool_exp]
  available_policy: available_policies_bool_exp
  customer: customers_bool_exp
  customer_id: bigint_comparison_exp
  date_closed: date_comparison_exp
  date_opened: date_comparison_exp
  first_notification_of_losses: first_notification_of_loss_bool_exp
  policy_id: bigint_comparison_exp
}

"""
unique or primary key constraints on table "customers_policies"
"""
enum customers_policies_constraint {
  """unique or primary key constraint"""
  idx_26611_customers_policies_pkey

  """unique or primary key constraint"""
  idx_26611_sqlite_autoindex_customers_policies_1
}

"""
input type for incrementing integer column in table "customers_policies"
"""
input customers_policies_inc_input {
  customer_id: bigint
  policy_id: bigint
}

"""
input type for inserting data into table "customers_policies"
"""
input customers_policies_insert_input {
  available_policy: available_policies_obj_rel_insert_input
  customer: customers_obj_rel_insert_input
  customer_id: bigint
  date_closed: date
  date_opened: date
  first_notification_of_losses: first_notification_of_loss_arr_rel_insert_input
  policy_id: bigint
}

"""aggregate max on columns"""
type customers_policies_max_fields {
  customer_id: bigint
  date_closed: date
  date_opened: date
  policy_id: bigint
}

"""
order by max() on columns of table "customers_policies"
"""
input customers_policies_max_order_by {
  customer_id: order_by
  date_closed: order_by
  date_opened: order_by
  policy_id: order_by
}

"""aggregate min on columns"""
type customers_policies_min_fields {
  customer_id: bigint
  date_closed: date
  date_opened: date
  policy_id: bigint
}

"""
order by min() on columns of table "customers_policies"
"""
input customers_policies_min_order_by {
  customer_id: order_by
  date_closed: order_by
  date_opened: order_by
  policy_id: order_by
}

"""
response of any mutation on the table "customers_policies"
"""
type customers_policies_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [customers_policies!]!
}

"""
input type for inserting object relation for remote table "customers_policies"
"""
input customers_policies_obj_rel_insert_input {
  data: customers_policies_insert_input!
  on_conflict: customers_policies_on_conflict
}

"""
on conflict condition type for table "customers_policies"
"""
input customers_policies_on_conflict {
  constraint: customers_policies_constraint!
  update_columns: [customers_policies_update_column!]!
  where: customers_policies_bool_exp
}

"""
ordering options when selecting data from "customers_policies"
"""
input customers_policies_order_by {
  available_policy: available_policies_order_by
  customer: customers_order_by
  customer_id: order_by
  date_closed: order_by
  date_opened: order_by
  first_notification_of_losses_aggregate: first_notification_of_loss_aggregate_order_by
  policy_id: order_by
}

"""
primary key columns input for table: "customers_policies"
"""
input customers_policies_pk_columns_input {
  customer_id: bigint!
  policy_id: bigint!
}

"""
select columns of table "customers_policies"
"""
enum customers_policies_select_column {
  """column name"""
  customer_id

  """column name"""
  date_closed

  """column name"""
  date_opened

  """column name"""
  policy_id
}

"""
input type for updating data in table "customers_policies"
"""
input customers_policies_set_input {
  customer_id: bigint
  date_closed: date
  date_opened: date
  policy_id: bigint
}

"""aggregate stddev on columns"""
type customers_policies_stddev_fields {
  customer_id: Float
  policy_id: Float
}

"""
order by stddev() on columns of table "customers_policies"
"""
input customers_policies_stddev_order_by {
  customer_id: order_by
  policy_id: order_by
}

"""aggregate stddev_pop on columns"""
type customers_policies_stddev_pop_fields {
  customer_id: Float
  policy_id: Float
}

"""
order by stddev_pop() on columns of table "customers_policies"
"""
input customers_policies_stddev_pop_order_by {
  customer_id: order_by
  policy_id: order_by
}

"""aggregate stddev_samp on columns"""
type customers_policies_stddev_samp_fields {
  customer_id: Float
  policy_id: Float
}

"""
order by stddev_samp() on columns of table "customers_policies"
"""
input customers_policies_stddev_samp_order_by {
  customer_id: order_by
  policy_id: order_by
}

"""aggregate sum on columns"""
type customers_policies_sum_fields {
  customer_id: bigint
  policy_id: bigint
}

"""
order by sum() on columns of table "customers_policies"
"""
input customers_policies_sum_order_by {
  customer_id: order_by
  policy_id: order_by
}

"""
update columns of table "customers_policies"
"""
enum customers_policies_update_column {
  """column name"""
  customer_id

  """column name"""
  date_closed

  """column name"""
  date_opened

  """column name"""
  policy_id
}

"""aggregate var_pop on columns"""
type customers_policies_var_pop_fields {
  customer_id: Float
  policy_id: Float
}

"""
order by var_pop() on columns of table "customers_policies"
"""
input customers_policies_var_pop_order_by {
  customer_id: order_by
  policy_id: order_by
}

"""aggregate var_samp on columns"""
type customers_policies_var_samp_fields {
  customer_id: Float
  policy_id: Float
}

"""
order by var_samp() on columns of table "customers_policies"
"""
input customers_policies_var_samp_order_by {
  customer_id: order_by
  policy_id: order_by
}

"""aggregate variance on columns"""
type customers_policies_variance_fields {
  customer_id: Float
  policy_id: Float
}

"""
order by variance() on columns of table "customers_policies"
"""
input customers_policies_variance_order_by {
  customer_id: order_by
  policy_id: order_by
}

"""
select columns of table "customers"
"""
enum customers_select_column {
  """column name"""
  customer_id

  """column name"""
  customer_name
}

"""
input type for updating data in table "customers"
"""
input customers_set_input {
  customer_id: bigint
  customer_name: String
}

"""aggregate stddev on columns"""
type customers_stddev_fields {
  customer_id: Float
}

"""
order by stddev() on columns of table "customers"
"""
input customers_stddev_order_by {
  customer_id: order_by
}

"""aggregate stddev_pop on columns"""
type customers_stddev_pop_fields {
  customer_id: Float
}

"""
order by stddev_pop() on columns of table "customers"
"""
input customers_stddev_pop_order_by {
  customer_id: order_by
}

"""aggregate stddev_samp on columns"""
type customers_stddev_samp_fields {
  customer_id: Float
}

"""
order by stddev_samp() on columns of table "customers"
"""
input customers_stddev_samp_order_by {
  customer_id: order_by
}

"""aggregate sum on columns"""
type customers_sum_fields {
  customer_id: bigint
}

"""
order by sum() on columns of table "customers"
"""
input customers_sum_order_by {
  customer_id: order_by
}

"""
update columns of table "customers"
"""
enum customers_update_column {
  """column name"""
  customer_id

  """column name"""
  customer_name
}

"""aggregate var_pop on columns"""
type customers_var_pop_fields {
  customer_id: Float
}

"""
order by var_pop() on columns of table "customers"
"""
input customers_var_pop_order_by {
  customer_id: order_by
}

"""aggregate var_samp on columns"""
type customers_var_samp_fields {
  customer_id: Float
}

"""
order by var_samp() on columns of table "customers"
"""
input customers_var_samp_order_by {
  customer_id: order_by
}

"""aggregate variance on columns"""
type customers_variance_fields {
  customer_id: Float
}

"""
order by variance() on columns of table "customers"
"""
input customers_variance_order_by {
  customer_id: order_by
}

scalar date

"""
expression to compare columns of type date. All fields are combined with logical 'AND'.
"""
input date_comparison_exp {
  _eq: date
  _gt: date
  _gte: date
  _in: [date!]
  _is_null: Boolean
  _lt: date
  _lte: date
  _neq: date
  _nin: [date!]
}

"""
columns and relationships of "first_notification_of_loss"
"""
type first_notification_of_loss {
  """An array relationship"""
  claims(
    """distinct select on columns"""
    distinct_on: [claims_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [claims_order_by!]

    """filter the rows returned"""
    where: claims_bool_exp
  ): [claims!]!

  """An aggregated array relationship"""
  claims_aggregate(
    """distinct select on columns"""
    distinct_on: [claims_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [claims_order_by!]

    """filter the rows returned"""
    where: claims_bool_exp
  ): claims_aggregate!

  """An object relationship"""
  customer: customers
  customer_id: bigint

  """An object relationship"""
  customers_policy: customers_policies
  fnol_id: bigint!
  policy_id: bigint

  """An object relationship"""
  service: services
  service_id: bigint
}

"""
aggregated selection of "first_notification_of_loss"
"""
type first_notification_of_loss_aggregate {
  aggregate: first_notification_of_loss_aggregate_fields
  nodes: [first_notification_of_loss!]!
}

"""
aggregate fields of "first_notification_of_loss"
"""
type first_notification_of_loss_aggregate_fields {
  avg: first_notification_of_loss_avg_fields
  count(columns: [first_notification_of_loss_select_column!], distinct: Boolean): Int
  max: first_notification_of_loss_max_fields
  min: first_notification_of_loss_min_fields
  stddev: first_notification_of_loss_stddev_fields
  stddev_pop: first_notification_of_loss_stddev_pop_fields
  stddev_samp: first_notification_of_loss_stddev_samp_fields
  sum: first_notification_of_loss_sum_fields
  var_pop: first_notification_of_loss_var_pop_fields
  var_samp: first_notification_of_loss_var_samp_fields
  variance: first_notification_of_loss_variance_fields
}

"""
order by aggregate values of table "first_notification_of_loss"
"""
input first_notification_of_loss_aggregate_order_by {
  avg: first_notification_of_loss_avg_order_by
  count: order_by
  max: first_notification_of_loss_max_order_by
  min: first_notification_of_loss_min_order_by
  stddev: first_notification_of_loss_stddev_order_by
  stddev_pop: first_notification_of_loss_stddev_pop_order_by
  stddev_samp: first_notification_of_loss_stddev_samp_order_by
  sum: first_notification_of_loss_sum_order_by
  var_pop: first_notification_of_loss_var_pop_order_by
  var_samp: first_notification_of_loss_var_samp_order_by
  variance: first_notification_of_loss_variance_order_by
}

"""
input type for inserting array relation for remote table "first_notification_of_loss"
"""
input first_notification_of_loss_arr_rel_insert_input {
  data: [first_notification_of_loss_insert_input!]!
  on_conflict: first_notification_of_loss_on_conflict
}

"""aggregate avg on columns"""
type first_notification_of_loss_avg_fields {
  customer_id: Float
  fnol_id: Float
  policy_id: Float
  service_id: Float
}

"""
order by avg() on columns of table "first_notification_of_loss"
"""
input first_notification_of_loss_avg_order_by {
  customer_id: order_by
  fnol_id: order_by
  policy_id: order_by
  service_id: order_by
}

"""
Boolean expression to filter rows from the table "first_notification_of_loss". All fields are combined with a logical 'AND'.
"""
input first_notification_of_loss_bool_exp {
  _and: [first_notification_of_loss_bool_exp]
  _not: first_notification_of_loss_bool_exp
  _or: [first_notification_of_loss_bool_exp]
  claims: claims_bool_exp
  customer: customers_bool_exp
  customer_id: bigint_comparison_exp
  customers_policy: customers_policies_bool_exp
  fnol_id: bigint_comparison_exp
  policy_id: bigint_comparison_exp
  service: services_bool_exp
  service_id: bigint_comparison_exp
}

"""
unique or primary key constraints on table "first_notification_of_loss"
"""
enum first_notification_of_loss_constraint {
  """unique or primary key constraint"""
  idx_26614_first_notification_of_loss_pkey

  """unique or primary key constraint"""
  idx_26614_sqlite_autoindex_first_notification_of_loss_1
}

"""
input type for incrementing integer column in table "first_notification_of_loss"
"""
input first_notification_of_loss_inc_input {
  customer_id: bigint
  fnol_id: bigint
  policy_id: bigint
  service_id: bigint
}

"""
input type for inserting data into table "first_notification_of_loss"
"""
input first_notification_of_loss_insert_input {
  claims: claims_arr_rel_insert_input
  customer: customers_obj_rel_insert_input
  customer_id: bigint
  customers_policy: customers_policies_obj_rel_insert_input
  fnol_id: bigint
  policy_id: bigint
  service: services_obj_rel_insert_input
  service_id: bigint
}

"""aggregate max on columns"""
type first_notification_of_loss_max_fields {
  customer_id: bigint
  fnol_id: bigint
  policy_id: bigint
  service_id: bigint
}

"""
order by max() on columns of table "first_notification_of_loss"
"""
input first_notification_of_loss_max_order_by {
  customer_id: order_by
  fnol_id: order_by
  policy_id: order_by
  service_id: order_by
}

"""aggregate min on columns"""
type first_notification_of_loss_min_fields {
  customer_id: bigint
  fnol_id: bigint
  policy_id: bigint
  service_id: bigint
}

"""
order by min() on columns of table "first_notification_of_loss"
"""
input first_notification_of_loss_min_order_by {
  customer_id: order_by
  fnol_id: order_by
  policy_id: order_by
  service_id: order_by
}

"""
response of any mutation on the table "first_notification_of_loss"
"""
type first_notification_of_loss_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [first_notification_of_loss!]!
}

"""
input type for inserting object relation for remote table "first_notification_of_loss"
"""
input first_notification_of_loss_obj_rel_insert_input {
  data: first_notification_of_loss_insert_input!
  on_conflict: first_notification_of_loss_on_conflict
}

"""
on conflict condition type for table "first_notification_of_loss"
"""
input first_notification_of_loss_on_conflict {
  constraint: first_notification_of_loss_constraint!
  update_columns: [first_notification_of_loss_update_column!]!
  where: first_notification_of_loss_bool_exp
}

"""
ordering options when selecting data from "first_notification_of_loss"
"""
input first_notification_of_loss_order_by {
  claims_aggregate: claims_aggregate_order_by
  customer: customers_order_by
  customer_id: order_by
  customers_policy: customers_policies_order_by
  fnol_id: order_by
  policy_id: order_by
  service: services_order_by
  service_id: order_by
}

"""
primary key columns input for table: "first_notification_of_loss"
"""
input first_notification_of_loss_pk_columns_input {
  fnol_id: bigint!
}

"""
select columns of table "first_notification_of_loss"
"""
enum first_notification_of_loss_select_column {
  """column name"""
  customer_id

  """column name"""
  fnol_id

  """column name"""
  policy_id

  """column name"""
  service_id
}

"""
input type for updating data in table "first_notification_of_loss"
"""
input first_notification_of_loss_set_input {
  customer_id: bigint
  fnol_id: bigint
  policy_id: bigint
  service_id: bigint
}

"""aggregate stddev on columns"""
type first_notification_of_loss_stddev_fields {
  customer_id: Float
  fnol_id: Float
  policy_id: Float
  service_id: Float
}

"""
order by stddev() on columns of table "first_notification_of_loss"
"""
input first_notification_of_loss_stddev_order_by {
  customer_id: order_by
  fnol_id: order_by
  policy_id: order_by
  service_id: order_by
}

"""aggregate stddev_pop on columns"""
type first_notification_of_loss_stddev_pop_fields {
  customer_id: Float
  fnol_id: Float
  policy_id: Float
  service_id: Float
}

"""
order by stddev_pop() on columns of table "first_notification_of_loss"
"""
input first_notification_of_loss_stddev_pop_order_by {
  customer_id: order_by
  fnol_id: order_by
  policy_id: order_by
  service_id: order_by
}

"""aggregate stddev_samp on columns"""
type first_notification_of_loss_stddev_samp_fields {
  customer_id: Float
  fnol_id: Float
  policy_id: Float
  service_id: Float
}

"""
order by stddev_samp() on columns of table "first_notification_of_loss"
"""
input first_notification_of_loss_stddev_samp_order_by {
  customer_id: order_by
  fnol_id: order_by
  policy_id: order_by
  service_id: order_by
}

"""aggregate sum on columns"""
type first_notification_of_loss_sum_fields {
  customer_id: bigint
  fnol_id: bigint
  policy_id: bigint
  service_id: bigint
}

"""
order by sum() on columns of table "first_notification_of_loss"
"""
input first_notification_of_loss_sum_order_by {
  customer_id: order_by
  fnol_id: order_by
  policy_id: order_by
  service_id: order_by
}

"""
update columns of table "first_notification_of_loss"
"""
enum first_notification_of_loss_update_column {
  """column name"""
  customer_id

  """column name"""
  fnol_id

  """column name"""
  policy_id

  """column name"""
  service_id
}

"""aggregate var_pop on columns"""
type first_notification_of_loss_var_pop_fields {
  customer_id: Float
  fnol_id: Float
  policy_id: Float
  service_id: Float
}

"""
order by var_pop() on columns of table "first_notification_of_loss"
"""
input first_notification_of_loss_var_pop_order_by {
  customer_id: order_by
  fnol_id: order_by
  policy_id: order_by
  service_id: order_by
}

"""aggregate var_samp on columns"""
type first_notification_of_loss_var_samp_fields {
  customer_id: Float
  fnol_id: Float
  policy_id: Float
  service_id: Float
}

"""
order by var_samp() on columns of table "first_notification_of_loss"
"""
input first_notification_of_loss_var_samp_order_by {
  customer_id: order_by
  fnol_id: order_by
  policy_id: order_by
  service_id: order_by
}

"""aggregate variance on columns"""
type first_notification_of_loss_variance_fields {
  customer_id: Float
  fnol_id: Float
  policy_id: Float
  service_id: Float
}

"""
order by variance() on columns of table "first_notification_of_loss"
"""
input first_notification_of_loss_variance_order_by {
  customer_id: order_by
  fnol_id: order_by
  policy_id: order_by
  service_id: order_by
}

"""
expression to compare columns of type Float. All fields are combined with logical 'AND'.
"""
input Float_comparison_exp {
  _eq: Float
  _gt: Float
  _gte: Float
  _in: [Float!]
  _is_null: Boolean
  _lt: Float
  _lte: Float
  _neq: Float
  _nin: [Float!]
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "available_policies"
  """
  delete_available_policies(
    """filter the rows which have to be deleted"""
    where: available_policies_bool_exp!
  ): available_policies_mutation_response

  """
  delete single row from the table: "available_policies"
  """
  delete_available_policies_by_pk(policy_id: bigint!): available_policies

  """
  delete data from the table: "claims"
  """
  delete_claims(
    """filter the rows which have to be deleted"""
    where: claims_bool_exp!
  ): claims_mutation_response

  """
  delete single row from the table: "claims"
  """
  delete_claims_by_pk(claim_id: bigint!): claims

  """
  delete data from the table: "customers"
  """
  delete_customers(
    """filter the rows which have to be deleted"""
    where: customers_bool_exp!
  ): customers_mutation_response

  """
  delete single row from the table: "customers"
  """
  delete_customers_by_pk(customer_id: bigint!): customers

  """
  delete data from the table: "customers_policies"
  """
  delete_customers_policies(
    """filter the rows which have to be deleted"""
    where: customers_policies_bool_exp!
  ): customers_policies_mutation_response

  """
  delete single row from the table: "customers_policies"
  """
  delete_customers_policies_by_pk(customer_id: bigint!, policy_id: bigint!): customers_policies

  """
  delete data from the table: "first_notification_of_loss"
  """
  delete_first_notification_of_loss(
    """filter the rows which have to be deleted"""
    where: first_notification_of_loss_bool_exp!
  ): first_notification_of_loss_mutation_response

  """
  delete single row from the table: "first_notification_of_loss"
  """
  delete_first_notification_of_loss_by_pk(fnol_id: bigint!): first_notification_of_loss

  """
  delete data from the table: "services"
  """
  delete_services(
    """filter the rows which have to be deleted"""
    where: services_bool_exp!
  ): services_mutation_response

  """
  delete single row from the table: "services"
  """
  delete_services_by_pk(service_id: bigint!): services

  """
  delete data from the table: "settlements"
  """
  delete_settlements(
    """filter the rows which have to be deleted"""
    where: settlements_bool_exp!
  ): settlements_mutation_response

  """
  delete single row from the table: "settlements"
  """
  delete_settlements_by_pk(settlement_id: bigint!): settlements

  """
  insert data into the table: "available_policies"
  """
  insert_available_policies(
    """the rows to be inserted"""
    objects: [available_policies_insert_input!]!

    """on conflict condition"""
    on_conflict: available_policies_on_conflict
  ): available_policies_mutation_response

  """
  insert a single row into the table: "available_policies"
  """
  insert_available_policies_one(
    """the row to be inserted"""
    object: available_policies_insert_input!

    """on conflict condition"""
    on_conflict: available_policies_on_conflict
  ): available_policies

  """
  insert data into the table: "claims"
  """
  insert_claims(
    """the rows to be inserted"""
    objects: [claims_insert_input!]!

    """on conflict condition"""
    on_conflict: claims_on_conflict
  ): claims_mutation_response

  """
  insert a single row into the table: "claims"
  """
  insert_claims_one(
    """the row to be inserted"""
    object: claims_insert_input!

    """on conflict condition"""
    on_conflict: claims_on_conflict
  ): claims

  """
  insert data into the table: "customers"
  """
  insert_customers(
    """the rows to be inserted"""
    objects: [customers_insert_input!]!

    """on conflict condition"""
    on_conflict: customers_on_conflict
  ): customers_mutation_response

  """
  insert a single row into the table: "customers"
  """
  insert_customers_one(
    """the row to be inserted"""
    object: customers_insert_input!

    """on conflict condition"""
    on_conflict: customers_on_conflict
  ): customers

  """
  insert data into the table: "customers_policies"
  """
  insert_customers_policies(
    """the rows to be inserted"""
    objects: [customers_policies_insert_input!]!

    """on conflict condition"""
    on_conflict: customers_policies_on_conflict
  ): customers_policies_mutation_response

  """
  insert a single row into the table: "customers_policies"
  """
  insert_customers_policies_one(
    """the row to be inserted"""
    object: customers_policies_insert_input!

    """on conflict condition"""
    on_conflict: customers_policies_on_conflict
  ): customers_policies

  """
  insert data into the table: "first_notification_of_loss"
  """
  insert_first_notification_of_loss(
    """the rows to be inserted"""
    objects: [first_notification_of_loss_insert_input!]!

    """on conflict condition"""
    on_conflict: first_notification_of_loss_on_conflict
  ): first_notification_of_loss_mutation_response

  """
  insert a single row into the table: "first_notification_of_loss"
  """
  insert_first_notification_of_loss_one(
    """the row to be inserted"""
    object: first_notification_of_loss_insert_input!

    """on conflict condition"""
    on_conflict: first_notification_of_loss_on_conflict
  ): first_notification_of_loss

  """
  insert data into the table: "services"
  """
  insert_services(
    """the rows to be inserted"""
    objects: [services_insert_input!]!

    """on conflict condition"""
    on_conflict: services_on_conflict
  ): services_mutation_response

  """
  insert a single row into the table: "services"
  """
  insert_services_one(
    """the row to be inserted"""
    object: services_insert_input!

    """on conflict condition"""
    on_conflict: services_on_conflict
  ): services

  """
  insert data into the table: "settlements"
  """
  insert_settlements(
    """the rows to be inserted"""
    objects: [settlements_insert_input!]!

    """on conflict condition"""
    on_conflict: settlements_on_conflict
  ): settlements_mutation_response

  """
  insert a single row into the table: "settlements"
  """
  insert_settlements_one(
    """the row to be inserted"""
    object: settlements_insert_input!

    """on conflict condition"""
    on_conflict: settlements_on_conflict
  ): settlements

  """
  update data of the table: "available_policies"
  """
  update_available_policies(
    """increments the integer columns with given value of the filtered values"""
    _inc: available_policies_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: available_policies_set_input

    """filter the rows which have to be updated"""
    where: available_policies_bool_exp!
  ): available_policies_mutation_response

  """
  update single row of the table: "available_policies"
  """
  update_available_policies_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: available_policies_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: available_policies_set_input
    pk_columns: available_policies_pk_columns_input!
  ): available_policies

  """
  update data of the table: "claims"
  """
  update_claims(
    """increments the integer columns with given value of the filtered values"""
    _inc: claims_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: claims_set_input

    """filter the rows which have to be updated"""
    where: claims_bool_exp!
  ): claims_mutation_response

  """
  update single row of the table: "claims"
  """
  update_claims_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: claims_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: claims_set_input
    pk_columns: claims_pk_columns_input!
  ): claims

  """
  update data of the table: "customers"
  """
  update_customers(
    """increments the integer columns with given value of the filtered values"""
    _inc: customers_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: customers_set_input

    """filter the rows which have to be updated"""
    where: customers_bool_exp!
  ): customers_mutation_response

  """
  update single row of the table: "customers"
  """
  update_customers_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: customers_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: customers_set_input
    pk_columns: customers_pk_columns_input!
  ): customers

  """
  update data of the table: "customers_policies"
  """
  update_customers_policies(
    """increments the integer columns with given value of the filtered values"""
    _inc: customers_policies_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: customers_policies_set_input

    """filter the rows which have to be updated"""
    where: customers_policies_bool_exp!
  ): customers_policies_mutation_response

  """
  update single row of the table: "customers_policies"
  """
  update_customers_policies_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: customers_policies_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: customers_policies_set_input
    pk_columns: customers_policies_pk_columns_input!
  ): customers_policies

  """
  update data of the table: "first_notification_of_loss"
  """
  update_first_notification_of_loss(
    """increments the integer columns with given value of the filtered values"""
    _inc: first_notification_of_loss_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: first_notification_of_loss_set_input

    """filter the rows which have to be updated"""
    where: first_notification_of_loss_bool_exp!
  ): first_notification_of_loss_mutation_response

  """
  update single row of the table: "first_notification_of_loss"
  """
  update_first_notification_of_loss_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: first_notification_of_loss_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: first_notification_of_loss_set_input
    pk_columns: first_notification_of_loss_pk_columns_input!
  ): first_notification_of_loss

  """
  update data of the table: "services"
  """
  update_services(
    """increments the integer columns with given value of the filtered values"""
    _inc: services_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: services_set_input

    """filter the rows which have to be updated"""
    where: services_bool_exp!
  ): services_mutation_response

  """
  update single row of the table: "services"
  """
  update_services_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: services_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: services_set_input
    pk_columns: services_pk_columns_input!
  ): services

  """
  update data of the table: "settlements"
  """
  update_settlements(
    """increments the integer columns with given value of the filtered values"""
    _inc: settlements_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: settlements_set_input

    """filter the rows which have to be updated"""
    where: settlements_bool_exp!
  ): settlements_mutation_response

  """
  update single row of the table: "settlements"
  """
  update_settlements_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: settlements_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: settlements_set_input
    pk_columns: settlements_pk_columns_input!
  ): settlements
}

"""column ordering options"""
enum order_by {
  """in the ascending order, nulls last"""
  asc

  """in the ascending order, nulls first"""
  asc_nulls_first

  """in the ascending order, nulls last"""
  asc_nulls_last

  """in the descending order, nulls first"""
  desc

  """in the descending order, nulls first"""
  desc_nulls_first

  """in the descending order, nulls last"""
  desc_nulls_last
}

"""query root"""
type query_root {
  """
  fetch data from the table: "available_policies"
  """
  available_policies(
    """distinct select on columns"""
    distinct_on: [available_policies_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [available_policies_order_by!]

    """filter the rows returned"""
    where: available_policies_bool_exp
  ): [available_policies!]!

  """
  fetch aggregated fields from the table: "available_policies"
  """
  available_policies_aggregate(
    """distinct select on columns"""
    distinct_on: [available_policies_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [available_policies_order_by!]

    """filter the rows returned"""
    where: available_policies_bool_exp
  ): available_policies_aggregate!

  """
  fetch data from the table: "available_policies" using primary key columns
  """
  available_policies_by_pk(policy_id: bigint!): available_policies

  """
  fetch data from the table: "claims"
  """
  claims(
    """distinct select on columns"""
    distinct_on: [claims_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [claims_order_by!]

    """filter the rows returned"""
    where: claims_bool_exp
  ): [claims!]!

  """
  fetch aggregated fields from the table: "claims"
  """
  claims_aggregate(
    """distinct select on columns"""
    distinct_on: [claims_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [claims_order_by!]

    """filter the rows returned"""
    where: claims_bool_exp
  ): claims_aggregate!

  """fetch data from the table: "claims" using primary key columns"""
  claims_by_pk(claim_id: bigint!): claims

  """
  fetch data from the table: "customers"
  """
  customers(
    """distinct select on columns"""
    distinct_on: [customers_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [customers_order_by!]

    """filter the rows returned"""
    where: customers_bool_exp
  ): [customers!]!

  """
  fetch aggregated fields from the table: "customers"
  """
  customers_aggregate(
    """distinct select on columns"""
    distinct_on: [customers_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [customers_order_by!]

    """filter the rows returned"""
    where: customers_bool_exp
  ): customers_aggregate!

  """fetch data from the table: "customers" using primary key columns"""
  customers_by_pk(customer_id: bigint!): customers

  """
  fetch data from the table: "customers_policies"
  """
  customers_policies(
    """distinct select on columns"""
    distinct_on: [customers_policies_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [customers_policies_order_by!]

    """filter the rows returned"""
    where: customers_policies_bool_exp
  ): [customers_policies!]!

  """
  fetch aggregated fields from the table: "customers_policies"
  """
  customers_policies_aggregate(
    """distinct select on columns"""
    distinct_on: [customers_policies_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [customers_policies_order_by!]

    """filter the rows returned"""
    where: customers_policies_bool_exp
  ): customers_policies_aggregate!

  """
  fetch data from the table: "customers_policies" using primary key columns
  """
  customers_policies_by_pk(customer_id: bigint!, policy_id: bigint!): customers_policies

  """
  fetch data from the table: "first_notification_of_loss"
  """
  first_notification_of_loss(
    """distinct select on columns"""
    distinct_on: [first_notification_of_loss_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [first_notification_of_loss_order_by!]

    """filter the rows returned"""
    where: first_notification_of_loss_bool_exp
  ): [first_notification_of_loss!]!

  """
  fetch aggregated fields from the table: "first_notification_of_loss"
  """
  first_notification_of_loss_aggregate(
    """distinct select on columns"""
    distinct_on: [first_notification_of_loss_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [first_notification_of_loss_order_by!]

    """filter the rows returned"""
    where: first_notification_of_loss_bool_exp
  ): first_notification_of_loss_aggregate!

  """
  fetch data from the table: "first_notification_of_loss" using primary key columns
  """
  first_notification_of_loss_by_pk(fnol_id: bigint!): first_notification_of_loss

  """
  fetch data from the table: "services"
  """
  services(
    """distinct select on columns"""
    distinct_on: [services_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [services_order_by!]

    """filter the rows returned"""
    where: services_bool_exp
  ): [services!]!

  """
  fetch aggregated fields from the table: "services"
  """
  services_aggregate(
    """distinct select on columns"""
    distinct_on: [services_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [services_order_by!]

    """filter the rows returned"""
    where: services_bool_exp
  ): services_aggregate!

  """fetch data from the table: "services" using primary key columns"""
  services_by_pk(service_id: bigint!): services

  """
  fetch data from the table: "settlements"
  """
  settlements(
    """distinct select on columns"""
    distinct_on: [settlements_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [settlements_order_by!]

    """filter the rows returned"""
    where: settlements_bool_exp
  ): [settlements!]!

  """
  fetch aggregated fields from the table: "settlements"
  """
  settlements_aggregate(
    """distinct select on columns"""
    distinct_on: [settlements_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [settlements_order_by!]

    """filter the rows returned"""
    where: settlements_bool_exp
  ): settlements_aggregate!

  """fetch data from the table: "settlements" using primary key columns"""
  settlements_by_pk(settlement_id: bigint!): settlements
}

"""
columns and relationships of "services"
"""
type services {
  """An array relationship"""
  first_notification_of_losses(
    """distinct select on columns"""
    distinct_on: [first_notification_of_loss_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [first_notification_of_loss_order_by!]

    """filter the rows returned"""
    where: first_notification_of_loss_bool_exp
  ): [first_notification_of_loss!]!

  """An aggregated array relationship"""
  first_notification_of_losses_aggregate(
    """distinct select on columns"""
    distinct_on: [first_notification_of_loss_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [first_notification_of_loss_order_by!]

    """filter the rows returned"""
    where: first_notification_of_loss_bool_exp
  ): first_notification_of_loss_aggregate!
  service_id: bigint!
  service_name: String
}

"""
aggregated selection of "services"
"""
type services_aggregate {
  aggregate: services_aggregate_fields
  nodes: [services!]!
}

"""
aggregate fields of "services"
"""
type services_aggregate_fields {
  avg: services_avg_fields
  count(columns: [services_select_column!], distinct: Boolean): Int
  max: services_max_fields
  min: services_min_fields
  stddev: services_stddev_fields
  stddev_pop: services_stddev_pop_fields
  stddev_samp: services_stddev_samp_fields
  sum: services_sum_fields
  var_pop: services_var_pop_fields
  var_samp: services_var_samp_fields
  variance: services_variance_fields
}

"""
order by aggregate values of table "services"
"""
input services_aggregate_order_by {
  avg: services_avg_order_by
  count: order_by
  max: services_max_order_by
  min: services_min_order_by
  stddev: services_stddev_order_by
  stddev_pop: services_stddev_pop_order_by
  stddev_samp: services_stddev_samp_order_by
  sum: services_sum_order_by
  var_pop: services_var_pop_order_by
  var_samp: services_var_samp_order_by
  variance: services_variance_order_by
}

"""
input type for inserting array relation for remote table "services"
"""
input services_arr_rel_insert_input {
  data: [services_insert_input!]!
  on_conflict: services_on_conflict
}

"""aggregate avg on columns"""
type services_avg_fields {
  service_id: Float
}

"""
order by avg() on columns of table "services"
"""
input services_avg_order_by {
  service_id: order_by
}

"""
Boolean expression to filter rows from the table "services". All fields are combined with a logical 'AND'.
"""
input services_bool_exp {
  _and: [services_bool_exp]
  _not: services_bool_exp
  _or: [services_bool_exp]
  first_notification_of_losses: first_notification_of_loss_bool_exp
  service_id: bigint_comparison_exp
  service_name: String_comparison_exp
}

"""
unique or primary key constraints on table "services"
"""
enum services_constraint {
  """unique or primary key constraint"""
  idx_26599_services_pkey
}

"""
input type for incrementing integer column in table "services"
"""
input services_inc_input {
  service_id: bigint
}

"""
input type for inserting data into table "services"
"""
input services_insert_input {
  first_notification_of_losses: first_notification_of_loss_arr_rel_insert_input
  service_id: bigint
  service_name: String
}

"""aggregate max on columns"""
type services_max_fields {
  service_id: bigint
  service_name: String
}

"""
order by max() on columns of table "services"
"""
input services_max_order_by {
  service_id: order_by
  service_name: order_by
}

"""aggregate min on columns"""
type services_min_fields {
  service_id: bigint
  service_name: String
}

"""
order by min() on columns of table "services"
"""
input services_min_order_by {
  service_id: order_by
  service_name: order_by
}

"""
response of any mutation on the table "services"
"""
type services_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [services!]!
}

"""
input type for inserting object relation for remote table "services"
"""
input services_obj_rel_insert_input {
  data: services_insert_input!
  on_conflict: services_on_conflict
}

"""
on conflict condition type for table "services"
"""
input services_on_conflict {
  constraint: services_constraint!
  update_columns: [services_update_column!]!
  where: services_bool_exp
}

"""
ordering options when selecting data from "services"
"""
input services_order_by {
  first_notification_of_losses_aggregate: first_notification_of_loss_aggregate_order_by
  service_id: order_by
  service_name: order_by
}

"""
primary key columns input for table: "services"
"""
input services_pk_columns_input {
  service_id: bigint!
}

"""
select columns of table "services"
"""
enum services_select_column {
  """column name"""
  service_id

  """column name"""
  service_name
}

"""
input type for updating data in table "services"
"""
input services_set_input {
  service_id: bigint
  service_name: String
}

"""aggregate stddev on columns"""
type services_stddev_fields {
  service_id: Float
}

"""
order by stddev() on columns of table "services"
"""
input services_stddev_order_by {
  service_id: order_by
}

"""aggregate stddev_pop on columns"""
type services_stddev_pop_fields {
  service_id: Float
}

"""
order by stddev_pop() on columns of table "services"
"""
input services_stddev_pop_order_by {
  service_id: order_by
}

"""aggregate stddev_samp on columns"""
type services_stddev_samp_fields {
  service_id: Float
}

"""
order by stddev_samp() on columns of table "services"
"""
input services_stddev_samp_order_by {
  service_id: order_by
}

"""aggregate sum on columns"""
type services_sum_fields {
  service_id: bigint
}

"""
order by sum() on columns of table "services"
"""
input services_sum_order_by {
  service_id: order_by
}

"""
update columns of table "services"
"""
enum services_update_column {
  """column name"""
  service_id

  """column name"""
  service_name
}

"""aggregate var_pop on columns"""
type services_var_pop_fields {
  service_id: Float
}

"""
order by var_pop() on columns of table "services"
"""
input services_var_pop_order_by {
  service_id: order_by
}

"""aggregate var_samp on columns"""
type services_var_samp_fields {
  service_id: Float
}

"""
order by var_samp() on columns of table "services"
"""
input services_var_samp_order_by {
  service_id: order_by
}

"""aggregate variance on columns"""
type services_variance_fields {
  service_id: Float
}

"""
order by variance() on columns of table "services"
"""
input services_variance_order_by {
  service_id: order_by
}

"""
columns and relationships of "settlements"
"""
type settlements {
  """An object relationship"""
  claim: claims
  claim_id: bigint
  effective_date: date
  settlement_amount: Float
  settlement_id: bigint!
}

"""
aggregated selection of "settlements"
"""
type settlements_aggregate {
  aggregate: settlements_aggregate_fields
  nodes: [settlements!]!
}

"""
aggregate fields of "settlements"
"""
type settlements_aggregate_fields {
  avg: settlements_avg_fields
  count(columns: [settlements_select_column!], distinct: Boolean): Int
  max: settlements_max_fields
  min: settlements_min_fields
  stddev: settlements_stddev_fields
  stddev_pop: settlements_stddev_pop_fields
  stddev_samp: settlements_stddev_samp_fields
  sum: settlements_sum_fields
  var_pop: settlements_var_pop_fields
  var_samp: settlements_var_samp_fields
  variance: settlements_variance_fields
}

"""
order by aggregate values of table "settlements"
"""
input settlements_aggregate_order_by {
  avg: settlements_avg_order_by
  count: order_by
  max: settlements_max_order_by
  min: settlements_min_order_by
  stddev: settlements_stddev_order_by
  stddev_pop: settlements_stddev_pop_order_by
  stddev_samp: settlements_stddev_samp_order_by
  sum: settlements_sum_order_by
  var_pop: settlements_var_pop_order_by
  var_samp: settlements_var_samp_order_by
  variance: settlements_variance_order_by
}

"""
input type for inserting array relation for remote table "settlements"
"""
input settlements_arr_rel_insert_input {
  data: [settlements_insert_input!]!
  on_conflict: settlements_on_conflict
}

"""aggregate avg on columns"""
type settlements_avg_fields {
  claim_id: Float
  settlement_amount: Float
  settlement_id: Float
}

"""
order by avg() on columns of table "settlements"
"""
input settlements_avg_order_by {
  claim_id: order_by
  settlement_amount: order_by
  settlement_id: order_by
}

"""
Boolean expression to filter rows from the table "settlements". All fields are combined with a logical 'AND'.
"""
input settlements_bool_exp {
  _and: [settlements_bool_exp]
  _not: settlements_bool_exp
  _or: [settlements_bool_exp]
  claim: claims_bool_exp
  claim_id: bigint_comparison_exp
  effective_date: date_comparison_exp
  settlement_amount: Float_comparison_exp
  settlement_id: bigint_comparison_exp
}

"""
unique or primary key constraints on table "settlements"
"""
enum settlements_constraint {
  """unique or primary key constraint"""
  idx_26620_settlements_pkey

  """unique or primary key constraint"""
  idx_26620_sqlite_autoindex_settlements_1
}

"""
input type for incrementing integer column in table "settlements"
"""
input settlements_inc_input {
  claim_id: bigint
  settlement_amount: Float
  settlement_id: bigint
}

"""
input type for inserting data into table "settlements"
"""
input settlements_insert_input {
  claim: claims_obj_rel_insert_input
  claim_id: bigint
  effective_date: date
  settlement_amount: Float
  settlement_id: bigint
}

"""aggregate max on columns"""
type settlements_max_fields {
  claim_id: bigint
  effective_date: date
  settlement_amount: Float
  settlement_id: bigint
}

"""
order by max() on columns of table "settlements"
"""
input settlements_max_order_by {
  claim_id: order_by
  effective_date: order_by
  settlement_amount: order_by
  settlement_id: order_by
}

"""aggregate min on columns"""
type settlements_min_fields {
  claim_id: bigint
  effective_date: date
  settlement_amount: Float
  settlement_id: bigint
}

"""
order by min() on columns of table "settlements"
"""
input settlements_min_order_by {
  claim_id: order_by
  effective_date: order_by
  settlement_amount: order_by
  settlement_id: order_by
}

"""
response of any mutation on the table "settlements"
"""
type settlements_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [settlements!]!
}

"""
input type for inserting object relation for remote table "settlements"
"""
input settlements_obj_rel_insert_input {
  data: settlements_insert_input!
  on_conflict: settlements_on_conflict
}

"""
on conflict condition type for table "settlements"
"""
input settlements_on_conflict {
  constraint: settlements_constraint!
  update_columns: [settlements_update_column!]!
  where: settlements_bool_exp
}

"""
ordering options when selecting data from "settlements"
"""
input settlements_order_by {
  claim: claims_order_by
  claim_id: order_by
  effective_date: order_by
  settlement_amount: order_by
  settlement_id: order_by
}

"""
primary key columns input for table: "settlements"
"""
input settlements_pk_columns_input {
  settlement_id: bigint!
}

"""
select columns of table "settlements"
"""
enum settlements_select_column {
  """column name"""
  claim_id

  """column name"""
  effective_date

  """column name"""
  settlement_amount

  """column name"""
  settlement_id
}

"""
input type for updating data in table "settlements"
"""
input settlements_set_input {
  claim_id: bigint
  effective_date: date
  settlement_amount: Float
  settlement_id: bigint
}

"""aggregate stddev on columns"""
type settlements_stddev_fields {
  claim_id: Float
  settlement_amount: Float
  settlement_id: Float
}

"""
order by stddev() on columns of table "settlements"
"""
input settlements_stddev_order_by {
  claim_id: order_by
  settlement_amount: order_by
  settlement_id: order_by
}

"""aggregate stddev_pop on columns"""
type settlements_stddev_pop_fields {
  claim_id: Float
  settlement_amount: Float
  settlement_id: Float
}

"""
order by stddev_pop() on columns of table "settlements"
"""
input settlements_stddev_pop_order_by {
  claim_id: order_by
  settlement_amount: order_by
  settlement_id: order_by
}

"""aggregate stddev_samp on columns"""
type settlements_stddev_samp_fields {
  claim_id: Float
  settlement_amount: Float
  settlement_id: Float
}

"""
order by stddev_samp() on columns of table "settlements"
"""
input settlements_stddev_samp_order_by {
  claim_id: order_by
  settlement_amount: order_by
  settlement_id: order_by
}

"""aggregate sum on columns"""
type settlements_sum_fields {
  claim_id: bigint
  settlement_amount: Float
  settlement_id: bigint
}

"""
order by sum() on columns of table "settlements"
"""
input settlements_sum_order_by {
  claim_id: order_by
  settlement_amount: order_by
  settlement_id: order_by
}

"""
update columns of table "settlements"
"""
enum settlements_update_column {
  """column name"""
  claim_id

  """column name"""
  effective_date

  """column name"""
  settlement_amount

  """column name"""
  settlement_id
}

"""aggregate var_pop on columns"""
type settlements_var_pop_fields {
  claim_id: Float
  settlement_amount: Float
  settlement_id: Float
}

"""
order by var_pop() on columns of table "settlements"
"""
input settlements_var_pop_order_by {
  claim_id: order_by
  settlement_amount: order_by
  settlement_id: order_by
}

"""aggregate var_samp on columns"""
type settlements_var_samp_fields {
  claim_id: Float
  settlement_amount: Float
  settlement_id: Float
}

"""
order by var_samp() on columns of table "settlements"
"""
input settlements_var_samp_order_by {
  claim_id: order_by
  settlement_amount: order_by
  settlement_id: order_by
}

"""aggregate variance on columns"""
type settlements_variance_fields {
  claim_id: Float
  settlement_amount: Float
  settlement_id: Float
}

"""
order by variance() on columns of table "settlements"
"""
input settlements_variance_order_by {
  claim_id: order_by
  settlement_amount: order_by
  settlement_id: order_by
}

"""
expression to compare columns of type String. All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String
  _ilike: String
  _in: [String!]
  _is_null: Boolean
  _like: String
  _lt: String
  _lte: String
  _neq: String
  _nilike: String
  _nin: [String!]
  _nlike: String
  _nsimilar: String
  _similar: String
}

"""subscription root"""
type subscription_root {
  """
  fetch data from the table: "available_policies"
  """
  available_policies(
    """distinct select on columns"""
    distinct_on: [available_policies_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [available_policies_order_by!]

    """filter the rows returned"""
    where: available_policies_bool_exp
  ): [available_policies!]!

  """
  fetch aggregated fields from the table: "available_policies"
  """
  available_policies_aggregate(
    """distinct select on columns"""
    distinct_on: [available_policies_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [available_policies_order_by!]

    """filter the rows returned"""
    where: available_policies_bool_exp
  ): available_policies_aggregate!

  """
  fetch data from the table: "available_policies" using primary key columns
  """
  available_policies_by_pk(policy_id: bigint!): available_policies

  """
  fetch data from the table: "claims"
  """
  claims(
    """distinct select on columns"""
    distinct_on: [claims_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [claims_order_by!]

    """filter the rows returned"""
    where: claims_bool_exp
  ): [claims!]!

  """
  fetch aggregated fields from the table: "claims"
  """
  claims_aggregate(
    """distinct select on columns"""
    distinct_on: [claims_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [claims_order_by!]

    """filter the rows returned"""
    where: claims_bool_exp
  ): claims_aggregate!

  """fetch data from the table: "claims" using primary key columns"""
  claims_by_pk(claim_id: bigint!): claims

  """
  fetch data from the table: "customers"
  """
  customers(
    """distinct select on columns"""
    distinct_on: [customers_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [customers_order_by!]

    """filter the rows returned"""
    where: customers_bool_exp
  ): [customers!]!

  """
  fetch aggregated fields from the table: "customers"
  """
  customers_aggregate(
    """distinct select on columns"""
    distinct_on: [customers_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [customers_order_by!]

    """filter the rows returned"""
    where: customers_bool_exp
  ): customers_aggregate!

  """fetch data from the table: "customers" using primary key columns"""
  customers_by_pk(customer_id: bigint!): customers

  """
  fetch data from the table: "customers_policies"
  """
  customers_policies(
    """distinct select on columns"""
    distinct_on: [customers_policies_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [customers_policies_order_by!]

    """filter the rows returned"""
    where: customers_policies_bool_exp
  ): [customers_policies!]!

  """
  fetch aggregated fields from the table: "customers_policies"
  """
  customers_policies_aggregate(
    """distinct select on columns"""
    distinct_on: [customers_policies_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [customers_policies_order_by!]

    """filter the rows returned"""
    where: customers_policies_bool_exp
  ): customers_policies_aggregate!

  """
  fetch data from the table: "customers_policies" using primary key columns
  """
  customers_policies_by_pk(customer_id: bigint!, policy_id: bigint!): customers_policies

  """
  fetch data from the table: "first_notification_of_loss"
  """
  first_notification_of_loss(
    """distinct select on columns"""
    distinct_on: [first_notification_of_loss_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [first_notification_of_loss_order_by!]

    """filter the rows returned"""
    where: first_notification_of_loss_bool_exp
  ): [first_notification_of_loss!]!

  """
  fetch aggregated fields from the table: "first_notification_of_loss"
  """
  first_notification_of_loss_aggregate(
    """distinct select on columns"""
    distinct_on: [first_notification_of_loss_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [first_notification_of_loss_order_by!]

    """filter the rows returned"""
    where: first_notification_of_loss_bool_exp
  ): first_notification_of_loss_aggregate!

  """
  fetch data from the table: "first_notification_of_loss" using primary key columns
  """
  first_notification_of_loss_by_pk(fnol_id: bigint!): first_notification_of_loss

  """
  fetch data from the table: "services"
  """
  services(
    """distinct select on columns"""
    distinct_on: [services_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [services_order_by!]

    """filter the rows returned"""
    where: services_bool_exp
  ): [services!]!

  """
  fetch aggregated fields from the table: "services"
  """
  services_aggregate(
    """distinct select on columns"""
    distinct_on: [services_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [services_order_by!]

    """filter the rows returned"""
    where: services_bool_exp
  ): services_aggregate!

  """fetch data from the table: "services" using primary key columns"""
  services_by_pk(service_id: bigint!): services

  """
  fetch data from the table: "settlements"
  """
  settlements(
    """distinct select on columns"""
    distinct_on: [settlements_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [settlements_order_by!]

    """filter the rows returned"""
    where: settlements_bool_exp
  ): [settlements!]!

  """
  fetch aggregated fields from the table: "settlements"
  """
  settlements_aggregate(
    """distinct select on columns"""
    distinct_on: [settlements_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [settlements_order_by!]

    """filter the rows returned"""
    where: settlements_bool_exp
  ): settlements_aggregate!

  """fetch data from the table: "settlements" using primary key columns"""
  settlements_by_pk(settlement_id: bigint!): settlements
}
