schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""
Direct the client to resolve this field locally, either from the cache or local resolvers.
"""
directive @client(
  """
  When true, the client will never use the cache for this value. See
  https://www.apollographql.com/docs/react/essentials/local-state/#forcing-resolvers-with-clientalways-true
  """
  always: Boolean
) on FIELD | FRAGMENT_DEFINITION | INLINE_FRAGMENT

"""
Export this locally resolved field as a variable to be used in the remainder of this query. See
https://www.apollographql.com/docs/react/essentials/local-state/#using-client-fields-as-variables
"""
directive @export(
  """The variable name to export this field as."""
  as: String!
) on FIELD

"""
Specify a custom store key for this result. See
https://www.apollographql.com/docs/react/advanced/caching/#the-connection-directive
"""
directive @connection(
  """Specify the store key."""
  key: String!

  """
  An array of query argument names to include in the generated custom store key.
  """
  filter: [String!]
) on FIELD

"""
columns and relationships of "actor"
"""
type actor {
  actor_id: Int
  age: Int
  character: String
  duration: String

  """An object relationship"""
  musical: musical
  musical_id: Int
  name: String
}

"""
aggregated selection of "actor"
"""
type actor_aggregate {
  aggregate: actor_aggregate_fields
  nodes: [actor!]!
}

"""
aggregate fields of "actor"
"""
type actor_aggregate_fields {
  avg: actor_avg_fields
  count(columns: [actor_select_column!], distinct: Boolean): Int
  max: actor_max_fields
  min: actor_min_fields
  stddev: actor_stddev_fields
  stddev_pop: actor_stddev_pop_fields
  stddev_samp: actor_stddev_samp_fields
  sum: actor_sum_fields
  var_pop: actor_var_pop_fields
  var_samp: actor_var_samp_fields
  variance: actor_variance_fields
}

"""
order by aggregate values of table "actor"
"""
input actor_aggregate_order_by {
  avg: actor_avg_order_by
  count: order_by
  max: actor_max_order_by
  min: actor_min_order_by
  stddev: actor_stddev_order_by
  stddev_pop: actor_stddev_pop_order_by
  stddev_samp: actor_stddev_samp_order_by
  sum: actor_sum_order_by
  var_pop: actor_var_pop_order_by
  var_samp: actor_var_samp_order_by
  variance: actor_variance_order_by
}

"""
input type for inserting array relation for remote table "actor"
"""
input actor_arr_rel_insert_input {
  data: [actor_insert_input!]!
  on_conflict: actor_on_conflict
}

"""aggregate avg on columns"""
type actor_avg_fields {
  actor_id: Float
  age: Float
  musical_id: Float
}

"""
order by avg() on columns of table "actor"
"""
input actor_avg_order_by {
  actor_id: order_by
  age: order_by
  musical_id: order_by
}

"""
Boolean expression to filter rows from the table "actor". All fields are combined with a logical 'AND'.
"""
input actor_bool_exp {
  _and: [actor_bool_exp]
  _not: actor_bool_exp
  _or: [actor_bool_exp]
  actor_id: Int_comparison_exp
  age: Int_comparison_exp
  character: String_comparison_exp
  duration: String_comparison_exp
  musical: musical_bool_exp
  musical_id: Int_comparison_exp
  name: String_comparison_exp
}

"""
unique or primary key constraints on table "actor"
"""
enum actor_constraint {
  """unique or primary key constraint"""
  idx_17086_sqlite_autoindex_actor_1
}

"""
input type for incrementing integer column in table "actor"
"""
input actor_inc_input {
  actor_id: Int
  age: Int
  musical_id: Int
}

"""
input type for inserting data into table "actor"
"""
input actor_insert_input {
  actor_id: Int
  age: Int
  character: String
  duration: String
  musical: musical_obj_rel_insert_input
  musical_id: Int
  name: String
}

"""aggregate max on columns"""
type actor_max_fields {
  actor_id: Int
  age: Int
  character: String
  duration: String
  musical_id: Int
  name: String
}

"""
order by max() on columns of table "actor"
"""
input actor_max_order_by {
  actor_id: order_by
  age: order_by
  character: order_by
  duration: order_by
  musical_id: order_by
  name: order_by
}

"""aggregate min on columns"""
type actor_min_fields {
  actor_id: Int
  age: Int
  character: String
  duration: String
  musical_id: Int
  name: String
}

"""
order by min() on columns of table "actor"
"""
input actor_min_order_by {
  actor_id: order_by
  age: order_by
  character: order_by
  duration: order_by
  musical_id: order_by
  name: order_by
}

"""
response of any mutation on the table "actor"
"""
type actor_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [actor!]!
}

"""
input type for inserting object relation for remote table "actor"
"""
input actor_obj_rel_insert_input {
  data: actor_insert_input!
  on_conflict: actor_on_conflict
}

"""
on conflict condition type for table "actor"
"""
input actor_on_conflict {
  constraint: actor_constraint!
  update_columns: [actor_update_column!]!
  where: actor_bool_exp
}

"""
ordering options when selecting data from "actor"
"""
input actor_order_by {
  actor_id: order_by
  age: order_by
  character: order_by
  duration: order_by
  musical: musical_order_by
  musical_id: order_by
  name: order_by
}

"""
select columns of table "actor"
"""
enum actor_select_column {
  """column name"""
  actor_id

  """column name"""
  age

  """column name"""
  character

  """column name"""
  duration

  """column name"""
  musical_id

  """column name"""
  name
}

"""
input type for updating data in table "actor"
"""
input actor_set_input {
  actor_id: Int
  age: Int
  character: String
  duration: String
  musical_id: Int
  name: String
}

"""aggregate stddev on columns"""
type actor_stddev_fields {
  actor_id: Float
  age: Float
  musical_id: Float
}

"""
order by stddev() on columns of table "actor"
"""
input actor_stddev_order_by {
  actor_id: order_by
  age: order_by
  musical_id: order_by
}

"""aggregate stddev_pop on columns"""
type actor_stddev_pop_fields {
  actor_id: Float
  age: Float
  musical_id: Float
}

"""
order by stddev_pop() on columns of table "actor"
"""
input actor_stddev_pop_order_by {
  actor_id: order_by
  age: order_by
  musical_id: order_by
}

"""aggregate stddev_samp on columns"""
type actor_stddev_samp_fields {
  actor_id: Float
  age: Float
  musical_id: Float
}

"""
order by stddev_samp() on columns of table "actor"
"""
input actor_stddev_samp_order_by {
  actor_id: order_by
  age: order_by
  musical_id: order_by
}

"""aggregate sum on columns"""
type actor_sum_fields {
  actor_id: Int
  age: Int
  musical_id: Int
}

"""
order by sum() on columns of table "actor"
"""
input actor_sum_order_by {
  actor_id: order_by
  age: order_by
  musical_id: order_by
}

"""
update columns of table "actor"
"""
enum actor_update_column {
  """column name"""
  actor_id

  """column name"""
  age

  """column name"""
  character

  """column name"""
  duration

  """column name"""
  musical_id

  """column name"""
  name
}

"""aggregate var_pop on columns"""
type actor_var_pop_fields {
  actor_id: Float
  age: Float
  musical_id: Float
}

"""
order by var_pop() on columns of table "actor"
"""
input actor_var_pop_order_by {
  actor_id: order_by
  age: order_by
  musical_id: order_by
}

"""aggregate var_samp on columns"""
type actor_var_samp_fields {
  actor_id: Float
  age: Float
  musical_id: Float
}

"""
order by var_samp() on columns of table "actor"
"""
input actor_var_samp_order_by {
  actor_id: order_by
  age: order_by
  musical_id: order_by
}

"""aggregate variance on columns"""
type actor_variance_fields {
  actor_id: Float
  age: Float
  musical_id: Float
}

"""
order by variance() on columns of table "actor"
"""
input actor_variance_order_by {
  actor_id: order_by
  age: order_by
  musical_id: order_by
}

"""
expression to compare columns of type Int. All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""
columns and relationships of "musical"
"""
type musical {
  """An array relationship"""
  actors(
    """distinct select on columns"""
    distinct_on: [actor_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [actor_order_by!]

    """filter the rows returned"""
    where: actor_bool_exp
  ): [actor!]!

  """An aggregated array relationship"""
  actors_aggregate(
    """distinct select on columns"""
    distinct_on: [actor_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [actor_order_by!]

    """filter the rows returned"""
    where: actor_bool_exp
  ): actor_aggregate!
  award: String
  category: String
  musical_id: Int
  name: String
  nominee: String
  result: String
  year: Int
}

"""
aggregated selection of "musical"
"""
type musical_aggregate {
  aggregate: musical_aggregate_fields
  nodes: [musical!]!
}

"""
aggregate fields of "musical"
"""
type musical_aggregate_fields {
  avg: musical_avg_fields
  count(columns: [musical_select_column!], distinct: Boolean): Int
  max: musical_max_fields
  min: musical_min_fields
  stddev: musical_stddev_fields
  stddev_pop: musical_stddev_pop_fields
  stddev_samp: musical_stddev_samp_fields
  sum: musical_sum_fields
  var_pop: musical_var_pop_fields
  var_samp: musical_var_samp_fields
  variance: musical_variance_fields
}

"""
order by aggregate values of table "musical"
"""
input musical_aggregate_order_by {
  avg: musical_avg_order_by
  count: order_by
  max: musical_max_order_by
  min: musical_min_order_by
  stddev: musical_stddev_order_by
  stddev_pop: musical_stddev_pop_order_by
  stddev_samp: musical_stddev_samp_order_by
  sum: musical_sum_order_by
  var_pop: musical_var_pop_order_by
  var_samp: musical_var_samp_order_by
  variance: musical_variance_order_by
}

"""
input type for inserting array relation for remote table "musical"
"""
input musical_arr_rel_insert_input {
  data: [musical_insert_input!]!
  on_conflict: musical_on_conflict
}

"""aggregate avg on columns"""
type musical_avg_fields {
  musical_id: Float
  year: Float
}

"""
order by avg() on columns of table "musical"
"""
input musical_avg_order_by {
  musical_id: order_by
  year: order_by
}

"""
Boolean expression to filter rows from the table "musical". All fields are combined with a logical 'AND'.
"""
input musical_bool_exp {
  _and: [musical_bool_exp]
  _not: musical_bool_exp
  _or: [musical_bool_exp]
  actors: actor_bool_exp
  award: String_comparison_exp
  category: String_comparison_exp
  musical_id: Int_comparison_exp
  name: String_comparison_exp
  nominee: String_comparison_exp
  result: String_comparison_exp
  year: Int_comparison_exp
}

"""
unique or primary key constraints on table "musical"
"""
enum musical_constraint {
  """unique or primary key constraint"""
  idx_17080_sqlite_autoindex_musical_1
}

"""
input type for incrementing integer column in table "musical"
"""
input musical_inc_input {
  musical_id: Int
  year: Int
}

"""
input type for inserting data into table "musical"
"""
input musical_insert_input {
  actors: actor_arr_rel_insert_input
  award: String
  category: String
  musical_id: Int
  name: String
  nominee: String
  result: String
  year: Int
}

"""aggregate max on columns"""
type musical_max_fields {
  award: String
  category: String
  musical_id: Int
  name: String
  nominee: String
  result: String
  year: Int
}

"""
order by max() on columns of table "musical"
"""
input musical_max_order_by {
  award: order_by
  category: order_by
  musical_id: order_by
  name: order_by
  nominee: order_by
  result: order_by
  year: order_by
}

"""aggregate min on columns"""
type musical_min_fields {
  award: String
  category: String
  musical_id: Int
  name: String
  nominee: String
  result: String
  year: Int
}

"""
order by min() on columns of table "musical"
"""
input musical_min_order_by {
  award: order_by
  category: order_by
  musical_id: order_by
  name: order_by
  nominee: order_by
  result: order_by
  year: order_by
}

"""
response of any mutation on the table "musical"
"""
type musical_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [musical!]!
}

"""
input type for inserting object relation for remote table "musical"
"""
input musical_obj_rel_insert_input {
  data: musical_insert_input!
  on_conflict: musical_on_conflict
}

"""
on conflict condition type for table "musical"
"""
input musical_on_conflict {
  constraint: musical_constraint!
  update_columns: [musical_update_column!]!
  where: musical_bool_exp
}

"""
ordering options when selecting data from "musical"
"""
input musical_order_by {
  actors_aggregate: actor_aggregate_order_by
  award: order_by
  category: order_by
  musical_id: order_by
  name: order_by
  nominee: order_by
  result: order_by
  year: order_by
}

"""
select columns of table "musical"
"""
enum musical_select_column {
  """column name"""
  award

  """column name"""
  category

  """column name"""
  musical_id

  """column name"""
  name

  """column name"""
  nominee

  """column name"""
  result

  """column name"""
  year
}

"""
input type for updating data in table "musical"
"""
input musical_set_input {
  award: String
  category: String
  musical_id: Int
  name: String
  nominee: String
  result: String
  year: Int
}

"""aggregate stddev on columns"""
type musical_stddev_fields {
  musical_id: Float
  year: Float
}

"""
order by stddev() on columns of table "musical"
"""
input musical_stddev_order_by {
  musical_id: order_by
  year: order_by
}

"""aggregate stddev_pop on columns"""
type musical_stddev_pop_fields {
  musical_id: Float
  year: Float
}

"""
order by stddev_pop() on columns of table "musical"
"""
input musical_stddev_pop_order_by {
  musical_id: order_by
  year: order_by
}

"""aggregate stddev_samp on columns"""
type musical_stddev_samp_fields {
  musical_id: Float
  year: Float
}

"""
order by stddev_samp() on columns of table "musical"
"""
input musical_stddev_samp_order_by {
  musical_id: order_by
  year: order_by
}

"""aggregate sum on columns"""
type musical_sum_fields {
  musical_id: Int
  year: Int
}

"""
order by sum() on columns of table "musical"
"""
input musical_sum_order_by {
  musical_id: order_by
  year: order_by
}

"""
update columns of table "musical"
"""
enum musical_update_column {
  """column name"""
  award

  """column name"""
  category

  """column name"""
  musical_id

  """column name"""
  name

  """column name"""
  nominee

  """column name"""
  result

  """column name"""
  year
}

"""aggregate var_pop on columns"""
type musical_var_pop_fields {
  musical_id: Float
  year: Float
}

"""
order by var_pop() on columns of table "musical"
"""
input musical_var_pop_order_by {
  musical_id: order_by
  year: order_by
}

"""aggregate var_samp on columns"""
type musical_var_samp_fields {
  musical_id: Float
  year: Float
}

"""
order by var_samp() on columns of table "musical"
"""
input musical_var_samp_order_by {
  musical_id: order_by
  year: order_by
}

"""aggregate variance on columns"""
type musical_variance_fields {
  musical_id: Float
  year: Float
}

"""
order by variance() on columns of table "musical"
"""
input musical_variance_order_by {
  musical_id: order_by
  year: order_by
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "actor"
  """
  delete_actor(
    """filter the rows which have to be deleted"""
    where: actor_bool_exp!
  ): actor_mutation_response

  """
  delete data from the table: "musical"
  """
  delete_musical(
    """filter the rows which have to be deleted"""
    where: musical_bool_exp!
  ): musical_mutation_response

  """
  insert data into the table: "actor"
  """
  insert_actor(
    """the rows to be inserted"""
    objects: [actor_insert_input!]!

    """on conflict condition"""
    on_conflict: actor_on_conflict
  ): actor_mutation_response

  """
  insert a single row into the table: "actor"
  """
  insert_actor_one(
    """the row to be inserted"""
    object: actor_insert_input!

    """on conflict condition"""
    on_conflict: actor_on_conflict
  ): actor

  """
  insert data into the table: "musical"
  """
  insert_musical(
    """the rows to be inserted"""
    objects: [musical_insert_input!]!

    """on conflict condition"""
    on_conflict: musical_on_conflict
  ): musical_mutation_response

  """
  insert a single row into the table: "musical"
  """
  insert_musical_one(
    """the row to be inserted"""
    object: musical_insert_input!

    """on conflict condition"""
    on_conflict: musical_on_conflict
  ): musical

  """
  update data of the table: "actor"
  """
  update_actor(
    """increments the integer columns with given value of the filtered values"""
    _inc: actor_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: actor_set_input

    """filter the rows which have to be updated"""
    where: actor_bool_exp!
  ): actor_mutation_response

  """
  update data of the table: "musical"
  """
  update_musical(
    """increments the integer columns with given value of the filtered values"""
    _inc: musical_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: musical_set_input

    """filter the rows which have to be updated"""
    where: musical_bool_exp!
  ): musical_mutation_response
}

"""column ordering options"""
enum order_by {
  """in the ascending order, nulls last"""
  asc

  """in the ascending order, nulls first"""
  asc_nulls_first

  """in the ascending order, nulls last"""
  asc_nulls_last

  """in the descending order, nulls first"""
  desc

  """in the descending order, nulls first"""
  desc_nulls_first

  """in the descending order, nulls last"""
  desc_nulls_last
}

"""query root"""
type query_root {
  """
  fetch data from the table: "actor"
  """
  actor(
    """distinct select on columns"""
    distinct_on: [actor_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [actor_order_by!]

    """filter the rows returned"""
    where: actor_bool_exp
  ): [actor!]!

  """
  fetch aggregated fields from the table: "actor"
  """
  actor_aggregate(
    """distinct select on columns"""
    distinct_on: [actor_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [actor_order_by!]

    """filter the rows returned"""
    where: actor_bool_exp
  ): actor_aggregate!

  """
  fetch data from the table: "musical"
  """
  musical(
    """distinct select on columns"""
    distinct_on: [musical_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [musical_order_by!]

    """filter the rows returned"""
    where: musical_bool_exp
  ): [musical!]!

  """
  fetch aggregated fields from the table: "musical"
  """
  musical_aggregate(
    """distinct select on columns"""
    distinct_on: [musical_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [musical_order_by!]

    """filter the rows returned"""
    where: musical_bool_exp
  ): musical_aggregate!
}

"""
expression to compare columns of type String. All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String
  _ilike: String
  _in: [String!]
  _is_null: Boolean
  _like: String
  _lt: String
  _lte: String
  _neq: String
  _nilike: String
  _nin: [String!]
  _nlike: String
  _nsimilar: String
  _similar: String
}

"""subscription root"""
type subscription_root {
  """
  fetch data from the table: "actor"
  """
  actor(
    """distinct select on columns"""
    distinct_on: [actor_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [actor_order_by!]

    """filter the rows returned"""
    where: actor_bool_exp
  ): [actor!]!

  """
  fetch aggregated fields from the table: "actor"
  """
  actor_aggregate(
    """distinct select on columns"""
    distinct_on: [actor_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [actor_order_by!]

    """filter the rows returned"""
    where: actor_bool_exp
  ): actor_aggregate!

  """
  fetch data from the table: "musical"
  """
  musical(
    """distinct select on columns"""
    distinct_on: [musical_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [musical_order_by!]

    """filter the rows returned"""
    where: musical_bool_exp
  ): [musical!]!

  """
  fetch aggregated fields from the table: "musical"
  """
  musical_aggregate(
    """distinct select on columns"""
    distinct_on: [musical_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [musical_order_by!]

    """filter the rows returned"""
    where: musical_bool_exp
  ): musical_aggregate!
}
