schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""
Direct the client to resolve this field locally, either from the cache or local resolvers.
"""
directive @client(
  """
  When true, the client will never use the cache for this value. See
  https://www.apollographql.com/docs/react/essentials/local-state/#forcing-resolvers-with-clientalways-true
  """
  always: Boolean
) on FIELD | FRAGMENT_DEFINITION | INLINE_FRAGMENT

"""
Export this locally resolved field as a variable to be used in the remainder of this query. See
https://www.apollographql.com/docs/react/essentials/local-state/#using-client-fields-as-variables
"""
directive @export(
  """The variable name to export this field as."""
  as: String!
) on FIELD

"""
Specify a custom store key for this result. See
https://www.apollographql.com/docs/react/advanced/caching/#the-connection-directive
"""
directive @connection(
  """Specify the store key."""
  key: String!

  """
  An array of query argument names to include in the generated custom store key.
  """
  filter: [String!]
) on FIELD

"""
columns and relationships of "enzyme"
"""
type enzyme {
  chromosome: String
  id: Int!
  location: String

  """An array relationship"""
  medicine_enzyme_interactions(
    """distinct select on columns"""
    distinct_on: [medicine_enzyme_interaction_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [medicine_enzyme_interaction_order_by!]

    """filter the rows returned"""
    where: medicine_enzyme_interaction_bool_exp
  ): [medicine_enzyme_interaction!]!

  """An aggregated array relationship"""
  medicine_enzyme_interactions_aggregate(
    """distinct select on columns"""
    distinct_on: [medicine_enzyme_interaction_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [medicine_enzyme_interaction_order_by!]

    """filter the rows returned"""
    where: medicine_enzyme_interaction_bool_exp
  ): medicine_enzyme_interaction_aggregate!
  name: String
  omim: Int
  porphyria: String
  product: String
}

"""
aggregated selection of "enzyme"
"""
type enzyme_aggregate {
  aggregate: enzyme_aggregate_fields
  nodes: [enzyme!]!
}

"""
aggregate fields of "enzyme"
"""
type enzyme_aggregate_fields {
  avg: enzyme_avg_fields
  count(columns: [enzyme_select_column!], distinct: Boolean): Int
  max: enzyme_max_fields
  min: enzyme_min_fields
  stddev: enzyme_stddev_fields
  stddev_pop: enzyme_stddev_pop_fields
  stddev_samp: enzyme_stddev_samp_fields
  sum: enzyme_sum_fields
  var_pop: enzyme_var_pop_fields
  var_samp: enzyme_var_samp_fields
  variance: enzyme_variance_fields
}

"""
order by aggregate values of table "enzyme"
"""
input enzyme_aggregate_order_by {
  avg: enzyme_avg_order_by
  count: order_by
  max: enzyme_max_order_by
  min: enzyme_min_order_by
  stddev: enzyme_stddev_order_by
  stddev_pop: enzyme_stddev_pop_order_by
  stddev_samp: enzyme_stddev_samp_order_by
  sum: enzyme_sum_order_by
  var_pop: enzyme_var_pop_order_by
  var_samp: enzyme_var_samp_order_by
  variance: enzyme_variance_order_by
}

"""
input type for inserting array relation for remote table "enzyme"
"""
input enzyme_arr_rel_insert_input {
  data: [enzyme_insert_input!]!
  on_conflict: enzyme_on_conflict
}

"""aggregate avg on columns"""
type enzyme_avg_fields {
  id: Float
  omim: Float
}

"""
order by avg() on columns of table "enzyme"
"""
input enzyme_avg_order_by {
  id: order_by
  omim: order_by
}

"""
Boolean expression to filter rows from the table "enzyme". All fields are combined with a logical 'AND'.
"""
input enzyme_bool_exp {
  _and: [enzyme_bool_exp]
  _not: enzyme_bool_exp
  _or: [enzyme_bool_exp]
  chromosome: String_comparison_exp
  id: Int_comparison_exp
  location: String_comparison_exp
  medicine_enzyme_interactions: medicine_enzyme_interaction_bool_exp
  name: String_comparison_exp
  omim: Int_comparison_exp
  porphyria: String_comparison_exp
  product: String_comparison_exp
}

"""
unique or primary key constraints on table "enzyme"
"""
enum enzyme_constraint {
  """unique or primary key constraint"""
  idx_24831_sqlite_autoindex_enzyme_1
}

"""
input type for incrementing integer column in table "enzyme"
"""
input enzyme_inc_input {
  id: Int
  omim: Int
}

"""
input type for inserting data into table "enzyme"
"""
input enzyme_insert_input {
  chromosome: String
  id: Int
  location: String
  medicine_enzyme_interactions: medicine_enzyme_interaction_arr_rel_insert_input
  name: String
  omim: Int
  porphyria: String
  product: String
}

"""aggregate max on columns"""
type enzyme_max_fields {
  chromosome: String
  id: Int
  location: String
  name: String
  omim: Int
  porphyria: String
  product: String
}

"""
order by max() on columns of table "enzyme"
"""
input enzyme_max_order_by {
  chromosome: order_by
  id: order_by
  location: order_by
  name: order_by
  omim: order_by
  porphyria: order_by
  product: order_by
}

"""aggregate min on columns"""
type enzyme_min_fields {
  chromosome: String
  id: Int
  location: String
  name: String
  omim: Int
  porphyria: String
  product: String
}

"""
order by min() on columns of table "enzyme"
"""
input enzyme_min_order_by {
  chromosome: order_by
  id: order_by
  location: order_by
  name: order_by
  omim: order_by
  porphyria: order_by
  product: order_by
}

"""
response of any mutation on the table "enzyme"
"""
type enzyme_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [enzyme!]!
}

"""
input type for inserting object relation for remote table "enzyme"
"""
input enzyme_obj_rel_insert_input {
  data: enzyme_insert_input!
  on_conflict: enzyme_on_conflict
}

"""
on conflict condition type for table "enzyme"
"""
input enzyme_on_conflict {
  constraint: enzyme_constraint!
  update_columns: [enzyme_update_column!]!
  where: enzyme_bool_exp
}

"""
ordering options when selecting data from "enzyme"
"""
input enzyme_order_by {
  chromosome: order_by
  id: order_by
  location: order_by
  medicine_enzyme_interactions_aggregate: medicine_enzyme_interaction_aggregate_order_by
  name: order_by
  omim: order_by
  porphyria: order_by
  product: order_by
}

"""
primary key columns input for table: "enzyme"
"""
input enzyme_pk_columns_input {
  id: Int!
}

"""
select columns of table "enzyme"
"""
enum enzyme_select_column {
  """column name"""
  chromosome

  """column name"""
  id

  """column name"""
  location

  """column name"""
  name

  """column name"""
  omim

  """column name"""
  porphyria

  """column name"""
  product
}

"""
input type for updating data in table "enzyme"
"""
input enzyme_set_input {
  chromosome: String
  id: Int
  location: String
  name: String
  omim: Int
  porphyria: String
  product: String
}

"""aggregate stddev on columns"""
type enzyme_stddev_fields {
  id: Float
  omim: Float
}

"""
order by stddev() on columns of table "enzyme"
"""
input enzyme_stddev_order_by {
  id: order_by
  omim: order_by
}

"""aggregate stddev_pop on columns"""
type enzyme_stddev_pop_fields {
  id: Float
  omim: Float
}

"""
order by stddev_pop() on columns of table "enzyme"
"""
input enzyme_stddev_pop_order_by {
  id: order_by
  omim: order_by
}

"""aggregate stddev_samp on columns"""
type enzyme_stddev_samp_fields {
  id: Float
  omim: Float
}

"""
order by stddev_samp() on columns of table "enzyme"
"""
input enzyme_stddev_samp_order_by {
  id: order_by
  omim: order_by
}

"""aggregate sum on columns"""
type enzyme_sum_fields {
  id: Int
  omim: Int
}

"""
order by sum() on columns of table "enzyme"
"""
input enzyme_sum_order_by {
  id: order_by
  omim: order_by
}

"""
update columns of table "enzyme"
"""
enum enzyme_update_column {
  """column name"""
  chromosome

  """column name"""
  id

  """column name"""
  location

  """column name"""
  name

  """column name"""
  omim

  """column name"""
  porphyria

  """column name"""
  product
}

"""aggregate var_pop on columns"""
type enzyme_var_pop_fields {
  id: Float
  omim: Float
}

"""
order by var_pop() on columns of table "enzyme"
"""
input enzyme_var_pop_order_by {
  id: order_by
  omim: order_by
}

"""aggregate var_samp on columns"""
type enzyme_var_samp_fields {
  id: Float
  omim: Float
}

"""
order by var_samp() on columns of table "enzyme"
"""
input enzyme_var_samp_order_by {
  id: order_by
  omim: order_by
}

"""aggregate variance on columns"""
type enzyme_variance_fields {
  id: Float
  omim: Float
}

"""
order by variance() on columns of table "enzyme"
"""
input enzyme_variance_order_by {
  id: order_by
  omim: order_by
}

"""
expression to compare columns of type Int. All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""
columns and relationships of "medicine"
"""
type medicine {
  fda_approved: String
  id: Int!

  """An array relationship"""
  medicine_enzyme_interactions(
    """distinct select on columns"""
    distinct_on: [medicine_enzyme_interaction_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [medicine_enzyme_interaction_order_by!]

    """filter the rows returned"""
    where: medicine_enzyme_interaction_bool_exp
  ): [medicine_enzyme_interaction!]!

  """An aggregated array relationship"""
  medicine_enzyme_interactions_aggregate(
    """distinct select on columns"""
    distinct_on: [medicine_enzyme_interaction_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [medicine_enzyme_interaction_order_by!]

    """filter the rows returned"""
    where: medicine_enzyme_interaction_bool_exp
  ): medicine_enzyme_interaction_aggregate!
  name: String
  trade_name: String
}

"""
aggregated selection of "medicine"
"""
type medicine_aggregate {
  aggregate: medicine_aggregate_fields
  nodes: [medicine!]!
}

"""
aggregate fields of "medicine"
"""
type medicine_aggregate_fields {
  avg: medicine_avg_fields
  count(columns: [medicine_select_column!], distinct: Boolean): Int
  max: medicine_max_fields
  min: medicine_min_fields
  stddev: medicine_stddev_fields
  stddev_pop: medicine_stddev_pop_fields
  stddev_samp: medicine_stddev_samp_fields
  sum: medicine_sum_fields
  var_pop: medicine_var_pop_fields
  var_samp: medicine_var_samp_fields
  variance: medicine_variance_fields
}

"""
order by aggregate values of table "medicine"
"""
input medicine_aggregate_order_by {
  avg: medicine_avg_order_by
  count: order_by
  max: medicine_max_order_by
  min: medicine_min_order_by
  stddev: medicine_stddev_order_by
  stddev_pop: medicine_stddev_pop_order_by
  stddev_samp: medicine_stddev_samp_order_by
  sum: medicine_sum_order_by
  var_pop: medicine_var_pop_order_by
  var_samp: medicine_var_samp_order_by
  variance: medicine_variance_order_by
}

"""
input type for inserting array relation for remote table "medicine"
"""
input medicine_arr_rel_insert_input {
  data: [medicine_insert_input!]!
  on_conflict: medicine_on_conflict
}

"""aggregate avg on columns"""
type medicine_avg_fields {
  id: Float
}

"""
order by avg() on columns of table "medicine"
"""
input medicine_avg_order_by {
  id: order_by
}

"""
Boolean expression to filter rows from the table "medicine". All fields are combined with a logical 'AND'.
"""
input medicine_bool_exp {
  _and: [medicine_bool_exp]
  _not: medicine_bool_exp
  _or: [medicine_bool_exp]
  fda_approved: String_comparison_exp
  id: Int_comparison_exp
  medicine_enzyme_interactions: medicine_enzyme_interaction_bool_exp
  name: String_comparison_exp
  trade_name: String_comparison_exp
}

"""
unique or primary key constraints on table "medicine"
"""
enum medicine_constraint {
  """unique or primary key constraint"""
  idx_24825_sqlite_autoindex_medicine_1
}

"""
columns and relationships of "medicine_enzyme_interaction"
"""
type medicine_enzyme_interaction {
  """An object relationship"""
  enzyme: enzyme!
  enzyme_id: Int!
  interaction_type: String

  """An object relationship"""
  medicine: medicine!
  medicine_id: Int!
}

"""
aggregated selection of "medicine_enzyme_interaction"
"""
type medicine_enzyme_interaction_aggregate {
  aggregate: medicine_enzyme_interaction_aggregate_fields
  nodes: [medicine_enzyme_interaction!]!
}

"""
aggregate fields of "medicine_enzyme_interaction"
"""
type medicine_enzyme_interaction_aggregate_fields {
  avg: medicine_enzyme_interaction_avg_fields
  count(columns: [medicine_enzyme_interaction_select_column!], distinct: Boolean): Int
  max: medicine_enzyme_interaction_max_fields
  min: medicine_enzyme_interaction_min_fields
  stddev: medicine_enzyme_interaction_stddev_fields
  stddev_pop: medicine_enzyme_interaction_stddev_pop_fields
  stddev_samp: medicine_enzyme_interaction_stddev_samp_fields
  sum: medicine_enzyme_interaction_sum_fields
  var_pop: medicine_enzyme_interaction_var_pop_fields
  var_samp: medicine_enzyme_interaction_var_samp_fields
  variance: medicine_enzyme_interaction_variance_fields
}

"""
order by aggregate values of table "medicine_enzyme_interaction"
"""
input medicine_enzyme_interaction_aggregate_order_by {
  avg: medicine_enzyme_interaction_avg_order_by
  count: order_by
  max: medicine_enzyme_interaction_max_order_by
  min: medicine_enzyme_interaction_min_order_by
  stddev: medicine_enzyme_interaction_stddev_order_by
  stddev_pop: medicine_enzyme_interaction_stddev_pop_order_by
  stddev_samp: medicine_enzyme_interaction_stddev_samp_order_by
  sum: medicine_enzyme_interaction_sum_order_by
  var_pop: medicine_enzyme_interaction_var_pop_order_by
  var_samp: medicine_enzyme_interaction_var_samp_order_by
  variance: medicine_enzyme_interaction_variance_order_by
}

"""
input type for inserting array relation for remote table "medicine_enzyme_interaction"
"""
input medicine_enzyme_interaction_arr_rel_insert_input {
  data: [medicine_enzyme_interaction_insert_input!]!
  on_conflict: medicine_enzyme_interaction_on_conflict
}

"""aggregate avg on columns"""
type medicine_enzyme_interaction_avg_fields {
  enzyme_id: Float
  medicine_id: Float
}

"""
order by avg() on columns of table "medicine_enzyme_interaction"
"""
input medicine_enzyme_interaction_avg_order_by {
  enzyme_id: order_by
  medicine_id: order_by
}

"""
Boolean expression to filter rows from the table "medicine_enzyme_interaction".
All fields are combined with a logical 'AND'.
"""
input medicine_enzyme_interaction_bool_exp {
  _and: [medicine_enzyme_interaction_bool_exp]
  _not: medicine_enzyme_interaction_bool_exp
  _or: [medicine_enzyme_interaction_bool_exp]
  enzyme: enzyme_bool_exp
  enzyme_id: Int_comparison_exp
  interaction_type: String_comparison_exp
  medicine: medicine_bool_exp
  medicine_id: Int_comparison_exp
}

"""
unique or primary key constraints on table "medicine_enzyme_interaction"
"""
enum medicine_enzyme_interaction_constraint {
  """unique or primary key constraint"""
  idx_24837_sqlite_autoindex_medicine_enzyme_interaction_1
}

"""
input type for incrementing integer column in table "medicine_enzyme_interaction"
"""
input medicine_enzyme_interaction_inc_input {
  enzyme_id: Int
  medicine_id: Int
}

"""
input type for inserting data into table "medicine_enzyme_interaction"
"""
input medicine_enzyme_interaction_insert_input {
  enzyme: enzyme_obj_rel_insert_input
  enzyme_id: Int
  interaction_type: String
  medicine: medicine_obj_rel_insert_input
  medicine_id: Int
}

"""aggregate max on columns"""
type medicine_enzyme_interaction_max_fields {
  enzyme_id: Int
  interaction_type: String
  medicine_id: Int
}

"""
order by max() on columns of table "medicine_enzyme_interaction"
"""
input medicine_enzyme_interaction_max_order_by {
  enzyme_id: order_by
  interaction_type: order_by
  medicine_id: order_by
}

"""aggregate min on columns"""
type medicine_enzyme_interaction_min_fields {
  enzyme_id: Int
  interaction_type: String
  medicine_id: Int
}

"""
order by min() on columns of table "medicine_enzyme_interaction"
"""
input medicine_enzyme_interaction_min_order_by {
  enzyme_id: order_by
  interaction_type: order_by
  medicine_id: order_by
}

"""
response of any mutation on the table "medicine_enzyme_interaction"
"""
type medicine_enzyme_interaction_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [medicine_enzyme_interaction!]!
}

"""
input type for inserting object relation for remote table "medicine_enzyme_interaction"
"""
input medicine_enzyme_interaction_obj_rel_insert_input {
  data: medicine_enzyme_interaction_insert_input!
  on_conflict: medicine_enzyme_interaction_on_conflict
}

"""
on conflict condition type for table "medicine_enzyme_interaction"
"""
input medicine_enzyme_interaction_on_conflict {
  constraint: medicine_enzyme_interaction_constraint!
  update_columns: [medicine_enzyme_interaction_update_column!]!
  where: medicine_enzyme_interaction_bool_exp
}

"""
ordering options when selecting data from "medicine_enzyme_interaction"
"""
input medicine_enzyme_interaction_order_by {
  enzyme: enzyme_order_by
  enzyme_id: order_by
  interaction_type: order_by
  medicine: medicine_order_by
  medicine_id: order_by
}

"""
primary key columns input for table: "medicine_enzyme_interaction"
"""
input medicine_enzyme_interaction_pk_columns_input {
  enzyme_id: Int!
  medicine_id: Int!
}

"""
select columns of table "medicine_enzyme_interaction"
"""
enum medicine_enzyme_interaction_select_column {
  """column name"""
  enzyme_id

  """column name"""
  interaction_type

  """column name"""
  medicine_id
}

"""
input type for updating data in table "medicine_enzyme_interaction"
"""
input medicine_enzyme_interaction_set_input {
  enzyme_id: Int
  interaction_type: String
  medicine_id: Int
}

"""aggregate stddev on columns"""
type medicine_enzyme_interaction_stddev_fields {
  enzyme_id: Float
  medicine_id: Float
}

"""
order by stddev() on columns of table "medicine_enzyme_interaction"
"""
input medicine_enzyme_interaction_stddev_order_by {
  enzyme_id: order_by
  medicine_id: order_by
}

"""aggregate stddev_pop on columns"""
type medicine_enzyme_interaction_stddev_pop_fields {
  enzyme_id: Float
  medicine_id: Float
}

"""
order by stddev_pop() on columns of table "medicine_enzyme_interaction"
"""
input medicine_enzyme_interaction_stddev_pop_order_by {
  enzyme_id: order_by
  medicine_id: order_by
}

"""aggregate stddev_samp on columns"""
type medicine_enzyme_interaction_stddev_samp_fields {
  enzyme_id: Float
  medicine_id: Float
}

"""
order by stddev_samp() on columns of table "medicine_enzyme_interaction"
"""
input medicine_enzyme_interaction_stddev_samp_order_by {
  enzyme_id: order_by
  medicine_id: order_by
}

"""aggregate sum on columns"""
type medicine_enzyme_interaction_sum_fields {
  enzyme_id: Int
  medicine_id: Int
}

"""
order by sum() on columns of table "medicine_enzyme_interaction"
"""
input medicine_enzyme_interaction_sum_order_by {
  enzyme_id: order_by
  medicine_id: order_by
}

"""
update columns of table "medicine_enzyme_interaction"
"""
enum medicine_enzyme_interaction_update_column {
  """column name"""
  enzyme_id

  """column name"""
  interaction_type

  """column name"""
  medicine_id
}

"""aggregate var_pop on columns"""
type medicine_enzyme_interaction_var_pop_fields {
  enzyme_id: Float
  medicine_id: Float
}

"""
order by var_pop() on columns of table "medicine_enzyme_interaction"
"""
input medicine_enzyme_interaction_var_pop_order_by {
  enzyme_id: order_by
  medicine_id: order_by
}

"""aggregate var_samp on columns"""
type medicine_enzyme_interaction_var_samp_fields {
  enzyme_id: Float
  medicine_id: Float
}

"""
order by var_samp() on columns of table "medicine_enzyme_interaction"
"""
input medicine_enzyme_interaction_var_samp_order_by {
  enzyme_id: order_by
  medicine_id: order_by
}

"""aggregate variance on columns"""
type medicine_enzyme_interaction_variance_fields {
  enzyme_id: Float
  medicine_id: Float
}

"""
order by variance() on columns of table "medicine_enzyme_interaction"
"""
input medicine_enzyme_interaction_variance_order_by {
  enzyme_id: order_by
  medicine_id: order_by
}

"""
input type for incrementing integer column in table "medicine"
"""
input medicine_inc_input {
  id: Int
}

"""
input type for inserting data into table "medicine"
"""
input medicine_insert_input {
  fda_approved: String
  id: Int
  medicine_enzyme_interactions: medicine_enzyme_interaction_arr_rel_insert_input
  name: String
  trade_name: String
}

"""aggregate max on columns"""
type medicine_max_fields {
  fda_approved: String
  id: Int
  name: String
  trade_name: String
}

"""
order by max() on columns of table "medicine"
"""
input medicine_max_order_by {
  fda_approved: order_by
  id: order_by
  name: order_by
  trade_name: order_by
}

"""aggregate min on columns"""
type medicine_min_fields {
  fda_approved: String
  id: Int
  name: String
  trade_name: String
}

"""
order by min() on columns of table "medicine"
"""
input medicine_min_order_by {
  fda_approved: order_by
  id: order_by
  name: order_by
  trade_name: order_by
}

"""
response of any mutation on the table "medicine"
"""
type medicine_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [medicine!]!
}

"""
input type for inserting object relation for remote table "medicine"
"""
input medicine_obj_rel_insert_input {
  data: medicine_insert_input!
  on_conflict: medicine_on_conflict
}

"""
on conflict condition type for table "medicine"
"""
input medicine_on_conflict {
  constraint: medicine_constraint!
  update_columns: [medicine_update_column!]!
  where: medicine_bool_exp
}

"""
ordering options when selecting data from "medicine"
"""
input medicine_order_by {
  fda_approved: order_by
  id: order_by
  medicine_enzyme_interactions_aggregate: medicine_enzyme_interaction_aggregate_order_by
  name: order_by
  trade_name: order_by
}

"""
primary key columns input for table: "medicine"
"""
input medicine_pk_columns_input {
  id: Int!
}

"""
select columns of table "medicine"
"""
enum medicine_select_column {
  """column name"""
  fda_approved

  """column name"""
  id

  """column name"""
  name

  """column name"""
  trade_name
}

"""
input type for updating data in table "medicine"
"""
input medicine_set_input {
  fda_approved: String
  id: Int
  name: String
  trade_name: String
}

"""aggregate stddev on columns"""
type medicine_stddev_fields {
  id: Float
}

"""
order by stddev() on columns of table "medicine"
"""
input medicine_stddev_order_by {
  id: order_by
}

"""aggregate stddev_pop on columns"""
type medicine_stddev_pop_fields {
  id: Float
}

"""
order by stddev_pop() on columns of table "medicine"
"""
input medicine_stddev_pop_order_by {
  id: order_by
}

"""aggregate stddev_samp on columns"""
type medicine_stddev_samp_fields {
  id: Float
}

"""
order by stddev_samp() on columns of table "medicine"
"""
input medicine_stddev_samp_order_by {
  id: order_by
}

"""aggregate sum on columns"""
type medicine_sum_fields {
  id: Int
}

"""
order by sum() on columns of table "medicine"
"""
input medicine_sum_order_by {
  id: order_by
}

"""
update columns of table "medicine"
"""
enum medicine_update_column {
  """column name"""
  fda_approved

  """column name"""
  id

  """column name"""
  name

  """column name"""
  trade_name
}

"""aggregate var_pop on columns"""
type medicine_var_pop_fields {
  id: Float
}

"""
order by var_pop() on columns of table "medicine"
"""
input medicine_var_pop_order_by {
  id: order_by
}

"""aggregate var_samp on columns"""
type medicine_var_samp_fields {
  id: Float
}

"""
order by var_samp() on columns of table "medicine"
"""
input medicine_var_samp_order_by {
  id: order_by
}

"""aggregate variance on columns"""
type medicine_variance_fields {
  id: Float
}

"""
order by variance() on columns of table "medicine"
"""
input medicine_variance_order_by {
  id: order_by
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "enzyme"
  """
  delete_enzyme(
    """filter the rows which have to be deleted"""
    where: enzyme_bool_exp!
  ): enzyme_mutation_response

  """
  delete single row from the table: "enzyme"
  """
  delete_enzyme_by_pk(id: Int!): enzyme

  """
  delete data from the table: "medicine"
  """
  delete_medicine(
    """filter the rows which have to be deleted"""
    where: medicine_bool_exp!
  ): medicine_mutation_response

  """
  delete single row from the table: "medicine"
  """
  delete_medicine_by_pk(id: Int!): medicine

  """
  delete data from the table: "medicine_enzyme_interaction"
  """
  delete_medicine_enzyme_interaction(
    """filter the rows which have to be deleted"""
    where: medicine_enzyme_interaction_bool_exp!
  ): medicine_enzyme_interaction_mutation_response

  """
  delete single row from the table: "medicine_enzyme_interaction"
  """
  delete_medicine_enzyme_interaction_by_pk(enzyme_id: Int!, medicine_id: Int!): medicine_enzyme_interaction

  """
  insert data into the table: "enzyme"
  """
  insert_enzyme(
    """the rows to be inserted"""
    objects: [enzyme_insert_input!]!

    """on conflict condition"""
    on_conflict: enzyme_on_conflict
  ): enzyme_mutation_response

  """
  insert a single row into the table: "enzyme"
  """
  insert_enzyme_one(
    """the row to be inserted"""
    object: enzyme_insert_input!

    """on conflict condition"""
    on_conflict: enzyme_on_conflict
  ): enzyme

  """
  insert data into the table: "medicine"
  """
  insert_medicine(
    """the rows to be inserted"""
    objects: [medicine_insert_input!]!

    """on conflict condition"""
    on_conflict: medicine_on_conflict
  ): medicine_mutation_response

  """
  insert data into the table: "medicine_enzyme_interaction"
  """
  insert_medicine_enzyme_interaction(
    """the rows to be inserted"""
    objects: [medicine_enzyme_interaction_insert_input!]!

    """on conflict condition"""
    on_conflict: medicine_enzyme_interaction_on_conflict
  ): medicine_enzyme_interaction_mutation_response

  """
  insert a single row into the table: "medicine_enzyme_interaction"
  """
  insert_medicine_enzyme_interaction_one(
    """the row to be inserted"""
    object: medicine_enzyme_interaction_insert_input!

    """on conflict condition"""
    on_conflict: medicine_enzyme_interaction_on_conflict
  ): medicine_enzyme_interaction

  """
  insert a single row into the table: "medicine"
  """
  insert_medicine_one(
    """the row to be inserted"""
    object: medicine_insert_input!

    """on conflict condition"""
    on_conflict: medicine_on_conflict
  ): medicine

  """
  update data of the table: "enzyme"
  """
  update_enzyme(
    """increments the integer columns with given value of the filtered values"""
    _inc: enzyme_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: enzyme_set_input

    """filter the rows which have to be updated"""
    where: enzyme_bool_exp!
  ): enzyme_mutation_response

  """
  update single row of the table: "enzyme"
  """
  update_enzyme_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: enzyme_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: enzyme_set_input
    pk_columns: enzyme_pk_columns_input!
  ): enzyme

  """
  update data of the table: "medicine"
  """
  update_medicine(
    """increments the integer columns with given value of the filtered values"""
    _inc: medicine_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: medicine_set_input

    """filter the rows which have to be updated"""
    where: medicine_bool_exp!
  ): medicine_mutation_response

  """
  update single row of the table: "medicine"
  """
  update_medicine_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: medicine_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: medicine_set_input
    pk_columns: medicine_pk_columns_input!
  ): medicine

  """
  update data of the table: "medicine_enzyme_interaction"
  """
  update_medicine_enzyme_interaction(
    """increments the integer columns with given value of the filtered values"""
    _inc: medicine_enzyme_interaction_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: medicine_enzyme_interaction_set_input

    """filter the rows which have to be updated"""
    where: medicine_enzyme_interaction_bool_exp!
  ): medicine_enzyme_interaction_mutation_response

  """
  update single row of the table: "medicine_enzyme_interaction"
  """
  update_medicine_enzyme_interaction_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: medicine_enzyme_interaction_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: medicine_enzyme_interaction_set_input
    pk_columns: medicine_enzyme_interaction_pk_columns_input!
  ): medicine_enzyme_interaction
}

"""column ordering options"""
enum order_by {
  """in the ascending order, nulls last"""
  asc

  """in the ascending order, nulls first"""
  asc_nulls_first

  """in the ascending order, nulls last"""
  asc_nulls_last

  """in the descending order, nulls first"""
  desc

  """in the descending order, nulls first"""
  desc_nulls_first

  """in the descending order, nulls last"""
  desc_nulls_last
}

"""query root"""
type query_root {
  """
  fetch data from the table: "enzyme"
  """
  enzyme(
    """distinct select on columns"""
    distinct_on: [enzyme_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [enzyme_order_by!]

    """filter the rows returned"""
    where: enzyme_bool_exp
  ): [enzyme!]!

  """
  fetch aggregated fields from the table: "enzyme"
  """
  enzyme_aggregate(
    """distinct select on columns"""
    distinct_on: [enzyme_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [enzyme_order_by!]

    """filter the rows returned"""
    where: enzyme_bool_exp
  ): enzyme_aggregate!

  """fetch data from the table: "enzyme" using primary key columns"""
  enzyme_by_pk(id: Int!): enzyme

  """
  fetch data from the table: "medicine"
  """
  medicine(
    """distinct select on columns"""
    distinct_on: [medicine_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [medicine_order_by!]

    """filter the rows returned"""
    where: medicine_bool_exp
  ): [medicine!]!

  """
  fetch aggregated fields from the table: "medicine"
  """
  medicine_aggregate(
    """distinct select on columns"""
    distinct_on: [medicine_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [medicine_order_by!]

    """filter the rows returned"""
    where: medicine_bool_exp
  ): medicine_aggregate!

  """fetch data from the table: "medicine" using primary key columns"""
  medicine_by_pk(id: Int!): medicine

  """
  fetch data from the table: "medicine_enzyme_interaction"
  """
  medicine_enzyme_interaction(
    """distinct select on columns"""
    distinct_on: [medicine_enzyme_interaction_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [medicine_enzyme_interaction_order_by!]

    """filter the rows returned"""
    where: medicine_enzyme_interaction_bool_exp
  ): [medicine_enzyme_interaction!]!

  """
  fetch aggregated fields from the table: "medicine_enzyme_interaction"
  """
  medicine_enzyme_interaction_aggregate(
    """distinct select on columns"""
    distinct_on: [medicine_enzyme_interaction_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [medicine_enzyme_interaction_order_by!]

    """filter the rows returned"""
    where: medicine_enzyme_interaction_bool_exp
  ): medicine_enzyme_interaction_aggregate!

  """
  fetch data from the table: "medicine_enzyme_interaction" using primary key columns
  """
  medicine_enzyme_interaction_by_pk(enzyme_id: Int!, medicine_id: Int!): medicine_enzyme_interaction
}

"""
expression to compare columns of type String. All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String
  _ilike: String
  _in: [String!]
  _is_null: Boolean
  _like: String
  _lt: String
  _lte: String
  _neq: String
  _nilike: String
  _nin: [String!]
  _nlike: String
  _nsimilar: String
  _similar: String
}

"""subscription root"""
type subscription_root {
  """
  fetch data from the table: "enzyme"
  """
  enzyme(
    """distinct select on columns"""
    distinct_on: [enzyme_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [enzyme_order_by!]

    """filter the rows returned"""
    where: enzyme_bool_exp
  ): [enzyme!]!

  """
  fetch aggregated fields from the table: "enzyme"
  """
  enzyme_aggregate(
    """distinct select on columns"""
    distinct_on: [enzyme_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [enzyme_order_by!]

    """filter the rows returned"""
    where: enzyme_bool_exp
  ): enzyme_aggregate!

  """fetch data from the table: "enzyme" using primary key columns"""
  enzyme_by_pk(id: Int!): enzyme

  """
  fetch data from the table: "medicine"
  """
  medicine(
    """distinct select on columns"""
    distinct_on: [medicine_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [medicine_order_by!]

    """filter the rows returned"""
    where: medicine_bool_exp
  ): [medicine!]!

  """
  fetch aggregated fields from the table: "medicine"
  """
  medicine_aggregate(
    """distinct select on columns"""
    distinct_on: [medicine_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [medicine_order_by!]

    """filter the rows returned"""
    where: medicine_bool_exp
  ): medicine_aggregate!

  """fetch data from the table: "medicine" using primary key columns"""
  medicine_by_pk(id: Int!): medicine

  """
  fetch data from the table: "medicine_enzyme_interaction"
  """
  medicine_enzyme_interaction(
    """distinct select on columns"""
    distinct_on: [medicine_enzyme_interaction_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [medicine_enzyme_interaction_order_by!]

    """filter the rows returned"""
    where: medicine_enzyme_interaction_bool_exp
  ): [medicine_enzyme_interaction!]!

  """
  fetch aggregated fields from the table: "medicine_enzyme_interaction"
  """
  medicine_enzyme_interaction_aggregate(
    """distinct select on columns"""
    distinct_on: [medicine_enzyme_interaction_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [medicine_enzyme_interaction_order_by!]

    """filter the rows returned"""
    where: medicine_enzyme_interaction_bool_exp
  ): medicine_enzyme_interaction_aggregate!

  """
  fetch data from the table: "medicine_enzyme_interaction" using primary key columns
  """
  medicine_enzyme_interaction_by_pk(enzyme_id: Int!, medicine_id: Int!): medicine_enzyme_interaction
}
