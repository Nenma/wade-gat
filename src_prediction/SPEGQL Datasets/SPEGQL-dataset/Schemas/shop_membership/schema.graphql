schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""
Direct the client to resolve this field locally, either from the cache or local resolvers.
"""
directive @client(
  """
  When true, the client will never use the cache for this value. See
  https://www.apollographql.com/docs/react/essentials/local-state/#forcing-resolvers-with-clientalways-true
  """
  always: Boolean
) on FIELD | FRAGMENT_DEFINITION | INLINE_FRAGMENT

"""
Export this locally resolved field as a variable to be used in the remainder of this query. See
https://www.apollographql.com/docs/react/essentials/local-state/#using-client-fields-as-variables
"""
directive @export(
  """The variable name to export this field as."""
  as: String!
) on FIELD

"""
Specify a custom store key for this result. See
https://www.apollographql.com/docs/react/advanced/caching/#the-connection-directive
"""
directive @connection(
  """Specify the store key."""
  key: String!

  """
  An array of query argument names to include in the generated custom store key.
  """
  filter: [String!]
) on FIELD

"""
columns and relationships of "branch"
"""
type branch {
  address_road: String
  branch_id: Int
  city: String
  membership_amount: String

  """An array relationship"""
  membership_register_branches(
    """distinct select on columns"""
    distinct_on: [membership_register_branch_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [membership_register_branch_order_by!]

    """filter the rows returned"""
    where: membership_register_branch_bool_exp
  ): [membership_register_branch!]!

  """An aggregated array relationship"""
  membership_register_branches_aggregate(
    """distinct select on columns"""
    distinct_on: [membership_register_branch_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [membership_register_branch_order_by!]

    """filter the rows returned"""
    where: membership_register_branch_bool_exp
  ): membership_register_branch_aggregate!
  name: String
  open_year: String

  """An array relationship"""
  purchases(
    """distinct select on columns"""
    distinct_on: [purchase_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [purchase_order_by!]

    """filter the rows returned"""
    where: purchase_bool_exp
  ): [purchase!]!

  """An aggregated array relationship"""
  purchases_aggregate(
    """distinct select on columns"""
    distinct_on: [purchase_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [purchase_order_by!]

    """filter the rows returned"""
    where: purchase_bool_exp
  ): purchase_aggregate!
}

"""
aggregated selection of "branch"
"""
type branch_aggregate {
  aggregate: branch_aggregate_fields
  nodes: [branch!]!
}

"""
aggregate fields of "branch"
"""
type branch_aggregate_fields {
  avg: branch_avg_fields
  count(columns: [branch_select_column!], distinct: Boolean): Int
  max: branch_max_fields
  min: branch_min_fields
  stddev: branch_stddev_fields
  stddev_pop: branch_stddev_pop_fields
  stddev_samp: branch_stddev_samp_fields
  sum: branch_sum_fields
  var_pop: branch_var_pop_fields
  var_samp: branch_var_samp_fields
  variance: branch_variance_fields
}

"""
order by aggregate values of table "branch"
"""
input branch_aggregate_order_by {
  avg: branch_avg_order_by
  count: order_by
  max: branch_max_order_by
  min: branch_min_order_by
  stddev: branch_stddev_order_by
  stddev_pop: branch_stddev_pop_order_by
  stddev_samp: branch_stddev_samp_order_by
  sum: branch_sum_order_by
  var_pop: branch_var_pop_order_by
  var_samp: branch_var_samp_order_by
  variance: branch_variance_order_by
}

"""
input type for inserting array relation for remote table "branch"
"""
input branch_arr_rel_insert_input {
  data: [branch_insert_input!]!
  on_conflict: branch_on_conflict
}

"""aggregate avg on columns"""
type branch_avg_fields {
  branch_id: Float
}

"""
order by avg() on columns of table "branch"
"""
input branch_avg_order_by {
  branch_id: order_by
}

"""
Boolean expression to filter rows from the table "branch". All fields are combined with a logical 'AND'.
"""
input branch_bool_exp {
  _and: [branch_bool_exp]
  _not: branch_bool_exp
  _or: [branch_bool_exp]
  address_road: String_comparison_exp
  branch_id: Int_comparison_exp
  city: String_comparison_exp
  membership_amount: String_comparison_exp
  membership_register_branches: membership_register_branch_bool_exp
  name: String_comparison_exp
  open_year: String_comparison_exp
  purchases: purchase_bool_exp
}

"""
unique or primary key constraints on table "branch"
"""
enum branch_constraint {
  """unique or primary key constraint"""
  idx_21044_sqlite_autoindex_branch_1
}

"""
input type for incrementing integer column in table "branch"
"""
input branch_inc_input {
  branch_id: Int
}

"""
input type for inserting data into table "branch"
"""
input branch_insert_input {
  address_road: String
  branch_id: Int
  city: String
  membership_amount: String
  membership_register_branches: membership_register_branch_arr_rel_insert_input
  name: String
  open_year: String
  purchases: purchase_arr_rel_insert_input
}

"""aggregate max on columns"""
type branch_max_fields {
  address_road: String
  branch_id: Int
  city: String
  membership_amount: String
  name: String
  open_year: String
}

"""
order by max() on columns of table "branch"
"""
input branch_max_order_by {
  address_road: order_by
  branch_id: order_by
  city: order_by
  membership_amount: order_by
  name: order_by
  open_year: order_by
}

"""aggregate min on columns"""
type branch_min_fields {
  address_road: String
  branch_id: Int
  city: String
  membership_amount: String
  name: String
  open_year: String
}

"""
order by min() on columns of table "branch"
"""
input branch_min_order_by {
  address_road: order_by
  branch_id: order_by
  city: order_by
  membership_amount: order_by
  name: order_by
  open_year: order_by
}

"""
response of any mutation on the table "branch"
"""
type branch_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [branch!]!
}

"""
input type for inserting object relation for remote table "branch"
"""
input branch_obj_rel_insert_input {
  data: branch_insert_input!
  on_conflict: branch_on_conflict
}

"""
on conflict condition type for table "branch"
"""
input branch_on_conflict {
  constraint: branch_constraint!
  update_columns: [branch_update_column!]!
  where: branch_bool_exp
}

"""
ordering options when selecting data from "branch"
"""
input branch_order_by {
  address_road: order_by
  branch_id: order_by
  city: order_by
  membership_amount: order_by
  membership_register_branches_aggregate: membership_register_branch_aggregate_order_by
  name: order_by
  open_year: order_by
  purchases_aggregate: purchase_aggregate_order_by
}

"""
select columns of table "branch"
"""
enum branch_select_column {
  """column name"""
  address_road

  """column name"""
  branch_id

  """column name"""
  city

  """column name"""
  membership_amount

  """column name"""
  name

  """column name"""
  open_year
}

"""
input type for updating data in table "branch"
"""
input branch_set_input {
  address_road: String
  branch_id: Int
  city: String
  membership_amount: String
  name: String
  open_year: String
}

"""aggregate stddev on columns"""
type branch_stddev_fields {
  branch_id: Float
}

"""
order by stddev() on columns of table "branch"
"""
input branch_stddev_order_by {
  branch_id: order_by
}

"""aggregate stddev_pop on columns"""
type branch_stddev_pop_fields {
  branch_id: Float
}

"""
order by stddev_pop() on columns of table "branch"
"""
input branch_stddev_pop_order_by {
  branch_id: order_by
}

"""aggregate stddev_samp on columns"""
type branch_stddev_samp_fields {
  branch_id: Float
}

"""
order by stddev_samp() on columns of table "branch"
"""
input branch_stddev_samp_order_by {
  branch_id: order_by
}

"""aggregate sum on columns"""
type branch_sum_fields {
  branch_id: Int
}

"""
order by sum() on columns of table "branch"
"""
input branch_sum_order_by {
  branch_id: order_by
}

"""
update columns of table "branch"
"""
enum branch_update_column {
  """column name"""
  address_road

  """column name"""
  branch_id

  """column name"""
  city

  """column name"""
  membership_amount

  """column name"""
  name

  """column name"""
  open_year
}

"""aggregate var_pop on columns"""
type branch_var_pop_fields {
  branch_id: Float
}

"""
order by var_pop() on columns of table "branch"
"""
input branch_var_pop_order_by {
  branch_id: order_by
}

"""aggregate var_samp on columns"""
type branch_var_samp_fields {
  branch_id: Float
}

"""
order by var_samp() on columns of table "branch"
"""
input branch_var_samp_order_by {
  branch_id: order_by
}

"""aggregate variance on columns"""
type branch_variance_fields {
  branch_id: Float
}

"""
order by variance() on columns of table "branch"
"""
input branch_variance_order_by {
  branch_id: order_by
}

"""
expression to compare columns of type Float. All fields are combined with logical 'AND'.
"""
input Float_comparison_exp {
  _eq: Float
  _gt: Float
  _gte: Float
  _in: [Float!]
  _is_null: Boolean
  _lt: Float
  _lte: Float
  _neq: Float
  _nin: [Float!]
}

"""
expression to compare columns of type Int. All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""
columns and relationships of "member"
"""
type member {
  card_number: String
  hometown: String
  level: Int
  member_id: Int

  """An array relationship"""
  membership_register_branches(
    """distinct select on columns"""
    distinct_on: [membership_register_branch_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [membership_register_branch_order_by!]

    """filter the rows returned"""
    where: membership_register_branch_bool_exp
  ): [membership_register_branch!]!

  """An aggregated array relationship"""
  membership_register_branches_aggregate(
    """distinct select on columns"""
    distinct_on: [membership_register_branch_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [membership_register_branch_order_by!]

    """filter the rows returned"""
    where: membership_register_branch_bool_exp
  ): membership_register_branch_aggregate!
  name: String

  """An array relationship"""
  purchases(
    """distinct select on columns"""
    distinct_on: [purchase_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [purchase_order_by!]

    """filter the rows returned"""
    where: purchase_bool_exp
  ): [purchase!]!

  """An aggregated array relationship"""
  purchases_aggregate(
    """distinct select on columns"""
    distinct_on: [purchase_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [purchase_order_by!]

    """filter the rows returned"""
    where: purchase_bool_exp
  ): purchase_aggregate!
}

"""
aggregated selection of "member"
"""
type member_aggregate {
  aggregate: member_aggregate_fields
  nodes: [member!]!
}

"""
aggregate fields of "member"
"""
type member_aggregate_fields {
  avg: member_avg_fields
  count(columns: [member_select_column!], distinct: Boolean): Int
  max: member_max_fields
  min: member_min_fields
  stddev: member_stddev_fields
  stddev_pop: member_stddev_pop_fields
  stddev_samp: member_stddev_samp_fields
  sum: member_sum_fields
  var_pop: member_var_pop_fields
  var_samp: member_var_samp_fields
  variance: member_variance_fields
}

"""
order by aggregate values of table "member"
"""
input member_aggregate_order_by {
  avg: member_avg_order_by
  count: order_by
  max: member_max_order_by
  min: member_min_order_by
  stddev: member_stddev_order_by
  stddev_pop: member_stddev_pop_order_by
  stddev_samp: member_stddev_samp_order_by
  sum: member_sum_order_by
  var_pop: member_var_pop_order_by
  var_samp: member_var_samp_order_by
  variance: member_variance_order_by
}

"""
input type for inserting array relation for remote table "member"
"""
input member_arr_rel_insert_input {
  data: [member_insert_input!]!
  on_conflict: member_on_conflict
}

"""aggregate avg on columns"""
type member_avg_fields {
  level: Float
  member_id: Float
}

"""
order by avg() on columns of table "member"
"""
input member_avg_order_by {
  level: order_by
  member_id: order_by
}

"""
Boolean expression to filter rows from the table "member". All fields are combined with a logical 'AND'.
"""
input member_bool_exp {
  _and: [member_bool_exp]
  _not: member_bool_exp
  _or: [member_bool_exp]
  card_number: String_comparison_exp
  hometown: String_comparison_exp
  level: Int_comparison_exp
  member_id: Int_comparison_exp
  membership_register_branches: membership_register_branch_bool_exp
  name: String_comparison_exp
  purchases: purchase_bool_exp
}

"""
unique or primary key constraints on table "member"
"""
enum member_constraint {
  """unique or primary key constraint"""
  idx_21038_sqlite_autoindex_member_1
}

"""
input type for incrementing integer column in table "member"
"""
input member_inc_input {
  level: Int
  member_id: Int
}

"""
input type for inserting data into table "member"
"""
input member_insert_input {
  card_number: String
  hometown: String
  level: Int
  member_id: Int
  membership_register_branches: membership_register_branch_arr_rel_insert_input
  name: String
  purchases: purchase_arr_rel_insert_input
}

"""aggregate max on columns"""
type member_max_fields {
  card_number: String
  hometown: String
  level: Int
  member_id: Int
  name: String
}

"""
order by max() on columns of table "member"
"""
input member_max_order_by {
  card_number: order_by
  hometown: order_by
  level: order_by
  member_id: order_by
  name: order_by
}

"""aggregate min on columns"""
type member_min_fields {
  card_number: String
  hometown: String
  level: Int
  member_id: Int
  name: String
}

"""
order by min() on columns of table "member"
"""
input member_min_order_by {
  card_number: order_by
  hometown: order_by
  level: order_by
  member_id: order_by
  name: order_by
}

"""
response of any mutation on the table "member"
"""
type member_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [member!]!
}

"""
input type for inserting object relation for remote table "member"
"""
input member_obj_rel_insert_input {
  data: member_insert_input!
  on_conflict: member_on_conflict
}

"""
on conflict condition type for table "member"
"""
input member_on_conflict {
  constraint: member_constraint!
  update_columns: [member_update_column!]!
  where: member_bool_exp
}

"""
ordering options when selecting data from "member"
"""
input member_order_by {
  card_number: order_by
  hometown: order_by
  level: order_by
  member_id: order_by
  membership_register_branches_aggregate: membership_register_branch_aggregate_order_by
  name: order_by
  purchases_aggregate: purchase_aggregate_order_by
}

"""
select columns of table "member"
"""
enum member_select_column {
  """column name"""
  card_number

  """column name"""
  hometown

  """column name"""
  level

  """column name"""
  member_id

  """column name"""
  name
}

"""
input type for updating data in table "member"
"""
input member_set_input {
  card_number: String
  hometown: String
  level: Int
  member_id: Int
  name: String
}

"""aggregate stddev on columns"""
type member_stddev_fields {
  level: Float
  member_id: Float
}

"""
order by stddev() on columns of table "member"
"""
input member_stddev_order_by {
  level: order_by
  member_id: order_by
}

"""aggregate stddev_pop on columns"""
type member_stddev_pop_fields {
  level: Float
  member_id: Float
}

"""
order by stddev_pop() on columns of table "member"
"""
input member_stddev_pop_order_by {
  level: order_by
  member_id: order_by
}

"""aggregate stddev_samp on columns"""
type member_stddev_samp_fields {
  level: Float
  member_id: Float
}

"""
order by stddev_samp() on columns of table "member"
"""
input member_stddev_samp_order_by {
  level: order_by
  member_id: order_by
}

"""aggregate sum on columns"""
type member_sum_fields {
  level: Int
  member_id: Int
}

"""
order by sum() on columns of table "member"
"""
input member_sum_order_by {
  level: order_by
  member_id: order_by
}

"""
update columns of table "member"
"""
enum member_update_column {
  """column name"""
  card_number

  """column name"""
  hometown

  """column name"""
  level

  """column name"""
  member_id

  """column name"""
  name
}

"""aggregate var_pop on columns"""
type member_var_pop_fields {
  level: Float
  member_id: Float
}

"""
order by var_pop() on columns of table "member"
"""
input member_var_pop_order_by {
  level: order_by
  member_id: order_by
}

"""aggregate var_samp on columns"""
type member_var_samp_fields {
  level: Float
  member_id: Float
}

"""
order by var_samp() on columns of table "member"
"""
input member_var_samp_order_by {
  level: order_by
  member_id: order_by
}

"""aggregate variance on columns"""
type member_variance_fields {
  level: Float
  member_id: Float
}

"""
order by variance() on columns of table "member"
"""
input member_variance_order_by {
  level: order_by
  member_id: order_by
}

"""
columns and relationships of "membership_register_branch"
"""
type membership_register_branch {
  """An object relationship"""
  branch: branch
  branch_id: Int

  """An object relationship"""
  member: member
  member_id: Int
  register_year: String
}

"""
aggregated selection of "membership_register_branch"
"""
type membership_register_branch_aggregate {
  aggregate: membership_register_branch_aggregate_fields
  nodes: [membership_register_branch!]!
}

"""
aggregate fields of "membership_register_branch"
"""
type membership_register_branch_aggregate_fields {
  avg: membership_register_branch_avg_fields
  count(columns: [membership_register_branch_select_column!], distinct: Boolean): Int
  max: membership_register_branch_max_fields
  min: membership_register_branch_min_fields
  stddev: membership_register_branch_stddev_fields
  stddev_pop: membership_register_branch_stddev_pop_fields
  stddev_samp: membership_register_branch_stddev_samp_fields
  sum: membership_register_branch_sum_fields
  var_pop: membership_register_branch_var_pop_fields
  var_samp: membership_register_branch_var_samp_fields
  variance: membership_register_branch_variance_fields
}

"""
order by aggregate values of table "membership_register_branch"
"""
input membership_register_branch_aggregate_order_by {
  avg: membership_register_branch_avg_order_by
  count: order_by
  max: membership_register_branch_max_order_by
  min: membership_register_branch_min_order_by
  stddev: membership_register_branch_stddev_order_by
  stddev_pop: membership_register_branch_stddev_pop_order_by
  stddev_samp: membership_register_branch_stddev_samp_order_by
  sum: membership_register_branch_sum_order_by
  var_pop: membership_register_branch_var_pop_order_by
  var_samp: membership_register_branch_var_samp_order_by
  variance: membership_register_branch_variance_order_by
}

"""
input type for inserting array relation for remote table "membership_register_branch"
"""
input membership_register_branch_arr_rel_insert_input {
  data: [membership_register_branch_insert_input!]!
  on_conflict: membership_register_branch_on_conflict
}

"""aggregate avg on columns"""
type membership_register_branch_avg_fields {
  branch_id: Float
  member_id: Float
}

"""
order by avg() on columns of table "membership_register_branch"
"""
input membership_register_branch_avg_order_by {
  branch_id: order_by
  member_id: order_by
}

"""
Boolean expression to filter rows from the table "membership_register_branch". All fields are combined with a logical 'AND'.
"""
input membership_register_branch_bool_exp {
  _and: [membership_register_branch_bool_exp]
  _not: membership_register_branch_bool_exp
  _or: [membership_register_branch_bool_exp]
  branch: branch_bool_exp
  branch_id: Int_comparison_exp
  member: member_bool_exp
  member_id: Int_comparison_exp
  register_year: String_comparison_exp
}

"""
unique or primary key constraints on table "membership_register_branch"
"""
enum membership_register_branch_constraint {
  """unique or primary key constraint"""
  idx_21050_sqlite_autoindex_membership_register_branch_1
}

"""
input type for incrementing integer column in table "membership_register_branch"
"""
input membership_register_branch_inc_input {
  branch_id: Int
  member_id: Int
}

"""
input type for inserting data into table "membership_register_branch"
"""
input membership_register_branch_insert_input {
  branch: branch_obj_rel_insert_input
  branch_id: Int
  member: member_obj_rel_insert_input
  member_id: Int
  register_year: String
}

"""aggregate max on columns"""
type membership_register_branch_max_fields {
  branch_id: Int
  member_id: Int
  register_year: String
}

"""
order by max() on columns of table "membership_register_branch"
"""
input membership_register_branch_max_order_by {
  branch_id: order_by
  member_id: order_by
  register_year: order_by
}

"""aggregate min on columns"""
type membership_register_branch_min_fields {
  branch_id: Int
  member_id: Int
  register_year: String
}

"""
order by min() on columns of table "membership_register_branch"
"""
input membership_register_branch_min_order_by {
  branch_id: order_by
  member_id: order_by
  register_year: order_by
}

"""
response of any mutation on the table "membership_register_branch"
"""
type membership_register_branch_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [membership_register_branch!]!
}

"""
input type for inserting object relation for remote table "membership_register_branch"
"""
input membership_register_branch_obj_rel_insert_input {
  data: membership_register_branch_insert_input!
  on_conflict: membership_register_branch_on_conflict
}

"""
on conflict condition type for table "membership_register_branch"
"""
input membership_register_branch_on_conflict {
  constraint: membership_register_branch_constraint!
  update_columns: [membership_register_branch_update_column!]!
  where: membership_register_branch_bool_exp
}

"""
ordering options when selecting data from "membership_register_branch"
"""
input membership_register_branch_order_by {
  branch: branch_order_by
  branch_id: order_by
  member: member_order_by
  member_id: order_by
  register_year: order_by
}

"""
select columns of table "membership_register_branch"
"""
enum membership_register_branch_select_column {
  """column name"""
  branch_id

  """column name"""
  member_id

  """column name"""
  register_year
}

"""
input type for updating data in table "membership_register_branch"
"""
input membership_register_branch_set_input {
  branch_id: Int
  member_id: Int
  register_year: String
}

"""aggregate stddev on columns"""
type membership_register_branch_stddev_fields {
  branch_id: Float
  member_id: Float
}

"""
order by stddev() on columns of table "membership_register_branch"
"""
input membership_register_branch_stddev_order_by {
  branch_id: order_by
  member_id: order_by
}

"""aggregate stddev_pop on columns"""
type membership_register_branch_stddev_pop_fields {
  branch_id: Float
  member_id: Float
}

"""
order by stddev_pop() on columns of table "membership_register_branch"
"""
input membership_register_branch_stddev_pop_order_by {
  branch_id: order_by
  member_id: order_by
}

"""aggregate stddev_samp on columns"""
type membership_register_branch_stddev_samp_fields {
  branch_id: Float
  member_id: Float
}

"""
order by stddev_samp() on columns of table "membership_register_branch"
"""
input membership_register_branch_stddev_samp_order_by {
  branch_id: order_by
  member_id: order_by
}

"""aggregate sum on columns"""
type membership_register_branch_sum_fields {
  branch_id: Int
  member_id: Int
}

"""
order by sum() on columns of table "membership_register_branch"
"""
input membership_register_branch_sum_order_by {
  branch_id: order_by
  member_id: order_by
}

"""
update columns of table "membership_register_branch"
"""
enum membership_register_branch_update_column {
  """column name"""
  branch_id

  """column name"""
  member_id

  """column name"""
  register_year
}

"""aggregate var_pop on columns"""
type membership_register_branch_var_pop_fields {
  branch_id: Float
  member_id: Float
}

"""
order by var_pop() on columns of table "membership_register_branch"
"""
input membership_register_branch_var_pop_order_by {
  branch_id: order_by
  member_id: order_by
}

"""aggregate var_samp on columns"""
type membership_register_branch_var_samp_fields {
  branch_id: Float
  member_id: Float
}

"""
order by var_samp() on columns of table "membership_register_branch"
"""
input membership_register_branch_var_samp_order_by {
  branch_id: order_by
  member_id: order_by
}

"""aggregate variance on columns"""
type membership_register_branch_variance_fields {
  branch_id: Float
  member_id: Float
}

"""
order by variance() on columns of table "membership_register_branch"
"""
input membership_register_branch_variance_order_by {
  branch_id: order_by
  member_id: order_by
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "branch"
  """
  delete_branch(
    """filter the rows which have to be deleted"""
    where: branch_bool_exp!
  ): branch_mutation_response

  """
  delete data from the table: "member"
  """
  delete_member(
    """filter the rows which have to be deleted"""
    where: member_bool_exp!
  ): member_mutation_response

  """
  delete data from the table: "membership_register_branch"
  """
  delete_membership_register_branch(
    """filter the rows which have to be deleted"""
    where: membership_register_branch_bool_exp!
  ): membership_register_branch_mutation_response

  """
  delete data from the table: "purchase"
  """
  delete_purchase(
    """filter the rows which have to be deleted"""
    where: purchase_bool_exp!
  ): purchase_mutation_response

  """
  insert data into the table: "branch"
  """
  insert_branch(
    """the rows to be inserted"""
    objects: [branch_insert_input!]!

    """on conflict condition"""
    on_conflict: branch_on_conflict
  ): branch_mutation_response

  """
  insert a single row into the table: "branch"
  """
  insert_branch_one(
    """the row to be inserted"""
    object: branch_insert_input!

    """on conflict condition"""
    on_conflict: branch_on_conflict
  ): branch

  """
  insert data into the table: "member"
  """
  insert_member(
    """the rows to be inserted"""
    objects: [member_insert_input!]!

    """on conflict condition"""
    on_conflict: member_on_conflict
  ): member_mutation_response

  """
  insert a single row into the table: "member"
  """
  insert_member_one(
    """the row to be inserted"""
    object: member_insert_input!

    """on conflict condition"""
    on_conflict: member_on_conflict
  ): member

  """
  insert data into the table: "membership_register_branch"
  """
  insert_membership_register_branch(
    """the rows to be inserted"""
    objects: [membership_register_branch_insert_input!]!

    """on conflict condition"""
    on_conflict: membership_register_branch_on_conflict
  ): membership_register_branch_mutation_response

  """
  insert a single row into the table: "membership_register_branch"
  """
  insert_membership_register_branch_one(
    """the row to be inserted"""
    object: membership_register_branch_insert_input!

    """on conflict condition"""
    on_conflict: membership_register_branch_on_conflict
  ): membership_register_branch

  """
  insert data into the table: "purchase"
  """
  insert_purchase(
    """the rows to be inserted"""
    objects: [purchase_insert_input!]!

    """on conflict condition"""
    on_conflict: purchase_on_conflict
  ): purchase_mutation_response

  """
  insert a single row into the table: "purchase"
  """
  insert_purchase_one(
    """the row to be inserted"""
    object: purchase_insert_input!

    """on conflict condition"""
    on_conflict: purchase_on_conflict
  ): purchase

  """
  update data of the table: "branch"
  """
  update_branch(
    """increments the integer columns with given value of the filtered values"""
    _inc: branch_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: branch_set_input

    """filter the rows which have to be updated"""
    where: branch_bool_exp!
  ): branch_mutation_response

  """
  update data of the table: "member"
  """
  update_member(
    """increments the integer columns with given value of the filtered values"""
    _inc: member_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: member_set_input

    """filter the rows which have to be updated"""
    where: member_bool_exp!
  ): member_mutation_response

  """
  update data of the table: "membership_register_branch"
  """
  update_membership_register_branch(
    """increments the integer columns with given value of the filtered values"""
    _inc: membership_register_branch_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: membership_register_branch_set_input

    """filter the rows which have to be updated"""
    where: membership_register_branch_bool_exp!
  ): membership_register_branch_mutation_response

  """
  update data of the table: "purchase"
  """
  update_purchase(
    """increments the integer columns with given value of the filtered values"""
    _inc: purchase_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: purchase_set_input

    """filter the rows which have to be updated"""
    where: purchase_bool_exp!
  ): purchase_mutation_response
}

"""column ordering options"""
enum order_by {
  """in the ascending order, nulls last"""
  asc

  """in the ascending order, nulls first"""
  asc_nulls_first

  """in the ascending order, nulls last"""
  asc_nulls_last

  """in the descending order, nulls first"""
  desc

  """in the descending order, nulls first"""
  desc_nulls_first

  """in the descending order, nulls last"""
  desc_nulls_last
}

"""
columns and relationships of "purchase"
"""
type purchase {
  """An object relationship"""
  branch: branch
  branch_id: Int

  """An object relationship"""
  member: member
  member_id: Int
  total_pounds: Float
  year: String
}

"""
aggregated selection of "purchase"
"""
type purchase_aggregate {
  aggregate: purchase_aggregate_fields
  nodes: [purchase!]!
}

"""
aggregate fields of "purchase"
"""
type purchase_aggregate_fields {
  avg: purchase_avg_fields
  count(columns: [purchase_select_column!], distinct: Boolean): Int
  max: purchase_max_fields
  min: purchase_min_fields
  stddev: purchase_stddev_fields
  stddev_pop: purchase_stddev_pop_fields
  stddev_samp: purchase_stddev_samp_fields
  sum: purchase_sum_fields
  var_pop: purchase_var_pop_fields
  var_samp: purchase_var_samp_fields
  variance: purchase_variance_fields
}

"""
order by aggregate values of table "purchase"
"""
input purchase_aggregate_order_by {
  avg: purchase_avg_order_by
  count: order_by
  max: purchase_max_order_by
  min: purchase_min_order_by
  stddev: purchase_stddev_order_by
  stddev_pop: purchase_stddev_pop_order_by
  stddev_samp: purchase_stddev_samp_order_by
  sum: purchase_sum_order_by
  var_pop: purchase_var_pop_order_by
  var_samp: purchase_var_samp_order_by
  variance: purchase_variance_order_by
}

"""
input type for inserting array relation for remote table "purchase"
"""
input purchase_arr_rel_insert_input {
  data: [purchase_insert_input!]!
  on_conflict: purchase_on_conflict
}

"""aggregate avg on columns"""
type purchase_avg_fields {
  branch_id: Float
  member_id: Float
  total_pounds: Float
}

"""
order by avg() on columns of table "purchase"
"""
input purchase_avg_order_by {
  branch_id: order_by
  member_id: order_by
  total_pounds: order_by
}

"""
Boolean expression to filter rows from the table "purchase". All fields are combined with a logical 'AND'.
"""
input purchase_bool_exp {
  _and: [purchase_bool_exp]
  _not: purchase_bool_exp
  _or: [purchase_bool_exp]
  branch: branch_bool_exp
  branch_id: Int_comparison_exp
  member: member_bool_exp
  member_id: Int_comparison_exp
  total_pounds: Float_comparison_exp
  year: String_comparison_exp
}

"""
unique or primary key constraints on table "purchase"
"""
enum purchase_constraint {
  """unique or primary key constraint"""
  idx_21056_sqlite_autoindex_purchase_1
}

"""
input type for incrementing integer column in table "purchase"
"""
input purchase_inc_input {
  branch_id: Int
  member_id: Int
  total_pounds: Float
}

"""
input type for inserting data into table "purchase"
"""
input purchase_insert_input {
  branch: branch_obj_rel_insert_input
  branch_id: Int
  member: member_obj_rel_insert_input
  member_id: Int
  total_pounds: Float
  year: String
}

"""aggregate max on columns"""
type purchase_max_fields {
  branch_id: Int
  member_id: Int
  total_pounds: Float
  year: String
}

"""
order by max() on columns of table "purchase"
"""
input purchase_max_order_by {
  branch_id: order_by
  member_id: order_by
  total_pounds: order_by
  year: order_by
}

"""aggregate min on columns"""
type purchase_min_fields {
  branch_id: Int
  member_id: Int
  total_pounds: Float
  year: String
}

"""
order by min() on columns of table "purchase"
"""
input purchase_min_order_by {
  branch_id: order_by
  member_id: order_by
  total_pounds: order_by
  year: order_by
}

"""
response of any mutation on the table "purchase"
"""
type purchase_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [purchase!]!
}

"""
input type for inserting object relation for remote table "purchase"
"""
input purchase_obj_rel_insert_input {
  data: purchase_insert_input!
  on_conflict: purchase_on_conflict
}

"""
on conflict condition type for table "purchase"
"""
input purchase_on_conflict {
  constraint: purchase_constraint!
  update_columns: [purchase_update_column!]!
  where: purchase_bool_exp
}

"""
ordering options when selecting data from "purchase"
"""
input purchase_order_by {
  branch: branch_order_by
  branch_id: order_by
  member: member_order_by
  member_id: order_by
  total_pounds: order_by
  year: order_by
}

"""
select columns of table "purchase"
"""
enum purchase_select_column {
  """column name"""
  branch_id

  """column name"""
  member_id

  """column name"""
  total_pounds

  """column name"""
  year
}

"""
input type for updating data in table "purchase"
"""
input purchase_set_input {
  branch_id: Int
  member_id: Int
  total_pounds: Float
  year: String
}

"""aggregate stddev on columns"""
type purchase_stddev_fields {
  branch_id: Float
  member_id: Float
  total_pounds: Float
}

"""
order by stddev() on columns of table "purchase"
"""
input purchase_stddev_order_by {
  branch_id: order_by
  member_id: order_by
  total_pounds: order_by
}

"""aggregate stddev_pop on columns"""
type purchase_stddev_pop_fields {
  branch_id: Float
  member_id: Float
  total_pounds: Float
}

"""
order by stddev_pop() on columns of table "purchase"
"""
input purchase_stddev_pop_order_by {
  branch_id: order_by
  member_id: order_by
  total_pounds: order_by
}

"""aggregate stddev_samp on columns"""
type purchase_stddev_samp_fields {
  branch_id: Float
  member_id: Float
  total_pounds: Float
}

"""
order by stddev_samp() on columns of table "purchase"
"""
input purchase_stddev_samp_order_by {
  branch_id: order_by
  member_id: order_by
  total_pounds: order_by
}

"""aggregate sum on columns"""
type purchase_sum_fields {
  branch_id: Int
  member_id: Int
  total_pounds: Float
}

"""
order by sum() on columns of table "purchase"
"""
input purchase_sum_order_by {
  branch_id: order_by
  member_id: order_by
  total_pounds: order_by
}

"""
update columns of table "purchase"
"""
enum purchase_update_column {
  """column name"""
  branch_id

  """column name"""
  member_id

  """column name"""
  total_pounds

  """column name"""
  year
}

"""aggregate var_pop on columns"""
type purchase_var_pop_fields {
  branch_id: Float
  member_id: Float
  total_pounds: Float
}

"""
order by var_pop() on columns of table "purchase"
"""
input purchase_var_pop_order_by {
  branch_id: order_by
  member_id: order_by
  total_pounds: order_by
}

"""aggregate var_samp on columns"""
type purchase_var_samp_fields {
  branch_id: Float
  member_id: Float
  total_pounds: Float
}

"""
order by var_samp() on columns of table "purchase"
"""
input purchase_var_samp_order_by {
  branch_id: order_by
  member_id: order_by
  total_pounds: order_by
}

"""aggregate variance on columns"""
type purchase_variance_fields {
  branch_id: Float
  member_id: Float
  total_pounds: Float
}

"""
order by variance() on columns of table "purchase"
"""
input purchase_variance_order_by {
  branch_id: order_by
  member_id: order_by
  total_pounds: order_by
}

"""query root"""
type query_root {
  """
  fetch data from the table: "branch"
  """
  branch(
    """distinct select on columns"""
    distinct_on: [branch_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [branch_order_by!]

    """filter the rows returned"""
    where: branch_bool_exp
  ): [branch!]!

  """
  fetch aggregated fields from the table: "branch"
  """
  branch_aggregate(
    """distinct select on columns"""
    distinct_on: [branch_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [branch_order_by!]

    """filter the rows returned"""
    where: branch_bool_exp
  ): branch_aggregate!

  """
  fetch data from the table: "member"
  """
  member(
    """distinct select on columns"""
    distinct_on: [member_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [member_order_by!]

    """filter the rows returned"""
    where: member_bool_exp
  ): [member!]!

  """
  fetch aggregated fields from the table: "member"
  """
  member_aggregate(
    """distinct select on columns"""
    distinct_on: [member_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [member_order_by!]

    """filter the rows returned"""
    where: member_bool_exp
  ): member_aggregate!

  """
  fetch data from the table: "membership_register_branch"
  """
  membership_register_branch(
    """distinct select on columns"""
    distinct_on: [membership_register_branch_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [membership_register_branch_order_by!]

    """filter the rows returned"""
    where: membership_register_branch_bool_exp
  ): [membership_register_branch!]!

  """
  fetch aggregated fields from the table: "membership_register_branch"
  """
  membership_register_branch_aggregate(
    """distinct select on columns"""
    distinct_on: [membership_register_branch_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [membership_register_branch_order_by!]

    """filter the rows returned"""
    where: membership_register_branch_bool_exp
  ): membership_register_branch_aggregate!

  """
  fetch data from the table: "purchase"
  """
  purchase(
    """distinct select on columns"""
    distinct_on: [purchase_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [purchase_order_by!]

    """filter the rows returned"""
    where: purchase_bool_exp
  ): [purchase!]!

  """
  fetch aggregated fields from the table: "purchase"
  """
  purchase_aggregate(
    """distinct select on columns"""
    distinct_on: [purchase_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [purchase_order_by!]

    """filter the rows returned"""
    where: purchase_bool_exp
  ): purchase_aggregate!
}

"""
expression to compare columns of type String. All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String
  _ilike: String
  _in: [String!]
  _is_null: Boolean
  _like: String
  _lt: String
  _lte: String
  _neq: String
  _nilike: String
  _nin: [String!]
  _nlike: String
  _nsimilar: String
  _similar: String
}

"""subscription root"""
type subscription_root {
  """
  fetch data from the table: "branch"
  """
  branch(
    """distinct select on columns"""
    distinct_on: [branch_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [branch_order_by!]

    """filter the rows returned"""
    where: branch_bool_exp
  ): [branch!]!

  """
  fetch aggregated fields from the table: "branch"
  """
  branch_aggregate(
    """distinct select on columns"""
    distinct_on: [branch_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [branch_order_by!]

    """filter the rows returned"""
    where: branch_bool_exp
  ): branch_aggregate!

  """
  fetch data from the table: "member"
  """
  member(
    """distinct select on columns"""
    distinct_on: [member_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [member_order_by!]

    """filter the rows returned"""
    where: member_bool_exp
  ): [member!]!

  """
  fetch aggregated fields from the table: "member"
  """
  member_aggregate(
    """distinct select on columns"""
    distinct_on: [member_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [member_order_by!]

    """filter the rows returned"""
    where: member_bool_exp
  ): member_aggregate!

  """
  fetch data from the table: "membership_register_branch"
  """
  membership_register_branch(
    """distinct select on columns"""
    distinct_on: [membership_register_branch_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [membership_register_branch_order_by!]

    """filter the rows returned"""
    where: membership_register_branch_bool_exp
  ): [membership_register_branch!]!

  """
  fetch aggregated fields from the table: "membership_register_branch"
  """
  membership_register_branch_aggregate(
    """distinct select on columns"""
    distinct_on: [membership_register_branch_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [membership_register_branch_order_by!]

    """filter the rows returned"""
    where: membership_register_branch_bool_exp
  ): membership_register_branch_aggregate!

  """
  fetch data from the table: "purchase"
  """
  purchase(
    """distinct select on columns"""
    distinct_on: [purchase_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [purchase_order_by!]

    """filter the rows returned"""
    where: purchase_bool_exp
  ): [purchase!]!

  """
  fetch aggregated fields from the table: "purchase"
  """
  purchase_aggregate(
    """distinct select on columns"""
    distinct_on: [purchase_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [purchase_order_by!]

    """filter the rows returned"""
    where: purchase_bool_exp
  ): purchase_aggregate!
}
