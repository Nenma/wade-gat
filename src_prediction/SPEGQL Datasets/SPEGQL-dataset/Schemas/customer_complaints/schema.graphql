schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""
Direct the client to resolve this field locally, either from the cache or local resolvers.
"""
directive @client(
  """
  When true, the client will never use the cache for this value. See
  https://www.apollographql.com/docs/react/essentials/local-state/#forcing-resolvers-with-clientalways-true
  """
  always: Boolean
) on FIELD | FRAGMENT_DEFINITION | INLINE_FRAGMENT

"""
Export this locally resolved field as a variable to be used in the remainder of this query. See
https://www.apollographql.com/docs/react/essentials/local-state/#using-client-fields-as-variables
"""
directive @export(
  """The variable name to export this field as."""
  as: String!
) on FIELD

"""
Specify a custom store key for this result. See
https://www.apollographql.com/docs/react/advanced/caching/#the-connection-directive
"""
directive @connection(
  """Specify the store key."""
  key: String!

  """
  An array of query argument names to include in the generated custom store key.
  """
  filter: [String!]
) on FIELD

scalar bigint

"""
expression to compare columns of type bigint. All fields are combined with logical 'AND'.
"""
input bigint_comparison_exp {
  _eq: bigint
  _gt: bigint
  _gte: bigint
  _in: [bigint!]
  _is_null: Boolean
  _lt: bigint
  _lte: bigint
  _neq: bigint
  _nin: [bigint!]
}

"""
columns and relationships of "complaints"
"""
type complaints {
  complaint_id: bigint
  complaint_outcome_code: String
  complaint_status_code: String
  complaint_type_code: String

  """An object relationship"""
  customer: customers
  customer_id: bigint
  date_complaint_closed: timestamptz
  date_complaint_raised: timestamptz

  """An object relationship"""
  product: products
  product_id: bigint

  """An object relationship"""
  staff: staff
  staff_id: bigint
}

"""
aggregated selection of "complaints"
"""
type complaints_aggregate {
  aggregate: complaints_aggregate_fields
  nodes: [complaints!]!
}

"""
aggregate fields of "complaints"
"""
type complaints_aggregate_fields {
  avg: complaints_avg_fields
  count(columns: [complaints_select_column!], distinct: Boolean): Int
  max: complaints_max_fields
  min: complaints_min_fields
  stddev: complaints_stddev_fields
  stddev_pop: complaints_stddev_pop_fields
  stddev_samp: complaints_stddev_samp_fields
  sum: complaints_sum_fields
  var_pop: complaints_var_pop_fields
  var_samp: complaints_var_samp_fields
  variance: complaints_variance_fields
}

"""
order by aggregate values of table "complaints"
"""
input complaints_aggregate_order_by {
  avg: complaints_avg_order_by
  count: order_by
  max: complaints_max_order_by
  min: complaints_min_order_by
  stddev: complaints_stddev_order_by
  stddev_pop: complaints_stddev_pop_order_by
  stddev_samp: complaints_stddev_samp_order_by
  sum: complaints_sum_order_by
  var_pop: complaints_var_pop_order_by
  var_samp: complaints_var_samp_order_by
  variance: complaints_variance_order_by
}

"""
input type for inserting array relation for remote table "complaints"
"""
input complaints_arr_rel_insert_input {
  data: [complaints_insert_input!]!
}

"""aggregate avg on columns"""
type complaints_avg_fields {
  complaint_id: Float
  customer_id: Float
  product_id: Float
  staff_id: Float
}

"""
order by avg() on columns of table "complaints"
"""
input complaints_avg_order_by {
  complaint_id: order_by
  customer_id: order_by
  product_id: order_by
  staff_id: order_by
}

"""
Boolean expression to filter rows from the table "complaints". All fields are combined with a logical 'AND'.
"""
input complaints_bool_exp {
  _and: [complaints_bool_exp]
  _not: complaints_bool_exp
  _or: [complaints_bool_exp]
  complaint_id: bigint_comparison_exp
  complaint_outcome_code: String_comparison_exp
  complaint_status_code: String_comparison_exp
  complaint_type_code: String_comparison_exp
  customer: customers_bool_exp
  customer_id: bigint_comparison_exp
  date_complaint_closed: timestamptz_comparison_exp
  date_complaint_raised: timestamptz_comparison_exp
  product: products_bool_exp
  product_id: bigint_comparison_exp
  staff: staff_bool_exp
  staff_id: bigint_comparison_exp
}

"""
input type for incrementing integer column in table "complaints"
"""
input complaints_inc_input {
  complaint_id: bigint
  customer_id: bigint
  product_id: bigint
  staff_id: bigint
}

"""
input type for inserting data into table "complaints"
"""
input complaints_insert_input {
  complaint_id: bigint
  complaint_outcome_code: String
  complaint_status_code: String
  complaint_type_code: String
  customer: customers_obj_rel_insert_input
  customer_id: bigint
  date_complaint_closed: timestamptz
  date_complaint_raised: timestamptz
  product: products_obj_rel_insert_input
  product_id: bigint
  staff: staff_obj_rel_insert_input
  staff_id: bigint
}

"""aggregate max on columns"""
type complaints_max_fields {
  complaint_id: bigint
  complaint_outcome_code: String
  complaint_status_code: String
  complaint_type_code: String
  customer_id: bigint
  date_complaint_closed: timestamptz
  date_complaint_raised: timestamptz
  product_id: bigint
  staff_id: bigint
}

"""
order by max() on columns of table "complaints"
"""
input complaints_max_order_by {
  complaint_id: order_by
  complaint_outcome_code: order_by
  complaint_status_code: order_by
  complaint_type_code: order_by
  customer_id: order_by
  date_complaint_closed: order_by
  date_complaint_raised: order_by
  product_id: order_by
  staff_id: order_by
}

"""aggregate min on columns"""
type complaints_min_fields {
  complaint_id: bigint
  complaint_outcome_code: String
  complaint_status_code: String
  complaint_type_code: String
  customer_id: bigint
  date_complaint_closed: timestamptz
  date_complaint_raised: timestamptz
  product_id: bigint
  staff_id: bigint
}

"""
order by min() on columns of table "complaints"
"""
input complaints_min_order_by {
  complaint_id: order_by
  complaint_outcome_code: order_by
  complaint_status_code: order_by
  complaint_type_code: order_by
  customer_id: order_by
  date_complaint_closed: order_by
  date_complaint_raised: order_by
  product_id: order_by
  staff_id: order_by
}

"""
response of any mutation on the table "complaints"
"""
type complaints_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [complaints!]!
}

"""
input type for inserting object relation for remote table "complaints"
"""
input complaints_obj_rel_insert_input {
  data: complaints_insert_input!
}

"""
ordering options when selecting data from "complaints"
"""
input complaints_order_by {
  complaint_id: order_by
  complaint_outcome_code: order_by
  complaint_status_code: order_by
  complaint_type_code: order_by
  customer: customers_order_by
  customer_id: order_by
  date_complaint_closed: order_by
  date_complaint_raised: order_by
  product: products_order_by
  product_id: order_by
  staff: staff_order_by
  staff_id: order_by
}

"""
select columns of table "complaints"
"""
enum complaints_select_column {
  """column name"""
  complaint_id

  """column name"""
  complaint_outcome_code

  """column name"""
  complaint_status_code

  """column name"""
  complaint_type_code

  """column name"""
  customer_id

  """column name"""
  date_complaint_closed

  """column name"""
  date_complaint_raised

  """column name"""
  product_id

  """column name"""
  staff_id
}

"""
input type for updating data in table "complaints"
"""
input complaints_set_input {
  complaint_id: bigint
  complaint_outcome_code: String
  complaint_status_code: String
  complaint_type_code: String
  customer_id: bigint
  date_complaint_closed: timestamptz
  date_complaint_raised: timestamptz
  product_id: bigint
  staff_id: bigint
}

"""aggregate stddev on columns"""
type complaints_stddev_fields {
  complaint_id: Float
  customer_id: Float
  product_id: Float
  staff_id: Float
}

"""
order by stddev() on columns of table "complaints"
"""
input complaints_stddev_order_by {
  complaint_id: order_by
  customer_id: order_by
  product_id: order_by
  staff_id: order_by
}

"""aggregate stddev_pop on columns"""
type complaints_stddev_pop_fields {
  complaint_id: Float
  customer_id: Float
  product_id: Float
  staff_id: Float
}

"""
order by stddev_pop() on columns of table "complaints"
"""
input complaints_stddev_pop_order_by {
  complaint_id: order_by
  customer_id: order_by
  product_id: order_by
  staff_id: order_by
}

"""aggregate stddev_samp on columns"""
type complaints_stddev_samp_fields {
  complaint_id: Float
  customer_id: Float
  product_id: Float
  staff_id: Float
}

"""
order by stddev_samp() on columns of table "complaints"
"""
input complaints_stddev_samp_order_by {
  complaint_id: order_by
  customer_id: order_by
  product_id: order_by
  staff_id: order_by
}

"""aggregate sum on columns"""
type complaints_sum_fields {
  complaint_id: bigint
  customer_id: bigint
  product_id: bigint
  staff_id: bigint
}

"""
order by sum() on columns of table "complaints"
"""
input complaints_sum_order_by {
  complaint_id: order_by
  customer_id: order_by
  product_id: order_by
  staff_id: order_by
}

"""aggregate var_pop on columns"""
type complaints_var_pop_fields {
  complaint_id: Float
  customer_id: Float
  product_id: Float
  staff_id: Float
}

"""
order by var_pop() on columns of table "complaints"
"""
input complaints_var_pop_order_by {
  complaint_id: order_by
  customer_id: order_by
  product_id: order_by
  staff_id: order_by
}

"""aggregate var_samp on columns"""
type complaints_var_samp_fields {
  complaint_id: Float
  customer_id: Float
  product_id: Float
  staff_id: Float
}

"""
order by var_samp() on columns of table "complaints"
"""
input complaints_var_samp_order_by {
  complaint_id: order_by
  customer_id: order_by
  product_id: order_by
  staff_id: order_by
}

"""aggregate variance on columns"""
type complaints_variance_fields {
  complaint_id: Float
  customer_id: Float
  product_id: Float
  staff_id: Float
}

"""
order by variance() on columns of table "complaints"
"""
input complaints_variance_order_by {
  complaint_id: order_by
  customer_id: order_by
  product_id: order_by
  staff_id: order_by
}

"""
columns and relationships of "customers"
"""
type customers {
  address_line_1: String
  address_line_2: String

  """An array relationship"""
  complaints(
    """distinct select on columns"""
    distinct_on: [complaints_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [complaints_order_by!]

    """filter the rows returned"""
    where: complaints_bool_exp
  ): [complaints!]!

  """An aggregated array relationship"""
  complaints_aggregate(
    """distinct select on columns"""
    distinct_on: [complaints_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [complaints_order_by!]

    """filter the rows returned"""
    where: complaints_bool_exp
  ): complaints_aggregate!
  customer_id: bigint!
  customer_type_code: String
  email_address: String
  phone_number: String
  state: String
  town_city: String
}

"""
aggregated selection of "customers"
"""
type customers_aggregate {
  aggregate: customers_aggregate_fields
  nodes: [customers!]!
}

"""
aggregate fields of "customers"
"""
type customers_aggregate_fields {
  avg: customers_avg_fields
  count(columns: [customers_select_column!], distinct: Boolean): Int
  max: customers_max_fields
  min: customers_min_fields
  stddev: customers_stddev_fields
  stddev_pop: customers_stddev_pop_fields
  stddev_samp: customers_stddev_samp_fields
  sum: customers_sum_fields
  var_pop: customers_var_pop_fields
  var_samp: customers_var_samp_fields
  variance: customers_variance_fields
}

"""
order by aggregate values of table "customers"
"""
input customers_aggregate_order_by {
  avg: customers_avg_order_by
  count: order_by
  max: customers_max_order_by
  min: customers_min_order_by
  stddev: customers_stddev_order_by
  stddev_pop: customers_stddev_pop_order_by
  stddev_samp: customers_stddev_samp_order_by
  sum: customers_sum_order_by
  var_pop: customers_var_pop_order_by
  var_samp: customers_var_samp_order_by
  variance: customers_variance_order_by
}

"""
input type for inserting array relation for remote table "customers"
"""
input customers_arr_rel_insert_input {
  data: [customers_insert_input!]!
  on_conflict: customers_on_conflict
}

"""aggregate avg on columns"""
type customers_avg_fields {
  customer_id: Float
}

"""
order by avg() on columns of table "customers"
"""
input customers_avg_order_by {
  customer_id: order_by
}

"""
Boolean expression to filter rows from the table "customers". All fields are combined with a logical 'AND'.
"""
input customers_bool_exp {
  _and: [customers_bool_exp]
  _not: customers_bool_exp
  _or: [customers_bool_exp]
  address_line_1: String_comparison_exp
  address_line_2: String_comparison_exp
  complaints: complaints_bool_exp
  customer_id: bigint_comparison_exp
  customer_type_code: String_comparison_exp
  email_address: String_comparison_exp
  phone_number: String_comparison_exp
  state: String_comparison_exp
  town_city: String_comparison_exp
}

"""
unique or primary key constraints on table "customers"
"""
enum customers_constraint {
  """unique or primary key constraint"""
  idx_22818_customers_pkey
}

"""
input type for incrementing integer column in table "customers"
"""
input customers_inc_input {
  customer_id: bigint
}

"""
input type for inserting data into table "customers"
"""
input customers_insert_input {
  address_line_1: String
  address_line_2: String
  complaints: complaints_arr_rel_insert_input
  customer_id: bigint
  customer_type_code: String
  email_address: String
  phone_number: String
  state: String
  town_city: String
}

"""aggregate max on columns"""
type customers_max_fields {
  address_line_1: String
  address_line_2: String
  customer_id: bigint
  customer_type_code: String
  email_address: String
  phone_number: String
  state: String
  town_city: String
}

"""
order by max() on columns of table "customers"
"""
input customers_max_order_by {
  address_line_1: order_by
  address_line_2: order_by
  customer_id: order_by
  customer_type_code: order_by
  email_address: order_by
  phone_number: order_by
  state: order_by
  town_city: order_by
}

"""aggregate min on columns"""
type customers_min_fields {
  address_line_1: String
  address_line_2: String
  customer_id: bigint
  customer_type_code: String
  email_address: String
  phone_number: String
  state: String
  town_city: String
}

"""
order by min() on columns of table "customers"
"""
input customers_min_order_by {
  address_line_1: order_by
  address_line_2: order_by
  customer_id: order_by
  customer_type_code: order_by
  email_address: order_by
  phone_number: order_by
  state: order_by
  town_city: order_by
}

"""
response of any mutation on the table "customers"
"""
type customers_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [customers!]!
}

"""
input type for inserting object relation for remote table "customers"
"""
input customers_obj_rel_insert_input {
  data: customers_insert_input!
  on_conflict: customers_on_conflict
}

"""
on conflict condition type for table "customers"
"""
input customers_on_conflict {
  constraint: customers_constraint!
  update_columns: [customers_update_column!]!
  where: customers_bool_exp
}

"""
ordering options when selecting data from "customers"
"""
input customers_order_by {
  address_line_1: order_by
  address_line_2: order_by
  complaints_aggregate: complaints_aggregate_order_by
  customer_id: order_by
  customer_type_code: order_by
  email_address: order_by
  phone_number: order_by
  state: order_by
  town_city: order_by
}

"""
primary key columns input for table: "customers"
"""
input customers_pk_columns_input {
  customer_id: bigint!
}

"""
select columns of table "customers"
"""
enum customers_select_column {
  """column name"""
  address_line_1

  """column name"""
  address_line_2

  """column name"""
  customer_id

  """column name"""
  customer_type_code

  """column name"""
  email_address

  """column name"""
  phone_number

  """column name"""
  state

  """column name"""
  town_city
}

"""
input type for updating data in table "customers"
"""
input customers_set_input {
  address_line_1: String
  address_line_2: String
  customer_id: bigint
  customer_type_code: String
  email_address: String
  phone_number: String
  state: String
  town_city: String
}

"""aggregate stddev on columns"""
type customers_stddev_fields {
  customer_id: Float
}

"""
order by stddev() on columns of table "customers"
"""
input customers_stddev_order_by {
  customer_id: order_by
}

"""aggregate stddev_pop on columns"""
type customers_stddev_pop_fields {
  customer_id: Float
}

"""
order by stddev_pop() on columns of table "customers"
"""
input customers_stddev_pop_order_by {
  customer_id: order_by
}

"""aggregate stddev_samp on columns"""
type customers_stddev_samp_fields {
  customer_id: Float
}

"""
order by stddev_samp() on columns of table "customers"
"""
input customers_stddev_samp_order_by {
  customer_id: order_by
}

"""aggregate sum on columns"""
type customers_sum_fields {
  customer_id: bigint
}

"""
order by sum() on columns of table "customers"
"""
input customers_sum_order_by {
  customer_id: order_by
}

"""
update columns of table "customers"
"""
enum customers_update_column {
  """column name"""
  address_line_1

  """column name"""
  address_line_2

  """column name"""
  customer_id

  """column name"""
  customer_type_code

  """column name"""
  email_address

  """column name"""
  phone_number

  """column name"""
  state

  """column name"""
  town_city
}

"""aggregate var_pop on columns"""
type customers_var_pop_fields {
  customer_id: Float
}

"""
order by var_pop() on columns of table "customers"
"""
input customers_var_pop_order_by {
  customer_id: order_by
}

"""aggregate var_samp on columns"""
type customers_var_samp_fields {
  customer_id: Float
}

"""
order by var_samp() on columns of table "customers"
"""
input customers_var_samp_order_by {
  customer_id: order_by
}

"""aggregate variance on columns"""
type customers_variance_fields {
  customer_id: Float
}

"""
order by variance() on columns of table "customers"
"""
input customers_variance_order_by {
  customer_id: order_by
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "complaints"
  """
  delete_complaints(
    """filter the rows which have to be deleted"""
    where: complaints_bool_exp!
  ): complaints_mutation_response

  """
  delete data from the table: "customers"
  """
  delete_customers(
    """filter the rows which have to be deleted"""
    where: customers_bool_exp!
  ): customers_mutation_response

  """
  delete single row from the table: "customers"
  """
  delete_customers_by_pk(customer_id: bigint!): customers

  """
  delete data from the table: "products"
  """
  delete_products(
    """filter the rows which have to be deleted"""
    where: products_bool_exp!
  ): products_mutation_response

  """
  delete single row from the table: "products"
  """
  delete_products_by_pk(product_id: bigint!): products

  """
  delete data from the table: "staff"
  """
  delete_staff(
    """filter the rows which have to be deleted"""
    where: staff_bool_exp!
  ): staff_mutation_response

  """
  delete single row from the table: "staff"
  """
  delete_staff_by_pk(staff_id: bigint!): staff

  """
  insert data into the table: "complaints"
  """
  insert_complaints(
    """the rows to be inserted"""
    objects: [complaints_insert_input!]!
  ): complaints_mutation_response

  """
  insert a single row into the table: "complaints"
  """
  insert_complaints_one(
    """the row to be inserted"""
    object: complaints_insert_input!
  ): complaints

  """
  insert data into the table: "customers"
  """
  insert_customers(
    """the rows to be inserted"""
    objects: [customers_insert_input!]!

    """on conflict condition"""
    on_conflict: customers_on_conflict
  ): customers_mutation_response

  """
  insert a single row into the table: "customers"
  """
  insert_customers_one(
    """the row to be inserted"""
    object: customers_insert_input!

    """on conflict condition"""
    on_conflict: customers_on_conflict
  ): customers

  """
  insert data into the table: "products"
  """
  insert_products(
    """the rows to be inserted"""
    objects: [products_insert_input!]!

    """on conflict condition"""
    on_conflict: products_on_conflict
  ): products_mutation_response

  """
  insert a single row into the table: "products"
  """
  insert_products_one(
    """the row to be inserted"""
    object: products_insert_input!

    """on conflict condition"""
    on_conflict: products_on_conflict
  ): products

  """
  insert data into the table: "staff"
  """
  insert_staff(
    """the rows to be inserted"""
    objects: [staff_insert_input!]!

    """on conflict condition"""
    on_conflict: staff_on_conflict
  ): staff_mutation_response

  """
  insert a single row into the table: "staff"
  """
  insert_staff_one(
    """the row to be inserted"""
    object: staff_insert_input!

    """on conflict condition"""
    on_conflict: staff_on_conflict
  ): staff

  """
  update data of the table: "complaints"
  """
  update_complaints(
    """increments the integer columns with given value of the filtered values"""
    _inc: complaints_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: complaints_set_input

    """filter the rows which have to be updated"""
    where: complaints_bool_exp!
  ): complaints_mutation_response

  """
  update data of the table: "customers"
  """
  update_customers(
    """increments the integer columns with given value of the filtered values"""
    _inc: customers_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: customers_set_input

    """filter the rows which have to be updated"""
    where: customers_bool_exp!
  ): customers_mutation_response

  """
  update single row of the table: "customers"
  """
  update_customers_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: customers_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: customers_set_input
    pk_columns: customers_pk_columns_input!
  ): customers

  """
  update data of the table: "products"
  """
  update_products(
    """increments the integer columns with given value of the filtered values"""
    _inc: products_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: products_set_input

    """filter the rows which have to be updated"""
    where: products_bool_exp!
  ): products_mutation_response

  """
  update single row of the table: "products"
  """
  update_products_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: products_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: products_set_input
    pk_columns: products_pk_columns_input!
  ): products

  """
  update data of the table: "staff"
  """
  update_staff(
    """increments the integer columns with given value of the filtered values"""
    _inc: staff_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: staff_set_input

    """filter the rows which have to be updated"""
    where: staff_bool_exp!
  ): staff_mutation_response

  """
  update single row of the table: "staff"
  """
  update_staff_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: staff_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: staff_set_input
    pk_columns: staff_pk_columns_input!
  ): staff
}

scalar numeric

"""
expression to compare columns of type numeric. All fields are combined with logical 'AND'.
"""
input numeric_comparison_exp {
  _eq: numeric
  _gt: numeric
  _gte: numeric
  _in: [numeric!]
  _is_null: Boolean
  _lt: numeric
  _lte: numeric
  _neq: numeric
  _nin: [numeric!]
}

"""column ordering options"""
enum order_by {
  """in the ascending order, nulls last"""
  asc

  """in the ascending order, nulls first"""
  asc_nulls_first

  """in the ascending order, nulls last"""
  asc_nulls_last

  """in the descending order, nulls first"""
  desc

  """in the descending order, nulls first"""
  desc_nulls_first

  """in the descending order, nulls last"""
  desc_nulls_last
}

"""
columns and relationships of "products"
"""
type products {
  """An array relationship"""
  complaints(
    """distinct select on columns"""
    distinct_on: [complaints_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [complaints_order_by!]

    """filter the rows returned"""
    where: complaints_bool_exp
  ): [complaints!]!

  """An aggregated array relationship"""
  complaints_aggregate(
    """distinct select on columns"""
    distinct_on: [complaints_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [complaints_order_by!]

    """filter the rows returned"""
    where: complaints_bool_exp
  ): complaints_aggregate!
  date_product_discontinued: timestamptz
  date_product_first_available: timestamptz
  parent_product_id: bigint
  product_category_code: String
  product_description: String
  product_id: bigint!
  product_name: String
  product_price: numeric
}

"""
aggregated selection of "products"
"""
type products_aggregate {
  aggregate: products_aggregate_fields
  nodes: [products!]!
}

"""
aggregate fields of "products"
"""
type products_aggregate_fields {
  avg: products_avg_fields
  count(columns: [products_select_column!], distinct: Boolean): Int
  max: products_max_fields
  min: products_min_fields
  stddev: products_stddev_fields
  stddev_pop: products_stddev_pop_fields
  stddev_samp: products_stddev_samp_fields
  sum: products_sum_fields
  var_pop: products_var_pop_fields
  var_samp: products_var_samp_fields
  variance: products_variance_fields
}

"""
order by aggregate values of table "products"
"""
input products_aggregate_order_by {
  avg: products_avg_order_by
  count: order_by
  max: products_max_order_by
  min: products_min_order_by
  stddev: products_stddev_order_by
  stddev_pop: products_stddev_pop_order_by
  stddev_samp: products_stddev_samp_order_by
  sum: products_sum_order_by
  var_pop: products_var_pop_order_by
  var_samp: products_var_samp_order_by
  variance: products_variance_order_by
}

"""
input type for inserting array relation for remote table "products"
"""
input products_arr_rel_insert_input {
  data: [products_insert_input!]!
  on_conflict: products_on_conflict
}

"""aggregate avg on columns"""
type products_avg_fields {
  parent_product_id: Float
  product_id: Float
  product_price: Float
}

"""
order by avg() on columns of table "products"
"""
input products_avg_order_by {
  parent_product_id: order_by
  product_id: order_by
  product_price: order_by
}

"""
Boolean expression to filter rows from the table "products". All fields are combined with a logical 'AND'.
"""
input products_bool_exp {
  _and: [products_bool_exp]
  _not: products_bool_exp
  _or: [products_bool_exp]
  complaints: complaints_bool_exp
  date_product_discontinued: timestamptz_comparison_exp
  date_product_first_available: timestamptz_comparison_exp
  parent_product_id: bigint_comparison_exp
  product_category_code: String_comparison_exp
  product_description: String_comparison_exp
  product_id: bigint_comparison_exp
  product_name: String_comparison_exp
  product_price: numeric_comparison_exp
}

"""
unique or primary key constraints on table "products"
"""
enum products_constraint {
  """unique or primary key constraint"""
  idx_22824_products_pkey
}

"""
input type for incrementing integer column in table "products"
"""
input products_inc_input {
  parent_product_id: bigint
  product_id: bigint
  product_price: numeric
}

"""
input type for inserting data into table "products"
"""
input products_insert_input {
  complaints: complaints_arr_rel_insert_input
  date_product_discontinued: timestamptz
  date_product_first_available: timestamptz
  parent_product_id: bigint
  product_category_code: String
  product_description: String
  product_id: bigint
  product_name: String
  product_price: numeric
}

"""aggregate max on columns"""
type products_max_fields {
  date_product_discontinued: timestamptz
  date_product_first_available: timestamptz
  parent_product_id: bigint
  product_category_code: String
  product_description: String
  product_id: bigint
  product_name: String
  product_price: numeric
}

"""
order by max() on columns of table "products"
"""
input products_max_order_by {
  date_product_discontinued: order_by
  date_product_first_available: order_by
  parent_product_id: order_by
  product_category_code: order_by
  product_description: order_by
  product_id: order_by
  product_name: order_by
  product_price: order_by
}

"""aggregate min on columns"""
type products_min_fields {
  date_product_discontinued: timestamptz
  date_product_first_available: timestamptz
  parent_product_id: bigint
  product_category_code: String
  product_description: String
  product_id: bigint
  product_name: String
  product_price: numeric
}

"""
order by min() on columns of table "products"
"""
input products_min_order_by {
  date_product_discontinued: order_by
  date_product_first_available: order_by
  parent_product_id: order_by
  product_category_code: order_by
  product_description: order_by
  product_id: order_by
  product_name: order_by
  product_price: order_by
}

"""
response of any mutation on the table "products"
"""
type products_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [products!]!
}

"""
input type for inserting object relation for remote table "products"
"""
input products_obj_rel_insert_input {
  data: products_insert_input!
  on_conflict: products_on_conflict
}

"""
on conflict condition type for table "products"
"""
input products_on_conflict {
  constraint: products_constraint!
  update_columns: [products_update_column!]!
  where: products_bool_exp
}

"""
ordering options when selecting data from "products"
"""
input products_order_by {
  complaints_aggregate: complaints_aggregate_order_by
  date_product_discontinued: order_by
  date_product_first_available: order_by
  parent_product_id: order_by
  product_category_code: order_by
  product_description: order_by
  product_id: order_by
  product_name: order_by
  product_price: order_by
}

"""
primary key columns input for table: "products"
"""
input products_pk_columns_input {
  product_id: bigint!
}

"""
select columns of table "products"
"""
enum products_select_column {
  """column name"""
  date_product_discontinued

  """column name"""
  date_product_first_available

  """column name"""
  parent_product_id

  """column name"""
  product_category_code

  """column name"""
  product_description

  """column name"""
  product_id

  """column name"""
  product_name

  """column name"""
  product_price
}

"""
input type for updating data in table "products"
"""
input products_set_input {
  date_product_discontinued: timestamptz
  date_product_first_available: timestamptz
  parent_product_id: bigint
  product_category_code: String
  product_description: String
  product_id: bigint
  product_name: String
  product_price: numeric
}

"""aggregate stddev on columns"""
type products_stddev_fields {
  parent_product_id: Float
  product_id: Float
  product_price: Float
}

"""
order by stddev() on columns of table "products"
"""
input products_stddev_order_by {
  parent_product_id: order_by
  product_id: order_by
  product_price: order_by
}

"""aggregate stddev_pop on columns"""
type products_stddev_pop_fields {
  parent_product_id: Float
  product_id: Float
  product_price: Float
}

"""
order by stddev_pop() on columns of table "products"
"""
input products_stddev_pop_order_by {
  parent_product_id: order_by
  product_id: order_by
  product_price: order_by
}

"""aggregate stddev_samp on columns"""
type products_stddev_samp_fields {
  parent_product_id: Float
  product_id: Float
  product_price: Float
}

"""
order by stddev_samp() on columns of table "products"
"""
input products_stddev_samp_order_by {
  parent_product_id: order_by
  product_id: order_by
  product_price: order_by
}

"""aggregate sum on columns"""
type products_sum_fields {
  parent_product_id: bigint
  product_id: bigint
  product_price: numeric
}

"""
order by sum() on columns of table "products"
"""
input products_sum_order_by {
  parent_product_id: order_by
  product_id: order_by
  product_price: order_by
}

"""
update columns of table "products"
"""
enum products_update_column {
  """column name"""
  date_product_discontinued

  """column name"""
  date_product_first_available

  """column name"""
  parent_product_id

  """column name"""
  product_category_code

  """column name"""
  product_description

  """column name"""
  product_id

  """column name"""
  product_name

  """column name"""
  product_price
}

"""aggregate var_pop on columns"""
type products_var_pop_fields {
  parent_product_id: Float
  product_id: Float
  product_price: Float
}

"""
order by var_pop() on columns of table "products"
"""
input products_var_pop_order_by {
  parent_product_id: order_by
  product_id: order_by
  product_price: order_by
}

"""aggregate var_samp on columns"""
type products_var_samp_fields {
  parent_product_id: Float
  product_id: Float
  product_price: Float
}

"""
order by var_samp() on columns of table "products"
"""
input products_var_samp_order_by {
  parent_product_id: order_by
  product_id: order_by
  product_price: order_by
}

"""aggregate variance on columns"""
type products_variance_fields {
  parent_product_id: Float
  product_id: Float
  product_price: Float
}

"""
order by variance() on columns of table "products"
"""
input products_variance_order_by {
  parent_product_id: order_by
  product_id: order_by
  product_price: order_by
}

"""query root"""
type query_root {
  """
  fetch data from the table: "complaints"
  """
  complaints(
    """distinct select on columns"""
    distinct_on: [complaints_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [complaints_order_by!]

    """filter the rows returned"""
    where: complaints_bool_exp
  ): [complaints!]!

  """
  fetch aggregated fields from the table: "complaints"
  """
  complaints_aggregate(
    """distinct select on columns"""
    distinct_on: [complaints_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [complaints_order_by!]

    """filter the rows returned"""
    where: complaints_bool_exp
  ): complaints_aggregate!

  """
  fetch data from the table: "customers"
  """
  customers(
    """distinct select on columns"""
    distinct_on: [customers_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [customers_order_by!]

    """filter the rows returned"""
    where: customers_bool_exp
  ): [customers!]!

  """
  fetch aggregated fields from the table: "customers"
  """
  customers_aggregate(
    """distinct select on columns"""
    distinct_on: [customers_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [customers_order_by!]

    """filter the rows returned"""
    where: customers_bool_exp
  ): customers_aggregate!

  """fetch data from the table: "customers" using primary key columns"""
  customers_by_pk(customer_id: bigint!): customers

  """
  fetch data from the table: "products"
  """
  products(
    """distinct select on columns"""
    distinct_on: [products_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [products_order_by!]

    """filter the rows returned"""
    where: products_bool_exp
  ): [products!]!

  """
  fetch aggregated fields from the table: "products"
  """
  products_aggregate(
    """distinct select on columns"""
    distinct_on: [products_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [products_order_by!]

    """filter the rows returned"""
    where: products_bool_exp
  ): products_aggregate!

  """fetch data from the table: "products" using primary key columns"""
  products_by_pk(product_id: bigint!): products

  """
  fetch data from the table: "staff"
  """
  staff(
    """distinct select on columns"""
    distinct_on: [staff_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [staff_order_by!]

    """filter the rows returned"""
    where: staff_bool_exp
  ): [staff!]!

  """
  fetch aggregated fields from the table: "staff"
  """
  staff_aggregate(
    """distinct select on columns"""
    distinct_on: [staff_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [staff_order_by!]

    """filter the rows returned"""
    where: staff_bool_exp
  ): staff_aggregate!

  """fetch data from the table: "staff" using primary key columns"""
  staff_by_pk(staff_id: bigint!): staff
}

"""
columns and relationships of "staff"
"""
type staff {
  """An array relationship"""
  complaints(
    """distinct select on columns"""
    distinct_on: [complaints_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [complaints_order_by!]

    """filter the rows returned"""
    where: complaints_bool_exp
  ): [complaints!]!

  """An aggregated array relationship"""
  complaints_aggregate(
    """distinct select on columns"""
    distinct_on: [complaints_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [complaints_order_by!]

    """filter the rows returned"""
    where: complaints_bool_exp
  ): complaints_aggregate!
  email_address: String
  first_name: String
  gender: String
  last_name: String
  phone_number: String
  staff_id: bigint!
}

"""
aggregated selection of "staff"
"""
type staff_aggregate {
  aggregate: staff_aggregate_fields
  nodes: [staff!]!
}

"""
aggregate fields of "staff"
"""
type staff_aggregate_fields {
  avg: staff_avg_fields
  count(columns: [staff_select_column!], distinct: Boolean): Int
  max: staff_max_fields
  min: staff_min_fields
  stddev: staff_stddev_fields
  stddev_pop: staff_stddev_pop_fields
  stddev_samp: staff_stddev_samp_fields
  sum: staff_sum_fields
  var_pop: staff_var_pop_fields
  var_samp: staff_var_samp_fields
  variance: staff_variance_fields
}

"""
order by aggregate values of table "staff"
"""
input staff_aggregate_order_by {
  avg: staff_avg_order_by
  count: order_by
  max: staff_max_order_by
  min: staff_min_order_by
  stddev: staff_stddev_order_by
  stddev_pop: staff_stddev_pop_order_by
  stddev_samp: staff_stddev_samp_order_by
  sum: staff_sum_order_by
  var_pop: staff_var_pop_order_by
  var_samp: staff_var_samp_order_by
  variance: staff_variance_order_by
}

"""
input type for inserting array relation for remote table "staff"
"""
input staff_arr_rel_insert_input {
  data: [staff_insert_input!]!
  on_conflict: staff_on_conflict
}

"""aggregate avg on columns"""
type staff_avg_fields {
  staff_id: Float
}

"""
order by avg() on columns of table "staff"
"""
input staff_avg_order_by {
  staff_id: order_by
}

"""
Boolean expression to filter rows from the table "staff". All fields are combined with a logical 'AND'.
"""
input staff_bool_exp {
  _and: [staff_bool_exp]
  _not: staff_bool_exp
  _or: [staff_bool_exp]
  complaints: complaints_bool_exp
  email_address: String_comparison_exp
  first_name: String_comparison_exp
  gender: String_comparison_exp
  last_name: String_comparison_exp
  phone_number: String_comparison_exp
  staff_id: bigint_comparison_exp
}

"""
unique or primary key constraints on table "staff"
"""
enum staff_constraint {
  """unique or primary key constraint"""
  idx_22812_staff_pkey
}

"""
input type for incrementing integer column in table "staff"
"""
input staff_inc_input {
  staff_id: bigint
}

"""
input type for inserting data into table "staff"
"""
input staff_insert_input {
  complaints: complaints_arr_rel_insert_input
  email_address: String
  first_name: String
  gender: String
  last_name: String
  phone_number: String
  staff_id: bigint
}

"""aggregate max on columns"""
type staff_max_fields {
  email_address: String
  first_name: String
  gender: String
  last_name: String
  phone_number: String
  staff_id: bigint
}

"""
order by max() on columns of table "staff"
"""
input staff_max_order_by {
  email_address: order_by
  first_name: order_by
  gender: order_by
  last_name: order_by
  phone_number: order_by
  staff_id: order_by
}

"""aggregate min on columns"""
type staff_min_fields {
  email_address: String
  first_name: String
  gender: String
  last_name: String
  phone_number: String
  staff_id: bigint
}

"""
order by min() on columns of table "staff"
"""
input staff_min_order_by {
  email_address: order_by
  first_name: order_by
  gender: order_by
  last_name: order_by
  phone_number: order_by
  staff_id: order_by
}

"""
response of any mutation on the table "staff"
"""
type staff_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [staff!]!
}

"""
input type for inserting object relation for remote table "staff"
"""
input staff_obj_rel_insert_input {
  data: staff_insert_input!
  on_conflict: staff_on_conflict
}

"""
on conflict condition type for table "staff"
"""
input staff_on_conflict {
  constraint: staff_constraint!
  update_columns: [staff_update_column!]!
  where: staff_bool_exp
}

"""
ordering options when selecting data from "staff"
"""
input staff_order_by {
  complaints_aggregate: complaints_aggregate_order_by
  email_address: order_by
  first_name: order_by
  gender: order_by
  last_name: order_by
  phone_number: order_by
  staff_id: order_by
}

"""
primary key columns input for table: "staff"
"""
input staff_pk_columns_input {
  staff_id: bigint!
}

"""
select columns of table "staff"
"""
enum staff_select_column {
  """column name"""
  email_address

  """column name"""
  first_name

  """column name"""
  gender

  """column name"""
  last_name

  """column name"""
  phone_number

  """column name"""
  staff_id
}

"""
input type for updating data in table "staff"
"""
input staff_set_input {
  email_address: String
  first_name: String
  gender: String
  last_name: String
  phone_number: String
  staff_id: bigint
}

"""aggregate stddev on columns"""
type staff_stddev_fields {
  staff_id: Float
}

"""
order by stddev() on columns of table "staff"
"""
input staff_stddev_order_by {
  staff_id: order_by
}

"""aggregate stddev_pop on columns"""
type staff_stddev_pop_fields {
  staff_id: Float
}

"""
order by stddev_pop() on columns of table "staff"
"""
input staff_stddev_pop_order_by {
  staff_id: order_by
}

"""aggregate stddev_samp on columns"""
type staff_stddev_samp_fields {
  staff_id: Float
}

"""
order by stddev_samp() on columns of table "staff"
"""
input staff_stddev_samp_order_by {
  staff_id: order_by
}

"""aggregate sum on columns"""
type staff_sum_fields {
  staff_id: bigint
}

"""
order by sum() on columns of table "staff"
"""
input staff_sum_order_by {
  staff_id: order_by
}

"""
update columns of table "staff"
"""
enum staff_update_column {
  """column name"""
  email_address

  """column name"""
  first_name

  """column name"""
  gender

  """column name"""
  last_name

  """column name"""
  phone_number

  """column name"""
  staff_id
}

"""aggregate var_pop on columns"""
type staff_var_pop_fields {
  staff_id: Float
}

"""
order by var_pop() on columns of table "staff"
"""
input staff_var_pop_order_by {
  staff_id: order_by
}

"""aggregate var_samp on columns"""
type staff_var_samp_fields {
  staff_id: Float
}

"""
order by var_samp() on columns of table "staff"
"""
input staff_var_samp_order_by {
  staff_id: order_by
}

"""aggregate variance on columns"""
type staff_variance_fields {
  staff_id: Float
}

"""
order by variance() on columns of table "staff"
"""
input staff_variance_order_by {
  staff_id: order_by
}

"""
expression to compare columns of type String. All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String
  _ilike: String
  _in: [String!]
  _is_null: Boolean
  _like: String
  _lt: String
  _lte: String
  _neq: String
  _nilike: String
  _nin: [String!]
  _nlike: String
  _nsimilar: String
  _similar: String
}

"""subscription root"""
type subscription_root {
  """
  fetch data from the table: "complaints"
  """
  complaints(
    """distinct select on columns"""
    distinct_on: [complaints_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [complaints_order_by!]

    """filter the rows returned"""
    where: complaints_bool_exp
  ): [complaints!]!

  """
  fetch aggregated fields from the table: "complaints"
  """
  complaints_aggregate(
    """distinct select on columns"""
    distinct_on: [complaints_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [complaints_order_by!]

    """filter the rows returned"""
    where: complaints_bool_exp
  ): complaints_aggregate!

  """
  fetch data from the table: "customers"
  """
  customers(
    """distinct select on columns"""
    distinct_on: [customers_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [customers_order_by!]

    """filter the rows returned"""
    where: customers_bool_exp
  ): [customers!]!

  """
  fetch aggregated fields from the table: "customers"
  """
  customers_aggregate(
    """distinct select on columns"""
    distinct_on: [customers_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [customers_order_by!]

    """filter the rows returned"""
    where: customers_bool_exp
  ): customers_aggregate!

  """fetch data from the table: "customers" using primary key columns"""
  customers_by_pk(customer_id: bigint!): customers

  """
  fetch data from the table: "products"
  """
  products(
    """distinct select on columns"""
    distinct_on: [products_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [products_order_by!]

    """filter the rows returned"""
    where: products_bool_exp
  ): [products!]!

  """
  fetch aggregated fields from the table: "products"
  """
  products_aggregate(
    """distinct select on columns"""
    distinct_on: [products_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [products_order_by!]

    """filter the rows returned"""
    where: products_bool_exp
  ): products_aggregate!

  """fetch data from the table: "products" using primary key columns"""
  products_by_pk(product_id: bigint!): products

  """
  fetch data from the table: "staff"
  """
  staff(
    """distinct select on columns"""
    distinct_on: [staff_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [staff_order_by!]

    """filter the rows returned"""
    where: staff_bool_exp
  ): [staff!]!

  """
  fetch aggregated fields from the table: "staff"
  """
  staff_aggregate(
    """distinct select on columns"""
    distinct_on: [staff_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [staff_order_by!]

    """filter the rows returned"""
    where: staff_bool_exp
  ): staff_aggregate!

  """fetch data from the table: "staff" using primary key columns"""
  staff_by_pk(staff_id: bigint!): staff
}

scalar timestamptz

"""
expression to compare columns of type timestamptz. All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}
