schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""
Direct the client to resolve this field locally, either from the cache or local resolvers.
"""
directive @client(
  """
  When true, the client will never use the cache for this value. See
  https://www.apollographql.com/docs/react/essentials/local-state/#forcing-resolvers-with-clientalways-true
  """
  always: Boolean
) on FIELD | FRAGMENT_DEFINITION | INLINE_FRAGMENT

"""
Export this locally resolved field as a variable to be used in the remainder of this query. See
https://www.apollographql.com/docs/react/essentials/local-state/#using-client-fields-as-variables
"""
directive @export(
  """The variable name to export this field as."""
  as: String!
) on FIELD

"""
Specify a custom store key for this result. See
https://www.apollographql.com/docs/react/advanced/caching/#the-connection-directive
"""
directive @connection(
  """Specify the store key."""
  key: String!

  """
  An array of query argument names to include in the generated custom store key.
  """
  filter: [String!]
) on FIELD

"""
columns and relationships of "basketball_match"
"""
type basketball_match {
  acc_home: String
  acc_percent: String
  acc_regular_season: String
  acc_road: String
  all_games: String
  all_games_percent: String
  all_home: String
  all_neutral: String
  all_road: String
  school_id: Int
  team_id: Int
  team_name: String

  """An object relationship"""
  university: university
}

"""
aggregated selection of "basketball_match"
"""
type basketball_match_aggregate {
  aggregate: basketball_match_aggregate_fields
  nodes: [basketball_match!]!
}

"""
aggregate fields of "basketball_match"
"""
type basketball_match_aggregate_fields {
  avg: basketball_match_avg_fields
  count(columns: [basketball_match_select_column!], distinct: Boolean): Int
  max: basketball_match_max_fields
  min: basketball_match_min_fields
  stddev: basketball_match_stddev_fields
  stddev_pop: basketball_match_stddev_pop_fields
  stddev_samp: basketball_match_stddev_samp_fields
  sum: basketball_match_sum_fields
  var_pop: basketball_match_var_pop_fields
  var_samp: basketball_match_var_samp_fields
  variance: basketball_match_variance_fields
}

"""
order by aggregate values of table "basketball_match"
"""
input basketball_match_aggregate_order_by {
  avg: basketball_match_avg_order_by
  count: order_by
  max: basketball_match_max_order_by
  min: basketball_match_min_order_by
  stddev: basketball_match_stddev_order_by
  stddev_pop: basketball_match_stddev_pop_order_by
  stddev_samp: basketball_match_stddev_samp_order_by
  sum: basketball_match_sum_order_by
  var_pop: basketball_match_var_pop_order_by
  var_samp: basketball_match_var_samp_order_by
  variance: basketball_match_variance_order_by
}

"""
input type for inserting array relation for remote table "basketball_match"
"""
input basketball_match_arr_rel_insert_input {
  data: [basketball_match_insert_input!]!
  on_conflict: basketball_match_on_conflict
}

"""aggregate avg on columns"""
type basketball_match_avg_fields {
  school_id: Float
  team_id: Float
}

"""
order by avg() on columns of table "basketball_match"
"""
input basketball_match_avg_order_by {
  school_id: order_by
  team_id: order_by
}

"""
Boolean expression to filter rows from the table "basketball_match". All fields are combined with a logical 'AND'.
"""
input basketball_match_bool_exp {
  _and: [basketball_match_bool_exp]
  _not: basketball_match_bool_exp
  _or: [basketball_match_bool_exp]
  acc_home: String_comparison_exp
  acc_percent: String_comparison_exp
  acc_regular_season: String_comparison_exp
  acc_road: String_comparison_exp
  all_games: String_comparison_exp
  all_games_percent: String_comparison_exp
  all_home: String_comparison_exp
  all_neutral: String_comparison_exp
  all_road: String_comparison_exp
  school_id: Int_comparison_exp
  team_id: Int_comparison_exp
  team_name: String_comparison_exp
  university: university_bool_exp
}

"""
unique or primary key constraints on table "basketball_match"
"""
enum basketball_match_constraint {
  """unique or primary key constraint"""
  idx_25950_sqlite_autoindex_basketball_match_1
}

"""
input type for incrementing integer column in table "basketball_match"
"""
input basketball_match_inc_input {
  school_id: Int
  team_id: Int
}

"""
input type for inserting data into table "basketball_match"
"""
input basketball_match_insert_input {
  acc_home: String
  acc_percent: String
  acc_regular_season: String
  acc_road: String
  all_games: String
  all_games_percent: String
  all_home: String
  all_neutral: String
  all_road: String
  school_id: Int
  team_id: Int
  team_name: String
  university: university_obj_rel_insert_input
}

"""aggregate max on columns"""
type basketball_match_max_fields {
  acc_home: String
  acc_percent: String
  acc_regular_season: String
  acc_road: String
  all_games: String
  all_games_percent: String
  all_home: String
  all_neutral: String
  all_road: String
  school_id: Int
  team_id: Int
  team_name: String
}

"""
order by max() on columns of table "basketball_match"
"""
input basketball_match_max_order_by {
  acc_home: order_by
  acc_percent: order_by
  acc_regular_season: order_by
  acc_road: order_by
  all_games: order_by
  all_games_percent: order_by
  all_home: order_by
  all_neutral: order_by
  all_road: order_by
  school_id: order_by
  team_id: order_by
  team_name: order_by
}

"""aggregate min on columns"""
type basketball_match_min_fields {
  acc_home: String
  acc_percent: String
  acc_regular_season: String
  acc_road: String
  all_games: String
  all_games_percent: String
  all_home: String
  all_neutral: String
  all_road: String
  school_id: Int
  team_id: Int
  team_name: String
}

"""
order by min() on columns of table "basketball_match"
"""
input basketball_match_min_order_by {
  acc_home: order_by
  acc_percent: order_by
  acc_regular_season: order_by
  acc_road: order_by
  all_games: order_by
  all_games_percent: order_by
  all_home: order_by
  all_neutral: order_by
  all_road: order_by
  school_id: order_by
  team_id: order_by
  team_name: order_by
}

"""
response of any mutation on the table "basketball_match"
"""
type basketball_match_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [basketball_match!]!
}

"""
input type for inserting object relation for remote table "basketball_match"
"""
input basketball_match_obj_rel_insert_input {
  data: basketball_match_insert_input!
  on_conflict: basketball_match_on_conflict
}

"""
on conflict condition type for table "basketball_match"
"""
input basketball_match_on_conflict {
  constraint: basketball_match_constraint!
  update_columns: [basketball_match_update_column!]!
  where: basketball_match_bool_exp
}

"""
ordering options when selecting data from "basketball_match"
"""
input basketball_match_order_by {
  acc_home: order_by
  acc_percent: order_by
  acc_regular_season: order_by
  acc_road: order_by
  all_games: order_by
  all_games_percent: order_by
  all_home: order_by
  all_neutral: order_by
  all_road: order_by
  school_id: order_by
  team_id: order_by
  team_name: order_by
  university: university_order_by
}

"""
select columns of table "basketball_match"
"""
enum basketball_match_select_column {
  """column name"""
  acc_home

  """column name"""
  acc_percent

  """column name"""
  acc_regular_season

  """column name"""
  acc_road

  """column name"""
  all_games

  """column name"""
  all_games_percent

  """column name"""
  all_home

  """column name"""
  all_neutral

  """column name"""
  all_road

  """column name"""
  school_id

  """column name"""
  team_id

  """column name"""
  team_name
}

"""
input type for updating data in table "basketball_match"
"""
input basketball_match_set_input {
  acc_home: String
  acc_percent: String
  acc_regular_season: String
  acc_road: String
  all_games: String
  all_games_percent: String
  all_home: String
  all_neutral: String
  all_road: String
  school_id: Int
  team_id: Int
  team_name: String
}

"""aggregate stddev on columns"""
type basketball_match_stddev_fields {
  school_id: Float
  team_id: Float
}

"""
order by stddev() on columns of table "basketball_match"
"""
input basketball_match_stddev_order_by {
  school_id: order_by
  team_id: order_by
}

"""aggregate stddev_pop on columns"""
type basketball_match_stddev_pop_fields {
  school_id: Float
  team_id: Float
}

"""
order by stddev_pop() on columns of table "basketball_match"
"""
input basketball_match_stddev_pop_order_by {
  school_id: order_by
  team_id: order_by
}

"""aggregate stddev_samp on columns"""
type basketball_match_stddev_samp_fields {
  school_id: Float
  team_id: Float
}

"""
order by stddev_samp() on columns of table "basketball_match"
"""
input basketball_match_stddev_samp_order_by {
  school_id: order_by
  team_id: order_by
}

"""aggregate sum on columns"""
type basketball_match_sum_fields {
  school_id: Int
  team_id: Int
}

"""
order by sum() on columns of table "basketball_match"
"""
input basketball_match_sum_order_by {
  school_id: order_by
  team_id: order_by
}

"""
update columns of table "basketball_match"
"""
enum basketball_match_update_column {
  """column name"""
  acc_home

  """column name"""
  acc_percent

  """column name"""
  acc_regular_season

  """column name"""
  acc_road

  """column name"""
  all_games

  """column name"""
  all_games_percent

  """column name"""
  all_home

  """column name"""
  all_neutral

  """column name"""
  all_road

  """column name"""
  school_id

  """column name"""
  team_id

  """column name"""
  team_name
}

"""aggregate var_pop on columns"""
type basketball_match_var_pop_fields {
  school_id: Float
  team_id: Float
}

"""
order by var_pop() on columns of table "basketball_match"
"""
input basketball_match_var_pop_order_by {
  school_id: order_by
  team_id: order_by
}

"""aggregate var_samp on columns"""
type basketball_match_var_samp_fields {
  school_id: Float
  team_id: Float
}

"""
order by var_samp() on columns of table "basketball_match"
"""
input basketball_match_var_samp_order_by {
  school_id: order_by
  team_id: order_by
}

"""aggregate variance on columns"""
type basketball_match_variance_fields {
  school_id: Float
  team_id: Float
}

"""
order by variance() on columns of table "basketball_match"
"""
input basketball_match_variance_order_by {
  school_id: order_by
  team_id: order_by
}

"""
expression to compare columns of type Float. All fields are combined with logical 'AND'.
"""
input Float_comparison_exp {
  _eq: Float
  _gt: Float
  _gte: Float
  _in: [Float!]
  _is_null: Boolean
  _lt: Float
  _lte: Float
  _neq: Float
  _nin: [Float!]
}

"""
expression to compare columns of type Int. All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "basketball_match"
  """
  delete_basketball_match(
    """filter the rows which have to be deleted"""
    where: basketball_match_bool_exp!
  ): basketball_match_mutation_response

  """
  delete data from the table: "university"
  """
  delete_university(
    """filter the rows which have to be deleted"""
    where: university_bool_exp!
  ): university_mutation_response

  """
  insert data into the table: "basketball_match"
  """
  insert_basketball_match(
    """the rows to be inserted"""
    objects: [basketball_match_insert_input!]!

    """on conflict condition"""
    on_conflict: basketball_match_on_conflict
  ): basketball_match_mutation_response

  """
  insert a single row into the table: "basketball_match"
  """
  insert_basketball_match_one(
    """the row to be inserted"""
    object: basketball_match_insert_input!

    """on conflict condition"""
    on_conflict: basketball_match_on_conflict
  ): basketball_match

  """
  insert data into the table: "university"
  """
  insert_university(
    """the rows to be inserted"""
    objects: [university_insert_input!]!

    """on conflict condition"""
    on_conflict: university_on_conflict
  ): university_mutation_response

  """
  insert a single row into the table: "university"
  """
  insert_university_one(
    """the row to be inserted"""
    object: university_insert_input!

    """on conflict condition"""
    on_conflict: university_on_conflict
  ): university

  """
  update data of the table: "basketball_match"
  """
  update_basketball_match(
    """increments the integer columns with given value of the filtered values"""
    _inc: basketball_match_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: basketball_match_set_input

    """filter the rows which have to be updated"""
    where: basketball_match_bool_exp!
  ): basketball_match_mutation_response

  """
  update data of the table: "university"
  """
  update_university(
    """increments the integer columns with given value of the filtered values"""
    _inc: university_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: university_set_input

    """filter the rows which have to be updated"""
    where: university_bool_exp!
  ): university_mutation_response
}

"""column ordering options"""
enum order_by {
  """in the ascending order, nulls last"""
  asc

  """in the ascending order, nulls first"""
  asc_nulls_first

  """in the ascending order, nulls last"""
  asc_nulls_last

  """in the descending order, nulls first"""
  desc

  """in the descending order, nulls first"""
  desc_nulls_first

  """in the descending order, nulls last"""
  desc_nulls_last
}

"""query root"""
type query_root {
  """
  fetch data from the table: "basketball_match"
  """
  basketball_match(
    """distinct select on columns"""
    distinct_on: [basketball_match_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [basketball_match_order_by!]

    """filter the rows returned"""
    where: basketball_match_bool_exp
  ): [basketball_match!]!

  """
  fetch aggregated fields from the table: "basketball_match"
  """
  basketball_match_aggregate(
    """distinct select on columns"""
    distinct_on: [basketball_match_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [basketball_match_order_by!]

    """filter the rows returned"""
    where: basketball_match_bool_exp
  ): basketball_match_aggregate!

  """
  fetch data from the table: "university"
  """
  university(
    """distinct select on columns"""
    distinct_on: [university_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [university_order_by!]

    """filter the rows returned"""
    where: university_bool_exp
  ): [university!]!

  """
  fetch aggregated fields from the table: "university"
  """
  university_aggregate(
    """distinct select on columns"""
    distinct_on: [university_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [university_order_by!]

    """filter the rows returned"""
    where: university_bool_exp
  ): university_aggregate!
}

"""
expression to compare columns of type String. All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String
  _ilike: String
  _in: [String!]
  _is_null: Boolean
  _like: String
  _lt: String
  _lte: String
  _neq: String
  _nilike: String
  _nin: [String!]
  _nlike: String
  _nsimilar: String
  _similar: String
}

"""subscription root"""
type subscription_root {
  """
  fetch data from the table: "basketball_match"
  """
  basketball_match(
    """distinct select on columns"""
    distinct_on: [basketball_match_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [basketball_match_order_by!]

    """filter the rows returned"""
    where: basketball_match_bool_exp
  ): [basketball_match!]!

  """
  fetch aggregated fields from the table: "basketball_match"
  """
  basketball_match_aggregate(
    """distinct select on columns"""
    distinct_on: [basketball_match_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [basketball_match_order_by!]

    """filter the rows returned"""
    where: basketball_match_bool_exp
  ): basketball_match_aggregate!

  """
  fetch data from the table: "university"
  """
  university(
    """distinct select on columns"""
    distinct_on: [university_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [university_order_by!]

    """filter the rows returned"""
    where: university_bool_exp
  ): [university!]!

  """
  fetch aggregated fields from the table: "university"
  """
  university_aggregate(
    """distinct select on columns"""
    distinct_on: [university_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [university_order_by!]

    """filter the rows returned"""
    where: university_bool_exp
  ): university_aggregate!
}

"""
columns and relationships of "university"
"""
type university {
  affiliation: String

  """An array relationship"""
  basketball_matches(
    """distinct select on columns"""
    distinct_on: [basketball_match_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [basketball_match_order_by!]

    """filter the rows returned"""
    where: basketball_match_bool_exp
  ): [basketball_match!]!

  """An aggregated array relationship"""
  basketball_matches_aggregate(
    """distinct select on columns"""
    distinct_on: [basketball_match_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [basketball_match_order_by!]

    """filter the rows returned"""
    where: basketball_match_bool_exp
  ): basketball_match_aggregate!
  enrollment: Float
  founded: Float
  location: String
  nickname: String
  primary_conference: String
  school: String
  school_id: Int
}

"""
aggregated selection of "university"
"""
type university_aggregate {
  aggregate: university_aggregate_fields
  nodes: [university!]!
}

"""
aggregate fields of "university"
"""
type university_aggregate_fields {
  avg: university_avg_fields
  count(columns: [university_select_column!], distinct: Boolean): Int
  max: university_max_fields
  min: university_min_fields
  stddev: university_stddev_fields
  stddev_pop: university_stddev_pop_fields
  stddev_samp: university_stddev_samp_fields
  sum: university_sum_fields
  var_pop: university_var_pop_fields
  var_samp: university_var_samp_fields
  variance: university_variance_fields
}

"""
order by aggregate values of table "university"
"""
input university_aggregate_order_by {
  avg: university_avg_order_by
  count: order_by
  max: university_max_order_by
  min: university_min_order_by
  stddev: university_stddev_order_by
  stddev_pop: university_stddev_pop_order_by
  stddev_samp: university_stddev_samp_order_by
  sum: university_sum_order_by
  var_pop: university_var_pop_order_by
  var_samp: university_var_samp_order_by
  variance: university_variance_order_by
}

"""
input type for inserting array relation for remote table "university"
"""
input university_arr_rel_insert_input {
  data: [university_insert_input!]!
  on_conflict: university_on_conflict
}

"""aggregate avg on columns"""
type university_avg_fields {
  enrollment: Float
  founded: Float
  school_id: Float
}

"""
order by avg() on columns of table "university"
"""
input university_avg_order_by {
  enrollment: order_by
  founded: order_by
  school_id: order_by
}

"""
Boolean expression to filter rows from the table "university". All fields are combined with a logical 'AND'.
"""
input university_bool_exp {
  _and: [university_bool_exp]
  _not: university_bool_exp
  _or: [university_bool_exp]
  affiliation: String_comparison_exp
  basketball_matches: basketball_match_bool_exp
  enrollment: Float_comparison_exp
  founded: Float_comparison_exp
  location: String_comparison_exp
  nickname: String_comparison_exp
  primary_conference: String_comparison_exp
  school: String_comparison_exp
  school_id: Int_comparison_exp
}

"""
unique or primary key constraints on table "university"
"""
enum university_constraint {
  """unique or primary key constraint"""
  idx_25956_sqlite_autoindex_university_1
}

"""
input type for incrementing integer column in table "university"
"""
input university_inc_input {
  enrollment: Float
  founded: Float
  school_id: Int
}

"""
input type for inserting data into table "university"
"""
input university_insert_input {
  affiliation: String
  basketball_matches: basketball_match_arr_rel_insert_input
  enrollment: Float
  founded: Float
  location: String
  nickname: String
  primary_conference: String
  school: String
  school_id: Int
}

"""aggregate max on columns"""
type university_max_fields {
  affiliation: String
  enrollment: Float
  founded: Float
  location: String
  nickname: String
  primary_conference: String
  school: String
  school_id: Int
}

"""
order by max() on columns of table "university"
"""
input university_max_order_by {
  affiliation: order_by
  enrollment: order_by
  founded: order_by
  location: order_by
  nickname: order_by
  primary_conference: order_by
  school: order_by
  school_id: order_by
}

"""aggregate min on columns"""
type university_min_fields {
  affiliation: String
  enrollment: Float
  founded: Float
  location: String
  nickname: String
  primary_conference: String
  school: String
  school_id: Int
}

"""
order by min() on columns of table "university"
"""
input university_min_order_by {
  affiliation: order_by
  enrollment: order_by
  founded: order_by
  location: order_by
  nickname: order_by
  primary_conference: order_by
  school: order_by
  school_id: order_by
}

"""
response of any mutation on the table "university"
"""
type university_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [university!]!
}

"""
input type for inserting object relation for remote table "university"
"""
input university_obj_rel_insert_input {
  data: university_insert_input!
  on_conflict: university_on_conflict
}

"""
on conflict condition type for table "university"
"""
input university_on_conflict {
  constraint: university_constraint!
  update_columns: [university_update_column!]!
  where: university_bool_exp
}

"""
ordering options when selecting data from "university"
"""
input university_order_by {
  affiliation: order_by
  basketball_matches_aggregate: basketball_match_aggregate_order_by
  enrollment: order_by
  founded: order_by
  location: order_by
  nickname: order_by
  primary_conference: order_by
  school: order_by
  school_id: order_by
}

"""
select columns of table "university"
"""
enum university_select_column {
  """column name"""
  affiliation

  """column name"""
  enrollment

  """column name"""
  founded

  """column name"""
  location

  """column name"""
  nickname

  """column name"""
  primary_conference

  """column name"""
  school

  """column name"""
  school_id
}

"""
input type for updating data in table "university"
"""
input university_set_input {
  affiliation: String
  enrollment: Float
  founded: Float
  location: String
  nickname: String
  primary_conference: String
  school: String
  school_id: Int
}

"""aggregate stddev on columns"""
type university_stddev_fields {
  enrollment: Float
  founded: Float
  school_id: Float
}

"""
order by stddev() on columns of table "university"
"""
input university_stddev_order_by {
  enrollment: order_by
  founded: order_by
  school_id: order_by
}

"""aggregate stddev_pop on columns"""
type university_stddev_pop_fields {
  enrollment: Float
  founded: Float
  school_id: Float
}

"""
order by stddev_pop() on columns of table "university"
"""
input university_stddev_pop_order_by {
  enrollment: order_by
  founded: order_by
  school_id: order_by
}

"""aggregate stddev_samp on columns"""
type university_stddev_samp_fields {
  enrollment: Float
  founded: Float
  school_id: Float
}

"""
order by stddev_samp() on columns of table "university"
"""
input university_stddev_samp_order_by {
  enrollment: order_by
  founded: order_by
  school_id: order_by
}

"""aggregate sum on columns"""
type university_sum_fields {
  enrollment: Float
  founded: Float
  school_id: Int
}

"""
order by sum() on columns of table "university"
"""
input university_sum_order_by {
  enrollment: order_by
  founded: order_by
  school_id: order_by
}

"""
update columns of table "university"
"""
enum university_update_column {
  """column name"""
  affiliation

  """column name"""
  enrollment

  """column name"""
  founded

  """column name"""
  location

  """column name"""
  nickname

  """column name"""
  primary_conference

  """column name"""
  school

  """column name"""
  school_id
}

"""aggregate var_pop on columns"""
type university_var_pop_fields {
  enrollment: Float
  founded: Float
  school_id: Float
}

"""
order by var_pop() on columns of table "university"
"""
input university_var_pop_order_by {
  enrollment: order_by
  founded: order_by
  school_id: order_by
}

"""aggregate var_samp on columns"""
type university_var_samp_fields {
  enrollment: Float
  founded: Float
  school_id: Float
}

"""
order by var_samp() on columns of table "university"
"""
input university_var_samp_order_by {
  enrollment: order_by
  founded: order_by
  school_id: order_by
}

"""aggregate variance on columns"""
type university_variance_fields {
  enrollment: Float
  founded: Float
  school_id: Float
}

"""
order by variance() on columns of table "university"
"""
input university_variance_order_by {
  enrollment: order_by
  founded: order_by
  school_id: order_by
}
