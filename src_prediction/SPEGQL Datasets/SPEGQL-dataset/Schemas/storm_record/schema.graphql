schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""
Direct the client to resolve this field locally, either from the cache or local resolvers.
"""
directive @client(
  """
  When true, the client will never use the cache for this value. See
  https://www.apollographql.com/docs/react/essentials/local-state/#forcing-resolvers-with-clientalways-true
  """
  always: Boolean
) on FIELD | FRAGMENT_DEFINITION | INLINE_FRAGMENT

"""
Export this locally resolved field as a variable to be used in the remainder of this query. See
https://www.apollographql.com/docs/react/essentials/local-state/#using-client-fields-as-variables
"""
directive @export(
  """The variable name to export this field as."""
  as: String!
) on FIELD

"""
Specify a custom store key for this result. See
https://www.apollographql.com/docs/react/advanced/caching/#the-connection-directive
"""
directive @connection(
  """Specify the store key."""
  key: String!

  """
  An array of query argument names to include in the generated custom store key.
  """
  filter: [String!]
) on FIELD

"""
columns and relationships of "affected_region"
"""
type affected_region {
  number_city_affected: Float

  """An object relationship"""
  region: region
  region_id: Int

  """An object relationship"""
  storm: storm
  storm_id: Int
}

"""
aggregated selection of "affected_region"
"""
type affected_region_aggregate {
  aggregate: affected_region_aggregate_fields
  nodes: [affected_region!]!
}

"""
aggregate fields of "affected_region"
"""
type affected_region_aggregate_fields {
  avg: affected_region_avg_fields
  count(columns: [affected_region_select_column!], distinct: Boolean): Int
  max: affected_region_max_fields
  min: affected_region_min_fields
  stddev: affected_region_stddev_fields
  stddev_pop: affected_region_stddev_pop_fields
  stddev_samp: affected_region_stddev_samp_fields
  sum: affected_region_sum_fields
  var_pop: affected_region_var_pop_fields
  var_samp: affected_region_var_samp_fields
  variance: affected_region_variance_fields
}

"""
order by aggregate values of table "affected_region"
"""
input affected_region_aggregate_order_by {
  avg: affected_region_avg_order_by
  count: order_by
  max: affected_region_max_order_by
  min: affected_region_min_order_by
  stddev: affected_region_stddev_order_by
  stddev_pop: affected_region_stddev_pop_order_by
  stddev_samp: affected_region_stddev_samp_order_by
  sum: affected_region_sum_order_by
  var_pop: affected_region_var_pop_order_by
  var_samp: affected_region_var_samp_order_by
  variance: affected_region_variance_order_by
}

"""
input type for inserting array relation for remote table "affected_region"
"""
input affected_region_arr_rel_insert_input {
  data: [affected_region_insert_input!]!
  on_conflict: affected_region_on_conflict
}

"""aggregate avg on columns"""
type affected_region_avg_fields {
  number_city_affected: Float
  region_id: Float
  storm_id: Float
}

"""
order by avg() on columns of table "affected_region"
"""
input affected_region_avg_order_by {
  number_city_affected: order_by
  region_id: order_by
  storm_id: order_by
}

"""
Boolean expression to filter rows from the table "affected_region". All fields are combined with a logical 'AND'.
"""
input affected_region_bool_exp {
  _and: [affected_region_bool_exp]
  _not: affected_region_bool_exp
  _or: [affected_region_bool_exp]
  number_city_affected: Float_comparison_exp
  region: region_bool_exp
  region_id: Int_comparison_exp
  storm: storm_bool_exp
  storm_id: Int_comparison_exp
}

"""
unique or primary key constraints on table "affected_region"
"""
enum affected_region_constraint {
  """unique or primary key constraint"""
  idx_17561_sqlite_autoindex_affected_region_1
}

"""
input type for incrementing integer column in table "affected_region"
"""
input affected_region_inc_input {
  number_city_affected: Float
  region_id: Int
  storm_id: Int
}

"""
input type for inserting data into table "affected_region"
"""
input affected_region_insert_input {
  number_city_affected: Float
  region: region_obj_rel_insert_input
  region_id: Int
  storm: storm_obj_rel_insert_input
  storm_id: Int
}

"""aggregate max on columns"""
type affected_region_max_fields {
  number_city_affected: Float
  region_id: Int
  storm_id: Int
}

"""
order by max() on columns of table "affected_region"
"""
input affected_region_max_order_by {
  number_city_affected: order_by
  region_id: order_by
  storm_id: order_by
}

"""aggregate min on columns"""
type affected_region_min_fields {
  number_city_affected: Float
  region_id: Int
  storm_id: Int
}

"""
order by min() on columns of table "affected_region"
"""
input affected_region_min_order_by {
  number_city_affected: order_by
  region_id: order_by
  storm_id: order_by
}

"""
response of any mutation on the table "affected_region"
"""
type affected_region_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [affected_region!]!
}

"""
input type for inserting object relation for remote table "affected_region"
"""
input affected_region_obj_rel_insert_input {
  data: affected_region_insert_input!
  on_conflict: affected_region_on_conflict
}

"""
on conflict condition type for table "affected_region"
"""
input affected_region_on_conflict {
  constraint: affected_region_constraint!
  update_columns: [affected_region_update_column!]!
  where: affected_region_bool_exp
}

"""
ordering options when selecting data from "affected_region"
"""
input affected_region_order_by {
  number_city_affected: order_by
  region: region_order_by
  region_id: order_by
  storm: storm_order_by
  storm_id: order_by
}

"""
select columns of table "affected_region"
"""
enum affected_region_select_column {
  """column name"""
  number_city_affected

  """column name"""
  region_id

  """column name"""
  storm_id
}

"""
input type for updating data in table "affected_region"
"""
input affected_region_set_input {
  number_city_affected: Float
  region_id: Int
  storm_id: Int
}

"""aggregate stddev on columns"""
type affected_region_stddev_fields {
  number_city_affected: Float
  region_id: Float
  storm_id: Float
}

"""
order by stddev() on columns of table "affected_region"
"""
input affected_region_stddev_order_by {
  number_city_affected: order_by
  region_id: order_by
  storm_id: order_by
}

"""aggregate stddev_pop on columns"""
type affected_region_stddev_pop_fields {
  number_city_affected: Float
  region_id: Float
  storm_id: Float
}

"""
order by stddev_pop() on columns of table "affected_region"
"""
input affected_region_stddev_pop_order_by {
  number_city_affected: order_by
  region_id: order_by
  storm_id: order_by
}

"""aggregate stddev_samp on columns"""
type affected_region_stddev_samp_fields {
  number_city_affected: Float
  region_id: Float
  storm_id: Float
}

"""
order by stddev_samp() on columns of table "affected_region"
"""
input affected_region_stddev_samp_order_by {
  number_city_affected: order_by
  region_id: order_by
  storm_id: order_by
}

"""aggregate sum on columns"""
type affected_region_sum_fields {
  number_city_affected: Float
  region_id: Int
  storm_id: Int
}

"""
order by sum() on columns of table "affected_region"
"""
input affected_region_sum_order_by {
  number_city_affected: order_by
  region_id: order_by
  storm_id: order_by
}

"""
update columns of table "affected_region"
"""
enum affected_region_update_column {
  """column name"""
  number_city_affected

  """column name"""
  region_id

  """column name"""
  storm_id
}

"""aggregate var_pop on columns"""
type affected_region_var_pop_fields {
  number_city_affected: Float
  region_id: Float
  storm_id: Float
}

"""
order by var_pop() on columns of table "affected_region"
"""
input affected_region_var_pop_order_by {
  number_city_affected: order_by
  region_id: order_by
  storm_id: order_by
}

"""aggregate var_samp on columns"""
type affected_region_var_samp_fields {
  number_city_affected: Float
  region_id: Float
  storm_id: Float
}

"""
order by var_samp() on columns of table "affected_region"
"""
input affected_region_var_samp_order_by {
  number_city_affected: order_by
  region_id: order_by
  storm_id: order_by
}

"""aggregate variance on columns"""
type affected_region_variance_fields {
  number_city_affected: Float
  region_id: Float
  storm_id: Float
}

"""
order by variance() on columns of table "affected_region"
"""
input affected_region_variance_order_by {
  number_city_affected: order_by
  region_id: order_by
  storm_id: order_by
}

"""
expression to compare columns of type Float. All fields are combined with logical 'AND'.
"""
input Float_comparison_exp {
  _eq: Float
  _gt: Float
  _gte: Float
  _in: [Float!]
  _is_null: Boolean
  _lt: Float
  _lte: Float
  _neq: Float
  _nin: [Float!]
}

"""
expression to compare columns of type Int. All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "affected_region"
  """
  delete_affected_region(
    """filter the rows which have to be deleted"""
    where: affected_region_bool_exp!
  ): affected_region_mutation_response

  """
  delete data from the table: "region"
  """
  delete_region(
    """filter the rows which have to be deleted"""
    where: region_bool_exp!
  ): region_mutation_response

  """
  delete data from the table: "storm"
  """
  delete_storm(
    """filter the rows which have to be deleted"""
    where: storm_bool_exp!
  ): storm_mutation_response

  """
  insert data into the table: "affected_region"
  """
  insert_affected_region(
    """the rows to be inserted"""
    objects: [affected_region_insert_input!]!

    """on conflict condition"""
    on_conflict: affected_region_on_conflict
  ): affected_region_mutation_response

  """
  insert a single row into the table: "affected_region"
  """
  insert_affected_region_one(
    """the row to be inserted"""
    object: affected_region_insert_input!

    """on conflict condition"""
    on_conflict: affected_region_on_conflict
  ): affected_region

  """
  insert data into the table: "region"
  """
  insert_region(
    """the rows to be inserted"""
    objects: [region_insert_input!]!

    """on conflict condition"""
    on_conflict: region_on_conflict
  ): region_mutation_response

  """
  insert a single row into the table: "region"
  """
  insert_region_one(
    """the row to be inserted"""
    object: region_insert_input!

    """on conflict condition"""
    on_conflict: region_on_conflict
  ): region

  """
  insert data into the table: "storm"
  """
  insert_storm(
    """the rows to be inserted"""
    objects: [storm_insert_input!]!

    """on conflict condition"""
    on_conflict: storm_on_conflict
  ): storm_mutation_response

  """
  insert a single row into the table: "storm"
  """
  insert_storm_one(
    """the row to be inserted"""
    object: storm_insert_input!

    """on conflict condition"""
    on_conflict: storm_on_conflict
  ): storm

  """
  update data of the table: "affected_region"
  """
  update_affected_region(
    """increments the integer columns with given value of the filtered values"""
    _inc: affected_region_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: affected_region_set_input

    """filter the rows which have to be updated"""
    where: affected_region_bool_exp!
  ): affected_region_mutation_response

  """
  update data of the table: "region"
  """
  update_region(
    """increments the integer columns with given value of the filtered values"""
    _inc: region_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: region_set_input

    """filter the rows which have to be updated"""
    where: region_bool_exp!
  ): region_mutation_response

  """
  update data of the table: "storm"
  """
  update_storm(
    """increments the integer columns with given value of the filtered values"""
    _inc: storm_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: storm_set_input

    """filter the rows which have to be updated"""
    where: storm_bool_exp!
  ): storm_mutation_response
}

"""column ordering options"""
enum order_by {
  """in the ascending order, nulls last"""
  asc

  """in the ascending order, nulls first"""
  asc_nulls_first

  """in the ascending order, nulls last"""
  asc_nulls_last

  """in the descending order, nulls first"""
  desc

  """in the descending order, nulls first"""
  desc_nulls_first

  """in the descending order, nulls last"""
  desc_nulls_last
}

"""query root"""
type query_root {
  """
  fetch data from the table: "affected_region"
  """
  affected_region(
    """distinct select on columns"""
    distinct_on: [affected_region_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [affected_region_order_by!]

    """filter the rows returned"""
    where: affected_region_bool_exp
  ): [affected_region!]!

  """
  fetch aggregated fields from the table: "affected_region"
  """
  affected_region_aggregate(
    """distinct select on columns"""
    distinct_on: [affected_region_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [affected_region_order_by!]

    """filter the rows returned"""
    where: affected_region_bool_exp
  ): affected_region_aggregate!

  """
  fetch data from the table: "region"
  """
  region(
    """distinct select on columns"""
    distinct_on: [region_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [region_order_by!]

    """filter the rows returned"""
    where: region_bool_exp
  ): [region!]!

  """
  fetch aggregated fields from the table: "region"
  """
  region_aggregate(
    """distinct select on columns"""
    distinct_on: [region_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [region_order_by!]

    """filter the rows returned"""
    where: region_bool_exp
  ): region_aggregate!

  """
  fetch data from the table: "storm"
  """
  storm(
    """distinct select on columns"""
    distinct_on: [storm_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [storm_order_by!]

    """filter the rows returned"""
    where: storm_bool_exp
  ): [storm!]!

  """
  fetch aggregated fields from the table: "storm"
  """
  storm_aggregate(
    """distinct select on columns"""
    distinct_on: [storm_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [storm_order_by!]

    """filter the rows returned"""
    where: storm_bool_exp
  ): storm_aggregate!
}

"""
columns and relationships of "region"
"""
type region {
  """An array relationship"""
  affected_regions(
    """distinct select on columns"""
    distinct_on: [affected_region_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [affected_region_order_by!]

    """filter the rows returned"""
    where: affected_region_bool_exp
  ): [affected_region!]!

  """An aggregated array relationship"""
  affected_regions_aggregate(
    """distinct select on columns"""
    distinct_on: [affected_region_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [affected_region_order_by!]

    """filter the rows returned"""
    where: affected_region_bool_exp
  ): affected_region_aggregate!
  region_code: String
  region_id: Int
  region_name: String
}

"""
aggregated selection of "region"
"""
type region_aggregate {
  aggregate: region_aggregate_fields
  nodes: [region!]!
}

"""
aggregate fields of "region"
"""
type region_aggregate_fields {
  avg: region_avg_fields
  count(columns: [region_select_column!], distinct: Boolean): Int
  max: region_max_fields
  min: region_min_fields
  stddev: region_stddev_fields
  stddev_pop: region_stddev_pop_fields
  stddev_samp: region_stddev_samp_fields
  sum: region_sum_fields
  var_pop: region_var_pop_fields
  var_samp: region_var_samp_fields
  variance: region_variance_fields
}

"""
order by aggregate values of table "region"
"""
input region_aggregate_order_by {
  avg: region_avg_order_by
  count: order_by
  max: region_max_order_by
  min: region_min_order_by
  stddev: region_stddev_order_by
  stddev_pop: region_stddev_pop_order_by
  stddev_samp: region_stddev_samp_order_by
  sum: region_sum_order_by
  var_pop: region_var_pop_order_by
  var_samp: region_var_samp_order_by
  variance: region_variance_order_by
}

"""
input type for inserting array relation for remote table "region"
"""
input region_arr_rel_insert_input {
  data: [region_insert_input!]!
  on_conflict: region_on_conflict
}

"""aggregate avg on columns"""
type region_avg_fields {
  region_id: Float
}

"""
order by avg() on columns of table "region"
"""
input region_avg_order_by {
  region_id: order_by
}

"""
Boolean expression to filter rows from the table "region". All fields are combined with a logical 'AND'.
"""
input region_bool_exp {
  _and: [region_bool_exp]
  _not: region_bool_exp
  _or: [region_bool_exp]
  affected_regions: affected_region_bool_exp
  region_code: String_comparison_exp
  region_id: Int_comparison_exp
  region_name: String_comparison_exp
}

"""
unique or primary key constraints on table "region"
"""
enum region_constraint {
  """unique or primary key constraint"""
  idx_17555_sqlite_autoindex_region_1
}

"""
input type for incrementing integer column in table "region"
"""
input region_inc_input {
  region_id: Int
}

"""
input type for inserting data into table "region"
"""
input region_insert_input {
  affected_regions: affected_region_arr_rel_insert_input
  region_code: String
  region_id: Int
  region_name: String
}

"""aggregate max on columns"""
type region_max_fields {
  region_code: String
  region_id: Int
  region_name: String
}

"""
order by max() on columns of table "region"
"""
input region_max_order_by {
  region_code: order_by
  region_id: order_by
  region_name: order_by
}

"""aggregate min on columns"""
type region_min_fields {
  region_code: String
  region_id: Int
  region_name: String
}

"""
order by min() on columns of table "region"
"""
input region_min_order_by {
  region_code: order_by
  region_id: order_by
  region_name: order_by
}

"""
response of any mutation on the table "region"
"""
type region_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [region!]!
}

"""
input type for inserting object relation for remote table "region"
"""
input region_obj_rel_insert_input {
  data: region_insert_input!
  on_conflict: region_on_conflict
}

"""
on conflict condition type for table "region"
"""
input region_on_conflict {
  constraint: region_constraint!
  update_columns: [region_update_column!]!
  where: region_bool_exp
}

"""
ordering options when selecting data from "region"
"""
input region_order_by {
  affected_regions_aggregate: affected_region_aggregate_order_by
  region_code: order_by
  region_id: order_by
  region_name: order_by
}

"""
select columns of table "region"
"""
enum region_select_column {
  """column name"""
  region_code

  """column name"""
  region_id

  """column name"""
  region_name
}

"""
input type for updating data in table "region"
"""
input region_set_input {
  region_code: String
  region_id: Int
  region_name: String
}

"""aggregate stddev on columns"""
type region_stddev_fields {
  region_id: Float
}

"""
order by stddev() on columns of table "region"
"""
input region_stddev_order_by {
  region_id: order_by
}

"""aggregate stddev_pop on columns"""
type region_stddev_pop_fields {
  region_id: Float
}

"""
order by stddev_pop() on columns of table "region"
"""
input region_stddev_pop_order_by {
  region_id: order_by
}

"""aggregate stddev_samp on columns"""
type region_stddev_samp_fields {
  region_id: Float
}

"""
order by stddev_samp() on columns of table "region"
"""
input region_stddev_samp_order_by {
  region_id: order_by
}

"""aggregate sum on columns"""
type region_sum_fields {
  region_id: Int
}

"""
order by sum() on columns of table "region"
"""
input region_sum_order_by {
  region_id: order_by
}

"""
update columns of table "region"
"""
enum region_update_column {
  """column name"""
  region_code

  """column name"""
  region_id

  """column name"""
  region_name
}

"""aggregate var_pop on columns"""
type region_var_pop_fields {
  region_id: Float
}

"""
order by var_pop() on columns of table "region"
"""
input region_var_pop_order_by {
  region_id: order_by
}

"""aggregate var_samp on columns"""
type region_var_samp_fields {
  region_id: Float
}

"""
order by var_samp() on columns of table "region"
"""
input region_var_samp_order_by {
  region_id: order_by
}

"""aggregate variance on columns"""
type region_variance_fields {
  region_id: Float
}

"""
order by variance() on columns of table "region"
"""
input region_variance_order_by {
  region_id: order_by
}

"""
columns and relationships of "storm"
"""
type storm {
  """An array relationship"""
  affected_regions(
    """distinct select on columns"""
    distinct_on: [affected_region_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [affected_region_order_by!]

    """filter the rows returned"""
    where: affected_region_bool_exp
  ): [affected_region!]!

  """An aggregated array relationship"""
  affected_regions_aggregate(
    """distinct select on columns"""
    distinct_on: [affected_region_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [affected_region_order_by!]

    """filter the rows returned"""
    where: affected_region_bool_exp
  ): affected_region_aggregate!
  damage_millions_usd: Float
  dates_active: String
  max_speed: Int
  name: String
  number_deaths: Int
  storm_id: Int
}

"""
aggregated selection of "storm"
"""
type storm_aggregate {
  aggregate: storm_aggregate_fields
  nodes: [storm!]!
}

"""
aggregate fields of "storm"
"""
type storm_aggregate_fields {
  avg: storm_avg_fields
  count(columns: [storm_select_column!], distinct: Boolean): Int
  max: storm_max_fields
  min: storm_min_fields
  stddev: storm_stddev_fields
  stddev_pop: storm_stddev_pop_fields
  stddev_samp: storm_stddev_samp_fields
  sum: storm_sum_fields
  var_pop: storm_var_pop_fields
  var_samp: storm_var_samp_fields
  variance: storm_variance_fields
}

"""
order by aggregate values of table "storm"
"""
input storm_aggregate_order_by {
  avg: storm_avg_order_by
  count: order_by
  max: storm_max_order_by
  min: storm_min_order_by
  stddev: storm_stddev_order_by
  stddev_pop: storm_stddev_pop_order_by
  stddev_samp: storm_stddev_samp_order_by
  sum: storm_sum_order_by
  var_pop: storm_var_pop_order_by
  var_samp: storm_var_samp_order_by
  variance: storm_variance_order_by
}

"""
input type for inserting array relation for remote table "storm"
"""
input storm_arr_rel_insert_input {
  data: [storm_insert_input!]!
  on_conflict: storm_on_conflict
}

"""aggregate avg on columns"""
type storm_avg_fields {
  damage_millions_usd: Float
  max_speed: Float
  number_deaths: Float
  storm_id: Float
}

"""
order by avg() on columns of table "storm"
"""
input storm_avg_order_by {
  damage_millions_usd: order_by
  max_speed: order_by
  number_deaths: order_by
  storm_id: order_by
}

"""
Boolean expression to filter rows from the table "storm". All fields are combined with a logical 'AND'.
"""
input storm_bool_exp {
  _and: [storm_bool_exp]
  _not: storm_bool_exp
  _or: [storm_bool_exp]
  affected_regions: affected_region_bool_exp
  damage_millions_usd: Float_comparison_exp
  dates_active: String_comparison_exp
  max_speed: Int_comparison_exp
  name: String_comparison_exp
  number_deaths: Int_comparison_exp
  storm_id: Int_comparison_exp
}

"""
unique or primary key constraints on table "storm"
"""
enum storm_constraint {
  """unique or primary key constraint"""
  idx_17549_sqlite_autoindex_storm_1
}

"""
input type for incrementing integer column in table "storm"
"""
input storm_inc_input {
  damage_millions_usd: Float
  max_speed: Int
  number_deaths: Int
  storm_id: Int
}

"""
input type for inserting data into table "storm"
"""
input storm_insert_input {
  affected_regions: affected_region_arr_rel_insert_input
  damage_millions_usd: Float
  dates_active: String
  max_speed: Int
  name: String
  number_deaths: Int
  storm_id: Int
}

"""aggregate max on columns"""
type storm_max_fields {
  damage_millions_usd: Float
  dates_active: String
  max_speed: Int
  name: String
  number_deaths: Int
  storm_id: Int
}

"""
order by max() on columns of table "storm"
"""
input storm_max_order_by {
  damage_millions_usd: order_by
  dates_active: order_by
  max_speed: order_by
  name: order_by
  number_deaths: order_by
  storm_id: order_by
}

"""aggregate min on columns"""
type storm_min_fields {
  damage_millions_usd: Float
  dates_active: String
  max_speed: Int
  name: String
  number_deaths: Int
  storm_id: Int
}

"""
order by min() on columns of table "storm"
"""
input storm_min_order_by {
  damage_millions_usd: order_by
  dates_active: order_by
  max_speed: order_by
  name: order_by
  number_deaths: order_by
  storm_id: order_by
}

"""
response of any mutation on the table "storm"
"""
type storm_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [storm!]!
}

"""
input type for inserting object relation for remote table "storm"
"""
input storm_obj_rel_insert_input {
  data: storm_insert_input!
  on_conflict: storm_on_conflict
}

"""
on conflict condition type for table "storm"
"""
input storm_on_conflict {
  constraint: storm_constraint!
  update_columns: [storm_update_column!]!
  where: storm_bool_exp
}

"""
ordering options when selecting data from "storm"
"""
input storm_order_by {
  affected_regions_aggregate: affected_region_aggregate_order_by
  damage_millions_usd: order_by
  dates_active: order_by
  max_speed: order_by
  name: order_by
  number_deaths: order_by
  storm_id: order_by
}

"""
select columns of table "storm"
"""
enum storm_select_column {
  """column name"""
  damage_millions_usd

  """column name"""
  dates_active

  """column name"""
  max_speed

  """column name"""
  name

  """column name"""
  number_deaths

  """column name"""
  storm_id
}

"""
input type for updating data in table "storm"
"""
input storm_set_input {
  damage_millions_usd: Float
  dates_active: String
  max_speed: Int
  name: String
  number_deaths: Int
  storm_id: Int
}

"""aggregate stddev on columns"""
type storm_stddev_fields {
  damage_millions_usd: Float
  max_speed: Float
  number_deaths: Float
  storm_id: Float
}

"""
order by stddev() on columns of table "storm"
"""
input storm_stddev_order_by {
  damage_millions_usd: order_by
  max_speed: order_by
  number_deaths: order_by
  storm_id: order_by
}

"""aggregate stddev_pop on columns"""
type storm_stddev_pop_fields {
  damage_millions_usd: Float
  max_speed: Float
  number_deaths: Float
  storm_id: Float
}

"""
order by stddev_pop() on columns of table "storm"
"""
input storm_stddev_pop_order_by {
  damage_millions_usd: order_by
  max_speed: order_by
  number_deaths: order_by
  storm_id: order_by
}

"""aggregate stddev_samp on columns"""
type storm_stddev_samp_fields {
  damage_millions_usd: Float
  max_speed: Float
  number_deaths: Float
  storm_id: Float
}

"""
order by stddev_samp() on columns of table "storm"
"""
input storm_stddev_samp_order_by {
  damage_millions_usd: order_by
  max_speed: order_by
  number_deaths: order_by
  storm_id: order_by
}

"""aggregate sum on columns"""
type storm_sum_fields {
  damage_millions_usd: Float
  max_speed: Int
  number_deaths: Int
  storm_id: Int
}

"""
order by sum() on columns of table "storm"
"""
input storm_sum_order_by {
  damage_millions_usd: order_by
  max_speed: order_by
  number_deaths: order_by
  storm_id: order_by
}

"""
update columns of table "storm"
"""
enum storm_update_column {
  """column name"""
  damage_millions_usd

  """column name"""
  dates_active

  """column name"""
  max_speed

  """column name"""
  name

  """column name"""
  number_deaths

  """column name"""
  storm_id
}

"""aggregate var_pop on columns"""
type storm_var_pop_fields {
  damage_millions_usd: Float
  max_speed: Float
  number_deaths: Float
  storm_id: Float
}

"""
order by var_pop() on columns of table "storm"
"""
input storm_var_pop_order_by {
  damage_millions_usd: order_by
  max_speed: order_by
  number_deaths: order_by
  storm_id: order_by
}

"""aggregate var_samp on columns"""
type storm_var_samp_fields {
  damage_millions_usd: Float
  max_speed: Float
  number_deaths: Float
  storm_id: Float
}

"""
order by var_samp() on columns of table "storm"
"""
input storm_var_samp_order_by {
  damage_millions_usd: order_by
  max_speed: order_by
  number_deaths: order_by
  storm_id: order_by
}

"""aggregate variance on columns"""
type storm_variance_fields {
  damage_millions_usd: Float
  max_speed: Float
  number_deaths: Float
  storm_id: Float
}

"""
order by variance() on columns of table "storm"
"""
input storm_variance_order_by {
  damage_millions_usd: order_by
  max_speed: order_by
  number_deaths: order_by
  storm_id: order_by
}

"""
expression to compare columns of type String. All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String
  _ilike: String
  _in: [String!]
  _is_null: Boolean
  _like: String
  _lt: String
  _lte: String
  _neq: String
  _nilike: String
  _nin: [String!]
  _nlike: String
  _nsimilar: String
  _similar: String
}

"""subscription root"""
type subscription_root {
  """
  fetch data from the table: "affected_region"
  """
  affected_region(
    """distinct select on columns"""
    distinct_on: [affected_region_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [affected_region_order_by!]

    """filter the rows returned"""
    where: affected_region_bool_exp
  ): [affected_region!]!

  """
  fetch aggregated fields from the table: "affected_region"
  """
  affected_region_aggregate(
    """distinct select on columns"""
    distinct_on: [affected_region_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [affected_region_order_by!]

    """filter the rows returned"""
    where: affected_region_bool_exp
  ): affected_region_aggregate!

  """
  fetch data from the table: "region"
  """
  region(
    """distinct select on columns"""
    distinct_on: [region_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [region_order_by!]

    """filter the rows returned"""
    where: region_bool_exp
  ): [region!]!

  """
  fetch aggregated fields from the table: "region"
  """
  region_aggregate(
    """distinct select on columns"""
    distinct_on: [region_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [region_order_by!]

    """filter the rows returned"""
    where: region_bool_exp
  ): region_aggregate!

  """
  fetch data from the table: "storm"
  """
  storm(
    """distinct select on columns"""
    distinct_on: [storm_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [storm_order_by!]

    """filter the rows returned"""
    where: storm_bool_exp
  ): [storm!]!

  """
  fetch aggregated fields from the table: "storm"
  """
  storm_aggregate(
    """distinct select on columns"""
    distinct_on: [storm_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [storm_order_by!]

    """filter the rows returned"""
    where: storm_bool_exp
  ): storm_aggregate!
}
