schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""
Direct the client to resolve this field locally, either from the cache or local resolvers.
"""
directive @client(
  """
  When true, the client will never use the cache for this value. See
  https://www.apollographql.com/docs/react/essentials/local-state/#forcing-resolvers-with-clientalways-true
  """
  always: Boolean
) on FIELD | FRAGMENT_DEFINITION | INLINE_FRAGMENT

"""
Export this locally resolved field as a variable to be used in the remainder of this query. See
https://www.apollographql.com/docs/react/essentials/local-state/#using-client-fields-as-variables
"""
directive @export(
  """The variable name to export this field as."""
  as: String!
) on FIELD

"""
Specify a custom store key for this result. See
https://www.apollographql.com/docs/react/advanced/caching/#the-connection-directive
"""
directive @connection(
  """Specify the store key."""
  key: String!

  """
  An array of query argument names to include in the generated custom store key.
  """
  filter: [String!]
) on FIELD

"""
expression to compare columns of type Float. All fields are combined with logical 'AND'.
"""
input Float_comparison_exp {
  _eq: Float
  _gt: Float
  _gte: Float
  _in: [Float!]
  _is_null: Boolean
  _lt: Float
  _lte: Float
  _neq: Float
  _nin: [Float!]
}

"""
columns and relationships of "gymnast"
"""
type gymnast {
  floor_exercise_points: Float
  gymnast_id: Int!
  horizontal_bar_points: Float
  parallel_bars_points: Float

  """An object relationship"""
  person: people!
  pommel_horse_points: Float
  rings_points: Float
  total_points: Float
  vault_points: Float
}

"""
aggregated selection of "gymnast"
"""
type gymnast_aggregate {
  aggregate: gymnast_aggregate_fields
  nodes: [gymnast!]!
}

"""
aggregate fields of "gymnast"
"""
type gymnast_aggregate_fields {
  avg: gymnast_avg_fields
  count(columns: [gymnast_select_column!], distinct: Boolean): Int
  max: gymnast_max_fields
  min: gymnast_min_fields
  stddev: gymnast_stddev_fields
  stddev_pop: gymnast_stddev_pop_fields
  stddev_samp: gymnast_stddev_samp_fields
  sum: gymnast_sum_fields
  var_pop: gymnast_var_pop_fields
  var_samp: gymnast_var_samp_fields
  variance: gymnast_variance_fields
}

"""
order by aggregate values of table "gymnast"
"""
input gymnast_aggregate_order_by {
  avg: gymnast_avg_order_by
  count: order_by
  max: gymnast_max_order_by
  min: gymnast_min_order_by
  stddev: gymnast_stddev_order_by
  stddev_pop: gymnast_stddev_pop_order_by
  stddev_samp: gymnast_stddev_samp_order_by
  sum: gymnast_sum_order_by
  var_pop: gymnast_var_pop_order_by
  var_samp: gymnast_var_samp_order_by
  variance: gymnast_variance_order_by
}

"""
input type for inserting array relation for remote table "gymnast"
"""
input gymnast_arr_rel_insert_input {
  data: [gymnast_insert_input!]!
  on_conflict: gymnast_on_conflict
}

"""aggregate avg on columns"""
type gymnast_avg_fields {
  floor_exercise_points: Float
  gymnast_id: Float
  horizontal_bar_points: Float
  parallel_bars_points: Float
  pommel_horse_points: Float
  rings_points: Float
  total_points: Float
  vault_points: Float
}

"""
order by avg() on columns of table "gymnast"
"""
input gymnast_avg_order_by {
  floor_exercise_points: order_by
  gymnast_id: order_by
  horizontal_bar_points: order_by
  parallel_bars_points: order_by
  pommel_horse_points: order_by
  rings_points: order_by
  total_points: order_by
  vault_points: order_by
}

"""
Boolean expression to filter rows from the table "gymnast". All fields are combined with a logical 'AND'.
"""
input gymnast_bool_exp {
  _and: [gymnast_bool_exp]
  _not: gymnast_bool_exp
  _or: [gymnast_bool_exp]
  floor_exercise_points: Float_comparison_exp
  gymnast_id: Int_comparison_exp
  horizontal_bar_points: Float_comparison_exp
  parallel_bars_points: Float_comparison_exp
  person: people_bool_exp
  pommel_horse_points: Float_comparison_exp
  rings_points: Float_comparison_exp
  total_points: Float_comparison_exp
  vault_points: Float_comparison_exp
}

"""
unique or primary key constraints on table "gymnast"
"""
enum gymnast_constraint {
  """unique or primary key constraint"""
  gymnast_gymnast_id_key

  """unique or primary key constraint"""
  gymnast_pkey

  """unique or primary key constraint"""
  idx_24864_sqlite_autoindex_gymnast_1
}

"""
input type for incrementing integer column in table "gymnast"
"""
input gymnast_inc_input {
  floor_exercise_points: Float
  gymnast_id: Int
  horizontal_bar_points: Float
  parallel_bars_points: Float
  pommel_horse_points: Float
  rings_points: Float
  total_points: Float
  vault_points: Float
}

"""
input type for inserting data into table "gymnast"
"""
input gymnast_insert_input {
  floor_exercise_points: Float
  gymnast_id: Int
  horizontal_bar_points: Float
  parallel_bars_points: Float
  person: people_obj_rel_insert_input
  pommel_horse_points: Float
  rings_points: Float
  total_points: Float
  vault_points: Float
}

"""aggregate max on columns"""
type gymnast_max_fields {
  floor_exercise_points: Float
  gymnast_id: Int
  horizontal_bar_points: Float
  parallel_bars_points: Float
  pommel_horse_points: Float
  rings_points: Float
  total_points: Float
  vault_points: Float
}

"""
order by max() on columns of table "gymnast"
"""
input gymnast_max_order_by {
  floor_exercise_points: order_by
  gymnast_id: order_by
  horizontal_bar_points: order_by
  parallel_bars_points: order_by
  pommel_horse_points: order_by
  rings_points: order_by
  total_points: order_by
  vault_points: order_by
}

"""aggregate min on columns"""
type gymnast_min_fields {
  floor_exercise_points: Float
  gymnast_id: Int
  horizontal_bar_points: Float
  parallel_bars_points: Float
  pommel_horse_points: Float
  rings_points: Float
  total_points: Float
  vault_points: Float
}

"""
order by min() on columns of table "gymnast"
"""
input gymnast_min_order_by {
  floor_exercise_points: order_by
  gymnast_id: order_by
  horizontal_bar_points: order_by
  parallel_bars_points: order_by
  pommel_horse_points: order_by
  rings_points: order_by
  total_points: order_by
  vault_points: order_by
}

"""
response of any mutation on the table "gymnast"
"""
type gymnast_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [gymnast!]!
}

"""
input type for inserting object relation for remote table "gymnast"
"""
input gymnast_obj_rel_insert_input {
  data: gymnast_insert_input!
  on_conflict: gymnast_on_conflict
}

"""
on conflict condition type for table "gymnast"
"""
input gymnast_on_conflict {
  constraint: gymnast_constraint!
  update_columns: [gymnast_update_column!]!
  where: gymnast_bool_exp
}

"""
ordering options when selecting data from "gymnast"
"""
input gymnast_order_by {
  floor_exercise_points: order_by
  gymnast_id: order_by
  horizontal_bar_points: order_by
  parallel_bars_points: order_by
  person: people_order_by
  pommel_horse_points: order_by
  rings_points: order_by
  total_points: order_by
  vault_points: order_by
}

"""
primary key columns input for table: "gymnast"
"""
input gymnast_pk_columns_input {
  gymnast_id: Int!
}

"""
select columns of table "gymnast"
"""
enum gymnast_select_column {
  """column name"""
  floor_exercise_points

  """column name"""
  gymnast_id

  """column name"""
  horizontal_bar_points

  """column name"""
  parallel_bars_points

  """column name"""
  pommel_horse_points

  """column name"""
  rings_points

  """column name"""
  total_points

  """column name"""
  vault_points
}

"""
input type for updating data in table "gymnast"
"""
input gymnast_set_input {
  floor_exercise_points: Float
  gymnast_id: Int
  horizontal_bar_points: Float
  parallel_bars_points: Float
  pommel_horse_points: Float
  rings_points: Float
  total_points: Float
  vault_points: Float
}

"""aggregate stddev on columns"""
type gymnast_stddev_fields {
  floor_exercise_points: Float
  gymnast_id: Float
  horizontal_bar_points: Float
  parallel_bars_points: Float
  pommel_horse_points: Float
  rings_points: Float
  total_points: Float
  vault_points: Float
}

"""
order by stddev() on columns of table "gymnast"
"""
input gymnast_stddev_order_by {
  floor_exercise_points: order_by
  gymnast_id: order_by
  horizontal_bar_points: order_by
  parallel_bars_points: order_by
  pommel_horse_points: order_by
  rings_points: order_by
  total_points: order_by
  vault_points: order_by
}

"""aggregate stddev_pop on columns"""
type gymnast_stddev_pop_fields {
  floor_exercise_points: Float
  gymnast_id: Float
  horizontal_bar_points: Float
  parallel_bars_points: Float
  pommel_horse_points: Float
  rings_points: Float
  total_points: Float
  vault_points: Float
}

"""
order by stddev_pop() on columns of table "gymnast"
"""
input gymnast_stddev_pop_order_by {
  floor_exercise_points: order_by
  gymnast_id: order_by
  horizontal_bar_points: order_by
  parallel_bars_points: order_by
  pommel_horse_points: order_by
  rings_points: order_by
  total_points: order_by
  vault_points: order_by
}

"""aggregate stddev_samp on columns"""
type gymnast_stddev_samp_fields {
  floor_exercise_points: Float
  gymnast_id: Float
  horizontal_bar_points: Float
  parallel_bars_points: Float
  pommel_horse_points: Float
  rings_points: Float
  total_points: Float
  vault_points: Float
}

"""
order by stddev_samp() on columns of table "gymnast"
"""
input gymnast_stddev_samp_order_by {
  floor_exercise_points: order_by
  gymnast_id: order_by
  horizontal_bar_points: order_by
  parallel_bars_points: order_by
  pommel_horse_points: order_by
  rings_points: order_by
  total_points: order_by
  vault_points: order_by
}

"""aggregate sum on columns"""
type gymnast_sum_fields {
  floor_exercise_points: Float
  gymnast_id: Int
  horizontal_bar_points: Float
  parallel_bars_points: Float
  pommel_horse_points: Float
  rings_points: Float
  total_points: Float
  vault_points: Float
}

"""
order by sum() on columns of table "gymnast"
"""
input gymnast_sum_order_by {
  floor_exercise_points: order_by
  gymnast_id: order_by
  horizontal_bar_points: order_by
  parallel_bars_points: order_by
  pommel_horse_points: order_by
  rings_points: order_by
  total_points: order_by
  vault_points: order_by
}

"""
update columns of table "gymnast"
"""
enum gymnast_update_column {
  """column name"""
  floor_exercise_points

  """column name"""
  gymnast_id

  """column name"""
  horizontal_bar_points

  """column name"""
  parallel_bars_points

  """column name"""
  pommel_horse_points

  """column name"""
  rings_points

  """column name"""
  total_points

  """column name"""
  vault_points
}

"""aggregate var_pop on columns"""
type gymnast_var_pop_fields {
  floor_exercise_points: Float
  gymnast_id: Float
  horizontal_bar_points: Float
  parallel_bars_points: Float
  pommel_horse_points: Float
  rings_points: Float
  total_points: Float
  vault_points: Float
}

"""
order by var_pop() on columns of table "gymnast"
"""
input gymnast_var_pop_order_by {
  floor_exercise_points: order_by
  gymnast_id: order_by
  horizontal_bar_points: order_by
  parallel_bars_points: order_by
  pommel_horse_points: order_by
  rings_points: order_by
  total_points: order_by
  vault_points: order_by
}

"""aggregate var_samp on columns"""
type gymnast_var_samp_fields {
  floor_exercise_points: Float
  gymnast_id: Float
  horizontal_bar_points: Float
  parallel_bars_points: Float
  pommel_horse_points: Float
  rings_points: Float
  total_points: Float
  vault_points: Float
}

"""
order by var_samp() on columns of table "gymnast"
"""
input gymnast_var_samp_order_by {
  floor_exercise_points: order_by
  gymnast_id: order_by
  horizontal_bar_points: order_by
  parallel_bars_points: order_by
  pommel_horse_points: order_by
  rings_points: order_by
  total_points: order_by
  vault_points: order_by
}

"""aggregate variance on columns"""
type gymnast_variance_fields {
  floor_exercise_points: Float
  gymnast_id: Float
  horizontal_bar_points: Float
  parallel_bars_points: Float
  pommel_horse_points: Float
  rings_points: Float
  total_points: Float
  vault_points: Float
}

"""
order by variance() on columns of table "gymnast"
"""
input gymnast_variance_order_by {
  floor_exercise_points: order_by
  gymnast_id: order_by
  horizontal_bar_points: order_by
  parallel_bars_points: order_by
  pommel_horse_points: order_by
  rings_points: order_by
  total_points: order_by
  vault_points: order_by
}

"""
expression to compare columns of type Int. All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "gymnast"
  """
  delete_gymnast(
    """filter the rows which have to be deleted"""
    where: gymnast_bool_exp!
  ): gymnast_mutation_response

  """
  delete single row from the table: "gymnast"
  """
  delete_gymnast_by_pk(gymnast_id: Int!): gymnast

  """
  delete data from the table: "people"
  """
  delete_people(
    """filter the rows which have to be deleted"""
    where: people_bool_exp!
  ): people_mutation_response

  """
  delete single row from the table: "people"
  """
  delete_people_by_pk(people_id: Int!): people

  """
  insert data into the table: "gymnast"
  """
  insert_gymnast(
    """the rows to be inserted"""
    objects: [gymnast_insert_input!]!

    """on conflict condition"""
    on_conflict: gymnast_on_conflict
  ): gymnast_mutation_response

  """
  insert a single row into the table: "gymnast"
  """
  insert_gymnast_one(
    """the row to be inserted"""
    object: gymnast_insert_input!

    """on conflict condition"""
    on_conflict: gymnast_on_conflict
  ): gymnast

  """
  insert data into the table: "people"
  """
  insert_people(
    """the rows to be inserted"""
    objects: [people_insert_input!]!

    """on conflict condition"""
    on_conflict: people_on_conflict
  ): people_mutation_response

  """
  insert a single row into the table: "people"
  """
  insert_people_one(
    """the row to be inserted"""
    object: people_insert_input!

    """on conflict condition"""
    on_conflict: people_on_conflict
  ): people

  """
  update data of the table: "gymnast"
  """
  update_gymnast(
    """increments the integer columns with given value of the filtered values"""
    _inc: gymnast_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: gymnast_set_input

    """filter the rows which have to be updated"""
    where: gymnast_bool_exp!
  ): gymnast_mutation_response

  """
  update single row of the table: "gymnast"
  """
  update_gymnast_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: gymnast_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: gymnast_set_input
    pk_columns: gymnast_pk_columns_input!
  ): gymnast

  """
  update data of the table: "people"
  """
  update_people(
    """increments the integer columns with given value of the filtered values"""
    _inc: people_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: people_set_input

    """filter the rows which have to be updated"""
    where: people_bool_exp!
  ): people_mutation_response

  """
  update single row of the table: "people"
  """
  update_people_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: people_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: people_set_input
    pk_columns: people_pk_columns_input!
  ): people
}

"""column ordering options"""
enum order_by {
  """in the ascending order, nulls last"""
  asc

  """in the ascending order, nulls first"""
  asc_nulls_first

  """in the ascending order, nulls last"""
  asc_nulls_last

  """in the descending order, nulls first"""
  desc

  """in the descending order, nulls first"""
  desc_nulls_first

  """in the descending order, nulls last"""
  desc_nulls_last
}

"""
columns and relationships of "people"
"""
type people {
  age: Float

  """An object relationship"""
  gymnast: gymnast
  height: Float
  hometown: String
  name: String
  people_id: Int!
}

"""
aggregated selection of "people"
"""
type people_aggregate {
  aggregate: people_aggregate_fields
  nodes: [people!]!
}

"""
aggregate fields of "people"
"""
type people_aggregate_fields {
  avg: people_avg_fields
  count(columns: [people_select_column!], distinct: Boolean): Int
  max: people_max_fields
  min: people_min_fields
  stddev: people_stddev_fields
  stddev_pop: people_stddev_pop_fields
  stddev_samp: people_stddev_samp_fields
  sum: people_sum_fields
  var_pop: people_var_pop_fields
  var_samp: people_var_samp_fields
  variance: people_variance_fields
}

"""
order by aggregate values of table "people"
"""
input people_aggregate_order_by {
  avg: people_avg_order_by
  count: order_by
  max: people_max_order_by
  min: people_min_order_by
  stddev: people_stddev_order_by
  stddev_pop: people_stddev_pop_order_by
  stddev_samp: people_stddev_samp_order_by
  sum: people_sum_order_by
  var_pop: people_var_pop_order_by
  var_samp: people_var_samp_order_by
  variance: people_variance_order_by
}

"""
input type for inserting array relation for remote table "people"
"""
input people_arr_rel_insert_input {
  data: [people_insert_input!]!
  on_conflict: people_on_conflict
}

"""aggregate avg on columns"""
type people_avg_fields {
  age: Float
  height: Float
  people_id: Float
}

"""
order by avg() on columns of table "people"
"""
input people_avg_order_by {
  age: order_by
  height: order_by
  people_id: order_by
}

"""
Boolean expression to filter rows from the table "people". All fields are combined with a logical 'AND'.
"""
input people_bool_exp {
  _and: [people_bool_exp]
  _not: people_bool_exp
  _or: [people_bool_exp]
  age: Float_comparison_exp
  gymnast: gymnast_bool_exp
  height: Float_comparison_exp
  hometown: String_comparison_exp
  name: String_comparison_exp
  people_id: Int_comparison_exp
}

"""
unique or primary key constraints on table "people"
"""
enum people_constraint {
  """unique or primary key constraint"""
  idx_24867_sqlite_autoindex_people_1

  """unique or primary key constraint"""
  people_people_id_key

  """unique or primary key constraint"""
  people_pkey
}

"""
input type for incrementing integer column in table "people"
"""
input people_inc_input {
  age: Float
  height: Float
  people_id: Int
}

"""
input type for inserting data into table "people"
"""
input people_insert_input {
  age: Float
  gymnast: gymnast_obj_rel_insert_input
  height: Float
  hometown: String
  name: String
  people_id: Int
}

"""aggregate max on columns"""
type people_max_fields {
  age: Float
  height: Float
  hometown: String
  name: String
  people_id: Int
}

"""
order by max() on columns of table "people"
"""
input people_max_order_by {
  age: order_by
  height: order_by
  hometown: order_by
  name: order_by
  people_id: order_by
}

"""aggregate min on columns"""
type people_min_fields {
  age: Float
  height: Float
  hometown: String
  name: String
  people_id: Int
}

"""
order by min() on columns of table "people"
"""
input people_min_order_by {
  age: order_by
  height: order_by
  hometown: order_by
  name: order_by
  people_id: order_by
}

"""
response of any mutation on the table "people"
"""
type people_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [people!]!
}

"""
input type for inserting object relation for remote table "people"
"""
input people_obj_rel_insert_input {
  data: people_insert_input!
  on_conflict: people_on_conflict
}

"""
on conflict condition type for table "people"
"""
input people_on_conflict {
  constraint: people_constraint!
  update_columns: [people_update_column!]!
  where: people_bool_exp
}

"""
ordering options when selecting data from "people"
"""
input people_order_by {
  age: order_by
  gymnast: gymnast_order_by
  height: order_by
  hometown: order_by
  name: order_by
  people_id: order_by
}

"""
primary key columns input for table: "people"
"""
input people_pk_columns_input {
  people_id: Int!
}

"""
select columns of table "people"
"""
enum people_select_column {
  """column name"""
  age

  """column name"""
  height

  """column name"""
  hometown

  """column name"""
  name

  """column name"""
  people_id
}

"""
input type for updating data in table "people"
"""
input people_set_input {
  age: Float
  height: Float
  hometown: String
  name: String
  people_id: Int
}

"""aggregate stddev on columns"""
type people_stddev_fields {
  age: Float
  height: Float
  people_id: Float
}

"""
order by stddev() on columns of table "people"
"""
input people_stddev_order_by {
  age: order_by
  height: order_by
  people_id: order_by
}

"""aggregate stddev_pop on columns"""
type people_stddev_pop_fields {
  age: Float
  height: Float
  people_id: Float
}

"""
order by stddev_pop() on columns of table "people"
"""
input people_stddev_pop_order_by {
  age: order_by
  height: order_by
  people_id: order_by
}

"""aggregate stddev_samp on columns"""
type people_stddev_samp_fields {
  age: Float
  height: Float
  people_id: Float
}

"""
order by stddev_samp() on columns of table "people"
"""
input people_stddev_samp_order_by {
  age: order_by
  height: order_by
  people_id: order_by
}

"""aggregate sum on columns"""
type people_sum_fields {
  age: Float
  height: Float
  people_id: Int
}

"""
order by sum() on columns of table "people"
"""
input people_sum_order_by {
  age: order_by
  height: order_by
  people_id: order_by
}

"""
update columns of table "people"
"""
enum people_update_column {
  """column name"""
  age

  """column name"""
  height

  """column name"""
  hometown

  """column name"""
  name

  """column name"""
  people_id
}

"""aggregate var_pop on columns"""
type people_var_pop_fields {
  age: Float
  height: Float
  people_id: Float
}

"""
order by var_pop() on columns of table "people"
"""
input people_var_pop_order_by {
  age: order_by
  height: order_by
  people_id: order_by
}

"""aggregate var_samp on columns"""
type people_var_samp_fields {
  age: Float
  height: Float
  people_id: Float
}

"""
order by var_samp() on columns of table "people"
"""
input people_var_samp_order_by {
  age: order_by
  height: order_by
  people_id: order_by
}

"""aggregate variance on columns"""
type people_variance_fields {
  age: Float
  height: Float
  people_id: Float
}

"""
order by variance() on columns of table "people"
"""
input people_variance_order_by {
  age: order_by
  height: order_by
  people_id: order_by
}

"""query root"""
type query_root {
  """
  fetch data from the table: "gymnast"
  """
  gymnast(
    """distinct select on columns"""
    distinct_on: [gymnast_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [gymnast_order_by!]

    """filter the rows returned"""
    where: gymnast_bool_exp
  ): [gymnast!]!

  """
  fetch aggregated fields from the table: "gymnast"
  """
  gymnast_aggregate(
    """distinct select on columns"""
    distinct_on: [gymnast_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [gymnast_order_by!]

    """filter the rows returned"""
    where: gymnast_bool_exp
  ): gymnast_aggregate!

  """fetch data from the table: "gymnast" using primary key columns"""
  gymnast_by_pk(gymnast_id: Int!): gymnast

  """
  fetch data from the table: "people"
  """
  people(
    """distinct select on columns"""
    distinct_on: [people_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [people_order_by!]

    """filter the rows returned"""
    where: people_bool_exp
  ): [people!]!

  """
  fetch aggregated fields from the table: "people"
  """
  people_aggregate(
    """distinct select on columns"""
    distinct_on: [people_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [people_order_by!]

    """filter the rows returned"""
    where: people_bool_exp
  ): people_aggregate!

  """fetch data from the table: "people" using primary key columns"""
  people_by_pk(people_id: Int!): people
}

"""
expression to compare columns of type String. All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String
  _ilike: String
  _in: [String!]
  _is_null: Boolean
  _like: String
  _lt: String
  _lte: String
  _neq: String
  _nilike: String
  _nin: [String!]
  _nlike: String
  _nsimilar: String
  _similar: String
}

"""subscription root"""
type subscription_root {
  """
  fetch data from the table: "gymnast"
  """
  gymnast(
    """distinct select on columns"""
    distinct_on: [gymnast_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [gymnast_order_by!]

    """filter the rows returned"""
    where: gymnast_bool_exp
  ): [gymnast!]!

  """
  fetch aggregated fields from the table: "gymnast"
  """
  gymnast_aggregate(
    """distinct select on columns"""
    distinct_on: [gymnast_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [gymnast_order_by!]

    """filter the rows returned"""
    where: gymnast_bool_exp
  ): gymnast_aggregate!

  """fetch data from the table: "gymnast" using primary key columns"""
  gymnast_by_pk(gymnast_id: Int!): gymnast

  """
  fetch data from the table: "people"
  """
  people(
    """distinct select on columns"""
    distinct_on: [people_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [people_order_by!]

    """filter the rows returned"""
    where: people_bool_exp
  ): [people!]!

  """
  fetch aggregated fields from the table: "people"
  """
  people_aggregate(
    """distinct select on columns"""
    distinct_on: [people_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [people_order_by!]

    """filter the rows returned"""
    where: people_bool_exp
  ): people_aggregate!

  """fetch data from the table: "people" using primary key columns"""
  people_by_pk(people_id: Int!): people
}
