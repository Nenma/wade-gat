schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""
Direct the client to resolve this field locally, either from the cache or local resolvers.
"""
directive @client(
  """
  When true, the client will never use the cache for this value. See
  https://www.apollographql.com/docs/react/essentials/local-state/#forcing-resolvers-with-clientalways-true
  """
  always: Boolean
) on FIELD | FRAGMENT_DEFINITION | INLINE_FRAGMENT

"""
Export this locally resolved field as a variable to be used in the remainder of this query. See
https://www.apollographql.com/docs/react/essentials/local-state/#using-client-fields-as-variables
"""
directive @export(
  """The variable name to export this field as."""
  as: String!
) on FIELD

"""
Specify a custom store key for this result. See
https://www.apollographql.com/docs/react/advanced/caching/#the-connection-directive
"""
directive @connection(
  """Specify the store key."""
  key: String!

  """
  An array of query argument names to include in the generated custom store key.
  """
  filter: [String!]
) on FIELD

"""
columns and relationships of "district"
"""
type district {
  city_area: Float
  city_population: Float
  district_id: Int
  district_name: String
  headquartered_city: String

  """An array relationship"""
  store_districts(
    """distinct select on columns"""
    distinct_on: [store_district_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [store_district_order_by!]

    """filter the rows returned"""
    where: store_district_bool_exp
  ): [store_district!]!

  """An aggregated array relationship"""
  store_districts_aggregate(
    """distinct select on columns"""
    distinct_on: [store_district_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [store_district_order_by!]

    """filter the rows returned"""
    where: store_district_bool_exp
  ): store_district_aggregate!
}

"""
aggregated selection of "district"
"""
type district_aggregate {
  aggregate: district_aggregate_fields
  nodes: [district!]!
}

"""
aggregate fields of "district"
"""
type district_aggregate_fields {
  avg: district_avg_fields
  count(columns: [district_select_column!], distinct: Boolean): Int
  max: district_max_fields
  min: district_min_fields
  stddev: district_stddev_fields
  stddev_pop: district_stddev_pop_fields
  stddev_samp: district_stddev_samp_fields
  sum: district_sum_fields
  var_pop: district_var_pop_fields
  var_samp: district_var_samp_fields
  variance: district_variance_fields
}

"""
order by aggregate values of table "district"
"""
input district_aggregate_order_by {
  avg: district_avg_order_by
  count: order_by
  max: district_max_order_by
  min: district_min_order_by
  stddev: district_stddev_order_by
  stddev_pop: district_stddev_pop_order_by
  stddev_samp: district_stddev_samp_order_by
  sum: district_sum_order_by
  var_pop: district_var_pop_order_by
  var_samp: district_var_samp_order_by
  variance: district_variance_order_by
}

"""
input type for inserting array relation for remote table "district"
"""
input district_arr_rel_insert_input {
  data: [district_insert_input!]!
  on_conflict: district_on_conflict
}

"""aggregate avg on columns"""
type district_avg_fields {
  city_area: Float
  city_population: Float
  district_id: Float
}

"""
order by avg() on columns of table "district"
"""
input district_avg_order_by {
  city_area: order_by
  city_population: order_by
  district_id: order_by
}

"""
Boolean expression to filter rows from the table "district". All fields are combined with a logical 'AND'.
"""
input district_bool_exp {
  _and: [district_bool_exp]
  _not: district_bool_exp
  _or: [district_bool_exp]
  city_area: Float_comparison_exp
  city_population: Float_comparison_exp
  district_id: Int_comparison_exp
  district_name: String_comparison_exp
  headquartered_city: String_comparison_exp
  store_districts: store_district_bool_exp
}

"""
unique or primary key constraints on table "district"
"""
enum district_constraint {
  """unique or primary key constraint"""
  idx_18218_sqlite_autoindex_district_1
}

"""
input type for incrementing integer column in table "district"
"""
input district_inc_input {
  city_area: Float
  city_population: Float
  district_id: Int
}

"""
input type for inserting data into table "district"
"""
input district_insert_input {
  city_area: Float
  city_population: Float
  district_id: Int
  district_name: String
  headquartered_city: String
  store_districts: store_district_arr_rel_insert_input
}

"""aggregate max on columns"""
type district_max_fields {
  city_area: Float
  city_population: Float
  district_id: Int
  district_name: String
  headquartered_city: String
}

"""
order by max() on columns of table "district"
"""
input district_max_order_by {
  city_area: order_by
  city_population: order_by
  district_id: order_by
  district_name: order_by
  headquartered_city: order_by
}

"""aggregate min on columns"""
type district_min_fields {
  city_area: Float
  city_population: Float
  district_id: Int
  district_name: String
  headquartered_city: String
}

"""
order by min() on columns of table "district"
"""
input district_min_order_by {
  city_area: order_by
  city_population: order_by
  district_id: order_by
  district_name: order_by
  headquartered_city: order_by
}

"""
response of any mutation on the table "district"
"""
type district_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [district!]!
}

"""
input type for inserting object relation for remote table "district"
"""
input district_obj_rel_insert_input {
  data: district_insert_input!
  on_conflict: district_on_conflict
}

"""
on conflict condition type for table "district"
"""
input district_on_conflict {
  constraint: district_constraint!
  update_columns: [district_update_column!]!
  where: district_bool_exp
}

"""
ordering options when selecting data from "district"
"""
input district_order_by {
  city_area: order_by
  city_population: order_by
  district_id: order_by
  district_name: order_by
  headquartered_city: order_by
  store_districts_aggregate: store_district_aggregate_order_by
}

"""
select columns of table "district"
"""
enum district_select_column {
  """column name"""
  city_area

  """column name"""
  city_population

  """column name"""
  district_id

  """column name"""
  district_name

  """column name"""
  headquartered_city
}

"""
input type for updating data in table "district"
"""
input district_set_input {
  city_area: Float
  city_population: Float
  district_id: Int
  district_name: String
  headquartered_city: String
}

"""aggregate stddev on columns"""
type district_stddev_fields {
  city_area: Float
  city_population: Float
  district_id: Float
}

"""
order by stddev() on columns of table "district"
"""
input district_stddev_order_by {
  city_area: order_by
  city_population: order_by
  district_id: order_by
}

"""aggregate stddev_pop on columns"""
type district_stddev_pop_fields {
  city_area: Float
  city_population: Float
  district_id: Float
}

"""
order by stddev_pop() on columns of table "district"
"""
input district_stddev_pop_order_by {
  city_area: order_by
  city_population: order_by
  district_id: order_by
}

"""aggregate stddev_samp on columns"""
type district_stddev_samp_fields {
  city_area: Float
  city_population: Float
  district_id: Float
}

"""
order by stddev_samp() on columns of table "district"
"""
input district_stddev_samp_order_by {
  city_area: order_by
  city_population: order_by
  district_id: order_by
}

"""aggregate sum on columns"""
type district_sum_fields {
  city_area: Float
  city_population: Float
  district_id: Int
}

"""
order by sum() on columns of table "district"
"""
input district_sum_order_by {
  city_area: order_by
  city_population: order_by
  district_id: order_by
}

"""
update columns of table "district"
"""
enum district_update_column {
  """column name"""
  city_area

  """column name"""
  city_population

  """column name"""
  district_id

  """column name"""
  district_name

  """column name"""
  headquartered_city
}

"""aggregate var_pop on columns"""
type district_var_pop_fields {
  city_area: Float
  city_population: Float
  district_id: Float
}

"""
order by var_pop() on columns of table "district"
"""
input district_var_pop_order_by {
  city_area: order_by
  city_population: order_by
  district_id: order_by
}

"""aggregate var_samp on columns"""
type district_var_samp_fields {
  city_area: Float
  city_population: Float
  district_id: Float
}

"""
order by var_samp() on columns of table "district"
"""
input district_var_samp_order_by {
  city_area: order_by
  city_population: order_by
  district_id: order_by
}

"""aggregate variance on columns"""
type district_variance_fields {
  city_area: Float
  city_population: Float
  district_id: Float
}

"""
order by variance() on columns of table "district"
"""
input district_variance_order_by {
  city_area: order_by
  city_population: order_by
  district_id: order_by
}

"""
expression to compare columns of type Float. All fields are combined with logical 'AND'.
"""
input Float_comparison_exp {
  _eq: Float
  _gt: Float
  _gte: Float
  _in: [Float!]
  _is_null: Boolean
  _lt: Float
  _lte: Float
  _neq: Float
  _nin: [Float!]
}

"""
expression to compare columns of type Int. All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "district"
  """
  delete_district(
    """filter the rows which have to be deleted"""
    where: district_bool_exp!
  ): district_mutation_response

  """
  delete data from the table: "product"
  """
  delete_product(
    """filter the rows which have to be deleted"""
    where: product_bool_exp!
  ): product_mutation_response

  """
  delete single row from the table: "product"
  """
  delete_product_by_pk(product_id: Int!): product

  """
  delete data from the table: "store"
  """
  delete_store(
    """filter the rows which have to be deleted"""
    where: store_bool_exp!
  ): store_mutation_response

  """
  delete data from the table: "store_district"
  """
  delete_store_district(
    """filter the rows which have to be deleted"""
    where: store_district_bool_exp!
  ): store_district_mutation_response

  """
  delete data from the table: "store_product"
  """
  delete_store_product(
    """filter the rows which have to be deleted"""
    where: store_product_bool_exp!
  ): store_product_mutation_response

  """
  insert data into the table: "district"
  """
  insert_district(
    """the rows to be inserted"""
    objects: [district_insert_input!]!

    """on conflict condition"""
    on_conflict: district_on_conflict
  ): district_mutation_response

  """
  insert a single row into the table: "district"
  """
  insert_district_one(
    """the row to be inserted"""
    object: district_insert_input!

    """on conflict condition"""
    on_conflict: district_on_conflict
  ): district

  """
  insert data into the table: "product"
  """
  insert_product(
    """the rows to be inserted"""
    objects: [product_insert_input!]!

    """on conflict condition"""
    on_conflict: product_on_conflict
  ): product_mutation_response

  """
  insert a single row into the table: "product"
  """
  insert_product_one(
    """the row to be inserted"""
    object: product_insert_input!

    """on conflict condition"""
    on_conflict: product_on_conflict
  ): product

  """
  insert data into the table: "store"
  """
  insert_store(
    """the rows to be inserted"""
    objects: [store_insert_input!]!

    """on conflict condition"""
    on_conflict: store_on_conflict
  ): store_mutation_response

  """
  insert data into the table: "store_district"
  """
  insert_store_district(
    """the rows to be inserted"""
    objects: [store_district_insert_input!]!

    """on conflict condition"""
    on_conflict: store_district_on_conflict
  ): store_district_mutation_response

  """
  insert a single row into the table: "store_district"
  """
  insert_store_district_one(
    """the row to be inserted"""
    object: store_district_insert_input!

    """on conflict condition"""
    on_conflict: store_district_on_conflict
  ): store_district

  """
  insert a single row into the table: "store"
  """
  insert_store_one(
    """the row to be inserted"""
    object: store_insert_input!

    """on conflict condition"""
    on_conflict: store_on_conflict
  ): store

  """
  insert data into the table: "store_product"
  """
  insert_store_product(
    """the rows to be inserted"""
    objects: [store_product_insert_input!]!

    """on conflict condition"""
    on_conflict: store_product_on_conflict
  ): store_product_mutation_response

  """
  insert a single row into the table: "store_product"
  """
  insert_store_product_one(
    """the row to be inserted"""
    object: store_product_insert_input!

    """on conflict condition"""
    on_conflict: store_product_on_conflict
  ): store_product

  """
  update data of the table: "district"
  """
  update_district(
    """increments the integer columns with given value of the filtered values"""
    _inc: district_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: district_set_input

    """filter the rows which have to be updated"""
    where: district_bool_exp!
  ): district_mutation_response

  """
  update data of the table: "product"
  """
  update_product(
    """increments the integer columns with given value of the filtered values"""
    _inc: product_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: product_set_input

    """filter the rows which have to be updated"""
    where: product_bool_exp!
  ): product_mutation_response

  """
  update single row of the table: "product"
  """
  update_product_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: product_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: product_set_input
    pk_columns: product_pk_columns_input!
  ): product

  """
  update data of the table: "store"
  """
  update_store(
    """increments the integer columns with given value of the filtered values"""
    _inc: store_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: store_set_input

    """filter the rows which have to be updated"""
    where: store_bool_exp!
  ): store_mutation_response

  """
  update data of the table: "store_district"
  """
  update_store_district(
    """increments the integer columns with given value of the filtered values"""
    _inc: store_district_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: store_district_set_input

    """filter the rows which have to be updated"""
    where: store_district_bool_exp!
  ): store_district_mutation_response

  """
  update data of the table: "store_product"
  """
  update_store_product(
    """increments the integer columns with given value of the filtered values"""
    _inc: store_product_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: store_product_set_input

    """filter the rows which have to be updated"""
    where: store_product_bool_exp!
  ): store_product_mutation_response
}

"""column ordering options"""
enum order_by {
  """in the ascending order, nulls last"""
  asc

  """in the ascending order, nulls first"""
  asc_nulls_first

  """in the ascending order, nulls last"""
  asc_nulls_last

  """in the descending order, nulls first"""
  desc

  """in the descending order, nulls first"""
  desc_nulls_first

  """in the descending order, nulls last"""
  desc_nulls_last
}

"""
columns and relationships of "product"
"""
type product {
  dimensions: String
  dpi: Float
  interface: String
  max_page_size: String
  pages_per_minute_color: Float
  product: String
  product_id: Int!

  """An array relationship"""
  store_products(
    """distinct select on columns"""
    distinct_on: [store_product_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [store_product_order_by!]

    """filter the rows returned"""
    where: store_product_bool_exp
  ): [store_product!]!

  """An aggregated array relationship"""
  store_products_aggregate(
    """distinct select on columns"""
    distinct_on: [store_product_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [store_product_order_by!]

    """filter the rows returned"""
    where: store_product_bool_exp
  ): store_product_aggregate!
}

"""
aggregated selection of "product"
"""
type product_aggregate {
  aggregate: product_aggregate_fields
  nodes: [product!]!
}

"""
aggregate fields of "product"
"""
type product_aggregate_fields {
  avg: product_avg_fields
  count(columns: [product_select_column!], distinct: Boolean): Int
  max: product_max_fields
  min: product_min_fields
  stddev: product_stddev_fields
  stddev_pop: product_stddev_pop_fields
  stddev_samp: product_stddev_samp_fields
  sum: product_sum_fields
  var_pop: product_var_pop_fields
  var_samp: product_var_samp_fields
  variance: product_variance_fields
}

"""
order by aggregate values of table "product"
"""
input product_aggregate_order_by {
  avg: product_avg_order_by
  count: order_by
  max: product_max_order_by
  min: product_min_order_by
  stddev: product_stddev_order_by
  stddev_pop: product_stddev_pop_order_by
  stddev_samp: product_stddev_samp_order_by
  sum: product_sum_order_by
  var_pop: product_var_pop_order_by
  var_samp: product_var_samp_order_by
  variance: product_variance_order_by
}

"""
input type for inserting array relation for remote table "product"
"""
input product_arr_rel_insert_input {
  data: [product_insert_input!]!
  on_conflict: product_on_conflict
}

"""aggregate avg on columns"""
type product_avg_fields {
  dpi: Float
  pages_per_minute_color: Float
  product_id: Float
}

"""
order by avg() on columns of table "product"
"""
input product_avg_order_by {
  dpi: order_by
  pages_per_minute_color: order_by
  product_id: order_by
}

"""
Boolean expression to filter rows from the table "product". All fields are combined with a logical 'AND'.
"""
input product_bool_exp {
  _and: [product_bool_exp]
  _not: product_bool_exp
  _or: [product_bool_exp]
  dimensions: String_comparison_exp
  dpi: Float_comparison_exp
  interface: String_comparison_exp
  max_page_size: String_comparison_exp
  pages_per_minute_color: Float_comparison_exp
  product: String_comparison_exp
  product_id: Int_comparison_exp
  store_products: store_product_bool_exp
}

"""
unique or primary key constraints on table "product"
"""
enum product_constraint {
  """unique or primary key constraint"""
  idx_18206_sqlite_autoindex_product_1
}

"""
input type for incrementing integer column in table "product"
"""
input product_inc_input {
  dpi: Float
  pages_per_minute_color: Float
  product_id: Int
}

"""
input type for inserting data into table "product"
"""
input product_insert_input {
  dimensions: String
  dpi: Float
  interface: String
  max_page_size: String
  pages_per_minute_color: Float
  product: String
  product_id: Int
  store_products: store_product_arr_rel_insert_input
}

"""aggregate max on columns"""
type product_max_fields {
  dimensions: String
  dpi: Float
  interface: String
  max_page_size: String
  pages_per_minute_color: Float
  product: String
  product_id: Int
}

"""
order by max() on columns of table "product"
"""
input product_max_order_by {
  dimensions: order_by
  dpi: order_by
  interface: order_by
  max_page_size: order_by
  pages_per_minute_color: order_by
  product: order_by
  product_id: order_by
}

"""aggregate min on columns"""
type product_min_fields {
  dimensions: String
  dpi: Float
  interface: String
  max_page_size: String
  pages_per_minute_color: Float
  product: String
  product_id: Int
}

"""
order by min() on columns of table "product"
"""
input product_min_order_by {
  dimensions: order_by
  dpi: order_by
  interface: order_by
  max_page_size: order_by
  pages_per_minute_color: order_by
  product: order_by
  product_id: order_by
}

"""
response of any mutation on the table "product"
"""
type product_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [product!]!
}

"""
input type for inserting object relation for remote table "product"
"""
input product_obj_rel_insert_input {
  data: product_insert_input!
  on_conflict: product_on_conflict
}

"""
on conflict condition type for table "product"
"""
input product_on_conflict {
  constraint: product_constraint!
  update_columns: [product_update_column!]!
  where: product_bool_exp
}

"""
ordering options when selecting data from "product"
"""
input product_order_by {
  dimensions: order_by
  dpi: order_by
  interface: order_by
  max_page_size: order_by
  pages_per_minute_color: order_by
  product: order_by
  product_id: order_by
  store_products_aggregate: store_product_aggregate_order_by
}

"""
primary key columns input for table: "product"
"""
input product_pk_columns_input {
  product_id: Int!
}

"""
select columns of table "product"
"""
enum product_select_column {
  """column name"""
  dimensions

  """column name"""
  dpi

  """column name"""
  interface

  """column name"""
  max_page_size

  """column name"""
  pages_per_minute_color

  """column name"""
  product

  """column name"""
  product_id
}

"""
input type for updating data in table "product"
"""
input product_set_input {
  dimensions: String
  dpi: Float
  interface: String
  max_page_size: String
  pages_per_minute_color: Float
  product: String
  product_id: Int
}

"""aggregate stddev on columns"""
type product_stddev_fields {
  dpi: Float
  pages_per_minute_color: Float
  product_id: Float
}

"""
order by stddev() on columns of table "product"
"""
input product_stddev_order_by {
  dpi: order_by
  pages_per_minute_color: order_by
  product_id: order_by
}

"""aggregate stddev_pop on columns"""
type product_stddev_pop_fields {
  dpi: Float
  pages_per_minute_color: Float
  product_id: Float
}

"""
order by stddev_pop() on columns of table "product"
"""
input product_stddev_pop_order_by {
  dpi: order_by
  pages_per_minute_color: order_by
  product_id: order_by
}

"""aggregate stddev_samp on columns"""
type product_stddev_samp_fields {
  dpi: Float
  pages_per_minute_color: Float
  product_id: Float
}

"""
order by stddev_samp() on columns of table "product"
"""
input product_stddev_samp_order_by {
  dpi: order_by
  pages_per_minute_color: order_by
  product_id: order_by
}

"""aggregate sum on columns"""
type product_sum_fields {
  dpi: Float
  pages_per_minute_color: Float
  product_id: Int
}

"""
order by sum() on columns of table "product"
"""
input product_sum_order_by {
  dpi: order_by
  pages_per_minute_color: order_by
  product_id: order_by
}

"""
update columns of table "product"
"""
enum product_update_column {
  """column name"""
  dimensions

  """column name"""
  dpi

  """column name"""
  interface

  """column name"""
  max_page_size

  """column name"""
  pages_per_minute_color

  """column name"""
  product

  """column name"""
  product_id
}

"""aggregate var_pop on columns"""
type product_var_pop_fields {
  dpi: Float
  pages_per_minute_color: Float
  product_id: Float
}

"""
order by var_pop() on columns of table "product"
"""
input product_var_pop_order_by {
  dpi: order_by
  pages_per_minute_color: order_by
  product_id: order_by
}

"""aggregate var_samp on columns"""
type product_var_samp_fields {
  dpi: Float
  pages_per_minute_color: Float
  product_id: Float
}

"""
order by var_samp() on columns of table "product"
"""
input product_var_samp_order_by {
  dpi: order_by
  pages_per_minute_color: order_by
  product_id: order_by
}

"""aggregate variance on columns"""
type product_variance_fields {
  dpi: Float
  pages_per_minute_color: Float
  product_id: Float
}

"""
order by variance() on columns of table "product"
"""
input product_variance_order_by {
  dpi: order_by
  pages_per_minute_color: order_by
  product_id: order_by
}

"""query root"""
type query_root {
  """
  fetch data from the table: "district"
  """
  district(
    """distinct select on columns"""
    distinct_on: [district_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [district_order_by!]

    """filter the rows returned"""
    where: district_bool_exp
  ): [district!]!

  """
  fetch aggregated fields from the table: "district"
  """
  district_aggregate(
    """distinct select on columns"""
    distinct_on: [district_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [district_order_by!]

    """filter the rows returned"""
    where: district_bool_exp
  ): district_aggregate!

  """
  fetch data from the table: "product"
  """
  product(
    """distinct select on columns"""
    distinct_on: [product_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [product_order_by!]

    """filter the rows returned"""
    where: product_bool_exp
  ): [product!]!

  """
  fetch aggregated fields from the table: "product"
  """
  product_aggregate(
    """distinct select on columns"""
    distinct_on: [product_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [product_order_by!]

    """filter the rows returned"""
    where: product_bool_exp
  ): product_aggregate!

  """fetch data from the table: "product" using primary key columns"""
  product_by_pk(product_id: Int!): product

  """
  fetch data from the table: "store"
  """
  store(
    """distinct select on columns"""
    distinct_on: [store_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [store_order_by!]

    """filter the rows returned"""
    where: store_bool_exp
  ): [store!]!

  """
  fetch aggregated fields from the table: "store"
  """
  store_aggregate(
    """distinct select on columns"""
    distinct_on: [store_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [store_order_by!]

    """filter the rows returned"""
    where: store_bool_exp
  ): store_aggregate!

  """
  fetch data from the table: "store_district"
  """
  store_district(
    """distinct select on columns"""
    distinct_on: [store_district_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [store_district_order_by!]

    """filter the rows returned"""
    where: store_district_bool_exp
  ): [store_district!]!

  """
  fetch aggregated fields from the table: "store_district"
  """
  store_district_aggregate(
    """distinct select on columns"""
    distinct_on: [store_district_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [store_district_order_by!]

    """filter the rows returned"""
    where: store_district_bool_exp
  ): store_district_aggregate!

  """
  fetch data from the table: "store_product"
  """
  store_product(
    """distinct select on columns"""
    distinct_on: [store_product_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [store_product_order_by!]

    """filter the rows returned"""
    where: store_product_bool_exp
  ): [store_product!]!

  """
  fetch aggregated fields from the table: "store_product"
  """
  store_product_aggregate(
    """distinct select on columns"""
    distinct_on: [store_product_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [store_product_order_by!]

    """filter the rows returned"""
    where: store_product_bool_exp
  ): store_product_aggregate!
}

"""
columns and relationships of "store"
"""
type store {
  area_size: Float
  number_of_product_category: Float
  ranking: Int

  """An array relationship"""
  store_districts(
    """distinct select on columns"""
    distinct_on: [store_district_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [store_district_order_by!]

    """filter the rows returned"""
    where: store_district_bool_exp
  ): [store_district!]!

  """An aggregated array relationship"""
  store_districts_aggregate(
    """distinct select on columns"""
    distinct_on: [store_district_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [store_district_order_by!]

    """filter the rows returned"""
    where: store_district_bool_exp
  ): store_district_aggregate!
  store_id: Int
  store_name: String

  """An array relationship"""
  store_products(
    """distinct select on columns"""
    distinct_on: [store_product_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [store_product_order_by!]

    """filter the rows returned"""
    where: store_product_bool_exp
  ): [store_product!]!

  """An aggregated array relationship"""
  store_products_aggregate(
    """distinct select on columns"""
    distinct_on: [store_product_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [store_product_order_by!]

    """filter the rows returned"""
    where: store_product_bool_exp
  ): store_product_aggregate!
  type: String
}

"""
aggregated selection of "store"
"""
type store_aggregate {
  aggregate: store_aggregate_fields
  nodes: [store!]!
}

"""
aggregate fields of "store"
"""
type store_aggregate_fields {
  avg: store_avg_fields
  count(columns: [store_select_column!], distinct: Boolean): Int
  max: store_max_fields
  min: store_min_fields
  stddev: store_stddev_fields
  stddev_pop: store_stddev_pop_fields
  stddev_samp: store_stddev_samp_fields
  sum: store_sum_fields
  var_pop: store_var_pop_fields
  var_samp: store_var_samp_fields
  variance: store_variance_fields
}

"""
order by aggregate values of table "store"
"""
input store_aggregate_order_by {
  avg: store_avg_order_by
  count: order_by
  max: store_max_order_by
  min: store_min_order_by
  stddev: store_stddev_order_by
  stddev_pop: store_stddev_pop_order_by
  stddev_samp: store_stddev_samp_order_by
  sum: store_sum_order_by
  var_pop: store_var_pop_order_by
  var_samp: store_var_samp_order_by
  variance: store_variance_order_by
}

"""
input type for inserting array relation for remote table "store"
"""
input store_arr_rel_insert_input {
  data: [store_insert_input!]!
  on_conflict: store_on_conflict
}

"""aggregate avg on columns"""
type store_avg_fields {
  area_size: Float
  number_of_product_category: Float
  ranking: Float
  store_id: Float
}

"""
order by avg() on columns of table "store"
"""
input store_avg_order_by {
  area_size: order_by
  number_of_product_category: order_by
  ranking: order_by
  store_id: order_by
}

"""
Boolean expression to filter rows from the table "store". All fields are combined with a logical 'AND'.
"""
input store_bool_exp {
  _and: [store_bool_exp]
  _not: store_bool_exp
  _or: [store_bool_exp]
  area_size: Float_comparison_exp
  number_of_product_category: Float_comparison_exp
  ranking: Int_comparison_exp
  store_districts: store_district_bool_exp
  store_id: Int_comparison_exp
  store_name: String_comparison_exp
  store_products: store_product_bool_exp
  type: String_comparison_exp
}

"""
unique or primary key constraints on table "store"
"""
enum store_constraint {
  """unique or primary key constraint"""
  idx_18212_sqlite_autoindex_store_1
}

"""
columns and relationships of "store_district"
"""
type store_district {
  """An object relationship"""
  district: district
  district_id: Int

  """An object relationship"""
  store: store
  store_id: Int
}

"""
aggregated selection of "store_district"
"""
type store_district_aggregate {
  aggregate: store_district_aggregate_fields
  nodes: [store_district!]!
}

"""
aggregate fields of "store_district"
"""
type store_district_aggregate_fields {
  avg: store_district_avg_fields
  count(columns: [store_district_select_column!], distinct: Boolean): Int
  max: store_district_max_fields
  min: store_district_min_fields
  stddev: store_district_stddev_fields
  stddev_pop: store_district_stddev_pop_fields
  stddev_samp: store_district_stddev_samp_fields
  sum: store_district_sum_fields
  var_pop: store_district_var_pop_fields
  var_samp: store_district_var_samp_fields
  variance: store_district_variance_fields
}

"""
order by aggregate values of table "store_district"
"""
input store_district_aggregate_order_by {
  avg: store_district_avg_order_by
  count: order_by
  max: store_district_max_order_by
  min: store_district_min_order_by
  stddev: store_district_stddev_order_by
  stddev_pop: store_district_stddev_pop_order_by
  stddev_samp: store_district_stddev_samp_order_by
  sum: store_district_sum_order_by
  var_pop: store_district_var_pop_order_by
  var_samp: store_district_var_samp_order_by
  variance: store_district_variance_order_by
}

"""
input type for inserting array relation for remote table "store_district"
"""
input store_district_arr_rel_insert_input {
  data: [store_district_insert_input!]!
  on_conflict: store_district_on_conflict
}

"""aggregate avg on columns"""
type store_district_avg_fields {
  district_id: Float
  store_id: Float
}

"""
order by avg() on columns of table "store_district"
"""
input store_district_avg_order_by {
  district_id: order_by
  store_id: order_by
}

"""
Boolean expression to filter rows from the table "store_district". All fields are combined with a logical 'AND'.
"""
input store_district_bool_exp {
  _and: [store_district_bool_exp]
  _not: store_district_bool_exp
  _or: [store_district_bool_exp]
  district: district_bool_exp
  district_id: Int_comparison_exp
  store: store_bool_exp
  store_id: Int_comparison_exp
}

"""
unique or primary key constraints on table "store_district"
"""
enum store_district_constraint {
  """unique or primary key constraint"""
  idx_18227_sqlite_autoindex_store_district_1
}

"""
input type for incrementing integer column in table "store_district"
"""
input store_district_inc_input {
  district_id: Int
  store_id: Int
}

"""
input type for inserting data into table "store_district"
"""
input store_district_insert_input {
  district: district_obj_rel_insert_input
  district_id: Int
  store: store_obj_rel_insert_input
  store_id: Int
}

"""aggregate max on columns"""
type store_district_max_fields {
  district_id: Int
  store_id: Int
}

"""
order by max() on columns of table "store_district"
"""
input store_district_max_order_by {
  district_id: order_by
  store_id: order_by
}

"""aggregate min on columns"""
type store_district_min_fields {
  district_id: Int
  store_id: Int
}

"""
order by min() on columns of table "store_district"
"""
input store_district_min_order_by {
  district_id: order_by
  store_id: order_by
}

"""
response of any mutation on the table "store_district"
"""
type store_district_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [store_district!]!
}

"""
input type for inserting object relation for remote table "store_district"
"""
input store_district_obj_rel_insert_input {
  data: store_district_insert_input!
  on_conflict: store_district_on_conflict
}

"""
on conflict condition type for table "store_district"
"""
input store_district_on_conflict {
  constraint: store_district_constraint!
  update_columns: [store_district_update_column!]!
  where: store_district_bool_exp
}

"""
ordering options when selecting data from "store_district"
"""
input store_district_order_by {
  district: district_order_by
  district_id: order_by
  store: store_order_by
  store_id: order_by
}

"""
select columns of table "store_district"
"""
enum store_district_select_column {
  """column name"""
  district_id

  """column name"""
  store_id
}

"""
input type for updating data in table "store_district"
"""
input store_district_set_input {
  district_id: Int
  store_id: Int
}

"""aggregate stddev on columns"""
type store_district_stddev_fields {
  district_id: Float
  store_id: Float
}

"""
order by stddev() on columns of table "store_district"
"""
input store_district_stddev_order_by {
  district_id: order_by
  store_id: order_by
}

"""aggregate stddev_pop on columns"""
type store_district_stddev_pop_fields {
  district_id: Float
  store_id: Float
}

"""
order by stddev_pop() on columns of table "store_district"
"""
input store_district_stddev_pop_order_by {
  district_id: order_by
  store_id: order_by
}

"""aggregate stddev_samp on columns"""
type store_district_stddev_samp_fields {
  district_id: Float
  store_id: Float
}

"""
order by stddev_samp() on columns of table "store_district"
"""
input store_district_stddev_samp_order_by {
  district_id: order_by
  store_id: order_by
}

"""aggregate sum on columns"""
type store_district_sum_fields {
  district_id: Int
  store_id: Int
}

"""
order by sum() on columns of table "store_district"
"""
input store_district_sum_order_by {
  district_id: order_by
  store_id: order_by
}

"""
update columns of table "store_district"
"""
enum store_district_update_column {
  """column name"""
  district_id

  """column name"""
  store_id
}

"""aggregate var_pop on columns"""
type store_district_var_pop_fields {
  district_id: Float
  store_id: Float
}

"""
order by var_pop() on columns of table "store_district"
"""
input store_district_var_pop_order_by {
  district_id: order_by
  store_id: order_by
}

"""aggregate var_samp on columns"""
type store_district_var_samp_fields {
  district_id: Float
  store_id: Float
}

"""
order by var_samp() on columns of table "store_district"
"""
input store_district_var_samp_order_by {
  district_id: order_by
  store_id: order_by
}

"""aggregate variance on columns"""
type store_district_variance_fields {
  district_id: Float
  store_id: Float
}

"""
order by variance() on columns of table "store_district"
"""
input store_district_variance_order_by {
  district_id: order_by
  store_id: order_by
}

"""
input type for incrementing integer column in table "store"
"""
input store_inc_input {
  area_size: Float
  number_of_product_category: Float
  ranking: Int
  store_id: Int
}

"""
input type for inserting data into table "store"
"""
input store_insert_input {
  area_size: Float
  number_of_product_category: Float
  ranking: Int
  store_districts: store_district_arr_rel_insert_input
  store_id: Int
  store_name: String
  store_products: store_product_arr_rel_insert_input
  type: String
}

"""aggregate max on columns"""
type store_max_fields {
  area_size: Float
  number_of_product_category: Float
  ranking: Int
  store_id: Int
  store_name: String
  type: String
}

"""
order by max() on columns of table "store"
"""
input store_max_order_by {
  area_size: order_by
  number_of_product_category: order_by
  ranking: order_by
  store_id: order_by
  store_name: order_by
  type: order_by
}

"""aggregate min on columns"""
type store_min_fields {
  area_size: Float
  number_of_product_category: Float
  ranking: Int
  store_id: Int
  store_name: String
  type: String
}

"""
order by min() on columns of table "store"
"""
input store_min_order_by {
  area_size: order_by
  number_of_product_category: order_by
  ranking: order_by
  store_id: order_by
  store_name: order_by
  type: order_by
}

"""
response of any mutation on the table "store"
"""
type store_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [store!]!
}

"""
input type for inserting object relation for remote table "store"
"""
input store_obj_rel_insert_input {
  data: store_insert_input!
  on_conflict: store_on_conflict
}

"""
on conflict condition type for table "store"
"""
input store_on_conflict {
  constraint: store_constraint!
  update_columns: [store_update_column!]!
  where: store_bool_exp
}

"""
ordering options when selecting data from "store"
"""
input store_order_by {
  area_size: order_by
  number_of_product_category: order_by
  ranking: order_by
  store_districts_aggregate: store_district_aggregate_order_by
  store_id: order_by
  store_name: order_by
  store_products_aggregate: store_product_aggregate_order_by
  type: order_by
}

"""
columns and relationships of "store_product"
"""
type store_product {
  """An object relationship"""
  product: product
  product_id: Int

  """An object relationship"""
  store: store
  store_id: Int
}

"""
aggregated selection of "store_product"
"""
type store_product_aggregate {
  aggregate: store_product_aggregate_fields
  nodes: [store_product!]!
}

"""
aggregate fields of "store_product"
"""
type store_product_aggregate_fields {
  avg: store_product_avg_fields
  count(columns: [store_product_select_column!], distinct: Boolean): Int
  max: store_product_max_fields
  min: store_product_min_fields
  stddev: store_product_stddev_fields
  stddev_pop: store_product_stddev_pop_fields
  stddev_samp: store_product_stddev_samp_fields
  sum: store_product_sum_fields
  var_pop: store_product_var_pop_fields
  var_samp: store_product_var_samp_fields
  variance: store_product_variance_fields
}

"""
order by aggregate values of table "store_product"
"""
input store_product_aggregate_order_by {
  avg: store_product_avg_order_by
  count: order_by
  max: store_product_max_order_by
  min: store_product_min_order_by
  stddev: store_product_stddev_order_by
  stddev_pop: store_product_stddev_pop_order_by
  stddev_samp: store_product_stddev_samp_order_by
  sum: store_product_sum_order_by
  var_pop: store_product_var_pop_order_by
  var_samp: store_product_var_samp_order_by
  variance: store_product_variance_order_by
}

"""
input type for inserting array relation for remote table "store_product"
"""
input store_product_arr_rel_insert_input {
  data: [store_product_insert_input!]!
  on_conflict: store_product_on_conflict
}

"""aggregate avg on columns"""
type store_product_avg_fields {
  product_id: Float
  store_id: Float
}

"""
order by avg() on columns of table "store_product"
"""
input store_product_avg_order_by {
  product_id: order_by
  store_id: order_by
}

"""
Boolean expression to filter rows from the table "store_product". All fields are combined with a logical 'AND'.
"""
input store_product_bool_exp {
  _and: [store_product_bool_exp]
  _not: store_product_bool_exp
  _or: [store_product_bool_exp]
  product: product_bool_exp
  product_id: Int_comparison_exp
  store: store_bool_exp
  store_id: Int_comparison_exp
}

"""
unique or primary key constraints on table "store_product"
"""
enum store_product_constraint {
  """unique or primary key constraint"""
  idx_18224_sqlite_autoindex_store_product_1
}

"""
input type for incrementing integer column in table "store_product"
"""
input store_product_inc_input {
  product_id: Int
  store_id: Int
}

"""
input type for inserting data into table "store_product"
"""
input store_product_insert_input {
  product: product_obj_rel_insert_input
  product_id: Int
  store: store_obj_rel_insert_input
  store_id: Int
}

"""aggregate max on columns"""
type store_product_max_fields {
  product_id: Int
  store_id: Int
}

"""
order by max() on columns of table "store_product"
"""
input store_product_max_order_by {
  product_id: order_by
  store_id: order_by
}

"""aggregate min on columns"""
type store_product_min_fields {
  product_id: Int
  store_id: Int
}

"""
order by min() on columns of table "store_product"
"""
input store_product_min_order_by {
  product_id: order_by
  store_id: order_by
}

"""
response of any mutation on the table "store_product"
"""
type store_product_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [store_product!]!
}

"""
input type for inserting object relation for remote table "store_product"
"""
input store_product_obj_rel_insert_input {
  data: store_product_insert_input!
  on_conflict: store_product_on_conflict
}

"""
on conflict condition type for table "store_product"
"""
input store_product_on_conflict {
  constraint: store_product_constraint!
  update_columns: [store_product_update_column!]!
  where: store_product_bool_exp
}

"""
ordering options when selecting data from "store_product"
"""
input store_product_order_by {
  product: product_order_by
  product_id: order_by
  store: store_order_by
  store_id: order_by
}

"""
select columns of table "store_product"
"""
enum store_product_select_column {
  """column name"""
  product_id

  """column name"""
  store_id
}

"""
input type for updating data in table "store_product"
"""
input store_product_set_input {
  product_id: Int
  store_id: Int
}

"""aggregate stddev on columns"""
type store_product_stddev_fields {
  product_id: Float
  store_id: Float
}

"""
order by stddev() on columns of table "store_product"
"""
input store_product_stddev_order_by {
  product_id: order_by
  store_id: order_by
}

"""aggregate stddev_pop on columns"""
type store_product_stddev_pop_fields {
  product_id: Float
  store_id: Float
}

"""
order by stddev_pop() on columns of table "store_product"
"""
input store_product_stddev_pop_order_by {
  product_id: order_by
  store_id: order_by
}

"""aggregate stddev_samp on columns"""
type store_product_stddev_samp_fields {
  product_id: Float
  store_id: Float
}

"""
order by stddev_samp() on columns of table "store_product"
"""
input store_product_stddev_samp_order_by {
  product_id: order_by
  store_id: order_by
}

"""aggregate sum on columns"""
type store_product_sum_fields {
  product_id: Int
  store_id: Int
}

"""
order by sum() on columns of table "store_product"
"""
input store_product_sum_order_by {
  product_id: order_by
  store_id: order_by
}

"""
update columns of table "store_product"
"""
enum store_product_update_column {
  """column name"""
  product_id

  """column name"""
  store_id
}

"""aggregate var_pop on columns"""
type store_product_var_pop_fields {
  product_id: Float
  store_id: Float
}

"""
order by var_pop() on columns of table "store_product"
"""
input store_product_var_pop_order_by {
  product_id: order_by
  store_id: order_by
}

"""aggregate var_samp on columns"""
type store_product_var_samp_fields {
  product_id: Float
  store_id: Float
}

"""
order by var_samp() on columns of table "store_product"
"""
input store_product_var_samp_order_by {
  product_id: order_by
  store_id: order_by
}

"""aggregate variance on columns"""
type store_product_variance_fields {
  product_id: Float
  store_id: Float
}

"""
order by variance() on columns of table "store_product"
"""
input store_product_variance_order_by {
  product_id: order_by
  store_id: order_by
}

"""
select columns of table "store"
"""
enum store_select_column {
  """column name"""
  area_size

  """column name"""
  number_of_product_category

  """column name"""
  ranking

  """column name"""
  store_id

  """column name"""
  store_name

  """column name"""
  type
}

"""
input type for updating data in table "store"
"""
input store_set_input {
  area_size: Float
  number_of_product_category: Float
  ranking: Int
  store_id: Int
  store_name: String
  type: String
}

"""aggregate stddev on columns"""
type store_stddev_fields {
  area_size: Float
  number_of_product_category: Float
  ranking: Float
  store_id: Float
}

"""
order by stddev() on columns of table "store"
"""
input store_stddev_order_by {
  area_size: order_by
  number_of_product_category: order_by
  ranking: order_by
  store_id: order_by
}

"""aggregate stddev_pop on columns"""
type store_stddev_pop_fields {
  area_size: Float
  number_of_product_category: Float
  ranking: Float
  store_id: Float
}

"""
order by stddev_pop() on columns of table "store"
"""
input store_stddev_pop_order_by {
  area_size: order_by
  number_of_product_category: order_by
  ranking: order_by
  store_id: order_by
}

"""aggregate stddev_samp on columns"""
type store_stddev_samp_fields {
  area_size: Float
  number_of_product_category: Float
  ranking: Float
  store_id: Float
}

"""
order by stddev_samp() on columns of table "store"
"""
input store_stddev_samp_order_by {
  area_size: order_by
  number_of_product_category: order_by
  ranking: order_by
  store_id: order_by
}

"""aggregate sum on columns"""
type store_sum_fields {
  area_size: Float
  number_of_product_category: Float
  ranking: Int
  store_id: Int
}

"""
order by sum() on columns of table "store"
"""
input store_sum_order_by {
  area_size: order_by
  number_of_product_category: order_by
  ranking: order_by
  store_id: order_by
}

"""
update columns of table "store"
"""
enum store_update_column {
  """column name"""
  area_size

  """column name"""
  number_of_product_category

  """column name"""
  ranking

  """column name"""
  store_id

  """column name"""
  store_name

  """column name"""
  type
}

"""aggregate var_pop on columns"""
type store_var_pop_fields {
  area_size: Float
  number_of_product_category: Float
  ranking: Float
  store_id: Float
}

"""
order by var_pop() on columns of table "store"
"""
input store_var_pop_order_by {
  area_size: order_by
  number_of_product_category: order_by
  ranking: order_by
  store_id: order_by
}

"""aggregate var_samp on columns"""
type store_var_samp_fields {
  area_size: Float
  number_of_product_category: Float
  ranking: Float
  store_id: Float
}

"""
order by var_samp() on columns of table "store"
"""
input store_var_samp_order_by {
  area_size: order_by
  number_of_product_category: order_by
  ranking: order_by
  store_id: order_by
}

"""aggregate variance on columns"""
type store_variance_fields {
  area_size: Float
  number_of_product_category: Float
  ranking: Float
  store_id: Float
}

"""
order by variance() on columns of table "store"
"""
input store_variance_order_by {
  area_size: order_by
  number_of_product_category: order_by
  ranking: order_by
  store_id: order_by
}

"""
expression to compare columns of type String. All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String
  _ilike: String
  _in: [String!]
  _is_null: Boolean
  _like: String
  _lt: String
  _lte: String
  _neq: String
  _nilike: String
  _nin: [String!]
  _nlike: String
  _nsimilar: String
  _similar: String
}

"""subscription root"""
type subscription_root {
  """
  fetch data from the table: "district"
  """
  district(
    """distinct select on columns"""
    distinct_on: [district_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [district_order_by!]

    """filter the rows returned"""
    where: district_bool_exp
  ): [district!]!

  """
  fetch aggregated fields from the table: "district"
  """
  district_aggregate(
    """distinct select on columns"""
    distinct_on: [district_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [district_order_by!]

    """filter the rows returned"""
    where: district_bool_exp
  ): district_aggregate!

  """
  fetch data from the table: "product"
  """
  product(
    """distinct select on columns"""
    distinct_on: [product_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [product_order_by!]

    """filter the rows returned"""
    where: product_bool_exp
  ): [product!]!

  """
  fetch aggregated fields from the table: "product"
  """
  product_aggregate(
    """distinct select on columns"""
    distinct_on: [product_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [product_order_by!]

    """filter the rows returned"""
    where: product_bool_exp
  ): product_aggregate!

  """fetch data from the table: "product" using primary key columns"""
  product_by_pk(product_id: Int!): product

  """
  fetch data from the table: "store"
  """
  store(
    """distinct select on columns"""
    distinct_on: [store_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [store_order_by!]

    """filter the rows returned"""
    where: store_bool_exp
  ): [store!]!

  """
  fetch aggregated fields from the table: "store"
  """
  store_aggregate(
    """distinct select on columns"""
    distinct_on: [store_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [store_order_by!]

    """filter the rows returned"""
    where: store_bool_exp
  ): store_aggregate!

  """
  fetch data from the table: "store_district"
  """
  store_district(
    """distinct select on columns"""
    distinct_on: [store_district_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [store_district_order_by!]

    """filter the rows returned"""
    where: store_district_bool_exp
  ): [store_district!]!

  """
  fetch aggregated fields from the table: "store_district"
  """
  store_district_aggregate(
    """distinct select on columns"""
    distinct_on: [store_district_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [store_district_order_by!]

    """filter the rows returned"""
    where: store_district_bool_exp
  ): store_district_aggregate!

  """
  fetch data from the table: "store_product"
  """
  store_product(
    """distinct select on columns"""
    distinct_on: [store_product_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [store_product_order_by!]

    """filter the rows returned"""
    where: store_product_bool_exp
  ): [store_product!]!

  """
  fetch aggregated fields from the table: "store_product"
  """
  store_product_aggregate(
    """distinct select on columns"""
    distinct_on: [store_product_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [store_product_order_by!]

    """filter the rows returned"""
    where: store_product_bool_exp
  ): store_product_aggregate!
}
