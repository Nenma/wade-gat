schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""
Direct the client to resolve this field locally, either from the cache or local resolvers.
"""
directive @client(
  """
  When true, the client will never use the cache for this value. See
  https://www.apollographql.com/docs/react/essentials/local-state/#forcing-resolvers-with-clientalways-true
  """
  always: Boolean
) on FIELD | FRAGMENT_DEFINITION | INLINE_FRAGMENT

"""
Export this locally resolved field as a variable to be used in the remainder of this query. See
https://www.apollographql.com/docs/react/essentials/local-state/#using-client-fields-as-variables
"""
directive @export(
  """The variable name to export this field as."""
  as: String!
) on FIELD

"""
Specify a custom store key for this result. See
https://www.apollographql.com/docs/react/advanced/caching/#the-connection-directive
"""
directive @connection(
  """Specify the store key."""
  key: String!

  """
  An array of query argument names to include in the generated custom store key.
  """
  filter: [String!]
) on FIELD

scalar bigint

"""
expression to compare columns of type bigint. All fields are combined with logical 'AND'.
"""
input bigint_comparison_exp {
  _eq: bigint
  _gt: bigint
  _gte: bigint
  _in: [bigint!]
  _is_null: Boolean
  _lt: bigint
  _lte: bigint
  _neq: bigint
  _nin: [bigint!]
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "problem_category_codes"
  """
  delete_problem_category_codes(
    """filter the rows which have to be deleted"""
    where: problem_category_codes_bool_exp!
  ): problem_category_codes_mutation_response

  """
  delete single row from the table: "problem_category_codes"
  """
  delete_problem_category_codes_by_pk(problem_category_code: String!): problem_category_codes

  """
  delete data from the table: "problem_log"
  """
  delete_problem_log(
    """filter the rows which have to be deleted"""
    where: problem_log_bool_exp!
  ): problem_log_mutation_response

  """
  delete single row from the table: "problem_log"
  """
  delete_problem_log_by_pk(problem_log_id: bigint!): problem_log

  """
  delete data from the table: "problem_status_codes"
  """
  delete_problem_status_codes(
    """filter the rows which have to be deleted"""
    where: problem_status_codes_bool_exp!
  ): problem_status_codes_mutation_response

  """
  delete single row from the table: "problem_status_codes"
  """
  delete_problem_status_codes_by_pk(problem_status_code: String!): problem_status_codes

  """
  delete data from the table: "problems"
  """
  delete_problems(
    """filter the rows which have to be deleted"""
    where: problems_bool_exp!
  ): problems_mutation_response

  """
  delete single row from the table: "problems"
  """
  delete_problems_by_pk(problem_id: bigint!): problems

  """
  delete data from the table: "product"
  """
  delete_product(
    """filter the rows which have to be deleted"""
    where: product_bool_exp!
  ): product_mutation_response

  """
  delete single row from the table: "product"
  """
  delete_product_by_pk(product_id: bigint!): product

  """
  delete data from the table: "staff"
  """
  delete_staff(
    """filter the rows which have to be deleted"""
    where: staff_bool_exp!
  ): staff_mutation_response

  """
  delete single row from the table: "staff"
  """
  delete_staff_by_pk(staff_id: bigint!): staff

  """
  insert data into the table: "problem_category_codes"
  """
  insert_problem_category_codes(
    """the rows to be inserted"""
    objects: [problem_category_codes_insert_input!]!

    """on conflict condition"""
    on_conflict: problem_category_codes_on_conflict
  ): problem_category_codes_mutation_response

  """
  insert a single row into the table: "problem_category_codes"
  """
  insert_problem_category_codes_one(
    """the row to be inserted"""
    object: problem_category_codes_insert_input!

    """on conflict condition"""
    on_conflict: problem_category_codes_on_conflict
  ): problem_category_codes

  """
  insert data into the table: "problem_log"
  """
  insert_problem_log(
    """the rows to be inserted"""
    objects: [problem_log_insert_input!]!

    """on conflict condition"""
    on_conflict: problem_log_on_conflict
  ): problem_log_mutation_response

  """
  insert a single row into the table: "problem_log"
  """
  insert_problem_log_one(
    """the row to be inserted"""
    object: problem_log_insert_input!

    """on conflict condition"""
    on_conflict: problem_log_on_conflict
  ): problem_log

  """
  insert data into the table: "problem_status_codes"
  """
  insert_problem_status_codes(
    """the rows to be inserted"""
    objects: [problem_status_codes_insert_input!]!

    """on conflict condition"""
    on_conflict: problem_status_codes_on_conflict
  ): problem_status_codes_mutation_response

  """
  insert a single row into the table: "problem_status_codes"
  """
  insert_problem_status_codes_one(
    """the row to be inserted"""
    object: problem_status_codes_insert_input!

    """on conflict condition"""
    on_conflict: problem_status_codes_on_conflict
  ): problem_status_codes

  """
  insert data into the table: "problems"
  """
  insert_problems(
    """the rows to be inserted"""
    objects: [problems_insert_input!]!

    """on conflict condition"""
    on_conflict: problems_on_conflict
  ): problems_mutation_response

  """
  insert a single row into the table: "problems"
  """
  insert_problems_one(
    """the row to be inserted"""
    object: problems_insert_input!

    """on conflict condition"""
    on_conflict: problems_on_conflict
  ): problems

  """
  insert data into the table: "product"
  """
  insert_product(
    """the rows to be inserted"""
    objects: [product_insert_input!]!

    """on conflict condition"""
    on_conflict: product_on_conflict
  ): product_mutation_response

  """
  insert a single row into the table: "product"
  """
  insert_product_one(
    """the row to be inserted"""
    object: product_insert_input!

    """on conflict condition"""
    on_conflict: product_on_conflict
  ): product

  """
  insert data into the table: "staff"
  """
  insert_staff(
    """the rows to be inserted"""
    objects: [staff_insert_input!]!

    """on conflict condition"""
    on_conflict: staff_on_conflict
  ): staff_mutation_response

  """
  insert a single row into the table: "staff"
  """
  insert_staff_one(
    """the row to be inserted"""
    object: staff_insert_input!

    """on conflict condition"""
    on_conflict: staff_on_conflict
  ): staff

  """
  update data of the table: "problem_category_codes"
  """
  update_problem_category_codes(
    """sets the columns of the filtered rows to the given values"""
    _set: problem_category_codes_set_input

    """filter the rows which have to be updated"""
    where: problem_category_codes_bool_exp!
  ): problem_category_codes_mutation_response

  """
  update single row of the table: "problem_category_codes"
  """
  update_problem_category_codes_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: problem_category_codes_set_input
    pk_columns: problem_category_codes_pk_columns_input!
  ): problem_category_codes

  """
  update data of the table: "problem_log"
  """
  update_problem_log(
    """increments the integer columns with given value of the filtered values"""
    _inc: problem_log_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: problem_log_set_input

    """filter the rows which have to be updated"""
    where: problem_log_bool_exp!
  ): problem_log_mutation_response

  """
  update single row of the table: "problem_log"
  """
  update_problem_log_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: problem_log_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: problem_log_set_input
    pk_columns: problem_log_pk_columns_input!
  ): problem_log

  """
  update data of the table: "problem_status_codes"
  """
  update_problem_status_codes(
    """sets the columns of the filtered rows to the given values"""
    _set: problem_status_codes_set_input

    """filter the rows which have to be updated"""
    where: problem_status_codes_bool_exp!
  ): problem_status_codes_mutation_response

  """
  update single row of the table: "problem_status_codes"
  """
  update_problem_status_codes_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: problem_status_codes_set_input
    pk_columns: problem_status_codes_pk_columns_input!
  ): problem_status_codes

  """
  update data of the table: "problems"
  """
  update_problems(
    """increments the integer columns with given value of the filtered values"""
    _inc: problems_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: problems_set_input

    """filter the rows which have to be updated"""
    where: problems_bool_exp!
  ): problems_mutation_response

  """
  update single row of the table: "problems"
  """
  update_problems_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: problems_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: problems_set_input
    pk_columns: problems_pk_columns_input!
  ): problems

  """
  update data of the table: "product"
  """
  update_product(
    """increments the integer columns with given value of the filtered values"""
    _inc: product_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: product_set_input

    """filter the rows which have to be updated"""
    where: product_bool_exp!
  ): product_mutation_response

  """
  update single row of the table: "product"
  """
  update_product_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: product_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: product_set_input
    pk_columns: product_pk_columns_input!
  ): product

  """
  update data of the table: "staff"
  """
  update_staff(
    """increments the integer columns with given value of the filtered values"""
    _inc: staff_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: staff_set_input

    """filter the rows which have to be updated"""
    where: staff_bool_exp!
  ): staff_mutation_response

  """
  update single row of the table: "staff"
  """
  update_staff_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: staff_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: staff_set_input
    pk_columns: staff_pk_columns_input!
  ): staff
}

"""column ordering options"""
enum order_by {
  """in the ascending order, nulls last"""
  asc

  """in the ascending order, nulls first"""
  asc_nulls_first

  """in the ascending order, nulls last"""
  asc_nulls_last

  """in the descending order, nulls first"""
  desc

  """in the descending order, nulls first"""
  desc_nulls_first

  """in the descending order, nulls last"""
  desc_nulls_last
}

"""
columns and relationships of "problem_category_codes"
"""
type problem_category_codes {
  problem_category_code: String!
  problem_category_description: String

  """An array relationship"""
  problem_logs(
    """distinct select on columns"""
    distinct_on: [problem_log_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [problem_log_order_by!]

    """filter the rows returned"""
    where: problem_log_bool_exp
  ): [problem_log!]!

  """An aggregated array relationship"""
  problem_logs_aggregate(
    """distinct select on columns"""
    distinct_on: [problem_log_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [problem_log_order_by!]

    """filter the rows returned"""
    where: problem_log_bool_exp
  ): problem_log_aggregate!
}

"""
aggregated selection of "problem_category_codes"
"""
type problem_category_codes_aggregate {
  aggregate: problem_category_codes_aggregate_fields
  nodes: [problem_category_codes!]!
}

"""
aggregate fields of "problem_category_codes"
"""
type problem_category_codes_aggregate_fields {
  count(columns: [problem_category_codes_select_column!], distinct: Boolean): Int
  max: problem_category_codes_max_fields
  min: problem_category_codes_min_fields
}

"""
order by aggregate values of table "problem_category_codes"
"""
input problem_category_codes_aggregate_order_by {
  count: order_by
  max: problem_category_codes_max_order_by
  min: problem_category_codes_min_order_by
}

"""
input type for inserting array relation for remote table "problem_category_codes"
"""
input problem_category_codes_arr_rel_insert_input {
  data: [problem_category_codes_insert_input!]!
  on_conflict: problem_category_codes_on_conflict
}

"""
Boolean expression to filter rows from the table "problem_category_codes". All fields are combined with a logical 'AND'.
"""
input problem_category_codes_bool_exp {
  _and: [problem_category_codes_bool_exp]
  _not: problem_category_codes_bool_exp
  _or: [problem_category_codes_bool_exp]
  problem_category_code: String_comparison_exp
  problem_category_description: String_comparison_exp
  problem_logs: problem_log_bool_exp
}

"""
unique or primary key constraints on table "problem_category_codes"
"""
enum problem_category_codes_constraint {
  """unique or primary key constraint"""
  idx_26757_sqlite_autoindex_problem_category_codes_1
}

"""
input type for inserting data into table "problem_category_codes"
"""
input problem_category_codes_insert_input {
  problem_category_code: String
  problem_category_description: String
  problem_logs: problem_log_arr_rel_insert_input
}

"""aggregate max on columns"""
type problem_category_codes_max_fields {
  problem_category_code: String
  problem_category_description: String
}

"""
order by max() on columns of table "problem_category_codes"
"""
input problem_category_codes_max_order_by {
  problem_category_code: order_by
  problem_category_description: order_by
}

"""aggregate min on columns"""
type problem_category_codes_min_fields {
  problem_category_code: String
  problem_category_description: String
}

"""
order by min() on columns of table "problem_category_codes"
"""
input problem_category_codes_min_order_by {
  problem_category_code: order_by
  problem_category_description: order_by
}

"""
response of any mutation on the table "problem_category_codes"
"""
type problem_category_codes_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [problem_category_codes!]!
}

"""
input type for inserting object relation for remote table "problem_category_codes"
"""
input problem_category_codes_obj_rel_insert_input {
  data: problem_category_codes_insert_input!
  on_conflict: problem_category_codes_on_conflict
}

"""
on conflict condition type for table "problem_category_codes"
"""
input problem_category_codes_on_conflict {
  constraint: problem_category_codes_constraint!
  update_columns: [problem_category_codes_update_column!]!
  where: problem_category_codes_bool_exp
}

"""
ordering options when selecting data from "problem_category_codes"
"""
input problem_category_codes_order_by {
  problem_category_code: order_by
  problem_category_description: order_by
  problem_logs_aggregate: problem_log_aggregate_order_by
}

"""
primary key columns input for table: "problem_category_codes"
"""
input problem_category_codes_pk_columns_input {
  problem_category_code: String!
}

"""
select columns of table "problem_category_codes"
"""
enum problem_category_codes_select_column {
  """column name"""
  problem_category_code

  """column name"""
  problem_category_description
}

"""
input type for updating data in table "problem_category_codes"
"""
input problem_category_codes_set_input {
  problem_category_code: String
  problem_category_description: String
}

"""
update columns of table "problem_category_codes"
"""
enum problem_category_codes_update_column {
  """column name"""
  problem_category_code

  """column name"""
  problem_category_description
}

"""
columns and relationships of "problem_log"
"""
type problem_log {
  assigned_to_staff_id: bigint
  log_entry_date: timestamptz
  log_entry_description: String
  log_entry_fix: String
  other_log_details: String

  """An object relationship"""
  problem: problems

  """An object relationship"""
  problemCategoryCodeByProblemCategoryCode: problem_category_codes

  """An object relationship"""
  problemStatusCodeByProblemStatusCode: problem_status_codes
  problem_category_code: String
  problem_id: bigint
  problem_log_id: bigint!
  problem_status_code: String

  """An object relationship"""
  staff: staff
}

"""
aggregated selection of "problem_log"
"""
type problem_log_aggregate {
  aggregate: problem_log_aggregate_fields
  nodes: [problem_log!]!
}

"""
aggregate fields of "problem_log"
"""
type problem_log_aggregate_fields {
  avg: problem_log_avg_fields
  count(columns: [problem_log_select_column!], distinct: Boolean): Int
  max: problem_log_max_fields
  min: problem_log_min_fields
  stddev: problem_log_stddev_fields
  stddev_pop: problem_log_stddev_pop_fields
  stddev_samp: problem_log_stddev_samp_fields
  sum: problem_log_sum_fields
  var_pop: problem_log_var_pop_fields
  var_samp: problem_log_var_samp_fields
  variance: problem_log_variance_fields
}

"""
order by aggregate values of table "problem_log"
"""
input problem_log_aggregate_order_by {
  avg: problem_log_avg_order_by
  count: order_by
  max: problem_log_max_order_by
  min: problem_log_min_order_by
  stddev: problem_log_stddev_order_by
  stddev_pop: problem_log_stddev_pop_order_by
  stddev_samp: problem_log_stddev_samp_order_by
  sum: problem_log_sum_order_by
  var_pop: problem_log_var_pop_order_by
  var_samp: problem_log_var_samp_order_by
  variance: problem_log_variance_order_by
}

"""
input type for inserting array relation for remote table "problem_log"
"""
input problem_log_arr_rel_insert_input {
  data: [problem_log_insert_input!]!
  on_conflict: problem_log_on_conflict
}

"""aggregate avg on columns"""
type problem_log_avg_fields {
  assigned_to_staff_id: Float
  problem_id: Float
  problem_log_id: Float
}

"""
order by avg() on columns of table "problem_log"
"""
input problem_log_avg_order_by {
  assigned_to_staff_id: order_by
  problem_id: order_by
  problem_log_id: order_by
}

"""
Boolean expression to filter rows from the table "problem_log". All fields are combined with a logical 'AND'.
"""
input problem_log_bool_exp {
  _and: [problem_log_bool_exp]
  _not: problem_log_bool_exp
  _or: [problem_log_bool_exp]
  assigned_to_staff_id: bigint_comparison_exp
  log_entry_date: timestamptz_comparison_exp
  log_entry_description: String_comparison_exp
  log_entry_fix: String_comparison_exp
  other_log_details: String_comparison_exp
  problem: problems_bool_exp
  problemCategoryCodeByProblemCategoryCode: problem_category_codes_bool_exp
  problemStatusCodeByProblemStatusCode: problem_status_codes_bool_exp
  problem_category_code: String_comparison_exp
  problem_id: bigint_comparison_exp
  problem_log_id: bigint_comparison_exp
  problem_status_code: String_comparison_exp
  staff: staff_bool_exp
}

"""
unique or primary key constraints on table "problem_log"
"""
enum problem_log_constraint {
  """unique or primary key constraint"""
  idx_26763_problem_log_pkey
}

"""
input type for incrementing integer column in table "problem_log"
"""
input problem_log_inc_input {
  assigned_to_staff_id: bigint
  problem_id: bigint
  problem_log_id: bigint
}

"""
input type for inserting data into table "problem_log"
"""
input problem_log_insert_input {
  assigned_to_staff_id: bigint
  log_entry_date: timestamptz
  log_entry_description: String
  log_entry_fix: String
  other_log_details: String
  problem: problems_obj_rel_insert_input
  problemCategoryCodeByProblemCategoryCode: problem_category_codes_obj_rel_insert_input
  problemStatusCodeByProblemStatusCode: problem_status_codes_obj_rel_insert_input
  problem_category_code: String
  problem_id: bigint
  problem_log_id: bigint
  problem_status_code: String
  staff: staff_obj_rel_insert_input
}

"""aggregate max on columns"""
type problem_log_max_fields {
  assigned_to_staff_id: bigint
  log_entry_date: timestamptz
  log_entry_description: String
  log_entry_fix: String
  other_log_details: String
  problem_category_code: String
  problem_id: bigint
  problem_log_id: bigint
  problem_status_code: String
}

"""
order by max() on columns of table "problem_log"
"""
input problem_log_max_order_by {
  assigned_to_staff_id: order_by
  log_entry_date: order_by
  log_entry_description: order_by
  log_entry_fix: order_by
  other_log_details: order_by
  problem_category_code: order_by
  problem_id: order_by
  problem_log_id: order_by
  problem_status_code: order_by
}

"""aggregate min on columns"""
type problem_log_min_fields {
  assigned_to_staff_id: bigint
  log_entry_date: timestamptz
  log_entry_description: String
  log_entry_fix: String
  other_log_details: String
  problem_category_code: String
  problem_id: bigint
  problem_log_id: bigint
  problem_status_code: String
}

"""
order by min() on columns of table "problem_log"
"""
input problem_log_min_order_by {
  assigned_to_staff_id: order_by
  log_entry_date: order_by
  log_entry_description: order_by
  log_entry_fix: order_by
  other_log_details: order_by
  problem_category_code: order_by
  problem_id: order_by
  problem_log_id: order_by
  problem_status_code: order_by
}

"""
response of any mutation on the table "problem_log"
"""
type problem_log_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [problem_log!]!
}

"""
input type for inserting object relation for remote table "problem_log"
"""
input problem_log_obj_rel_insert_input {
  data: problem_log_insert_input!
  on_conflict: problem_log_on_conflict
}

"""
on conflict condition type for table "problem_log"
"""
input problem_log_on_conflict {
  constraint: problem_log_constraint!
  update_columns: [problem_log_update_column!]!
  where: problem_log_bool_exp
}

"""
ordering options when selecting data from "problem_log"
"""
input problem_log_order_by {
  assigned_to_staff_id: order_by
  log_entry_date: order_by
  log_entry_description: order_by
  log_entry_fix: order_by
  other_log_details: order_by
  problem: problems_order_by
  problemCategoryCodeByProblemCategoryCode: problem_category_codes_order_by
  problemStatusCodeByProblemStatusCode: problem_status_codes_order_by
  problem_category_code: order_by
  problem_id: order_by
  problem_log_id: order_by
  problem_status_code: order_by
  staff: staff_order_by
}

"""
primary key columns input for table: "problem_log"
"""
input problem_log_pk_columns_input {
  problem_log_id: bigint!
}

"""
select columns of table "problem_log"
"""
enum problem_log_select_column {
  """column name"""
  assigned_to_staff_id

  """column name"""
  log_entry_date

  """column name"""
  log_entry_description

  """column name"""
  log_entry_fix

  """column name"""
  other_log_details

  """column name"""
  problem_category_code

  """column name"""
  problem_id

  """column name"""
  problem_log_id

  """column name"""
  problem_status_code
}

"""
input type for updating data in table "problem_log"
"""
input problem_log_set_input {
  assigned_to_staff_id: bigint
  log_entry_date: timestamptz
  log_entry_description: String
  log_entry_fix: String
  other_log_details: String
  problem_category_code: String
  problem_id: bigint
  problem_log_id: bigint
  problem_status_code: String
}

"""aggregate stddev on columns"""
type problem_log_stddev_fields {
  assigned_to_staff_id: Float
  problem_id: Float
  problem_log_id: Float
}

"""
order by stddev() on columns of table "problem_log"
"""
input problem_log_stddev_order_by {
  assigned_to_staff_id: order_by
  problem_id: order_by
  problem_log_id: order_by
}

"""aggregate stddev_pop on columns"""
type problem_log_stddev_pop_fields {
  assigned_to_staff_id: Float
  problem_id: Float
  problem_log_id: Float
}

"""
order by stddev_pop() on columns of table "problem_log"
"""
input problem_log_stddev_pop_order_by {
  assigned_to_staff_id: order_by
  problem_id: order_by
  problem_log_id: order_by
}

"""aggregate stddev_samp on columns"""
type problem_log_stddev_samp_fields {
  assigned_to_staff_id: Float
  problem_id: Float
  problem_log_id: Float
}

"""
order by stddev_samp() on columns of table "problem_log"
"""
input problem_log_stddev_samp_order_by {
  assigned_to_staff_id: order_by
  problem_id: order_by
  problem_log_id: order_by
}

"""aggregate sum on columns"""
type problem_log_sum_fields {
  assigned_to_staff_id: bigint
  problem_id: bigint
  problem_log_id: bigint
}

"""
order by sum() on columns of table "problem_log"
"""
input problem_log_sum_order_by {
  assigned_to_staff_id: order_by
  problem_id: order_by
  problem_log_id: order_by
}

"""
update columns of table "problem_log"
"""
enum problem_log_update_column {
  """column name"""
  assigned_to_staff_id

  """column name"""
  log_entry_date

  """column name"""
  log_entry_description

  """column name"""
  log_entry_fix

  """column name"""
  other_log_details

  """column name"""
  problem_category_code

  """column name"""
  problem_id

  """column name"""
  problem_log_id

  """column name"""
  problem_status_code
}

"""aggregate var_pop on columns"""
type problem_log_var_pop_fields {
  assigned_to_staff_id: Float
  problem_id: Float
  problem_log_id: Float
}

"""
order by var_pop() on columns of table "problem_log"
"""
input problem_log_var_pop_order_by {
  assigned_to_staff_id: order_by
  problem_id: order_by
  problem_log_id: order_by
}

"""aggregate var_samp on columns"""
type problem_log_var_samp_fields {
  assigned_to_staff_id: Float
  problem_id: Float
  problem_log_id: Float
}

"""
order by var_samp() on columns of table "problem_log"
"""
input problem_log_var_samp_order_by {
  assigned_to_staff_id: order_by
  problem_id: order_by
  problem_log_id: order_by
}

"""aggregate variance on columns"""
type problem_log_variance_fields {
  assigned_to_staff_id: Float
  problem_id: Float
  problem_log_id: Float
}

"""
order by variance() on columns of table "problem_log"
"""
input problem_log_variance_order_by {
  assigned_to_staff_id: order_by
  problem_id: order_by
  problem_log_id: order_by
}

"""
columns and relationships of "problem_status_codes"
"""
type problem_status_codes {
  """An array relationship"""
  problem_logs(
    """distinct select on columns"""
    distinct_on: [problem_log_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [problem_log_order_by!]

    """filter the rows returned"""
    where: problem_log_bool_exp
  ): [problem_log!]!

  """An aggregated array relationship"""
  problem_logs_aggregate(
    """distinct select on columns"""
    distinct_on: [problem_log_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [problem_log_order_by!]

    """filter the rows returned"""
    where: problem_log_bool_exp
  ): problem_log_aggregate!
  problem_status_code: String!
  problem_status_description: String
}

"""
aggregated selection of "problem_status_codes"
"""
type problem_status_codes_aggregate {
  aggregate: problem_status_codes_aggregate_fields
  nodes: [problem_status_codes!]!
}

"""
aggregate fields of "problem_status_codes"
"""
type problem_status_codes_aggregate_fields {
  count(columns: [problem_status_codes_select_column!], distinct: Boolean): Int
  max: problem_status_codes_max_fields
  min: problem_status_codes_min_fields
}

"""
order by aggregate values of table "problem_status_codes"
"""
input problem_status_codes_aggregate_order_by {
  count: order_by
  max: problem_status_codes_max_order_by
  min: problem_status_codes_min_order_by
}

"""
input type for inserting array relation for remote table "problem_status_codes"
"""
input problem_status_codes_arr_rel_insert_input {
  data: [problem_status_codes_insert_input!]!
  on_conflict: problem_status_codes_on_conflict
}

"""
Boolean expression to filter rows from the table "problem_status_codes". All fields are combined with a logical 'AND'.
"""
input problem_status_codes_bool_exp {
  _and: [problem_status_codes_bool_exp]
  _not: problem_status_codes_bool_exp
  _or: [problem_status_codes_bool_exp]
  problem_logs: problem_log_bool_exp
  problem_status_code: String_comparison_exp
  problem_status_description: String_comparison_exp
}

"""
unique or primary key constraints on table "problem_status_codes"
"""
enum problem_status_codes_constraint {
  """unique or primary key constraint"""
  idx_26769_sqlite_autoindex_problem_status_codes_1
}

"""
input type for inserting data into table "problem_status_codes"
"""
input problem_status_codes_insert_input {
  problem_logs: problem_log_arr_rel_insert_input
  problem_status_code: String
  problem_status_description: String
}

"""aggregate max on columns"""
type problem_status_codes_max_fields {
  problem_status_code: String
  problem_status_description: String
}

"""
order by max() on columns of table "problem_status_codes"
"""
input problem_status_codes_max_order_by {
  problem_status_code: order_by
  problem_status_description: order_by
}

"""aggregate min on columns"""
type problem_status_codes_min_fields {
  problem_status_code: String
  problem_status_description: String
}

"""
order by min() on columns of table "problem_status_codes"
"""
input problem_status_codes_min_order_by {
  problem_status_code: order_by
  problem_status_description: order_by
}

"""
response of any mutation on the table "problem_status_codes"
"""
type problem_status_codes_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [problem_status_codes!]!
}

"""
input type for inserting object relation for remote table "problem_status_codes"
"""
input problem_status_codes_obj_rel_insert_input {
  data: problem_status_codes_insert_input!
  on_conflict: problem_status_codes_on_conflict
}

"""
on conflict condition type for table "problem_status_codes"
"""
input problem_status_codes_on_conflict {
  constraint: problem_status_codes_constraint!
  update_columns: [problem_status_codes_update_column!]!
  where: problem_status_codes_bool_exp
}

"""
ordering options when selecting data from "problem_status_codes"
"""
input problem_status_codes_order_by {
  problem_logs_aggregate: problem_log_aggregate_order_by
  problem_status_code: order_by
  problem_status_description: order_by
}

"""
primary key columns input for table: "problem_status_codes"
"""
input problem_status_codes_pk_columns_input {
  problem_status_code: String!
}

"""
select columns of table "problem_status_codes"
"""
enum problem_status_codes_select_column {
  """column name"""
  problem_status_code

  """column name"""
  problem_status_description
}

"""
input type for updating data in table "problem_status_codes"
"""
input problem_status_codes_set_input {
  problem_status_code: String
  problem_status_description: String
}

"""
update columns of table "problem_status_codes"
"""
enum problem_status_codes_update_column {
  """column name"""
  problem_status_code

  """column name"""
  problem_status_description
}

"""
columns and relationships of "problems"
"""
type problems {
  closure_authorised_by_staff_id: bigint
  date_problem_closed: timestamptz
  date_problem_reported: timestamptz
  other_problem_details: String
  problem_description: String
  problem_id: bigint!

  """An array relationship"""
  problem_logs(
    """distinct select on columns"""
    distinct_on: [problem_log_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [problem_log_order_by!]

    """filter the rows returned"""
    where: problem_log_bool_exp
  ): [problem_log!]!

  """An aggregated array relationship"""
  problem_logs_aggregate(
    """distinct select on columns"""
    distinct_on: [problem_log_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [problem_log_order_by!]

    """filter the rows returned"""
    where: problem_log_bool_exp
  ): problem_log_aggregate!

  """An object relationship"""
  product: product
  product_id: bigint
  reported_by_staff_id: bigint

  """An object relationship"""
  staffByAuthorisedByStaffId: staff

  """An object relationship"""
  staffByReportedByStaffId: staff
}

"""
aggregated selection of "problems"
"""
type problems_aggregate {
  aggregate: problems_aggregate_fields
  nodes: [problems!]!
}

"""
aggregate fields of "problems"
"""
type problems_aggregate_fields {
  avg: problems_avg_fields
  count(columns: [problems_select_column!], distinct: Boolean): Int
  max: problems_max_fields
  min: problems_min_fields
  stddev: problems_stddev_fields
  stddev_pop: problems_stddev_pop_fields
  stddev_samp: problems_stddev_samp_fields
  sum: problems_sum_fields
  var_pop: problems_var_pop_fields
  var_samp: problems_var_samp_fields
  variance: problems_variance_fields
}

"""
order by aggregate values of table "problems"
"""
input problems_aggregate_order_by {
  avg: problems_avg_order_by
  count: order_by
  max: problems_max_order_by
  min: problems_min_order_by
  stddev: problems_stddev_order_by
  stddev_pop: problems_stddev_pop_order_by
  stddev_samp: problems_stddev_samp_order_by
  sum: problems_sum_order_by
  var_pop: problems_var_pop_order_by
  var_samp: problems_var_samp_order_by
  variance: problems_variance_order_by
}

"""
input type for inserting array relation for remote table "problems"
"""
input problems_arr_rel_insert_input {
  data: [problems_insert_input!]!
  on_conflict: problems_on_conflict
}

"""aggregate avg on columns"""
type problems_avg_fields {
  closure_authorised_by_staff_id: Float
  problem_id: Float
  product_id: Float
  reported_by_staff_id: Float
}

"""
order by avg() on columns of table "problems"
"""
input problems_avg_order_by {
  closure_authorised_by_staff_id: order_by
  problem_id: order_by
  product_id: order_by
  reported_by_staff_id: order_by
}

"""
Boolean expression to filter rows from the table "problems". All fields are combined with a logical 'AND'.
"""
input problems_bool_exp {
  _and: [problems_bool_exp]
  _not: problems_bool_exp
  _or: [problems_bool_exp]
  closure_authorised_by_staff_id: bigint_comparison_exp
  date_problem_closed: timestamptz_comparison_exp
  date_problem_reported: timestamptz_comparison_exp
  other_problem_details: String_comparison_exp
  problem_description: String_comparison_exp
  problem_id: bigint_comparison_exp
  problem_logs: problem_log_bool_exp
  product: product_bool_exp
  product_id: bigint_comparison_exp
  reported_by_staff_id: bigint_comparison_exp
  staffByAuthorisedByStaffId: staff_bool_exp
  staffByReportedByStaffId: staff_bool_exp
}

"""
unique or primary key constraints on table "problems"
"""
enum problems_constraint {
  """unique or primary key constraint"""
  idx_26787_problems_pkey
}

"""
input type for incrementing integer column in table "problems"
"""
input problems_inc_input {
  closure_authorised_by_staff_id: bigint
  problem_id: bigint
  product_id: bigint
  reported_by_staff_id: bigint
}

"""
input type for inserting data into table "problems"
"""
input problems_insert_input {
  closure_authorised_by_staff_id: bigint
  date_problem_closed: timestamptz
  date_problem_reported: timestamptz
  other_problem_details: String
  problem_description: String
  problem_id: bigint
  problem_logs: problem_log_arr_rel_insert_input
  product: product_obj_rel_insert_input
  product_id: bigint
  reported_by_staff_id: bigint
  staffByAuthorisedByStaffId: staff_obj_rel_insert_input
  staffByReportedByStaffId: staff_obj_rel_insert_input
}

"""aggregate max on columns"""
type problems_max_fields {
  closure_authorised_by_staff_id: bigint
  date_problem_closed: timestamptz
  date_problem_reported: timestamptz
  other_problem_details: String
  problem_description: String
  problem_id: bigint
  product_id: bigint
  reported_by_staff_id: bigint
}

"""
order by max() on columns of table "problems"
"""
input problems_max_order_by {
  closure_authorised_by_staff_id: order_by
  date_problem_closed: order_by
  date_problem_reported: order_by
  other_problem_details: order_by
  problem_description: order_by
  problem_id: order_by
  product_id: order_by
  reported_by_staff_id: order_by
}

"""aggregate min on columns"""
type problems_min_fields {
  closure_authorised_by_staff_id: bigint
  date_problem_closed: timestamptz
  date_problem_reported: timestamptz
  other_problem_details: String
  problem_description: String
  problem_id: bigint
  product_id: bigint
  reported_by_staff_id: bigint
}

"""
order by min() on columns of table "problems"
"""
input problems_min_order_by {
  closure_authorised_by_staff_id: order_by
  date_problem_closed: order_by
  date_problem_reported: order_by
  other_problem_details: order_by
  problem_description: order_by
  problem_id: order_by
  product_id: order_by
  reported_by_staff_id: order_by
}

"""
response of any mutation on the table "problems"
"""
type problems_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [problems!]!
}

"""
input type for inserting object relation for remote table "problems"
"""
input problems_obj_rel_insert_input {
  data: problems_insert_input!
  on_conflict: problems_on_conflict
}

"""
on conflict condition type for table "problems"
"""
input problems_on_conflict {
  constraint: problems_constraint!
  update_columns: [problems_update_column!]!
  where: problems_bool_exp
}

"""
ordering options when selecting data from "problems"
"""
input problems_order_by {
  closure_authorised_by_staff_id: order_by
  date_problem_closed: order_by
  date_problem_reported: order_by
  other_problem_details: order_by
  problem_description: order_by
  problem_id: order_by
  problem_logs_aggregate: problem_log_aggregate_order_by
  product: product_order_by
  product_id: order_by
  reported_by_staff_id: order_by
  staffByAuthorisedByStaffId: staff_order_by
  staffByReportedByStaffId: staff_order_by
}

"""
primary key columns input for table: "problems"
"""
input problems_pk_columns_input {
  problem_id: bigint!
}

"""
select columns of table "problems"
"""
enum problems_select_column {
  """column name"""
  closure_authorised_by_staff_id

  """column name"""
  date_problem_closed

  """column name"""
  date_problem_reported

  """column name"""
  other_problem_details

  """column name"""
  problem_description

  """column name"""
  problem_id

  """column name"""
  product_id

  """column name"""
  reported_by_staff_id
}

"""
input type for updating data in table "problems"
"""
input problems_set_input {
  closure_authorised_by_staff_id: bigint
  date_problem_closed: timestamptz
  date_problem_reported: timestamptz
  other_problem_details: String
  problem_description: String
  problem_id: bigint
  product_id: bigint
  reported_by_staff_id: bigint
}

"""aggregate stddev on columns"""
type problems_stddev_fields {
  closure_authorised_by_staff_id: Float
  problem_id: Float
  product_id: Float
  reported_by_staff_id: Float
}

"""
order by stddev() on columns of table "problems"
"""
input problems_stddev_order_by {
  closure_authorised_by_staff_id: order_by
  problem_id: order_by
  product_id: order_by
  reported_by_staff_id: order_by
}

"""aggregate stddev_pop on columns"""
type problems_stddev_pop_fields {
  closure_authorised_by_staff_id: Float
  problem_id: Float
  product_id: Float
  reported_by_staff_id: Float
}

"""
order by stddev_pop() on columns of table "problems"
"""
input problems_stddev_pop_order_by {
  closure_authorised_by_staff_id: order_by
  problem_id: order_by
  product_id: order_by
  reported_by_staff_id: order_by
}

"""aggregate stddev_samp on columns"""
type problems_stddev_samp_fields {
  closure_authorised_by_staff_id: Float
  problem_id: Float
  product_id: Float
  reported_by_staff_id: Float
}

"""
order by stddev_samp() on columns of table "problems"
"""
input problems_stddev_samp_order_by {
  closure_authorised_by_staff_id: order_by
  problem_id: order_by
  product_id: order_by
  reported_by_staff_id: order_by
}

"""aggregate sum on columns"""
type problems_sum_fields {
  closure_authorised_by_staff_id: bigint
  problem_id: bigint
  product_id: bigint
  reported_by_staff_id: bigint
}

"""
order by sum() on columns of table "problems"
"""
input problems_sum_order_by {
  closure_authorised_by_staff_id: order_by
  problem_id: order_by
  product_id: order_by
  reported_by_staff_id: order_by
}

"""
update columns of table "problems"
"""
enum problems_update_column {
  """column name"""
  closure_authorised_by_staff_id

  """column name"""
  date_problem_closed

  """column name"""
  date_problem_reported

  """column name"""
  other_problem_details

  """column name"""
  problem_description

  """column name"""
  problem_id

  """column name"""
  product_id

  """column name"""
  reported_by_staff_id
}

"""aggregate var_pop on columns"""
type problems_var_pop_fields {
  closure_authorised_by_staff_id: Float
  problem_id: Float
  product_id: Float
  reported_by_staff_id: Float
}

"""
order by var_pop() on columns of table "problems"
"""
input problems_var_pop_order_by {
  closure_authorised_by_staff_id: order_by
  problem_id: order_by
  product_id: order_by
  reported_by_staff_id: order_by
}

"""aggregate var_samp on columns"""
type problems_var_samp_fields {
  closure_authorised_by_staff_id: Float
  problem_id: Float
  product_id: Float
  reported_by_staff_id: Float
}

"""
order by var_samp() on columns of table "problems"
"""
input problems_var_samp_order_by {
  closure_authorised_by_staff_id: order_by
  problem_id: order_by
  product_id: order_by
  reported_by_staff_id: order_by
}

"""aggregate variance on columns"""
type problems_variance_fields {
  closure_authorised_by_staff_id: Float
  problem_id: Float
  product_id: Float
  reported_by_staff_id: Float
}

"""
order by variance() on columns of table "problems"
"""
input problems_variance_order_by {
  closure_authorised_by_staff_id: order_by
  problem_id: order_by
  product_id: order_by
  reported_by_staff_id: order_by
}

"""
columns and relationships of "product"
"""
type product {
  """An array relationship"""
  problems(
    """distinct select on columns"""
    distinct_on: [problems_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [problems_order_by!]

    """filter the rows returned"""
    where: problems_bool_exp
  ): [problems!]!

  """An aggregated array relationship"""
  problems_aggregate(
    """distinct select on columns"""
    distinct_on: [problems_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [problems_order_by!]

    """filter the rows returned"""
    where: problems_bool_exp
  ): problems_aggregate!
  product_details: String
  product_id: bigint!
  product_name: String
}

"""
aggregated selection of "product"
"""
type product_aggregate {
  aggregate: product_aggregate_fields
  nodes: [product!]!
}

"""
aggregate fields of "product"
"""
type product_aggregate_fields {
  avg: product_avg_fields
  count(columns: [product_select_column!], distinct: Boolean): Int
  max: product_max_fields
  min: product_min_fields
  stddev: product_stddev_fields
  stddev_pop: product_stddev_pop_fields
  stddev_samp: product_stddev_samp_fields
  sum: product_sum_fields
  var_pop: product_var_pop_fields
  var_samp: product_var_samp_fields
  variance: product_variance_fields
}

"""
order by aggregate values of table "product"
"""
input product_aggregate_order_by {
  avg: product_avg_order_by
  count: order_by
  max: product_max_order_by
  min: product_min_order_by
  stddev: product_stddev_order_by
  stddev_pop: product_stddev_pop_order_by
  stddev_samp: product_stddev_samp_order_by
  sum: product_sum_order_by
  var_pop: product_var_pop_order_by
  var_samp: product_var_samp_order_by
  variance: product_variance_order_by
}

"""
input type for inserting array relation for remote table "product"
"""
input product_arr_rel_insert_input {
  data: [product_insert_input!]!
  on_conflict: product_on_conflict
}

"""aggregate avg on columns"""
type product_avg_fields {
  product_id: Float
}

"""
order by avg() on columns of table "product"
"""
input product_avg_order_by {
  product_id: order_by
}

"""
Boolean expression to filter rows from the table "product". All fields are combined with a logical 'AND'.
"""
input product_bool_exp {
  _and: [product_bool_exp]
  _not: product_bool_exp
  _or: [product_bool_exp]
  problems: problems_bool_exp
  product_details: String_comparison_exp
  product_id: bigint_comparison_exp
  product_name: String_comparison_exp
}

"""
unique or primary key constraints on table "product"
"""
enum product_constraint {
  """unique or primary key constraint"""
  idx_26775_product_pkey
}

"""
input type for incrementing integer column in table "product"
"""
input product_inc_input {
  product_id: bigint
}

"""
input type for inserting data into table "product"
"""
input product_insert_input {
  problems: problems_arr_rel_insert_input
  product_details: String
  product_id: bigint
  product_name: String
}

"""aggregate max on columns"""
type product_max_fields {
  product_details: String
  product_id: bigint
  product_name: String
}

"""
order by max() on columns of table "product"
"""
input product_max_order_by {
  product_details: order_by
  product_id: order_by
  product_name: order_by
}

"""aggregate min on columns"""
type product_min_fields {
  product_details: String
  product_id: bigint
  product_name: String
}

"""
order by min() on columns of table "product"
"""
input product_min_order_by {
  product_details: order_by
  product_id: order_by
  product_name: order_by
}

"""
response of any mutation on the table "product"
"""
type product_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [product!]!
}

"""
input type for inserting object relation for remote table "product"
"""
input product_obj_rel_insert_input {
  data: product_insert_input!
  on_conflict: product_on_conflict
}

"""
on conflict condition type for table "product"
"""
input product_on_conflict {
  constraint: product_constraint!
  update_columns: [product_update_column!]!
  where: product_bool_exp
}

"""
ordering options when selecting data from "product"
"""
input product_order_by {
  problems_aggregate: problems_aggregate_order_by
  product_details: order_by
  product_id: order_by
  product_name: order_by
}

"""
primary key columns input for table: "product"
"""
input product_pk_columns_input {
  product_id: bigint!
}

"""
select columns of table "product"
"""
enum product_select_column {
  """column name"""
  product_details

  """column name"""
  product_id

  """column name"""
  product_name
}

"""
input type for updating data in table "product"
"""
input product_set_input {
  product_details: String
  product_id: bigint
  product_name: String
}

"""aggregate stddev on columns"""
type product_stddev_fields {
  product_id: Float
}

"""
order by stddev() on columns of table "product"
"""
input product_stddev_order_by {
  product_id: order_by
}

"""aggregate stddev_pop on columns"""
type product_stddev_pop_fields {
  product_id: Float
}

"""
order by stddev_pop() on columns of table "product"
"""
input product_stddev_pop_order_by {
  product_id: order_by
}

"""aggregate stddev_samp on columns"""
type product_stddev_samp_fields {
  product_id: Float
}

"""
order by stddev_samp() on columns of table "product"
"""
input product_stddev_samp_order_by {
  product_id: order_by
}

"""aggregate sum on columns"""
type product_sum_fields {
  product_id: bigint
}

"""
order by sum() on columns of table "product"
"""
input product_sum_order_by {
  product_id: order_by
}

"""
update columns of table "product"
"""
enum product_update_column {
  """column name"""
  product_details

  """column name"""
  product_id

  """column name"""
  product_name
}

"""aggregate var_pop on columns"""
type product_var_pop_fields {
  product_id: Float
}

"""
order by var_pop() on columns of table "product"
"""
input product_var_pop_order_by {
  product_id: order_by
}

"""aggregate var_samp on columns"""
type product_var_samp_fields {
  product_id: Float
}

"""
order by var_samp() on columns of table "product"
"""
input product_var_samp_order_by {
  product_id: order_by
}

"""aggregate variance on columns"""
type product_variance_fields {
  product_id: Float
}

"""
order by variance() on columns of table "product"
"""
input product_variance_order_by {
  product_id: order_by
}

"""query root"""
type query_root {
  """
  fetch data from the table: "problem_category_codes"
  """
  problem_category_codes(
    """distinct select on columns"""
    distinct_on: [problem_category_codes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [problem_category_codes_order_by!]

    """filter the rows returned"""
    where: problem_category_codes_bool_exp
  ): [problem_category_codes!]!

  """
  fetch aggregated fields from the table: "problem_category_codes"
  """
  problem_category_codes_aggregate(
    """distinct select on columns"""
    distinct_on: [problem_category_codes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [problem_category_codes_order_by!]

    """filter the rows returned"""
    where: problem_category_codes_bool_exp
  ): problem_category_codes_aggregate!

  """
  fetch data from the table: "problem_category_codes" using primary key columns
  """
  problem_category_codes_by_pk(problem_category_code: String!): problem_category_codes

  """
  fetch data from the table: "problem_log"
  """
  problem_log(
    """distinct select on columns"""
    distinct_on: [problem_log_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [problem_log_order_by!]

    """filter the rows returned"""
    where: problem_log_bool_exp
  ): [problem_log!]!

  """
  fetch aggregated fields from the table: "problem_log"
  """
  problem_log_aggregate(
    """distinct select on columns"""
    distinct_on: [problem_log_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [problem_log_order_by!]

    """filter the rows returned"""
    where: problem_log_bool_exp
  ): problem_log_aggregate!

  """fetch data from the table: "problem_log" using primary key columns"""
  problem_log_by_pk(problem_log_id: bigint!): problem_log

  """
  fetch data from the table: "problem_status_codes"
  """
  problem_status_codes(
    """distinct select on columns"""
    distinct_on: [problem_status_codes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [problem_status_codes_order_by!]

    """filter the rows returned"""
    where: problem_status_codes_bool_exp
  ): [problem_status_codes!]!

  """
  fetch aggregated fields from the table: "problem_status_codes"
  """
  problem_status_codes_aggregate(
    """distinct select on columns"""
    distinct_on: [problem_status_codes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [problem_status_codes_order_by!]

    """filter the rows returned"""
    where: problem_status_codes_bool_exp
  ): problem_status_codes_aggregate!

  """
  fetch data from the table: "problem_status_codes" using primary key columns
  """
  problem_status_codes_by_pk(problem_status_code: String!): problem_status_codes

  """
  fetch data from the table: "problems"
  """
  problems(
    """distinct select on columns"""
    distinct_on: [problems_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [problems_order_by!]

    """filter the rows returned"""
    where: problems_bool_exp
  ): [problems!]!

  """
  fetch aggregated fields from the table: "problems"
  """
  problems_aggregate(
    """distinct select on columns"""
    distinct_on: [problems_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [problems_order_by!]

    """filter the rows returned"""
    where: problems_bool_exp
  ): problems_aggregate!

  """fetch data from the table: "problems" using primary key columns"""
  problems_by_pk(problem_id: bigint!): problems

  """
  fetch data from the table: "product"
  """
  product(
    """distinct select on columns"""
    distinct_on: [product_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [product_order_by!]

    """filter the rows returned"""
    where: product_bool_exp
  ): [product!]!

  """
  fetch aggregated fields from the table: "product"
  """
  product_aggregate(
    """distinct select on columns"""
    distinct_on: [product_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [product_order_by!]

    """filter the rows returned"""
    where: product_bool_exp
  ): product_aggregate!

  """fetch data from the table: "product" using primary key columns"""
  product_by_pk(product_id: bigint!): product

  """
  fetch data from the table: "staff"
  """
  staff(
    """distinct select on columns"""
    distinct_on: [staff_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [staff_order_by!]

    """filter the rows returned"""
    where: staff_bool_exp
  ): [staff!]!

  """
  fetch aggregated fields from the table: "staff"
  """
  staff_aggregate(
    """distinct select on columns"""
    distinct_on: [staff_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [staff_order_by!]

    """filter the rows returned"""
    where: staff_bool_exp
  ): staff_aggregate!

  """fetch data from the table: "staff" using primary key columns"""
  staff_by_pk(staff_id: bigint!): staff
}

"""
columns and relationships of "staff"
"""
type staff {
  other_staff_details: String

  """An array relationship"""
  problem_logs(
    """distinct select on columns"""
    distinct_on: [problem_log_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [problem_log_order_by!]

    """filter the rows returned"""
    where: problem_log_bool_exp
  ): [problem_log!]!

  """An aggregated array relationship"""
  problem_logs_aggregate(
    """distinct select on columns"""
    distinct_on: [problem_log_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [problem_log_order_by!]

    """filter the rows returned"""
    where: problem_log_bool_exp
  ): problem_log_aggregate!

  """An array relationship"""
  problems(
    """distinct select on columns"""
    distinct_on: [problems_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [problems_order_by!]

    """filter the rows returned"""
    where: problems_bool_exp
  ): [problems!]!

  """An array relationship"""
  problemsByClosureAuthorisedByStaffId(
    """distinct select on columns"""
    distinct_on: [problems_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [problems_order_by!]

    """filter the rows returned"""
    where: problems_bool_exp
  ): [problems!]!

  """An aggregated array relationship"""
  problemsByClosureAuthorisedByStaffId_aggregate(
    """distinct select on columns"""
    distinct_on: [problems_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [problems_order_by!]

    """filter the rows returned"""
    where: problems_bool_exp
  ): problems_aggregate!

  """An aggregated array relationship"""
  problems_aggregate(
    """distinct select on columns"""
    distinct_on: [problems_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [problems_order_by!]

    """filter the rows returned"""
    where: problems_bool_exp
  ): problems_aggregate!
  staff_first_name: String
  staff_id: bigint!
  staff_last_name: String
}

"""
aggregated selection of "staff"
"""
type staff_aggregate {
  aggregate: staff_aggregate_fields
  nodes: [staff!]!
}

"""
aggregate fields of "staff"
"""
type staff_aggregate_fields {
  avg: staff_avg_fields
  count(columns: [staff_select_column!], distinct: Boolean): Int
  max: staff_max_fields
  min: staff_min_fields
  stddev: staff_stddev_fields
  stddev_pop: staff_stddev_pop_fields
  stddev_samp: staff_stddev_samp_fields
  sum: staff_sum_fields
  var_pop: staff_var_pop_fields
  var_samp: staff_var_samp_fields
  variance: staff_variance_fields
}

"""
order by aggregate values of table "staff"
"""
input staff_aggregate_order_by {
  avg: staff_avg_order_by
  count: order_by
  max: staff_max_order_by
  min: staff_min_order_by
  stddev: staff_stddev_order_by
  stddev_pop: staff_stddev_pop_order_by
  stddev_samp: staff_stddev_samp_order_by
  sum: staff_sum_order_by
  var_pop: staff_var_pop_order_by
  var_samp: staff_var_samp_order_by
  variance: staff_variance_order_by
}

"""
input type for inserting array relation for remote table "staff"
"""
input staff_arr_rel_insert_input {
  data: [staff_insert_input!]!
  on_conflict: staff_on_conflict
}

"""aggregate avg on columns"""
type staff_avg_fields {
  staff_id: Float
}

"""
order by avg() on columns of table "staff"
"""
input staff_avg_order_by {
  staff_id: order_by
}

"""
Boolean expression to filter rows from the table "staff". All fields are combined with a logical 'AND'.
"""
input staff_bool_exp {
  _and: [staff_bool_exp]
  _not: staff_bool_exp
  _or: [staff_bool_exp]
  other_staff_details: String_comparison_exp
  problem_logs: problem_log_bool_exp
  problems: problems_bool_exp
  problemsByClosureAuthorisedByStaffId: problems_bool_exp
  staff_first_name: String_comparison_exp
  staff_id: bigint_comparison_exp
  staff_last_name: String_comparison_exp
}

"""
unique or primary key constraints on table "staff"
"""
enum staff_constraint {
  """unique or primary key constraint"""
  idx_26781_staff_pkey
}

"""
input type for incrementing integer column in table "staff"
"""
input staff_inc_input {
  staff_id: bigint
}

"""
input type for inserting data into table "staff"
"""
input staff_insert_input {
  other_staff_details: String
  problem_logs: problem_log_arr_rel_insert_input
  problems: problems_arr_rel_insert_input
  problemsByClosureAuthorisedByStaffId: problems_arr_rel_insert_input
  staff_first_name: String
  staff_id: bigint
  staff_last_name: String
}

"""aggregate max on columns"""
type staff_max_fields {
  other_staff_details: String
  staff_first_name: String
  staff_id: bigint
  staff_last_name: String
}

"""
order by max() on columns of table "staff"
"""
input staff_max_order_by {
  other_staff_details: order_by
  staff_first_name: order_by
  staff_id: order_by
  staff_last_name: order_by
}

"""aggregate min on columns"""
type staff_min_fields {
  other_staff_details: String
  staff_first_name: String
  staff_id: bigint
  staff_last_name: String
}

"""
order by min() on columns of table "staff"
"""
input staff_min_order_by {
  other_staff_details: order_by
  staff_first_name: order_by
  staff_id: order_by
  staff_last_name: order_by
}

"""
response of any mutation on the table "staff"
"""
type staff_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [staff!]!
}

"""
input type for inserting object relation for remote table "staff"
"""
input staff_obj_rel_insert_input {
  data: staff_insert_input!
  on_conflict: staff_on_conflict
}

"""
on conflict condition type for table "staff"
"""
input staff_on_conflict {
  constraint: staff_constraint!
  update_columns: [staff_update_column!]!
  where: staff_bool_exp
}

"""
ordering options when selecting data from "staff"
"""
input staff_order_by {
  other_staff_details: order_by
  problem_logs_aggregate: problem_log_aggregate_order_by
  problemsByClosureAuthorisedByStaffId_aggregate: problems_aggregate_order_by
  problems_aggregate: problems_aggregate_order_by
  staff_first_name: order_by
  staff_id: order_by
  staff_last_name: order_by
}

"""
primary key columns input for table: "staff"
"""
input staff_pk_columns_input {
  staff_id: bigint!
}

"""
select columns of table "staff"
"""
enum staff_select_column {
  """column name"""
  other_staff_details

  """column name"""
  staff_first_name

  """column name"""
  staff_id

  """column name"""
  staff_last_name
}

"""
input type for updating data in table "staff"
"""
input staff_set_input {
  other_staff_details: String
  staff_first_name: String
  staff_id: bigint
  staff_last_name: String
}

"""aggregate stddev on columns"""
type staff_stddev_fields {
  staff_id: Float
}

"""
order by stddev() on columns of table "staff"
"""
input staff_stddev_order_by {
  staff_id: order_by
}

"""aggregate stddev_pop on columns"""
type staff_stddev_pop_fields {
  staff_id: Float
}

"""
order by stddev_pop() on columns of table "staff"
"""
input staff_stddev_pop_order_by {
  staff_id: order_by
}

"""aggregate stddev_samp on columns"""
type staff_stddev_samp_fields {
  staff_id: Float
}

"""
order by stddev_samp() on columns of table "staff"
"""
input staff_stddev_samp_order_by {
  staff_id: order_by
}

"""aggregate sum on columns"""
type staff_sum_fields {
  staff_id: bigint
}

"""
order by sum() on columns of table "staff"
"""
input staff_sum_order_by {
  staff_id: order_by
}

"""
update columns of table "staff"
"""
enum staff_update_column {
  """column name"""
  other_staff_details

  """column name"""
  staff_first_name

  """column name"""
  staff_id

  """column name"""
  staff_last_name
}

"""aggregate var_pop on columns"""
type staff_var_pop_fields {
  staff_id: Float
}

"""
order by var_pop() on columns of table "staff"
"""
input staff_var_pop_order_by {
  staff_id: order_by
}

"""aggregate var_samp on columns"""
type staff_var_samp_fields {
  staff_id: Float
}

"""
order by var_samp() on columns of table "staff"
"""
input staff_var_samp_order_by {
  staff_id: order_by
}

"""aggregate variance on columns"""
type staff_variance_fields {
  staff_id: Float
}

"""
order by variance() on columns of table "staff"
"""
input staff_variance_order_by {
  staff_id: order_by
}

"""
expression to compare columns of type String. All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String
  _ilike: String
  _in: [String!]
  _is_null: Boolean
  _like: String
  _lt: String
  _lte: String
  _neq: String
  _nilike: String
  _nin: [String!]
  _nlike: String
  _nsimilar: String
  _similar: String
}

"""subscription root"""
type subscription_root {
  """
  fetch data from the table: "problem_category_codes"
  """
  problem_category_codes(
    """distinct select on columns"""
    distinct_on: [problem_category_codes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [problem_category_codes_order_by!]

    """filter the rows returned"""
    where: problem_category_codes_bool_exp
  ): [problem_category_codes!]!

  """
  fetch aggregated fields from the table: "problem_category_codes"
  """
  problem_category_codes_aggregate(
    """distinct select on columns"""
    distinct_on: [problem_category_codes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [problem_category_codes_order_by!]

    """filter the rows returned"""
    where: problem_category_codes_bool_exp
  ): problem_category_codes_aggregate!

  """
  fetch data from the table: "problem_category_codes" using primary key columns
  """
  problem_category_codes_by_pk(problem_category_code: String!): problem_category_codes

  """
  fetch data from the table: "problem_log"
  """
  problem_log(
    """distinct select on columns"""
    distinct_on: [problem_log_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [problem_log_order_by!]

    """filter the rows returned"""
    where: problem_log_bool_exp
  ): [problem_log!]!

  """
  fetch aggregated fields from the table: "problem_log"
  """
  problem_log_aggregate(
    """distinct select on columns"""
    distinct_on: [problem_log_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [problem_log_order_by!]

    """filter the rows returned"""
    where: problem_log_bool_exp
  ): problem_log_aggregate!

  """fetch data from the table: "problem_log" using primary key columns"""
  problem_log_by_pk(problem_log_id: bigint!): problem_log

  """
  fetch data from the table: "problem_status_codes"
  """
  problem_status_codes(
    """distinct select on columns"""
    distinct_on: [problem_status_codes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [problem_status_codes_order_by!]

    """filter the rows returned"""
    where: problem_status_codes_bool_exp
  ): [problem_status_codes!]!

  """
  fetch aggregated fields from the table: "problem_status_codes"
  """
  problem_status_codes_aggregate(
    """distinct select on columns"""
    distinct_on: [problem_status_codes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [problem_status_codes_order_by!]

    """filter the rows returned"""
    where: problem_status_codes_bool_exp
  ): problem_status_codes_aggregate!

  """
  fetch data from the table: "problem_status_codes" using primary key columns
  """
  problem_status_codes_by_pk(problem_status_code: String!): problem_status_codes

  """
  fetch data from the table: "problems"
  """
  problems(
    """distinct select on columns"""
    distinct_on: [problems_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [problems_order_by!]

    """filter the rows returned"""
    where: problems_bool_exp
  ): [problems!]!

  """
  fetch aggregated fields from the table: "problems"
  """
  problems_aggregate(
    """distinct select on columns"""
    distinct_on: [problems_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [problems_order_by!]

    """filter the rows returned"""
    where: problems_bool_exp
  ): problems_aggregate!

  """fetch data from the table: "problems" using primary key columns"""
  problems_by_pk(problem_id: bigint!): problems

  """
  fetch data from the table: "product"
  """
  product(
    """distinct select on columns"""
    distinct_on: [product_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [product_order_by!]

    """filter the rows returned"""
    where: product_bool_exp
  ): [product!]!

  """
  fetch aggregated fields from the table: "product"
  """
  product_aggregate(
    """distinct select on columns"""
    distinct_on: [product_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [product_order_by!]

    """filter the rows returned"""
    where: product_bool_exp
  ): product_aggregate!

  """fetch data from the table: "product" using primary key columns"""
  product_by_pk(product_id: bigint!): product

  """
  fetch data from the table: "staff"
  """
  staff(
    """distinct select on columns"""
    distinct_on: [staff_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [staff_order_by!]

    """filter the rows returned"""
    where: staff_bool_exp
  ): [staff!]!

  """
  fetch aggregated fields from the table: "staff"
  """
  staff_aggregate(
    """distinct select on columns"""
    distinct_on: [staff_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [staff_order_by!]

    """filter the rows returned"""
    where: staff_bool_exp
  ): staff_aggregate!

  """fetch data from the table: "staff" using primary key columns"""
  staff_by_pk(staff_id: bigint!): staff
}

scalar timestamptz

"""
expression to compare columns of type timestamptz. All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}
